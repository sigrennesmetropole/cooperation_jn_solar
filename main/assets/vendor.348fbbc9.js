const style$1 = "";
function makeMap$1(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i2 = 0; i2 < list.length; i2++) {
    map2[list[i2]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
function normalizeStyle$1(value) {
  if (isArray$2(value)) {
    const res = {};
    for (let i2 = 0; i2 < value.length; i2++) {
      const item = value[i2];
      const normalized = isString$2(item) ? parseStringStyle$1(item) : normalizeStyle$1(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString$2(value)) {
    return value;
  } else if (isObject$1(value)) {
    return value;
  }
}
const listDelimiterRE$1 = /;(?![^(]*\))/g;
const propertyDelimiterRE$1 = /:([^]+)/;
const styleCommentRE$1 = /\/\*.*?\*\//gs;
function parseStringStyle$1(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE$1, "").split(listDelimiterRE$1).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE$1);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass$1(value) {
  let res = "";
  if (isString$2(value)) {
    res = value;
  } else if (isArray$2(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      const normalized = normalizeClass$1(value[i2]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$1(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps$1(props) {
  if (!props)
    return null;
  let { class: klass, style: style2 } = props;
  if (klass && !isString$2(klass)) {
    props.class = normalizeClass$1(klass);
  }
  if (style2) {
    props.style = normalizeStyle$1(style2);
  }
  return props;
}
const HTML_TAGS$1 = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS$1 = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const isHTMLTag$1 = /* @__PURE__ */ makeMap$1(HTML_TAGS$1);
const isSVGTag$1 = /* @__PURE__ */ makeMap$1(SVG_TAGS$1);
const specialBooleanAttrs$1 = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr$1 = /* @__PURE__ */ makeMap$1(specialBooleanAttrs$1);
function includeBooleanAttr$1(value) {
  return !!value || value === "";
}
const toDisplayString$1 = (val) => {
  return isString$2(val) ? val : val == null ? "" : isArray$2(val) || isObject$1(val) && (val.toString === objectToString$1 || !isFunction$2(val.toString)) ? JSON.stringify(val, replacer$1, 2) : String(val);
};
const replacer$1 = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer$1(_key, val.value);
  } else if (isMap$1(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet$1(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject$1(val) && !isArray$2(val) && !isPlainObject$2(val)) {
    return String(val);
  }
  return val;
};
const EMPTY_OBJ$1 = Object.freeze({});
const EMPTY_ARR$1 = Object.freeze([]);
const NOOP$1 = () => {
};
const NO$1 = () => false;
const onRE$1 = /^on[^a-z]/;
const isOn$1 = (key) => onRE$1.test(key);
const isModelListener$1 = (key) => key.startsWith("onUpdate:");
const extend$1 = Object.assign;
const remove$1 = (arr, el2) => {
  const i2 = arr.indexOf(el2);
  if (i2 > -1) {
    arr.splice(i2, 1);
  }
};
const hasOwnProperty$1$1 = Object.prototype.hasOwnProperty;
const hasOwn$1 = (val, key) => hasOwnProperty$1$1.call(val, key);
const isArray$2 = Array.isArray;
const isMap$1 = (val) => toTypeString$1(val) === "[object Map]";
const isSet$1 = (val) => toTypeString$1(val) === "[object Set]";
const isFunction$2 = (val) => typeof val === "function";
const isString$2 = (val) => typeof val === "string";
const isSymbol$1 = (val) => typeof val === "symbol";
const isObject$1 = (val) => val !== null && typeof val === "object";
const isPromise$1 = (val) => {
  return isObject$1(val) && isFunction$2(val.then) && isFunction$2(val.catch);
};
const objectToString$1 = Object.prototype.toString;
const toTypeString$1 = (value) => objectToString$1.call(value);
const toRawType$1 = (value) => {
  return toTypeString$1(value).slice(8, -1);
};
const isPlainObject$2 = (val) => toTypeString$1(val) === "[object Object]";
const isIntegerKey$1 = (key) => isString$2(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp$1 = /* @__PURE__ */ makeMap$1(
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective$1 = /* @__PURE__ */ makeMap$1("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
const cacheStringFunction$1 = (fn2) => {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache2[str];
    return hit || (cache2[str] = fn2(str));
  };
};
const camelizeRE$1 = /-(\w)/g;
const camelize$1 = cacheStringFunction$1((str) => {
  return str.replace(camelizeRE$1, (_2, c2) => c2 ? c2.toUpperCase() : "");
});
const hyphenateRE$1 = /\B([A-Z])/g;
const hyphenate$1 = cacheStringFunction$1((str) => str.replace(hyphenateRE$1, "-$1").toLowerCase());
const capitalize$1 = cacheStringFunction$1((str) => str.charAt(0).toUpperCase() + str.slice(1));
const toHandlerKey$1 = cacheStringFunction$1((str) => str ? `on${capitalize$1(str)}` : ``);
const hasChanged$1 = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns$1 = (fns, arg) => {
  for (let i2 = 0; i2 < fns.length; i2++) {
    fns[i2](arg);
  }
};
const def$1 = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const looseToNumber$1 = (val) => {
  const n2 = parseFloat(val);
  return isNaN(n2) ? val : n2;
};
const toNumber$1 = (val) => {
  const n2 = isString$2(val) ? Number(val) : NaN;
  return isNaN(n2) ? val : n2;
};
let _globalThis$1;
const getGlobalThis$1 = () => {
  return _globalThis$1 || (_globalThis$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function warn$1$1(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope$1;
class EffectScope$1 {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this.parent = activeEffectScope$1;
    if (!detached && activeEffectScope$1) {
      this.index = (activeEffectScope$1.scopes || (activeEffectScope$1.scopes = [])).push(this) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn2) {
    if (this._active) {
      const currentEffectScope = activeEffectScope$1;
      try {
        activeEffectScope$1 = this;
        return fn2();
      } finally {
        activeEffectScope$1 = currentEffectScope;
      }
    } else {
      warn$1$1(`cannot run an inactive effect scope.`);
    }
  }
  on() {
    activeEffectScope$1 = this;
  }
  off() {
    activeEffectScope$1 = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i2, l2;
      for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
        this.effects[i2].stop();
      }
      for (i2 = 0, l2 = this.cleanups.length; i2 < l2; i2++) {
        this.cleanups[i2]();
      }
      if (this.scopes) {
        for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
          this.scopes[i2].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope$1(detached) {
  return new EffectScope$1(detached);
}
function recordEffectScope$1(effect2, scope = activeEffectScope$1) {
  if (scope && scope.active) {
    scope.effects.push(effect2);
  }
}
function getCurrentScope$1() {
  return activeEffectScope$1;
}
function onScopeDispose$1(fn2) {
  if (activeEffectScope$1) {
    activeEffectScope$1.cleanups.push(fn2);
  } else {
    warn$1$1(`onScopeDispose() is called when there is no active effect scope to be associated with.`);
  }
}
const createDep$1 = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked$1 = (dep) => (dep.w & trackOpBit$1) > 0;
const newTracked$1 = (dep) => (dep.n & trackOpBit$1) > 0;
const initDepMarkers$1 = ({ deps }) => {
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].w |= trackOpBit$1;
    }
  }
};
const finalizeDepMarkers$1 = (effect2) => {
  const { deps } = effect2;
  if (deps.length) {
    let ptr = 0;
    for (let i2 = 0; i2 < deps.length; i2++) {
      const dep = deps[i2];
      if (wasTracked$1(dep) && !newTracked$1(dep)) {
        dep.delete(effect2);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit$1;
      dep.n &= ~trackOpBit$1;
    }
    deps.length = ptr;
  }
};
const targetMap$1 = /* @__PURE__ */ new WeakMap();
let effectTrackDepth$1 = 0;
let trackOpBit$1 = 1;
const maxMarkerBits$1 = 30;
let activeEffect$1;
const ITERATE_KEY$1 = Symbol("iterate");
const MAP_KEY_ITERATE_KEY$1 = Symbol("Map key iterate");
class ReactiveEffect$1 {
  constructor(fn2, scheduler = null, scope) {
    this.fn = fn2;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope$1(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent = activeEffect$1;
    let lastShouldTrack = shouldTrack$1;
    while (parent) {
      if (parent === this) {
        return;
      }
      parent = parent.parent;
    }
    try {
      this.parent = activeEffect$1;
      activeEffect$1 = this;
      shouldTrack$1 = true;
      trackOpBit$1 = 1 << ++effectTrackDepth$1;
      if (effectTrackDepth$1 <= maxMarkerBits$1) {
        initDepMarkers$1(this);
      } else {
        cleanupEffect$1(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth$1 <= maxMarkerBits$1) {
        finalizeDepMarkers$1(this);
      }
      trackOpBit$1 = 1 << --effectTrackDepth$1;
      activeEffect$1 = this.parent;
      shouldTrack$1 = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect$1 === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect$1(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
}
function cleanupEffect$1(effect2) {
  const { deps } = effect2;
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].delete(effect2);
    }
    deps.length = 0;
  }
}
let shouldTrack$1 = true;
const trackStack$1 = [];
function pauseTracking$1() {
  trackStack$1.push(shouldTrack$1);
  shouldTrack$1 = false;
}
function resetTracking$1() {
  const last = trackStack$1.pop();
  shouldTrack$1 = last === void 0 ? true : last;
}
function track$1(target, type, key) {
  if (shouldTrack$1 && activeEffect$1) {
    let depsMap = targetMap$1.get(target);
    if (!depsMap) {
      targetMap$1.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep$1());
    }
    const eventInfo = { effect: activeEffect$1, target, type, key };
    trackEffects$1(dep, eventInfo);
  }
}
function trackEffects$1(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth$1 <= maxMarkerBits$1) {
    if (!newTracked$1(dep)) {
      dep.n |= trackOpBit$1;
      shouldTrack2 = !wasTracked$1(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect$1);
  }
  if (shouldTrack2) {
    dep.add(activeEffect$1);
    activeEffect$1.deps.push(dep);
    if (activeEffect$1.onTrack) {
      activeEffect$1.onTrack(Object.assign({ effect: activeEffect$1 }, debuggerEventExtraInfo));
    }
  }
}
function trigger$1(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap$1.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray$2(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray$2(target)) {
          deps.push(depsMap.get(ITERATE_KEY$1));
          if (isMap$1(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY$1));
          }
        } else if (isIntegerKey$1(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$2(target)) {
          deps.push(depsMap.get(ITERATE_KEY$1));
          if (isMap$1(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY$1));
          }
        }
        break;
      case "set":
        if (isMap$1(target)) {
          deps.push(depsMap.get(ITERATE_KEY$1));
        }
        break;
    }
  }
  const eventInfo = { target, type, key, newValue, oldValue, oldTarget };
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects$1(deps[0], eventInfo);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects$1(createDep$1(effects), eventInfo);
    }
  }
}
function triggerEffects$1(dep, debuggerEventExtraInfo) {
  const effects = isArray$2(dep) ? dep : [...dep];
  for (const effect2 of effects) {
    if (effect2.computed) {
      triggerEffect$1(effect2, debuggerEventExtraInfo);
    }
  }
  for (const effect2 of effects) {
    if (!effect2.computed) {
      triggerEffect$1(effect2, debuggerEventExtraInfo);
    }
  }
}
function triggerEffect$1(effect2, debuggerEventExtraInfo) {
  if (effect2 !== activeEffect$1 || effect2.allowRecurse) {
    if (effect2.onTrigger) {
      effect2.onTrigger(extend$1({ effect: effect2 }, debuggerEventExtraInfo));
    }
    if (effect2.scheduler) {
      effect2.scheduler();
    } else {
      effect2.run();
    }
  }
}
function getDepFromReactive$1(object, key) {
  var _a2;
  return (_a2 = targetMap$1.get(object)) === null || _a2 === void 0 ? void 0 : _a2.get(key);
}
const isNonTrackableKeys$1 = /* @__PURE__ */ makeMap$1(`__proto__,__v_isRef,__isVue`);
const builtInSymbols$1 = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol$1)
);
const get$1$1 = /* @__PURE__ */ createGetter$1();
const shallowGet$1 = /* @__PURE__ */ createGetter$1(false, true);
const readonlyGet$1 = /* @__PURE__ */ createGetter$1(true);
const shallowReadonlyGet$1 = /* @__PURE__ */ createGetter$1(true, true);
const arrayInstrumentations$1 = /* @__PURE__ */ createArrayInstrumentations$1();
function createArrayInstrumentations$1() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw$1(this);
      for (let i2 = 0, l2 = this.length; i2 < l2; i2++) {
        track$1(arr, "get", i2 + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw$1));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking$1();
      const res = toRaw$1(this)[key].apply(this, args);
      resetTracking$1();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty$2(key) {
  const obj = toRaw$1(this);
  track$1(obj, "has", key);
  return obj.hasOwnProperty(key);
}
function createGetter$1(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap$1 : readonlyMap$1 : shallow ? shallowReactiveMap$1 : reactiveMap$1).get(target)) {
      return target;
    }
    const targetIsArray = isArray$2(target);
    if (!isReadonly2) {
      if (targetIsArray && hasOwn$1(arrayInstrumentations$1, key)) {
        return Reflect.get(arrayInstrumentations$1, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty$2;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol$1(key) ? builtInSymbols$1.has(key) : isNonTrackableKeys$1(key)) {
      return res;
    }
    if (!isReadonly2) {
      track$1(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef$1(res)) {
      return targetIsArray && isIntegerKey$1(key) ? res : res.value;
    }
    if (isObject$1(res)) {
      return isReadonly2 ? readonly$1(res) : reactive$1(res);
    }
    return res;
  };
}
const set$1$1 = /* @__PURE__ */ createSetter$1();
const shallowSet$1 = /* @__PURE__ */ createSetter$1(true);
function createSetter$1(shallow = false) {
  return function set2(target, key, value, receiver) {
    let oldValue = target[key];
    if (isReadonly$1(oldValue) && isRef$1(oldValue) && !isRef$1(value)) {
      return false;
    }
    if (!shallow) {
      if (!isShallow$1$1(value) && !isReadonly$1(value)) {
        oldValue = toRaw$1(oldValue);
        value = toRaw$1(value);
      }
      if (!isArray$2(target) && isRef$1(oldValue) && !isRef$1(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray$2(target) && isIntegerKey$1(key) ? Number(key) < target.length : hasOwn$1(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw$1(receiver)) {
      if (!hadKey) {
        trigger$1(target, "add", key, value);
      } else if (hasChanged$1(value, oldValue)) {
        trigger$1(target, "set", key, value, oldValue);
      }
    }
    return result;
  };
}
function deleteProperty$1(target, key) {
  const hadKey = hasOwn$1(target, key);
  const oldValue = target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger$1(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function has$1$1(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol$1(key) || !builtInSymbols$1.has(key)) {
    track$1(target, "has", key);
  }
  return result;
}
function ownKeys$1(target) {
  track$1(target, "iterate", isArray$2(target) ? "length" : ITERATE_KEY$1);
  return Reflect.ownKeys(target);
}
const mutableHandlers$1 = {
  get: get$1$1,
  set: set$1$1,
  deleteProperty: deleteProperty$1,
  has: has$1$1,
  ownKeys: ownKeys$1
};
const readonlyHandlers$1 = {
  get: readonlyGet$1,
  set(target, key) {
    {
      warn$1$1(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
    }
    return true;
  },
  deleteProperty(target, key) {
    {
      warn$1$1(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
    }
    return true;
  }
};
const shallowReactiveHandlers$1 = /* @__PURE__ */ extend$1({}, mutableHandlers$1, {
  get: shallowGet$1,
  set: shallowSet$1
});
const shallowReadonlyHandlers$1 = /* @__PURE__ */ extend$1({}, readonlyHandlers$1, {
  get: shallowReadonlyGet$1
});
const toShallow$1 = (value) => value;
const getProto$1 = (v2) => Reflect.getPrototypeOf(v2);
function get$2(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw$1(target);
  const rawKey = toRaw$1(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track$1(rawTarget, "get", key);
    }
    track$1(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto$1(rawTarget);
  const wrap2 = isShallow2 ? toShallow$1 : isReadonly2 ? toReadonly$1 : toReactive$1;
  if (has2.call(rawTarget, key)) {
    return wrap2(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap2(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has$2(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw$1(target);
  const rawKey = toRaw$1(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track$1(rawTarget, "has", key);
    }
    track$1(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size$2(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track$1(toRaw$1(target), "iterate", ITERATE_KEY$1);
  return Reflect.get(target, "size", target);
}
function add$1(value) {
  value = toRaw$1(value);
  const target = toRaw$1(this);
  const proto = getProto$1(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger$1(target, "add", value, value);
  }
  return this;
}
function set$3(key, value) {
  value = toRaw$1(value);
  const target = toRaw$1(this);
  const { has: has2, get: get2 } = getProto$1(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw$1(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys$1(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger$1(target, "add", key, value);
  } else if (hasChanged$1(value, oldValue)) {
    trigger$1(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry$1(key) {
  const target = toRaw$1(this);
  const { has: has2, get: get2 } = getProto$1(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw$1(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys$1(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger$1(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear$1() {
  const target = toRaw$1(this);
  const hadItems = target.size !== 0;
  const oldTarget = isMap$1(target) ? new Map(target) : new Set(target);
  const result = target.clear();
  if (hadItems) {
    trigger$1(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach$1(isReadonly2, isShallow2) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw$1(target);
    const wrap2 = isShallow2 ? toShallow$1 : isReadonly2 ? toReadonly$1 : toReactive$1;
    !isReadonly2 && track$1(rawTarget, "iterate", ITERATE_KEY$1);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap2(value), wrap2(key), observed);
    });
  };
}
function createIterableMethod$1(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw$1(target);
    const targetIsMap = isMap$1(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap2 = isShallow2 ? toShallow$1 : isReadonly2 ? toReadonly$1 : toReactive$1;
    !isReadonly2 && track$1(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY$1 : ITERATE_KEY$1);
    return {
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap2(value[0]), wrap2(value[1])] : wrap2(value),
          done
        };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod$1(type) {
  return function(...args) {
    {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      console.warn(`${capitalize$1(type)} operation ${key}failed: target is readonly.`, toRaw$1(this));
    }
    return type === "delete" ? false : this;
  };
}
function createInstrumentations$1() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$2(this, key);
    },
    get size() {
      return size$2(this);
    },
    has: has$2,
    add: add$1,
    set: set$3,
    delete: deleteEntry$1,
    clear: clear$1,
    forEach: createForEach$1(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$2(this, key, false, true);
    },
    get size() {
      return size$2(this);
    },
    has: has$2,
    add: add$1,
    set: set$3,
    delete: deleteEntry$1,
    clear: clear$1,
    forEach: createForEach$1(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$2(this, key, true);
    },
    get size() {
      return size$2(this, true);
    },
    has(key) {
      return has$2.call(this, key, true);
    },
    add: createReadonlyMethod$1("add"),
    set: createReadonlyMethod$1("set"),
    delete: createReadonlyMethod$1("delete"),
    clear: createReadonlyMethod$1("clear"),
    forEach: createForEach$1(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$2(this, key, true, true);
    },
    get size() {
      return size$2(this, true);
    },
    has(key) {
      return has$2.call(this, key, true);
    },
    add: createReadonlyMethod$1("add"),
    set: createReadonlyMethod$1("set"),
    delete: createReadonlyMethod$1("delete"),
    clear: createReadonlyMethod$1("clear"),
    forEach: createForEach$1(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod$1(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod$1(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod$1(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod$1(method, true, true);
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [mutableInstrumentations$1, readonlyInstrumentations$1, shallowInstrumentations$1, shallowReadonlyInstrumentations$1] = /* @__PURE__ */ createInstrumentations$1();
function createInstrumentationGetter$1(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations$1 : shallowInstrumentations$1 : isReadonly2 ? readonlyInstrumentations$1 : mutableInstrumentations$1;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn$1(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
const mutableCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(false, false)
};
const shallowCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(false, true)
};
const readonlyCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(true, false)
};
const shallowReadonlyCollectionHandlers$1 = {
  get: /* @__PURE__ */ createInstrumentationGetter$1(true, true)
};
function checkIdentityKeys$1(target, has2, key) {
  const rawKey = toRaw$1(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType$1(target);
    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
  }
}
const reactiveMap$1 = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap$1 = /* @__PURE__ */ new WeakMap();
const readonlyMap$1 = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap$1 = /* @__PURE__ */ new WeakMap();
function targetTypeMap$1(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType$1(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap$1(toRawType$1(value));
}
function reactive$1(target) {
  if (isReadonly$1(target)) {
    return target;
  }
  return createReactiveObject$1(target, false, mutableHandlers$1, mutableCollectionHandlers$1, reactiveMap$1);
}
function shallowReactive$1(target) {
  return createReactiveObject$1(target, false, shallowReactiveHandlers$1, shallowCollectionHandlers$1, shallowReactiveMap$1);
}
function readonly$1(target) {
  return createReactiveObject$1(target, true, readonlyHandlers$1, readonlyCollectionHandlers$1, readonlyMap$1);
}
function shallowReadonly$1(target) {
  return createReactiveObject$1(target, true, shallowReadonlyHandlers$1, shallowReadonlyCollectionHandlers$1, shallowReadonlyMap$1);
}
function createReactiveObject$1(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$1(target)) {
    {
      console.warn(`value cannot be made reactive: ${String(target)}`);
    }
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType$1(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive$1(value) {
  if (isReadonly$1(value)) {
    return isReactive$1(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly$1(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow$1$1(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy$1(value) {
  return isReactive$1(value) || isReadonly$1(value);
}
function toRaw$1(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw$1(raw) : observed;
}
function markRaw$1(value) {
  def$1(value, "__v_skip", true);
  return value;
}
const toReactive$1 = (value) => isObject$1(value) ? reactive$1(value) : value;
const toReadonly$1 = (value) => isObject$1(value) ? readonly$1(value) : value;
function trackRefValue$1(ref2) {
  if (shouldTrack$1 && activeEffect$1) {
    ref2 = toRaw$1(ref2);
    {
      trackEffects$1(ref2.dep || (ref2.dep = createDep$1()), {
        target: ref2,
        type: "get",
        key: "value"
      });
    }
  }
}
function triggerRefValue$1(ref2, newVal) {
  ref2 = toRaw$1(ref2);
  const dep = ref2.dep;
  if (dep) {
    {
      triggerEffects$1(dep, {
        target: ref2,
        type: "set",
        key: "value",
        newValue: newVal
      });
    }
  }
}
function isRef$1(r2) {
  return !!(r2 && r2.__v_isRef === true);
}
function ref$1(value) {
  return createRef$1(value, false);
}
function shallowRef$1(value) {
  return createRef$1(value, true);
}
function createRef$1(rawValue, shallow) {
  if (isRef$1(rawValue)) {
    return rawValue;
  }
  return new RefImpl$1(rawValue, shallow);
}
class RefImpl$1 {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw$1(value);
    this._value = __v_isShallow ? value : toReactive$1(value);
  }
  get value() {
    trackRefValue$1(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow$1$1(newVal) || isReadonly$1(newVal);
    newVal = useDirectValue ? newVal : toRaw$1(newVal);
    if (hasChanged$1(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive$1(newVal);
      triggerRefValue$1(this, newVal);
    }
  }
}
function unref$1(ref2) {
  return isRef$1(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers$1 = {
  get: (target, key, receiver) => unref$1(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef$1(oldValue) && !isRef$1(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs$1(objectWithRefs) {
  return isReactive$1(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers$1);
}
class CustomRefImpl$1 {
  constructor(factory) {
    this.dep = void 0;
    this.__v_isRef = true;
    const { get: get2, set: set2 } = factory(() => trackRefValue$1(this), () => triggerRefValue$1(this));
    this._get = get2;
    this._set = set2;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
}
function customRef$1(factory) {
  return new CustomRefImpl$1(factory);
}
function toRefs$1(object) {
  if (!isProxy$1(object)) {
    console.warn(`toRefs() expects a reactive object but received a plain one.`);
  }
  const ret = isArray$2(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = toRef$1(object, key);
  }
  return ret;
}
class ObjectRefImpl$1 {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive$1(toRaw$1(this._object), this._key);
  }
}
function toRef$1(object, key, defaultValue) {
  const val = object[key];
  return isRef$1(val) ? val : new ObjectRefImpl$1(object, key, defaultValue);
}
var _a$1$2;
class ComputedRefImpl$1 {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this[_a$1$2] = false;
    this._dirty = true;
    this.effect = new ReactiveEffect$1(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue$1(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw$1(this);
    trackRefValue$1(self2);
    if (self2._dirty || !self2._cacheable) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
}
_a$1$2 = "__v_isReadonly";
function computed$1$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction$2(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = () => {
      console.warn("Write operation failed: computed value is readonly");
    };
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl$1(getter, setter, onlyGetter || !setter, isSSR);
  if (debugOptions && !isSSR) {
    cRef.effect.onTrack = debugOptions.onTrack;
    cRef.effect.onTrigger = debugOptions.onTrigger;
  }
  return cRef;
}
const stack$1 = [];
function pushWarningContext$1(vnode) {
  stack$1.push(vnode);
}
function popWarningContext$1() {
  stack$1.pop();
}
function warn$3(msg, ...args) {
  pauseTracking$1();
  const instance = stack$1.length ? stack$1[stack$1.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace$1();
  if (appWarnHandler) {
    callWithErrorHandling$1(appWarnHandler, instance, 11, [
      msg + args.join(""),
      instance && instance.proxy,
      trace.map(({ vnode }) => `at <${formatComponentName$1(instance, vnode.type)}>`).join("\n"),
      trace
    ]);
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && true) {
      warnArgs.push(`
`, ...formatTrace$1(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking$1();
}
function getComponentTrace$1() {
  let currentVNode = stack$1[stack$1.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace$1(trace) {
  const logs = [];
  trace.forEach((entry, i2) => {
    logs.push(...i2 === 0 ? [] : [`
`], ...formatTraceEntry$1(entry));
  });
  return logs;
}
function formatTraceEntry$1({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open2 = ` at <${formatComponentName$1(vnode.component, vnode.type, isRoot)}`;
  const close = `>` + postfix;
  return vnode.props ? [open2, ...formatProps$1(vnode.props), close] : [open2 + close];
}
function formatProps$1(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp$1(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp$1(key, value, raw) {
  if (isString$2(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef$1(value)) {
    value = formatProp$1(key, toRaw$1(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction$2(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw$1(value);
    return raw ? value : [`${key}=`, value];
  }
}
function assertNumber$1(val, type) {
  if (val === void 0) {
    return;
  } else if (typeof val !== "number") {
    warn$3(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
  } else if (isNaN(val)) {
    warn$3(`${type} is NaN - the duration expression might be incorrect.`);
  }
}
const ErrorTypeStrings$1 = {
  ["sp"]: "serverPrefetch hook",
  ["bc"]: "beforeCreate hook",
  ["c"]: "created hook",
  ["bm"]: "beforeMount hook",
  ["m"]: "mounted hook",
  ["bu"]: "beforeUpdate hook",
  ["u"]: "updated",
  ["bum"]: "beforeUnmount hook",
  ["um"]: "unmounted hook",
  ["a"]: "activated hook",
  ["da"]: "deactivated hook",
  ["ec"]: "errorCaptured hook",
  ["rtc"]: "renderTracked hook",
  ["rtg"]: "renderTriggered hook",
  [0]: "setup function",
  [1]: "render function",
  [2]: "watcher getter",
  [3]: "watcher callback",
  [4]: "watcher cleanup function",
  [5]: "native event handler",
  [6]: "component event handler",
  [7]: "vnode hook",
  [8]: "directive hook",
  [9]: "transition hook",
  [10]: "app errorHandler",
  [11]: "app warnHandler",
  [12]: "ref function",
  [13]: "async component loader",
  [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"
};
function callWithErrorHandling$1(fn2, instance, type, args) {
  let res;
  try {
    res = args ? fn2(...args) : fn2();
  } catch (err) {
    handleError$1(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling$1(fn2, instance, type, args) {
  if (isFunction$2(fn2)) {
    const res = callWithErrorHandling$1(fn2, instance, type, args);
    if (res && isPromise$1(res)) {
      res.catch((err) => {
        handleError$1(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i2 = 0; i2 < fn2.length; i2++) {
    values.push(callWithAsyncErrorHandling$1(fn2[i2], instance, type, args));
  }
  return values;
}
function handleError$1(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = ErrorTypeStrings$1[type];
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
          if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling$1(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError$1(err, type, contextVNode, throwInDev);
}
function logError$1(err, type, contextVNode, throwInDev = true) {
  {
    const info = ErrorTypeStrings$1[type];
    if (contextVNode) {
      pushWarningContext$1(contextVNode);
    }
    warn$3(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
    if (contextVNode) {
      popWarningContext$1();
    }
    if (throwInDev) {
      throw err;
    } else {
      console.error(err);
    }
  }
}
let isFlushing$1 = false;
let isFlushPending$1 = false;
const queue$1 = [];
let flushIndex$1 = 0;
const pendingPostFlushCbs$1 = [];
let activePostFlushCbs$1 = null;
let postFlushIndex$1 = 0;
const resolvedPromise$1 = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise$1 = null;
const RECURSION_LIMIT$1 = 100;
function nextTick$1(fn2) {
  const p2 = currentFlushPromise$1 || resolvedPromise$1;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex$1(id2) {
  let start = flushIndex$1 + 1;
  let end = queue$1.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJobId = getId$1(queue$1[middle]);
    middleJobId < id2 ? start = middle + 1 : end = middle;
  }
  return start;
}
function queueJob$1(job) {
  if (!queue$1.length || !queue$1.includes(job, isFlushing$1 && job.allowRecurse ? flushIndex$1 + 1 : flushIndex$1)) {
    if (job.id == null) {
      queue$1.push(job);
    } else {
      queue$1.splice(findInsertionIndex$1(job.id), 0, job);
    }
    queueFlush$1();
  }
}
function queueFlush$1() {
  if (!isFlushing$1 && !isFlushPending$1) {
    isFlushPending$1 = true;
    currentFlushPromise$1 = resolvedPromise$1.then(flushJobs$1);
  }
}
function invalidateJob$1(job) {
  const i2 = queue$1.indexOf(job);
  if (i2 > flushIndex$1) {
    queue$1.splice(i2, 1);
  }
}
function queuePostFlushCb$1(cb) {
  if (!isArray$2(cb)) {
    if (!activePostFlushCbs$1 || !activePostFlushCbs$1.includes(cb, cb.allowRecurse ? postFlushIndex$1 + 1 : postFlushIndex$1)) {
      pendingPostFlushCbs$1.push(cb);
    }
  } else {
    pendingPostFlushCbs$1.push(...cb);
  }
  queueFlush$1();
}
function flushPreFlushCbs$1(seen, i2 = isFlushing$1 ? flushIndex$1 + 1 : 0) {
  {
    seen = seen || /* @__PURE__ */ new Map();
  }
  for (; i2 < queue$1.length; i2++) {
    const cb = queue$1[i2];
    if (cb && cb.pre) {
      if (checkRecursiveUpdates$1(seen, cb)) {
        continue;
      }
      queue$1.splice(i2, 1);
      i2--;
      cb();
    }
  }
}
function flushPostFlushCbs$1(seen) {
  if (pendingPostFlushCbs$1.length) {
    const deduped = [...new Set(pendingPostFlushCbs$1)];
    pendingPostFlushCbs$1.length = 0;
    if (activePostFlushCbs$1) {
      activePostFlushCbs$1.push(...deduped);
      return;
    }
    activePostFlushCbs$1 = deduped;
    {
      seen = seen || /* @__PURE__ */ new Map();
    }
    activePostFlushCbs$1.sort((a2, b2) => getId$1(a2) - getId$1(b2));
    for (postFlushIndex$1 = 0; postFlushIndex$1 < activePostFlushCbs$1.length; postFlushIndex$1++) {
      if (checkRecursiveUpdates$1(seen, activePostFlushCbs$1[postFlushIndex$1])) {
        continue;
      }
      activePostFlushCbs$1[postFlushIndex$1]();
    }
    activePostFlushCbs$1 = null;
    postFlushIndex$1 = 0;
  }
}
const getId$1 = (job) => job.id == null ? Infinity : job.id;
const comparator$1 = (a2, b2) => {
  const diff = getId$1(a2) - getId$1(b2);
  if (diff === 0) {
    if (a2.pre && !b2.pre)
      return -1;
    if (b2.pre && !a2.pre)
      return 1;
  }
  return diff;
};
function flushJobs$1(seen) {
  isFlushPending$1 = false;
  isFlushing$1 = true;
  {
    seen = seen || /* @__PURE__ */ new Map();
  }
  queue$1.sort(comparator$1);
  const check = (job) => checkRecursiveUpdates$1(seen, job);
  try {
    for (flushIndex$1 = 0; flushIndex$1 < queue$1.length; flushIndex$1++) {
      const job = queue$1[flushIndex$1];
      if (job && job.active !== false) {
        if (check(job)) {
          continue;
        }
        callWithErrorHandling$1(job, null, 14);
      }
    }
  } finally {
    flushIndex$1 = 0;
    queue$1.length = 0;
    flushPostFlushCbs$1(seen);
    isFlushing$1 = false;
    currentFlushPromise$1 = null;
    if (queue$1.length || pendingPostFlushCbs$1.length) {
      flushJobs$1(seen);
    }
  }
}
function checkRecursiveUpdates$1(seen, fn2) {
  if (!seen.has(fn2)) {
    seen.set(fn2, 1);
  } else {
    const count2 = seen.get(fn2);
    if (count2 > RECURSION_LIMIT$1) {
      const instance = fn2.ownerInstance;
      const componentName = instance && getComponentName$1(instance.type);
      warn$3(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`);
      return true;
    } else {
      seen.set(fn2, count2 + 1);
    }
  }
}
let isHmrUpdating$1 = false;
const hmrDirtyComponents$1 = /* @__PURE__ */ new Set();
{
  getGlobalThis$1().__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap$1(createRecord$1),
    rerender: tryWrap$1(rerender$1),
    reload: tryWrap$1(reload$1)
  };
}
const map$1 = /* @__PURE__ */ new Map();
function registerHMR$1(instance) {
  const id2 = instance.type.__hmrId;
  let record = map$1.get(id2);
  if (!record) {
    createRecord$1(id2, instance.type);
    record = map$1.get(id2);
  }
  record.instances.add(instance);
}
function unregisterHMR$1(instance) {
  map$1.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord$1(id2, initialDef) {
  if (map$1.has(id2)) {
    return false;
  }
  map$1.set(id2, {
    initialDef: normalizeClassComponent$1(initialDef),
    instances: /* @__PURE__ */ new Set()
  });
  return true;
}
function normalizeClassComponent$1(component) {
  return isClassComponent$1(component) ? component.__vccOpts : component;
}
function rerender$1(id2, newRender) {
  const record = map$1.get(id2);
  if (!record) {
    return;
  }
  record.initialDef.render = newRender;
  [...record.instances].forEach((instance) => {
    if (newRender) {
      instance.render = newRender;
      normalizeClassComponent$1(instance.type).render = newRender;
    }
    instance.renderCache = [];
    isHmrUpdating$1 = true;
    instance.update();
    isHmrUpdating$1 = false;
  });
}
function reload$1(id2, newComp) {
  const record = map$1.get(id2);
  if (!record)
    return;
  newComp = normalizeClassComponent$1(newComp);
  updateComponentDef$1(record.initialDef, newComp);
  const instances = [...record.instances];
  for (const instance of instances) {
    const oldComp = normalizeClassComponent$1(instance.type);
    if (!hmrDirtyComponents$1.has(oldComp)) {
      if (oldComp !== record.initialDef) {
        updateComponentDef$1(oldComp, newComp);
      }
      hmrDirtyComponents$1.add(oldComp);
    }
    instance.appContext.optionsCache.delete(instance.type);
    if (instance.ceReload) {
      hmrDirtyComponents$1.add(oldComp);
      instance.ceReload(newComp.styles);
      hmrDirtyComponents$1.delete(oldComp);
    } else if (instance.parent) {
      queueJob$1(instance.parent.update);
    } else if (instance.appContext.reload) {
      instance.appContext.reload();
    } else if (typeof window !== "undefined") {
      window.location.reload();
    } else {
      console.warn("[HMR] Root or manually mounted instance modified. Full reload required.");
    }
  }
  queuePostFlushCb$1(() => {
    for (const instance of instances) {
      hmrDirtyComponents$1.delete(normalizeClassComponent$1(instance.type));
    }
  });
}
function updateComponentDef$1(oldComp, newComp) {
  extend$1(oldComp, newComp);
  for (const key in oldComp) {
    if (key !== "__file" && !(key in newComp)) {
      delete oldComp[key];
    }
  }
}
function tryWrap$1(fn2) {
  return (id2, arg) => {
    try {
      return fn2(id2, arg);
    } catch (e2) {
      console.error(e2);
      console.warn(`[HMR] Something went wrong during Vue component hot-reload. Full reload required.`);
    }
  };
}
let devtools$1;
let buffer$1 = [];
let devtoolsNotInstalled$1 = false;
function emit$1$1(event, ...args) {
  if (devtools$1) {
    devtools$1.emit(event, ...args);
  } else if (!devtoolsNotInstalled$1) {
    buffer$1.push({ event, args });
  }
}
function setDevtoolsHook$1(hook, target) {
  var _a2, _b;
  devtools$1 = hook;
  if (devtools$1) {
    devtools$1.enabled = true;
    buffer$1.forEach(({ event, args }) => devtools$1.emit(event, ...args));
    buffer$1 = [];
  } else if (typeof window !== "undefined" && window.HTMLElement && !((_b = (_a2 = window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) === null || _b === void 0 ? void 0 : _b.includes("jsdom"))) {
    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook$1(newHook, target);
    });
    setTimeout(() => {
      if (!devtools$1) {
        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        devtoolsNotInstalled$1 = true;
        buffer$1 = [];
      }
    }, 3e3);
  } else {
    devtoolsNotInstalled$1 = true;
    buffer$1 = [];
  }
}
function devtoolsInitApp$1(app, version2) {
  emit$1$1("app:init", app, version2, {
    Fragment: Fragment$1,
    Text: Text$1,
    Comment: Comment$1,
    Static: Static$1
  });
}
function devtoolsUnmountApp$1(app) {
  emit$1$1("app:unmount", app);
}
const devtoolsComponentAdded$1 = /* @__PURE__ */ createDevtoolsComponentHook$1("component:added");
const devtoolsComponentUpdated$1 = /* @__PURE__ */ createDevtoolsComponentHook$1("component:updated");
const _devtoolsComponentRemoved$1 = /* @__PURE__ */ createDevtoolsComponentHook$1("component:removed");
const devtoolsComponentRemoved$1 = (component) => {
  if (devtools$1 && typeof devtools$1.cleanupBuffer === "function" && !devtools$1.cleanupBuffer(component)) {
    _devtoolsComponentRemoved$1(component);
  }
};
function createDevtoolsComponentHook$1(hook) {
  return (component) => {
    emit$1$1(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : void 0, component);
  };
}
const devtoolsPerfStart$1 = /* @__PURE__ */ createDevtoolsPerformanceHook$1("perf:start");
const devtoolsPerfEnd$1 = /* @__PURE__ */ createDevtoolsPerformanceHook$1("perf:end");
function createDevtoolsPerformanceHook$1(hook) {
  return (component, type, time) => {
    emit$1$1(hook, component.appContext.app, component.uid, component, type, time);
  };
}
function devtoolsComponentEmit$1(component, event, params) {
  emit$1$1("component:emit", component.appContext.app, component, event, params);
}
function emit$2(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ$1;
  {
    const { emitsOptions, propsOptions: [propsOptions] } = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions) && true) {
        if (!propsOptions || !(toHandlerKey$1(event) in propsOptions)) {
          warn$3(`Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey$1(event)}" prop.`);
        }
      } else {
        const validator = emitsOptions[event];
        if (isFunction$2(validator)) {
          const isValid = validator(...rawArgs);
          if (!isValid) {
            warn$3(`Invalid event arguments: event validation failed for event "${event}".`);
          }
        }
      }
    }
  }
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number, trim } = props[modifiersKey] || EMPTY_OBJ$1;
    if (trim) {
      args = rawArgs.map((a2) => isString$2(a2) ? a2.trim() : a2);
    }
    if (number) {
      args = rawArgs.map(looseToNumber$1);
    }
  }
  {
    devtoolsComponentEmit$1(instance, event, args);
  }
  {
    const lowerCaseEvent = event.toLowerCase();
    if (lowerCaseEvent !== event && props[toHandlerKey$1(lowerCaseEvent)]) {
      warn$3(`Event "${lowerCaseEvent}" is emitted in component ${formatComponentName$1(instance, instance.type)} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate$1(event)}" instead of "${event}".`);
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey$1(event)] || props[handlerName = toHandlerKey$1(camelize$1(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey$1(hyphenate$1(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling$1(handler, instance, 6, args);
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling$1(onceHandler, instance, 6, args);
  }
}
function normalizeEmitsOptions$1(comp, appContext, asMixin = false) {
  const cache2 = appContext.emitsCache;
  const cached = cache2.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$2(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions$1(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend$1(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$1(comp)) {
      cache2.set(comp, null);
    }
    return null;
  }
  if (isArray$2(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend$1(normalized, raw);
  }
  if (isObject$1(comp)) {
    cache2.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener$1(options, key) {
  if (!options || !isOn$1(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn$1(options, key[0].toLowerCase() + key.slice(1)) || hasOwn$1(options, hyphenate$1(key)) || hasOwn$1(options, key);
}
let currentRenderingInstance$1 = null;
let currentScopeId$1 = null;
function setCurrentRenderingInstance$1(instance) {
  const prev = currentRenderingInstance$1;
  currentRenderingInstance$1 = instance;
  currentScopeId$1 = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId$1(id2) {
  currentScopeId$1 = id2;
}
function popScopeId$1() {
  currentScopeId$1 = null;
}
const withScopeId$1 = (_id) => withCtx$1;
function withCtx$1(fn2, ctx = currentRenderingInstance$1, isNonScopedSlot) {
  if (!ctx)
    return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking$1(-1);
    }
    const prevInstance = setCurrentRenderingInstance$1(ctx);
    let res;
    try {
      res = fn2(...args);
    } finally {
      setCurrentRenderingInstance$1(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking$1(1);
      }
    }
    {
      devtoolsComponentUpdated$1(ctx);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
let accessedAttrs$1 = false;
function markAttrsAccessed$1() {
  accessedAttrs$1 = true;
}
function renderComponentRoot$1(instance) {
  const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit: emit2, render: render2, renderCache, data, setupState, ctx, inheritAttrs } = instance;
  let result;
  let fallthroughAttrs;
  const prev = setCurrentRenderingInstance$1(instance);
  {
    accessedAttrs$1 = false;
  }
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode$1(render2.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render3 = Component;
      if (attrs === props) {
        markAttrsAccessed$1();
      }
      result = normalizeVNode$1(render3.length > 1 ? render3(props, true ? {
        get attrs() {
          markAttrsAccessed$1();
          return attrs;
        },
        slots,
        emit: emit2
      } : { attrs, slots, emit: emit2 }) : render3(props, null));
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough$1(attrs);
    }
  } catch (err) {
    blockStack$1.length = 0;
    handleError$1(err, instance, 1);
    result = createVNode$1(Comment$1);
  }
  let root = result;
  let setRoot = void 0;
  if (result.patchFlag > 0 && result.patchFlag & 2048) {
    [root, setRoot] = getChildRoot$1(result);
  }
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys.some(isModelListener$1)) {
          fallthroughAttrs = filterModelListeners$1(fallthroughAttrs, propsOptions);
        }
        root = cloneVNode$1(root, fallthroughAttrs);
      } else if (!accessedAttrs$1 && root.type !== Comment$1) {
        const allAttrs = Object.keys(attrs);
        const eventAttrs = [];
        const extraAttrs = [];
        for (let i2 = 0, l2 = allAttrs.length; i2 < l2; i2++) {
          const key = allAttrs[i2];
          if (isOn$1(key)) {
            if (!isModelListener$1(key)) {
              eventAttrs.push(key[2].toLowerCase() + key.slice(3));
            }
          } else {
            extraAttrs.push(key);
          }
        }
        if (extraAttrs.length) {
          warn$3(`Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`);
        }
        if (eventAttrs.length) {
          warn$3(`Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`);
        }
      }
    }
  }
  if (vnode.dirs) {
    if (!isElementRoot$1(root)) {
      warn$3(`Runtime directive used on component with non-element root node. The directives will not function as intended.`);
    }
    root = cloneVNode$1(root);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    if (!isElementRoot$1(root)) {
      warn$3(`Component inside <Transition> renders non-element root node that cannot be animated.`);
    }
    root.transition = vnode.transition;
  }
  if (setRoot) {
    setRoot(root);
  } else {
    result = root;
  }
  setCurrentRenderingInstance$1(prev);
  return result;
}
const getChildRoot$1 = (vnode) => {
  const rawChildren = vnode.children;
  const dynamicChildren = vnode.dynamicChildren;
  const childRoot = filterSingleRoot$1(rawChildren);
  if (!childRoot) {
    return [vnode, void 0];
  }
  const index = rawChildren.indexOf(childRoot);
  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
  const setRoot = (updatedRoot) => {
    rawChildren[index] = updatedRoot;
    if (dynamicChildren) {
      if (dynamicIndex > -1) {
        dynamicChildren[dynamicIndex] = updatedRoot;
      } else if (updatedRoot.patchFlag > 0) {
        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
      }
    }
  };
  return [normalizeVNode$1(childRoot), setRoot];
};
function filterSingleRoot$1(children) {
  let singleRoot;
  for (let i2 = 0; i2 < children.length; i2++) {
    const child = children[i2];
    if (isVNode$1(child)) {
      if (child.type !== Comment$1 || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough$1 = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn$1(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners$1 = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener$1(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
const isElementRoot$1 = (vnode) => {
  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment$1;
};
function shouldUpdateComponent$1(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if ((prevChildren || nextChildren) && isHmrUpdating$1) {
    return true;
  }
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged$1(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i2 = 0; i2 < dynamicProps.length; i2++) {
        const key = dynamicProps[i2];
        if (nextProps[key] !== prevProps[key] && !isEmitListener$1(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged$1(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged$1(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i2 = 0; i2 < nextKeys.length; i2++) {
    const key = nextKeys[i2];
    if (nextProps[key] !== prevProps[key] && !isEmitListener$1(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl$1({ vnode, parent }, el2) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el2;
    parent = parent.parent;
  }
}
const isSuspense$1 = (type) => type.__isSuspense;
function queueEffectWithSuspense$1(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$2(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb$1(fn2);
  }
}
function provide$1(key, value) {
  if (!currentInstance$1) {
    {
      warn$3(`provide() can only be used inside setup().`);
    }
  } else {
    let provides = currentInstance$1.provides;
    const parentProvides = currentInstance$1.parent && currentInstance$1.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance$1.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject$1(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance$1 || currentRenderingInstance$1;
  if (instance) {
    const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$2(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
    } else {
      warn$3(`injection "${String(key)}" not found.`);
    }
  } else {
    warn$3(`inject() can only be used inside setup() or functional components.`);
  }
}
function watchEffect$1(effect2, options) {
  return doWatch$1(effect2, null, options);
}
function watchPostEffect$1(effect2, options) {
  return doWatch$1(effect2, null, Object.assign(Object.assign({}, options), { flush: "post" }));
}
const INITIAL_WATCHER_VALUE$1 = {};
function watch$1(source, cb, options) {
  if (!isFunction$2(cb)) {
    warn$3(`\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`);
  }
  return doWatch$1(source, cb, options);
}
function doWatch$1(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ$1) {
  if (!cb) {
    if (immediate !== void 0) {
      warn$3(`watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`);
    }
    if (deep !== void 0) {
      warn$3(`watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`);
    }
  }
  const warnInvalidSource = (s) => {
    warn$3(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`);
  };
  const instance = getCurrentScope$1() === (currentInstance$1 === null || currentInstance$1 === void 0 ? void 0 : currentInstance$1.scope) ? currentInstance$1 : null;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef$1(source)) {
    getter = () => source.value;
    forceTrigger = isShallow$1$1(source);
  } else if (isReactive$1(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray$2(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s) => isReactive$1(s) || isShallow$1$1(s));
    getter = () => source.map((s) => {
      if (isRef$1(s)) {
        return s.value;
      } else if (isReactive$1(s)) {
        return traverse$1(s);
      } else if (isFunction$2(s)) {
        return callWithErrorHandling$1(s, instance, 2);
      } else {
        warnInvalidSource(s);
      }
    });
  } else if (isFunction$2(source)) {
    if (cb) {
      getter = () => callWithErrorHandling$1(source, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling$1(source, instance, 3, [onCleanup]);
      };
    }
  } else {
    getter = NOOP$1;
    warnInvalidSource(source);
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse$1(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn2) => {
    cleanup = effect2.onStop = () => {
      callWithErrorHandling$1(fn2, instance, 4);
    };
  };
  let ssrCleanup;
  if (isInSSRComponentSetup$1) {
    onCleanup = NOOP$1;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling$1(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    if (flush === "sync") {
      const ctx = useSSRContext$1();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else {
      return NOOP$1;
    }
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE$1) : INITIAL_WATCHER_VALUE$1;
  const job = () => {
    if (!effect2.active) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v2, i2) => hasChanged$1(v2, oldValue[i2])) : hasChanged$1(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling$1(cb, instance, 3, [
          newValue,
          oldValue === INITIAL_WATCHER_VALUE$1 ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE$1 ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect2.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect$1(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance)
      job.id = instance.uid;
    scheduler = () => queueJob$1(job);
  }
  const effect2 = new ReactiveEffect$1(getter, scheduler);
  {
    effect2.onTrack = onTrack;
    effect2.onTrigger = onTrigger;
  }
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect2.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect$1(effect2.run.bind(effect2), instance && instance.suspense);
  } else {
    effect2.run();
  }
  const unwatch = () => {
    effect2.stop();
    if (instance && instance.scope) {
      remove$1(instance.scope.effects, effect2);
    }
  };
  if (ssrCleanup)
    ssrCleanup.push(unwatch);
  return unwatch;
}
function instanceWatch$1(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString$2(source) ? source.includes(".") ? createPathGetter$1(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction$2(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const cur = currentInstance$1;
  setCurrentInstance$1(this);
  const res = doWatch$1(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance$1(cur);
  } else {
    unsetCurrentInstance$1();
  }
  return res;
}
function createPathGetter$1(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i2 = 0; i2 < segments.length && cur; i2++) {
      cur = cur[segments[i2]];
    }
    return cur;
  };
}
function traverse$1(value, seen) {
  if (!isObject$1(value) || value["__v_skip"]) {
    return value;
  }
  seen = seen || /* @__PURE__ */ new Set();
  if (seen.has(value)) {
    return value;
  }
  seen.add(value);
  if (isRef$1(value)) {
    traverse$1(value.value, seen);
  } else if (isArray$2(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      traverse$1(value[i2], seen);
    }
  } else if (isSet$1(value) || isMap$1(value)) {
    value.forEach((v2) => {
      traverse$1(v2, seen);
    });
  } else if (isPlainObject$2(value)) {
    for (const key in value) {
      traverse$1(value[key], seen);
    }
  }
  return value;
}
function useTransitionState$1() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted$1(() => {
    state.isMounted = true;
  });
  onBeforeUnmount$1(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator$1 = [Function, Array];
const BaseTransitionImpl$1 = {
  name: `BaseTransition`,
  props: {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    onBeforeEnter: TransitionHookValidator$1,
    onEnter: TransitionHookValidator$1,
    onAfterEnter: TransitionHookValidator$1,
    onEnterCancelled: TransitionHookValidator$1,
    onBeforeLeave: TransitionHookValidator$1,
    onLeave: TransitionHookValidator$1,
    onAfterLeave: TransitionHookValidator$1,
    onLeaveCancelled: TransitionHookValidator$1,
    onBeforeAppear: TransitionHookValidator$1,
    onAppear: TransitionHookValidator$1,
    onAfterAppear: TransitionHookValidator$1,
    onAppearCancelled: TransitionHookValidator$1
  },
  setup(props, { slots }) {
    const instance = getCurrentInstance$1();
    const state = useTransitionState$1();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren$1(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        let hasFound = false;
        for (const c2 of children) {
          if (c2.type !== Comment$1) {
            if (hasFound) {
              warn$3("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
              break;
            }
            child = c2;
            hasFound = true;
          }
        }
      }
      const rawProps = toRaw$1(props);
      const { mode } = rawProps;
      if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
        warn$3(`invalid <transition> mode: ${mode}`);
      }
      if (state.isLeaving) {
        return emptyPlaceholder$1(child);
      }
      const innerChild = getKeepAliveChild$1(child);
      if (!innerChild) {
        return emptyPlaceholder$1(child);
      }
      const enterHooks = resolveTransitionHooks$1(innerChild, rawProps, state, instance);
      setTransitionHooks$1(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild$1(oldChild);
      let transitionKeyChanged = false;
      const { getTransitionKey } = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment$1 && (!isSameVNodeType$1(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks$1(oldInnerChild, rawProps, state, instance);
        setTransitionHooks$1(oldInnerChild, leavingHooks);
        if (mode === "out-in") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (instance.update.active !== false) {
              instance.update();
            }
          };
          return emptyPlaceholder$1(child);
        } else if (mode === "in-out" && innerChild.type !== Comment$1) {
          leavingHooks.delayLeave = (el2, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType$1(state, oldInnerChild);
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el2._leaveCb = () => {
              earlyRemove();
              el2._leaveCb = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition$1 = BaseTransitionImpl$1;
function getLeavingNodesForType$1(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks$1(vnode, props, state, instance) {
  const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType$1(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling$1(hook, instance, 9, args);
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook2(hook, args);
    if (isArray$2(hook)) {
      if (hook.every((hook2) => hook2.length <= 1))
        done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el2) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el2._leaveCb) {
        el2._leaveCb(true);
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType$1(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook2(hook, [el2]);
    },
    enter(el2) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el2._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el2]);
        } else {
          callHook2(afterHook, [el2]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el2._enterCb = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el2, done]);
      } else {
        done();
      }
    },
    leave(el2, remove2) {
      const key2 = String(vnode.key);
      if (el2._enterCb) {
        el2._enterCb(true);
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el2]);
      let called = false;
      const done = el2._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el2]);
        } else {
          callHook2(onAfterLeave, [el2]);
        }
        el2._leaveCb = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el2, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks$1(vnode2, props, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder$1(vnode) {
  if (isKeepAlive$1(vnode)) {
    vnode = cloneVNode$1(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild$1(vnode) {
  return isKeepAlive$1(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks$1(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks$1(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren$1(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i2 = 0; i2 < children.length; i2++) {
    let child = children[i2];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i2);
    if (child.type === Fragment$1) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(getTransitionRawChildren$1(child.children, keepComment, key));
    } else if (keepComment || child.type !== Comment$1) {
      ret.push(key != null ? cloneVNode$1(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i2 = 0; i2 < ret.length; i2++) {
      ret[i2].patchFlag = -2;
    }
  }
  return ret;
}
function defineComponent$1(options) {
  return isFunction$2(options) ? { setup: options, name: options.name } : options;
}
const isAsyncWrapper$1 = (i2) => !!i2.type.__asyncLoader;
function defineAsyncComponent$1(source) {
  if (isFunction$2(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (!comp) {
        warn$3(`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`);
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      if (comp && !isObject$1(comp) && !isFunction$2(comp)) {
        throw new Error(`Invalid async component load result: ${comp}`);
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return defineComponent$1({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance$1;
      if (resolvedComp) {
        return () => createInnerComp$1(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError$1(err, instance, 13, !errorComponent);
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup$1) {
        return load().then((comp) => {
          return () => createInnerComp$1(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode$1(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded2 = ref$1(false);
      const error = ref$1();
      const delayed = ref$1(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded2.value && !error.value) {
            const err = new Error(`Async component timed out after ${timeout}ms.`);
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded2.value = true;
        if (instance.parent && isKeepAlive$1(instance.parent.vnode)) {
          queueJob$1(instance.parent.update);
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded2.value && resolvedComp) {
          return createInnerComp$1(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode$1(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode$1(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp$1(comp, parent) {
  const { ref: ref2, props, children, ce: ce2 } = parent.vnode;
  const vnode = createVNode$1(comp, props, children);
  vnode.ref = ref2;
  vnode.ce = ce2;
  delete parent.vnode.ce;
  return vnode;
}
const isKeepAlive$1 = (vnode) => vnode.type.__isKeepAlive;
function onActivated$1(hook, target) {
  registerKeepAliveHook$1(hook, "a", target);
}
function onDeactivated$1(hook, target) {
  registerKeepAliveHook$1(hook, "da", target);
}
function registerKeepAliveHook$1(hook, type, target = currentInstance$1) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook$1(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive$1(current.parent.vnode)) {
        injectToKeepAliveRoot$1(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot$1(hook, type, target, keepAliveRoot) {
  const injected = injectHook$1(type, hook, keepAliveRoot, true);
  onUnmounted$1(() => {
    remove$1(keepAliveRoot[type], injected);
  }, target);
}
function injectHook$1(type, hook, target = currentInstance$1, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking$1();
      setCurrentInstance$1(target);
      const res = callWithAsyncErrorHandling$1(hook, target, type, args);
      unsetCurrentInstance$1();
      resetTracking$1();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else {
    const apiName = toHandlerKey$1(ErrorTypeStrings$1[type].replace(/ hook$/, ""));
    warn$3(`${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`);
  }
}
const createHook$1 = (lifecycle) => (hook, target = currentInstance$1) => (!isInSSRComponentSetup$1 || lifecycle === "sp") && injectHook$1(lifecycle, (...args) => hook(...args), target);
const onBeforeMount$1 = createHook$1("bm");
const onMounted$1 = createHook$1("m");
const onBeforeUpdate$1 = createHook$1("bu");
const onUpdated$1 = createHook$1("u");
const onBeforeUnmount$1 = createHook$1("bum");
const onUnmounted$1 = createHook$1("um");
const onServerPrefetch$1 = createHook$1("sp");
const onRenderTriggered$1 = createHook$1("rtg");
const onRenderTracked$1 = createHook$1("rtc");
function onErrorCaptured$1(hook, target = currentInstance$1) {
  injectHook$1("ec", hook, target);
}
function validateDirectiveName$1(name) {
  if (isBuiltInDirective$1(name)) {
    warn$3("Do not use built-in directive ids as custom directive id: " + name);
  }
}
function withDirectives$1(vnode, directives2) {
  const internalInstance = currentRenderingInstance$1;
  if (internalInstance === null) {
    warn$3(`withDirectives can only be used inside render functions.`);
    return vnode;
  }
  const instance = getExposeProxy$1(internalInstance) || internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i2 = 0; i2 < directives2.length; i2++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ$1] = directives2[i2];
    if (dir) {
      if (isFunction$2(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse$1(value);
      }
      bindings.push({
        dir,
        instance,
        value,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook$1(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i2 = 0; i2 < bindings.length; i2++) {
    const binding = bindings[i2];
    if (oldBindings) {
      binding.oldValue = oldBindings[i2].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking$1();
      callWithAsyncErrorHandling$1(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking$1();
    }
  }
}
const COMPONENTS$1 = "components";
const DIRECTIVES$1 = "directives";
function resolveComponent$1(name, maybeSelfReference) {
  return resolveAsset$1(COMPONENTS$1, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT$1 = Symbol();
function resolveDynamicComponent$1(component) {
  if (isString$2(component)) {
    return resolveAsset$1(COMPONENTS$1, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT$1;
  }
}
function resolveDirective$1(name) {
  return resolveAsset$1(DIRECTIVES$1, name);
}
function resolveAsset$1(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance$1 || currentInstance$1;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS$1) {
      const selfName = getComponentName$1(Component, false);
      if (selfName && (selfName === name || selfName === camelize$1(name) || selfName === capitalize$1(camelize$1(name)))) {
        return Component;
      }
    }
    const res = resolve$1(instance[type] || Component[type], name) || resolve$1(instance.appContext[type], name);
    if (!res && maybeSelfReference) {
      return Component;
    }
    if (warnMissing && !res) {
      const extra = type === COMPONENTS$1 ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
      warn$3(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
    }
    return res;
  } else {
    warn$3(`resolve${capitalize$1(type.slice(0, -1))} can only be used in render() or setup().`);
  }
}
function resolve$1(registry, name) {
  return registry && (registry[name] || registry[camelize$1(name)] || registry[capitalize$1(camelize$1(name))]);
}
function renderList$1(source, renderItem, cache2, index) {
  let ret;
  const cached = cache2 && cache2[index];
  if (isArray$2(source) || isString$2(source)) {
    ret = new Array(source.length);
    for (let i2 = 0, l2 = source.length; i2 < l2; i2++) {
      ret[i2] = renderItem(source[i2], i2, void 0, cached && cached[i2]);
    }
  } else if (typeof source === "number") {
    if (!Number.isInteger(source)) {
      warn$3(`The v-for range expect an integer value but got ${source}.`);
    }
    ret = new Array(source);
    for (let i2 = 0; i2 < source; i2++) {
      ret[i2] = renderItem(i2 + 1, i2, void 0, cached && cached[i2]);
    }
  } else if (isObject$1(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(source, (item, i2) => renderItem(item, i2, void 0, cached && cached[i2]));
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
        const key = keys[i2];
        ret[i2] = renderItem(source[key], key, i2, cached && cached[i2]);
      }
    }
  } else {
    ret = [];
  }
  if (cache2) {
    cache2[index] = ret;
  }
  return ret;
}
function renderSlot$1(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance$1.isCE || currentRenderingInstance$1.parent && isAsyncWrapper$1(currentRenderingInstance$1.parent) && currentRenderingInstance$1.parent.isCE) {
    if (name !== "default")
      props.name = name;
    return createVNode$1("slot", props, fallback && fallback());
  }
  let slot = slots[name];
  if (slot && slot.length > 1) {
    warn$3(`SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`);
    slot = () => [];
  }
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock$1();
  const validSlotContent = slot && ensureValidVNode$1(slot(props));
  const rendered = createBlock$1(Fragment$1, {
    key: props.key || validSlotContent && validSlotContent.key || `_${name}`
  }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 ? 64 : -2);
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode$1(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode$1(child))
      return true;
    if (child.type === Comment$1)
      return false;
    if (child.type === Fragment$1 && !ensureValidVNode$1(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
const getPublicInstance$1 = (i2) => {
  if (!i2)
    return null;
  if (isStatefulComponent$1(i2))
    return getExposeProxy$1(i2) || i2.proxy;
  return getPublicInstance$1(i2.parent);
};
const publicPropertiesMap$1 = /* @__PURE__ */ extend$1(/* @__PURE__ */ Object.create(null), {
  $: (i2) => i2,
  $el: (i2) => i2.vnode.el,
  $data: (i2) => i2.data,
  $props: (i2) => shallowReadonly$1(i2.props),
  $attrs: (i2) => shallowReadonly$1(i2.attrs),
  $slots: (i2) => shallowReadonly$1(i2.slots),
  $refs: (i2) => shallowReadonly$1(i2.refs),
  $parent: (i2) => getPublicInstance$1(i2.parent),
  $root: (i2) => getPublicInstance$1(i2.root),
  $emit: (i2) => i2.emit,
  $options: (i2) => resolveMergedOptions$1(i2),
  $forceUpdate: (i2) => i2.f || (i2.f = () => queueJob$1(i2.update)),
  $nextTick: (i2) => i2.n || (i2.n = nextTick$1.bind(i2.proxy)),
  $watch: (i2) => instanceWatch$1.bind(i2)
});
const isReservedPrefix$1 = (key) => key === "_" || key === "$";
const hasSetupBinding$1 = (state, key) => state !== EMPTY_OBJ$1 && !state.__isScriptSetup && hasOwn$1(state, key);
const PublicInstanceProxyHandlers$1 = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    if (key === "__isVue") {
      return true;
    }
    let normalizedProps;
    if (key[0] !== "$") {
      const n2 = accessCache[key];
      if (n2 !== void 0) {
        switch (n2) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding$1(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ$1 && hasOwn$1(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if ((normalizedProps = instance.propsOptions[0]) && hasOwn$1(normalizedProps, key)) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ$1 && hasOwn$1(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess$1) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap$1[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track$1(instance, "get", key);
        markAttrsAccessed$1();
      }
      return publicGetter(instance);
    } else if ((cssModule = type.__cssModules) && (cssModule = cssModule[key])) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ$1 && hasOwn$1(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (globalProperties = appContext.config.globalProperties, hasOwn$1(globalProperties, key)) {
      {
        return globalProperties[key];
      }
    } else if (currentRenderingInstance$1 && (!isString$2(key) || key.indexOf("__v") !== 0)) {
      if (data !== EMPTY_OBJ$1 && isReservedPrefix$1(key[0]) && hasOwn$1(data, key)) {
        warn$3(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`);
      } else if (instance === currentRenderingInstance$1) {
        warn$3(`Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`);
      }
    }
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding$1(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (setupState.__isScriptSetup && hasOwn$1(setupState, key)) {
      warn$3(`Cannot mutate <script setup> binding "${key}" from Options API.`);
      return false;
    } else if (data !== EMPTY_OBJ$1 && hasOwn$1(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn$1(instance.props, key)) {
      warn$3(`Attempting to mutate prop "${key}". Props are readonly.`);
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      warn$3(`Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`);
      return false;
    } else {
      if (key in instance.appContext.config.globalProperties) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          value
        });
      } else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ$1 && hasOwn$1(data, key) || hasSetupBinding$1(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn$1(normalizedProps, key) || hasOwn$1(ctx, key) || hasOwn$1(publicPropertiesMap$1, key) || hasOwn$1(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn$1(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
{
  PublicInstanceProxyHandlers$1.ownKeys = (target) => {
    warn$3(`Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`);
    return Reflect.ownKeys(target);
  };
}
function createDevRenderContext$1(instance) {
  const target = {};
  Object.defineProperty(target, `_`, {
    configurable: true,
    enumerable: false,
    get: () => instance
  });
  Object.keys(publicPropertiesMap$1).forEach((key) => {
    Object.defineProperty(target, key, {
      configurable: true,
      enumerable: false,
      get: () => publicPropertiesMap$1[key](instance),
      set: NOOP$1
    });
  });
  return target;
}
function exposePropsOnRenderContext$1(instance) {
  const { ctx, propsOptions: [propsOptions] } = instance;
  if (propsOptions) {
    Object.keys(propsOptions).forEach((key) => {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => instance.props[key],
        set: NOOP$1
      });
    });
  }
}
function exposeSetupStateOnRenderContext$1(instance) {
  const { ctx, setupState } = instance;
  Object.keys(toRaw$1(setupState)).forEach((key) => {
    if (!setupState.__isScriptSetup) {
      if (isReservedPrefix$1(key[0])) {
        warn$3(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);
        return;
      }
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => setupState[key],
        set: NOOP$1
      });
    }
  });
}
function createDuplicateChecker$1() {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (type, key) => {
    if (cache2[key]) {
      warn$3(`${type} property "${key}" is already defined in ${cache2[key]}.`);
    } else {
      cache2[key] = type;
    }
  };
}
let shouldCacheAccess$1 = true;
function applyOptions$1(instance) {
  const options = resolveMergedOptions$1(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess$1 = false;
  if (options.beforeCreate) {
    callHook$1$1(options.beforeCreate, instance, "bc");
  }
  const {
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    expose,
    inheritAttrs,
    components,
    directives: directives2,
    filters
  } = options;
  const checkDuplicateProperties = createDuplicateChecker$1();
  {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties("Props", key);
      }
    }
  }
  if (injectOptions) {
    resolveInjections$1(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction$2(methodHandler)) {
        {
          Object.defineProperty(ctx, key, {
            value: methodHandler.bind(publicThis),
            configurable: true,
            enumerable: true,
            writable: true
          });
        }
        {
          checkDuplicateProperties("Methods", key);
        }
      } else {
        warn$3(`Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`);
      }
    }
  }
  if (dataOptions) {
    if (!isFunction$2(dataOptions)) {
      warn$3(`The data option must be a function. Plain object usage is no longer supported.`);
    }
    const data = dataOptions.call(publicThis, publicThis);
    if (isPromise$1(data)) {
      warn$3(`data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`);
    }
    if (!isObject$1(data)) {
      warn$3(`data() should return an object.`);
    } else {
      instance.data = reactive$1(data);
      {
        for (const key in data) {
          checkDuplicateProperties("Data", key);
          if (!isReservedPrefix$1(key[0])) {
            Object.defineProperty(ctx, key, {
              configurable: true,
              enumerable: true,
              get: () => data[key],
              set: NOOP$1
            });
          }
        }
      }
    }
  }
  shouldCacheAccess$1 = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction$2(opt) ? opt.bind(publicThis, publicThis) : isFunction$2(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP$1;
      if (get2 === NOOP$1) {
        warn$3(`Computed property "${key}" has no getter.`);
      }
      const set2 = !isFunction$2(opt) && isFunction$2(opt.set) ? opt.set.bind(publicThis) : () => {
        warn$3(`Write operation failed: computed property "${key}" is readonly.`);
      };
      const c2 = computed$2({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c2.value,
        set: (v2) => c2.value = v2
      });
      {
        checkDuplicateProperties("Computed", key);
      }
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher$1(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction$2(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide$1(key, provides[key]);
    });
  }
  if (created) {
    callHook$1$1(created, instance, "c");
  }
  function registerLifecycleHook(register, hook) {
    if (isArray$2(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount$1, beforeMount);
  registerLifecycleHook(onMounted$1, mounted);
  registerLifecycleHook(onBeforeUpdate$1, beforeUpdate);
  registerLifecycleHook(onUpdated$1, updated);
  registerLifecycleHook(onActivated$1, activated);
  registerLifecycleHook(onDeactivated$1, deactivated);
  registerLifecycleHook(onErrorCaptured$1, errorCaptured);
  registerLifecycleHook(onRenderTracked$1, renderTracked);
  registerLifecycleHook(onRenderTriggered$1, renderTriggered);
  registerLifecycleHook(onBeforeUnmount$1, beforeUnmount);
  registerLifecycleHook(onUnmounted$1, unmounted);
  registerLifecycleHook(onServerPrefetch$1, serverPrefetch);
  if (isArray$2(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP$1) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives2)
    instance.directives = directives2;
}
function resolveInjections$1(injectOptions, ctx, checkDuplicateProperties = NOOP$1, unwrapRef = false) {
  if (isArray$2(injectOptions)) {
    injectOptions = normalizeInject$1(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$1(opt)) {
      if ("default" in opt) {
        injected = inject$1(opt.from || key, opt.default, true);
      } else {
        injected = inject$1(opt.from || key);
      }
    } else {
      injected = inject$1(opt);
    }
    if (isRef$1(injected)) {
      if (unwrapRef) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => injected.value,
          set: (v2) => injected.value = v2
        });
      } else {
        {
          warn$3(`injected property "${key}" is a ref and will be auto-unwrapped and no longer needs \`.value\` in the next minor release. To opt-in to the new behavior now, set \`app.config.unwrapInjectedRef = true\` (this config is temporary and will not be needed in the future.)`);
        }
        ctx[key] = injected;
      }
    } else {
      ctx[key] = injected;
    }
    {
      checkDuplicateProperties("Inject", key);
    }
  }
}
function callHook$1$1(hook, instance, type) {
  callWithAsyncErrorHandling$1(isArray$2(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
}
function createWatcher$1(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter$1(publicThis, key) : () => publicThis[key];
  if (isString$2(raw)) {
    const handler = ctx[raw];
    if (isFunction$2(handler)) {
      watch$1(getter, handler);
    } else {
      warn$3(`Invalid watch handler specified by key "${raw}"`, handler);
    }
  } else if (isFunction$2(raw)) {
    watch$1(getter, raw.bind(publicThis));
  } else if (isObject$1(raw)) {
    if (isArray$2(raw)) {
      raw.forEach((r2) => createWatcher$1(r2, ctx, publicThis, key));
    } else {
      const handler = isFunction$2(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$2(handler)) {
        watch$1(getter, handler, raw);
      } else {
        warn$3(`Invalid watch handler specified by key "${raw.handler}"`, handler);
      }
    }
  } else {
    warn$3(`Invalid watch option: "${key}"`, raw);
  }
}
function resolveMergedOptions$1(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const { mixins: globalMixins, optionsCache: cache2, config: { optionMergeStrategies } } = instance.appContext;
  const cached = cache2.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach((m2) => mergeOptions$2(resolved, m2, optionMergeStrategies, true));
    }
    mergeOptions$2(resolved, base, optionMergeStrategies);
  }
  if (isObject$1(base)) {
    cache2.set(base, resolved);
  }
  return resolved;
}
function mergeOptions$2(to2, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions$2(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach((m2) => mergeOptions$2(to2, m2, strats, true));
  }
  for (const key in from) {
    if (asMixin && key === "expose") {
      warn$3(`"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`);
    } else {
      const strat = internalOptionMergeStrats$1[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from[key]) : from[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats$1 = {
  data: mergeDataFn$1,
  props: mergeObjectOptions$1,
  emits: mergeObjectOptions$1,
  methods: mergeObjectOptions$1,
  computed: mergeObjectOptions$1,
  beforeCreate: mergeAsArray$1,
  created: mergeAsArray$1,
  beforeMount: mergeAsArray$1,
  mounted: mergeAsArray$1,
  beforeUpdate: mergeAsArray$1,
  updated: mergeAsArray$1,
  beforeDestroy: mergeAsArray$1,
  beforeUnmount: mergeAsArray$1,
  destroyed: mergeAsArray$1,
  unmounted: mergeAsArray$1,
  activated: mergeAsArray$1,
  deactivated: mergeAsArray$1,
  errorCaptured: mergeAsArray$1,
  serverPrefetch: mergeAsArray$1,
  components: mergeObjectOptions$1,
  directives: mergeObjectOptions$1,
  watch: mergeWatchOptions$1,
  provide: mergeDataFn$1,
  inject: mergeInject$1
};
function mergeDataFn$1(to2, from) {
  if (!from) {
    return to2;
  }
  if (!to2) {
    return from;
  }
  return function mergedDataFn() {
    return extend$1(isFunction$2(to2) ? to2.call(this, this) : to2, isFunction$2(from) ? from.call(this, this) : from);
  };
}
function mergeInject$1(to2, from) {
  return mergeObjectOptions$1(normalizeInject$1(to2), normalizeInject$1(from));
}
function normalizeInject$1(raw) {
  if (isArray$2(raw)) {
    const res = {};
    for (let i2 = 0; i2 < raw.length; i2++) {
      res[raw[i2]] = raw[i2];
    }
    return res;
  }
  return raw;
}
function mergeAsArray$1(to2, from) {
  return to2 ? [...new Set([].concat(to2, from))] : from;
}
function mergeObjectOptions$1(to2, from) {
  return to2 ? extend$1(extend$1(/* @__PURE__ */ Object.create(null), to2), from) : from;
}
function mergeWatchOptions$1(to2, from) {
  if (!to2)
    return from;
  if (!from)
    return to2;
  const merged = extend$1(/* @__PURE__ */ Object.create(null), to2);
  for (const key in from) {
    merged[key] = mergeAsArray$1(to2[key], from[key]);
  }
  return merged;
}
function initProps$1(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def$1(attrs, InternalObjectKey$1, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps$1(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  {
    validateProps$1(rawProps || {}, props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive$1(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function isInHmrContext$1(instance) {
  while (instance) {
    if (instance.type.__hmrId)
      return true;
    instance = instance.parent;
  }
}
function updateProps$1(instance, rawProps, rawPrevProps, optimized) {
  const { props, attrs, vnode: { patchFlag } } = instance;
  const rawCurrentProps = toRaw$1(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (!isInHmrContext$1(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
        let key = propsToUpdate[i2];
        if (isEmitListener$1(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn$1(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize$1(key);
            props[camelizedKey] = resolvePropValue$1(options, rawCurrentProps, camelizedKey, value, instance, false);
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps$1(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || !hasOwn$1(rawProps, key) && ((kebabKey = hyphenate$1(key)) === key || !hasOwn$1(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && (rawPrevProps[key] !== void 0 || rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue$1(options, rawCurrentProps, key, void 0, instance, true);
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn$1(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger$1(instance, "set", "$attrs");
  }
  {
    validateProps$1(rawProps || {}, props, instance);
  }
}
function setFullProps$1(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp$1(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn$1(options, camelKey = camelize$1(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener$1(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw$1(props);
    const castValues = rawCastValues || EMPTY_OBJ$1;
    for (let i2 = 0; i2 < needCastKeys.length; i2++) {
      const key = needCastKeys[i2];
      props[key] = resolvePropValue$1(options, rawCurrentProps, key, castValues[key], instance, !hasOwn$1(castValues, key));
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue$1(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn$1(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction$2(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          setCurrentInstance$1(instance);
          value = propsDefaults[key] = defaultValue.call(null, props);
          unsetCurrentInstance$1();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[0]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[1] && (value === "" || value === hyphenate$1(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions$1(comp, appContext, asMixin = false) {
  const cache2 = appContext.propsCache;
  const cached = cache2.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$2(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions$1(raw2, appContext, true);
      extend$1(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject$1(comp)) {
      cache2.set(comp, EMPTY_ARR$1);
    }
    return EMPTY_ARR$1;
  }
  if (isArray$2(raw)) {
    for (let i2 = 0; i2 < raw.length; i2++) {
      if (!isString$2(raw[i2])) {
        warn$3(`props must be strings when using array syntax.`, raw[i2]);
      }
      const normalizedKey = camelize$1(raw[i2]);
      if (validatePropName$1(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ$1;
      }
    }
  } else if (raw) {
    if (!isObject$1(raw)) {
      warn$3(`invalid props options`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize$1(key);
      if (validatePropName$1(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$2(opt) || isFunction$2(opt) ? { type: opt } : Object.assign({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex$1(Boolean, prop.type);
          const stringIndex = getTypeIndex$1(String, prop.type);
          prop[0] = booleanIndex > -1;
          prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn$1(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject$1(comp)) {
    cache2.set(comp, res);
  }
  return res;
}
function validatePropName$1(key) {
  if (key[0] !== "$") {
    return true;
  } else {
    warn$3(`Invalid prop name: "${key}" is a reserved property.`);
  }
  return false;
}
function getType$1(ctor) {
  const match = ctor && ctor.toString().match(/^\s*(function|class) (\w+)/);
  return match ? match[2] : ctor === null ? "null" : "";
}
function isSameType$1(a2, b2) {
  return getType$1(a2) === getType$1(b2);
}
function getTypeIndex$1(type, expectedTypes) {
  if (isArray$2(expectedTypes)) {
    return expectedTypes.findIndex((t2) => isSameType$1(t2, type));
  } else if (isFunction$2(expectedTypes)) {
    return isSameType$1(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validateProps$1(rawProps, props, instance) {
  const resolvedValues = toRaw$1(props);
  const options = instance.propsOptions[0];
  for (const key in options) {
    let opt = options[key];
    if (opt == null)
      continue;
    validateProp$1(key, resolvedValues[key], opt, !hasOwn$1(rawProps, key) && !hasOwn$1(rawProps, hyphenate$1(key)));
  }
}
function validateProp$1(name, value, prop, isAbsent) {
  const { type, required, validator } = prop;
  if (required && isAbsent) {
    warn$3('Missing required prop: "' + name + '"');
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  if (type != null && type !== true) {
    let isValid = false;
    const types = isArray$2(type) ? type : [type];
    const expectedTypes = [];
    for (let i2 = 0; i2 < types.length && !isValid; i2++) {
      const { valid, expectedType } = assertType$1(value, types[i2]);
      expectedTypes.push(expectedType || "");
      isValid = valid;
    }
    if (!isValid) {
      warn$3(getInvalidTypeMessage$1(name, value, expectedTypes));
      return;
    }
  }
  if (validator && !validator(value)) {
    warn$3('Invalid prop: custom validator check failed for prop "' + name + '".');
  }
}
const isSimpleType$1 = /* @__PURE__ */ makeMap$1("String,Number,Boolean,Function,Symbol,BigInt");
function assertType$1(value, type) {
  let valid;
  const expectedType = getType$1(type);
  if (isSimpleType$1(expectedType)) {
    const t2 = typeof value;
    valid = t2 === expectedType.toLowerCase();
    if (!valid && t2 === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject$1(value);
  } else if (expectedType === "Array") {
    valid = isArray$2(value);
  } else if (expectedType === "null") {
    valid = value === null;
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage$1(name, value, expectedTypes) {
  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize$1).join(" | ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType$1(value);
  const expectedValue = styleValue$1(value, expectedType);
  const receivedValue = styleValue$1(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable$1(expectedType) && !isBoolean$1(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable$1(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function styleValue$1(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable$1(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean$1(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}
const isInternalKey$1 = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue$1 = (value) => isArray$2(value) ? value.map(normalizeVNode$1) : [normalizeVNode$1(value)];
const normalizeSlot$2 = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx$1((...args) => {
    if (currentInstance$1) {
      warn$3(`Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`);
    }
    return normalizeSlotValue$1(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots$1 = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey$1(key))
      continue;
    const value = rawSlots[key];
    if (isFunction$2(value)) {
      slots[key] = normalizeSlot$2(key, value, ctx);
    } else if (value != null) {
      {
        warn$3(`Non-function value encountered for slot "${key}". Prefer function slots for better performance.`);
      }
      const normalized = normalizeSlotValue$1(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots$1 = (instance, children) => {
  if (!isKeepAlive$1(instance.vnode) && true) {
    warn$3(`Non-function value encountered for default slot. Prefer function slots for better performance.`);
  }
  const normalized = normalizeSlotValue$1(children);
  instance.slots.default = () => normalized;
};
const initSlots$1 = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = toRaw$1(children);
      def$1(children, "_", type);
    } else {
      normalizeObjectSlots$1(children, instance.slots = {});
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots$1(instance, children);
    }
  }
  def$1(instance.slots, InternalObjectKey$1, 1);
};
const updateSlots$1 = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ$1;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (isHmrUpdating$1) {
        extend$1(slots, children);
      } else if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend$1(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots$1(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots$1(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey$1(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function createAppContext$1() {
  return {
    app: null,
    config: {
      isNativeTag: NO$1,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1$1 = 0;
function createAppAPI$1(render2, hydrate2) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction$2(rootComponent)) {
      rootComponent = Object.assign({}, rootComponent);
    }
    if (rootProps != null && !isObject$1(rootProps)) {
      warn$3(`root props passed to app.mount() must be an object.`);
      rootProps = null;
    }
    const context = createAppContext$1();
    const installedPlugins = /* @__PURE__ */ new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version: version$2,
      get config() {
        return context.config;
      },
      set config(v2) {
        {
          warn$3(`app.config cannot be replaced. Modify individual options instead.`);
        }
      },
      use(plugin2, ...options) {
        if (installedPlugins.has(plugin2)) {
          warn$3(`Plugin has already been applied to target app.`);
        } else if (plugin2 && isFunction$2(plugin2.install)) {
          installedPlugins.add(plugin2);
          plugin2.install(app, ...options);
        } else if (isFunction$2(plugin2)) {
          installedPlugins.add(plugin2);
          plugin2(app, ...options);
        } else {
          warn$3(`A plugin must either be a function or an object with an "install" function.`);
        }
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else {
            warn$3("Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : ""));
          }
        }
        return app;
      },
      component(name, component) {
        {
          validateComponentName$1(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (context.components[name]) {
          warn$3(`Component "${name}" has already been registered in target app.`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        {
          validateDirectiveName$1(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (context.directives[name]) {
          warn$3(`Directive "${name}" has already been registered in target app.`);
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          if (rootContainer.__vue_app__) {
            warn$3(`There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`);
          }
          const vnode = createVNode$1(rootComponent, rootProps);
          vnode.appContext = context;
          {
            context.reload = () => {
              render2(cloneVNode$1(vnode), rootContainer, isSVG);
            };
          }
          if (isHydrate && hydrate2) {
            hydrate2(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          {
            app._instance = vnode.component;
            devtoolsInitApp$1(app, version$2);
          }
          return getExposeProxy$1(vnode.component) || vnode.component.proxy;
        } else {
          warn$3(`App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``);
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          {
            app._instance = null;
            devtoolsUnmountApp$1(app);
          }
          delete app._container.__vue_app__;
        } else {
          warn$3(`Cannot unmount an app that is not mounted.`);
        }
      },
      provide(key, value) {
        if (key in context.provides) {
          warn$3(`App already provides property with key "${String(key)}". It will be overwritten with the new value.`);
        }
        context.provides[key] = value;
        return app;
      }
    };
    return app;
  };
}
function setRef$1(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$2(rawRef)) {
    rawRef.forEach((r2, i2) => setRef$1(r2, oldRawRef && (isArray$2(oldRawRef) ? oldRawRef[i2] : oldRawRef), parentSuspense, vnode, isUnmount));
    return;
  }
  if (isAsyncWrapper$1(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy$1(vnode.component) || vnode.component.proxy : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  if (!owner) {
    warn$3(`Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`);
    return;
  }
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ$1 ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString$2(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn$1(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef$1(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction$2(ref2)) {
    callWithErrorHandling$1(ref2, owner, 12, [value, refs]);
  } else {
    const _isString = isString$2(ref2);
    const _isRef = isRef$1(ref2);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? hasOwn$1(setupState, ref2) ? setupState[ref2] : refs[ref2] : ref2.value;
          if (isUnmount) {
            isArray$2(existing) && remove$1(existing, refValue);
          } else {
            if (!isArray$2(existing)) {
              if (_isString) {
                refs[ref2] = [refValue];
                if (hasOwn$1(setupState, ref2)) {
                  setupState[ref2] = refs[ref2];
                }
              } else {
                ref2.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref2.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref2] = value;
          if (hasOwn$1(setupState, ref2)) {
            setupState[ref2] = value;
          }
        } else if (_isRef) {
          ref2.value = value;
          if (rawRef.k)
            refs[rawRef.k] = value;
        } else {
          warn$3("Invalid template ref type:", ref2, `(${typeof ref2})`);
        }
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect$1(doSet, parentSuspense);
      } else {
        doSet();
      }
    } else {
      warn$3("Invalid template ref type:", ref2, `(${typeof ref2})`);
    }
  }
}
let supported$2;
let perf$2;
function startMeasure$1(instance, type) {
  if (instance.appContext.config.performance && isSupported$1()) {
    perf$2.mark(`vue-${type}-${instance.uid}`);
  }
  {
    devtoolsPerfStart$1(instance, type, isSupported$1() ? perf$2.now() : Date.now());
  }
}
function endMeasure$1(instance, type) {
  if (instance.appContext.config.performance && isSupported$1()) {
    const startTag = `vue-${type}-${instance.uid}`;
    const endTag = startTag + `:end`;
    perf$2.mark(endTag);
    perf$2.measure(`<${formatComponentName$1(instance, instance.type)}> ${type}`, startTag, endTag);
    perf$2.clearMarks(startTag);
    perf$2.clearMarks(endTag);
  }
  {
    devtoolsPerfEnd$1(instance, type, isSupported$1() ? perf$2.now() : Date.now());
  }
}
function isSupported$1() {
  if (supported$2 !== void 0) {
    return supported$2;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported$2 = true;
    perf$2 = window.performance;
  } else {
    supported$2 = false;
  }
  return supported$2;
}
function initFeatureFlags$1() {
  const needWarn = [];
  if (needWarn.length) {
    const multi = needWarn.length > 1;
    console.warn(`Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`);
  }
}
const queuePostRenderEffect$1 = queueEffectWithSuspense$1;
function createRenderer$1(options) {
  return baseCreateRenderer$1(options);
}
function baseCreateRenderer$1(options, createHydrationFns) {
  {
    initFeatureFlags$1();
  }
  const target = getGlobalThis$1();
  target.__VUE__ = true;
  {
    setDevtoolsHook$1(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
  }
  const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP$1, insertStaticContent: hostInsertStaticContent } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating$1 ? false : !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType$1(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref2, shapeFlag } = n2;
    switch (type) {
      case Text$1:
        processText(n1, n2, container, anchor);
        break;
      case Comment$1:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static$1:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        } else {
          patchStaticNode(n1, n2, container, isSVG);
        }
        break;
      case Fragment$1:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 64) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else if (shapeFlag & 128) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else {
          warn$3("Invalid VNode type:", type, `(${typeof type})`);
        }
    }
    if (ref2 != null && parentComponent) {
      setRef$1(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el2 = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el2, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
  };
  const patchStaticNode = (n1, n2, container, isSVG) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = ({ el: el2, anchor }, container, nextSibling) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostInsert(el2, container, nextSibling);
      el2 = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el: el2, anchor }) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostRemove(el2);
      el2 = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el2;
    let vnodeHook;
    const { type, props, shapeFlag, transition, dirs } = vnode;
    el2 = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
    if (shapeFlag & 8) {
      hostSetElementText(el2, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(vnode.children, el2, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
    }
    if (dirs) {
      invokeDirectiveHook$1(vnode, null, parentComponent, "created");
    }
    setScopeId(el2, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp$1(key)) {
          hostPatchProp(el2, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if ("value" in props) {
        hostPatchProp(el2, "value", null, props.value);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
      }
    }
    {
      Object.defineProperty(el2, "__vnode", {
        value: vnode,
        enumerable: false
      });
      Object.defineProperty(el2, "__vueParentComponent", {
        value: parentComponent,
        enumerable: false
      });
    }
    if (dirs) {
      invokeDirectiveHook$1(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el2);
    }
    hostInsert(el2, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect$1(() => {
        vnodeHook && invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el2);
        dirs && invokeDirectiveHook$1(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el2, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el2, scopeId);
    }
    if (slotScopeIds) {
      for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
        hostSetScopeId(el2, slotScopeIds[i2]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
        subTree = filterSingleRoot$1(subTree.children) || subTree;
      }
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(el2, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      const child = children[i2] = optimized ? cloneIfMounted$1(children[i2]) : normalizeVNode$1(children[i2]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el2 = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ$1;
    const newProps = n2.props || EMPTY_OBJ$1;
    let vnodeHook;
    parentComponent && toggleRecurse$1(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook$1(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook$1(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse$1(parentComponent, true);
    if (isHmrUpdating$1) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el2, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
      if (parentComponent && parentComponent.type.__hmrId) {
        traverseStaticChildren$1(n1, n2);
      }
    } else if (!optimized) {
      patchChildren(n1, n2, el2, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el2, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el2, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el2, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            const key = propsToUpdate[i2];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el2, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el2, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el2, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect$1(() => {
        vnodeHook && invokeVNodeHook$1(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook$1(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i2 = 0; i2 < newChildren.length; i2++) {
      const oldVNode = oldChildren[i2];
      const newVNode = newChildren[i2];
      const container = oldVNode.el && (oldVNode.type === Fragment$1 || !isSameVNodeType$1(oldVNode, newVNode) || oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : fallbackContainer;
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
    }
  };
  const patchProps = (el2, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ$1) {
        for (const key in oldProps) {
          if (!isReservedProp$1(key) && !(key in newProps)) {
            hostPatchProp(el2, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp$1(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el2, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el2, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (isHmrUpdating$1 || patchFlag & 2048) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && n1.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
        if (parentComponent && parentComponent.type.__hmrId) {
          traverseStaticChildren$1(n1, n2);
        } else if (n2.key != null || parentComponent && n2 === parentComponent.subTree) {
          traverseStaticChildren$1(n1, n2, true);
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance$1(initialVNode, parentComponent, parentSuspense);
    if (instance.type.__hmrId) {
      registerHMR$1(instance);
    }
    {
      pushWarningContext$1(initialVNode);
      startMeasure$1(instance, `mount`);
    }
    if (isKeepAlive$1(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      {
        startMeasure$1(instance, `init`);
      }
      setupComponent$1(instance);
      {
        endMeasure$1(instance, `init`);
      }
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode$1(Comment$1);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
    {
      popWarningContext$1();
      endMeasure$1(instance, `mount`);
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent$1(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        {
          pushWarningContext$1(n2);
        }
        updateComponentPreRender(instance, n2, optimized);
        {
          popWarningContext$1();
        }
        return;
      } else {
        instance.next = n2;
        invalidateJob$1(instance.update);
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el: el2, props } = initialVNode;
        const { bm, m: m2, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper$1(initialVNode);
        toggleRecurse$1(instance, false);
        if (bm) {
          invokeArrayFns$1(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook$1(vnodeHook, parent, initialVNode);
        }
        toggleRecurse$1(instance, true);
        if (el2 && hydrateNode) {
          const hydrateSubTree = () => {
            {
              startMeasure$1(instance, `render`);
            }
            instance.subTree = renderComponentRoot$1(instance);
            {
              endMeasure$1(instance, `render`);
            }
            {
              startMeasure$1(instance, `hydrate`);
            }
            hydrateNode(el2, instance.subTree, instance, parentSuspense, null);
            {
              endMeasure$1(instance, `hydrate`);
            }
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          {
            startMeasure$1(instance, `render`);
          }
          const subTree = instance.subTree = renderComponentRoot$1(instance);
          {
            endMeasure$1(instance, `render`);
          }
          {
            startMeasure$1(instance, `patch`);
          }
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          {
            endMeasure$1(instance, `patch`);
          }
          initialVNode.el = subTree.el;
        }
        if (m2) {
          queuePostRenderEffect$1(m2, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect$1(() => invokeVNodeHook$1(vnodeHook, parent, scopedInitialVNode), parentSuspense);
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper$1(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect$1(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        {
          devtoolsComponentAdded$1(instance);
        }
        initialVNode = container = anchor = null;
      } else {
        let { next, bu: bu2, u: u2, parent, vnode } = instance;
        let originNext = next;
        let vnodeHook;
        {
          pushWarningContext$1(next || instance.vnode);
        }
        toggleRecurse$1(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu2) {
          invokeArrayFns$1(bu2);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook$1(vnodeHook, parent, next, vnode);
        }
        toggleRecurse$1(instance, true);
        {
          startMeasure$1(instance, `render`);
        }
        const nextTree = renderComponentRoot$1(instance);
        {
          endMeasure$1(instance, `render`);
        }
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        {
          startMeasure$1(instance, `patch`);
        }
        patch(
          prevTree,
          nextTree,
          hostParentNode(prevTree.el),
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          isSVG
        );
        {
          endMeasure$1(instance, `patch`);
        }
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl$1(instance, nextTree.el);
        }
        if (u2) {
          queuePostRenderEffect$1(u2, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect$1(() => invokeVNodeHook$1(vnodeHook, parent, next, vnode), parentSuspense);
        }
        {
          devtoolsComponentUpdated$1(instance);
        }
        {
          popWarningContext$1();
        }
      }
    };
    const effect2 = instance.effect = new ReactiveEffect$1(
      componentUpdateFn,
      () => queueJob$1(update),
      instance.scope
    );
    const update = instance.update = () => effect2.run();
    update.id = instance.uid;
    toggleRecurse$1(instance, true);
    {
      effect2.onTrack = instance.rtc ? (e2) => invokeArrayFns$1(instance.rtc, e2) : void 0;
      effect2.onTrigger = instance.rtg ? (e2) => invokeArrayFns$1(instance.rtg, e2) : void 0;
      update.ownerInstance = instance;
    }
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps$1(instance, nextVNode.props, prevProps, optimized);
    updateSlots$1(instance, nextVNode.children, optimized);
    pauseTracking$1();
    flushPreFlushCbs$1();
    resetTracking$1();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR$1;
    c2 = c2 || EMPTY_ARR$1;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i2;
    for (i2 = 0; i2 < commonLength; i2++) {
      const nextChild = c2[i2] = optimized ? cloneIfMounted$1(c2[i2]) : normalizeVNode$1(c2[i2]);
      patch(c1[i2], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i2 = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[i2];
      const n2 = c2[i2] = optimized ? cloneIfMounted$1(c2[i2]) : normalizeVNode$1(c2[i2]);
      if (isSameVNodeType$1(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      i2++;
    }
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted$1(c2[e2]) : normalizeVNode$1(c2[e2]);
      if (isSameVNodeType$1(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i2 > e1) {
      if (i2 <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i2 <= e2) {
          patch(null, c2[i2] = optimized ? cloneIfMounted$1(c2[i2]) : normalizeVNode$1(c2[i2]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          i2++;
        }
      }
    } else if (i2 > e2) {
      while (i2 <= e1) {
        unmount(c1[i2], parentComponent, parentSuspense, true);
        i2++;
      }
    } else {
      const s1 = i2;
      const s2 = i2;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i2 = s2; i2 <= e2; i2++) {
        const nextChild = c2[i2] = optimized ? cloneIfMounted$1(c2[i2]) : normalizeVNode$1(c2[i2]);
        if (nextChild.key != null) {
          if (keyToNewIndexMap.has(nextChild.key)) {
            warn$3(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
          }
          keyToNewIndexMap.set(nextChild.key, i2);
        }
      }
      let j2;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i2 = 0; i2 < toBePatched; i2++)
        newIndexToOldIndexMap[i2] = 0;
      for (i2 = s1; i2 <= e1; i2++) {
        const prevChild = c1[i2];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j2 = s2; j2 <= e2; j2++) {
            if (newIndexToOldIndexMap[j2 - s2] === 0 && isSameVNodeType$1(prevChild, c2[j2])) {
              newIndex = j2;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i2 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence$1(newIndexToOldIndexMap) : EMPTY_ARR$1;
      j2 = increasingNewIndexSequence.length - 1;
      for (i2 = toBePatched - 1; i2 >= 0; i2--) {
        const nextIndex = s2 + i2;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i2] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (moved) {
          if (j2 < 0 || i2 !== increasingNewIndexSequence[j2]) {
            move(nextChild, container, anchor, 2);
          } else {
            j2--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el: el2, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment$1) {
      hostInsert(el2, container, anchor);
      for (let i2 = 0; i2 < children.length; i2++) {
        move(children[i2], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static$1) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el2);
        hostInsert(el2, container, anchor);
        queuePostRenderEffect$1(() => transition.enter(el2), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove3 = () => hostInsert(el2, container, anchor);
        const performLeave = () => {
          leave(el2, () => {
            remove3();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el2, remove3, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el2, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const { type, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
    if (ref2 != null) {
      setRef$1(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper$1(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook$1(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
      } else if (dynamicChildren && (type !== Fragment$1 || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
      } else if (type === Fragment$1 && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect$1(() => {
        vnodeHook && invokeVNodeHook$1(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook$1(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el: el2, anchor, transition } = vnode;
    if (type === Fragment$1) {
      if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
        vnode.children.forEach((child) => {
          if (child.type === Comment$1) {
            hostRemove(child.el);
          } else {
            remove2(child);
          }
        });
      } else {
        removeFragment(el2, anchor);
      }
      return;
    }
    if (type === Static$1) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el2);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el2, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (instance.type.__hmrId) {
      unregisterHMR$1(instance);
    }
    const { bum, scope, update, subTree, um } = instance;
    if (bum) {
      invokeArrayFns$1(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect$1(um, parentSuspense);
    }
    queuePostRenderEffect$1(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    {
      devtoolsComponentRemoved$1(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      unmount(children[i2], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render2 = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPreFlushCbs$1();
    flushPostFlushCbs$1();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate2;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate2, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render: render2,
    hydrate: hydrate2,
    createApp: createAppAPI$1(render2, hydrate2)
  };
}
function toggleRecurse$1({ effect: effect2, update }, allowed) {
  effect2.allowRecurse = update.allowRecurse = allowed;
}
function traverseStaticChildren$1(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$2(ch1) && isArray$2(ch2)) {
    for (let i2 = 0; i2 < ch1.length; i2++) {
      const c1 = ch1[i2];
      let c2 = ch2[i2];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i2] = cloneIfMounted$1(ch2[i2]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren$1(c1, c2);
      }
      if (c2.type === Text$1) {
        c2.el = c1.el;
      }
      if (c2.type === Comment$1 && !c2.el) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence$1(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i2, j2, u2, v2, c2;
  const len = arr.length;
  for (i2 = 0; i2 < len; i2++) {
    const arrI = arr[i2];
    if (arrI !== 0) {
      j2 = result[result.length - 1];
      if (arr[j2] < arrI) {
        p2[i2] = j2;
        result.push(i2);
        continue;
      }
      u2 = 0;
      v2 = result.length - 1;
      while (u2 < v2) {
        c2 = u2 + v2 >> 1;
        if (arr[result[c2]] < arrI) {
          u2 = c2 + 1;
        } else {
          v2 = c2;
        }
      }
      if (arrI < arr[result[u2]]) {
        if (u2 > 0) {
          p2[i2] = result[u2 - 1];
        }
        result[u2] = i2;
      }
    }
  }
  u2 = result.length;
  v2 = result[u2 - 1];
  while (u2-- > 0) {
    result[u2] = v2;
    v2 = p2[v2];
  }
  return result;
}
const isTeleport$1 = (type) => type.__isTeleport;
const Fragment$1 = Symbol("Fragment");
const Text$1 = Symbol("Text");
const Comment$1 = Symbol("Comment");
const Static$1 = Symbol("Static");
const blockStack$1 = [];
let currentBlock$1 = null;
function openBlock$1(disableTracking = false) {
  blockStack$1.push(currentBlock$1 = disableTracking ? null : []);
}
function closeBlock$1() {
  blockStack$1.pop();
  currentBlock$1 = blockStack$1[blockStack$1.length - 1] || null;
}
let isBlockTreeEnabled$1 = 1;
function setBlockTracking$1(value) {
  isBlockTreeEnabled$1 += value;
}
function setupBlock$1(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled$1 > 0 ? currentBlock$1 || EMPTY_ARR$1 : null;
  closeBlock$1();
  if (isBlockTreeEnabled$1 > 0 && currentBlock$1) {
    currentBlock$1.push(vnode);
  }
  return vnode;
}
function createElementBlock$1(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock$1(createBaseVNode$1(type, props, children, patchFlag, dynamicProps, shapeFlag, true));
}
function createBlock$1(type, props, children, patchFlag, dynamicProps) {
  return setupBlock$1(createVNode$1(type, props, children, patchFlag, dynamicProps, true));
}
function isVNode$1(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType$1(n1, n2) {
  if (n2.shapeFlag & 6 && hmrDirtyComponents$1.has(n2.type)) {
    n1.shapeFlag &= ~256;
    n2.shapeFlag &= ~512;
    return false;
  }
  return n1.type === n2.type && n1.key === n2.key;
}
const createVNodeWithArgsTransform$1 = (...args) => {
  return _createVNode$1(...args);
};
const InternalObjectKey$1 = `__vInternal`;
const normalizeKey$1 = ({ key }) => key != null ? key : null;
const normalizeRef$1 = ({ ref: ref2, ref_key, ref_for }) => {
  return ref2 != null ? isString$2(ref2) || isRef$1(ref2) || isFunction$2(ref2) ? { i: currentRenderingInstance$1, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
};
function createBaseVNode$1(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment$1 ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey$1(props),
    ref: props && normalizeRef$1(props),
    scopeId: currentScopeId$1,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance$1
  };
  if (needFullChildrenNormalization) {
    normalizeChildren$1(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$2(children) ? 8 : 16;
  }
  if (vnode.key !== vnode.key) {
    warn$3(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
  }
  if (isBlockTreeEnabled$1 > 0 && !isBlockNode && currentBlock$1 && (vnode.patchFlag > 0 || shapeFlag & 6) && vnode.patchFlag !== 32) {
    currentBlock$1.push(vnode);
  }
  return vnode;
}
const createVNode$1 = createVNodeWithArgsTransform$1;
function _createVNode$1(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT$1) {
    if (!type) {
      warn$3(`Invalid vnode type when creating vnode: ${type}.`);
    }
    type = Comment$1;
  }
  if (isVNode$1(type)) {
    const cloned = cloneVNode$1(type, props, true);
    if (children) {
      normalizeChildren$1(cloned, children);
    }
    if (isBlockTreeEnabled$1 > 0 && !isBlockNode && currentBlock$1) {
      if (cloned.shapeFlag & 6) {
        currentBlock$1[currentBlock$1.indexOf(type)] = cloned;
      } else {
        currentBlock$1.push(cloned);
      }
    }
    cloned.patchFlag |= -2;
    return cloned;
  }
  if (isClassComponent$1(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps$1(props);
    let { class: klass, style: style2 } = props;
    if (klass && !isString$2(klass)) {
      props.class = normalizeClass$1(klass);
    }
    if (isObject$1(style2)) {
      if (isProxy$1(style2) && !isArray$2(style2)) {
        style2 = extend$1({}, style2);
      }
      props.style = normalizeStyle$1(style2);
    }
  }
  const shapeFlag = isString$2(type) ? 1 : isSuspense$1(type) ? 128 : isTeleport$1(type) ? 64 : isObject$1(type) ? 4 : isFunction$2(type) ? 2 : 0;
  if (shapeFlag & 4 && isProxy$1(type)) {
    type = toRaw$1(type);
    warn$3(`Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`, `
Component that was made reactive: `, type);
  }
  return createBaseVNode$1(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps$1(props) {
  if (!props)
    return null;
  return isProxy$1(props) || InternalObjectKey$1 in props ? extend$1({}, props) : props;
}
function cloneVNode$1(vnode, extraProps, mergeRef = false) {
  const { props, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps$1(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey$1(mergedProps),
    ref: extraProps && extraProps.ref ? mergeRef && ref2 ? isArray$2(ref2) ? ref2.concat(normalizeRef$1(extraProps)) : [ref2, normalizeRef$1(extraProps)] : normalizeRef$1(extraProps) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children: patchFlag === -1 && isArray$2(children) ? children.map(deepCloneVNode$1) : children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    patchFlag: extraProps && vnode.type !== Fragment$1 ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode$1(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode$1(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  return cloned;
}
function deepCloneVNode$1(vnode) {
  const cloned = cloneVNode$1(vnode);
  if (isArray$2(vnode.children)) {
    cloned.children = vnode.children.map(deepCloneVNode$1);
  }
  return cloned;
}
function createTextVNode$1(text = " ", flag = 0) {
  return createVNode$1(Text$1, null, text, flag);
}
function createStaticVNode$1(content, numberOfNodes) {
  const vnode = createVNode$1(Static$1, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode$1(text = "", asBlock = false) {
  return asBlock ? (openBlock$1(), createBlock$1(Comment$1, null, text)) : createVNode$1(Comment$1, null, text);
}
function normalizeVNode$1(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode$1(Comment$1);
  } else if (isArray$2(child)) {
    return createVNode$1(
      Fragment$1,
      null,
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted$1(child);
  } else {
    return createVNode$1(Text$1, null, String(child));
  }
}
function cloneIfMounted$1(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode$1(child);
}
function normalizeChildren$1(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$2(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren$1(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey$1 in children)) {
        children._ctx = currentRenderingInstance$1;
      } else if (slotFlag === 3 && currentRenderingInstance$1) {
        if (currentRenderingInstance$1.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$2(children)) {
    children = { default: children, _ctx: currentRenderingInstance$1 };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode$1(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps$1(...args) {
  const ret = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMerge = args[i2];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass$1([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle$1([ret.style, toMerge.style]);
      } else if (isOn$1(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$2(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook$1(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling$1(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext$1 = createAppContext$1();
let uid$3 = 0;
function createComponentInstance$1(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext$1;
  const instance = {
    uid: uid$3++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    next: null,
    subTree: null,
    effect: null,
    update: null,
    scope: new EffectScope$1(true),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    components: null,
    directives: null,
    propsOptions: normalizePropsOptions$1(type, appContext),
    emitsOptions: normalizeEmitsOptions$1(type, appContext),
    emit: null,
    emitted: null,
    propsDefaults: EMPTY_OBJ$1,
    inheritAttrs: type.inheritAttrs,
    ctx: EMPTY_OBJ$1,
    data: EMPTY_OBJ$1,
    props: EMPTY_OBJ$1,
    attrs: EMPTY_OBJ$1,
    slots: EMPTY_OBJ$1,
    refs: EMPTY_OBJ$1,
    setupState: EMPTY_OBJ$1,
    setupContext: null,
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = createDevRenderContext$1(instance);
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit$2.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance$1 = null;
const getCurrentInstance$1 = () => currentInstance$1 || currentRenderingInstance$1;
const setCurrentInstance$1 = (instance) => {
  currentInstance$1 = instance;
  instance.scope.on();
};
const unsetCurrentInstance$1 = () => {
  currentInstance$1 && currentInstance$1.scope.off();
  currentInstance$1 = null;
};
const isBuiltInTag$1 = /* @__PURE__ */ makeMap$1("slot,component");
function validateComponentName$1(name, config2) {
  const appIsNativeTag = config2.isNativeTag || NO$1;
  if (isBuiltInTag$1(name) || appIsNativeTag(name)) {
    warn$3("Do not use built-in or reserved HTML elements as component id: " + name);
  }
}
function isStatefulComponent$1(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup$1 = false;
function setupComponent$1(instance, isSSR = false) {
  isInSSRComponentSetup$1 = isSSR;
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent$1(instance);
  initProps$1(instance, props, isStateful, isSSR);
  initSlots$1(instance, children);
  const setupResult = isStateful ? setupStatefulComponent$1(instance, isSSR) : void 0;
  isInSSRComponentSetup$1 = false;
  return setupResult;
}
function setupStatefulComponent$1(instance, isSSR) {
  var _a2;
  const Component = instance.type;
  {
    if (Component.name) {
      validateComponentName$1(Component.name, instance.appContext.config);
    }
    if (Component.components) {
      const names = Object.keys(Component.components);
      for (let i2 = 0; i2 < names.length; i2++) {
        validateComponentName$1(names[i2], instance.appContext.config);
      }
    }
    if (Component.directives) {
      const names = Object.keys(Component.directives);
      for (let i2 = 0; i2 < names.length; i2++) {
        validateDirectiveName$1(names[i2]);
      }
    }
    if (Component.compilerOptions && isRuntimeOnly$1()) {
      warn$3(`"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`);
    }
  }
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw$1(new Proxy(instance.ctx, PublicInstanceProxyHandlers$1));
  {
    exposePropsOnRenderContext$1(instance);
  }
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext$1(instance) : null;
    setCurrentInstance$1(instance);
    pauseTracking$1();
    const setupResult = callWithErrorHandling$1(setup, instance, 0, [shallowReadonly$1(instance.props), setupContext]);
    resetTracking$1();
    unsetCurrentInstance$1();
    if (isPromise$1(setupResult)) {
      setupResult.then(unsetCurrentInstance$1, unsetCurrentInstance$1);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult$1(instance, resolvedResult, isSSR);
        }).catch((e2) => {
          handleError$1(e2, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
        if (!instance.suspense) {
          const name = (_a2 = Component.name) !== null && _a2 !== void 0 ? _a2 : "Anonymous";
          warn$3(`Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`);
        }
      }
    } else {
      handleSetupResult$1(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup$1(instance, isSSR);
  }
}
function handleSetupResult$1(instance, setupResult, isSSR) {
  if (isFunction$2(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$1(setupResult)) {
    if (isVNode$1(setupResult)) {
      warn$3(`setup() should not return VNodes directly - return a render function instead.`);
    }
    {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs$1(setupResult);
    {
      exposeSetupStateOnRenderContext$1(instance);
    }
  } else if (setupResult !== void 0) {
    warn$3(`setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`);
  }
  finishComponentSetup$1(instance, isSSR);
}
let compile$1$1;
const isRuntimeOnly$1 = () => !compile$1$1;
function finishComponentSetup$1(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile$1$1 && !Component.render) {
      const template = Component.template || resolveMergedOptions$1(instance).template;
      if (template) {
        {
          startMeasure$1(instance, `compile`);
        }
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend$1(extend$1({
          isCustomElement,
          delimiters
        }, compilerOptions), componentCompilerOptions);
        Component.render = compile$1$1(template, finalCompilerOptions);
        {
          endMeasure$1(instance, `compile`);
        }
      }
    }
    instance.render = Component.render || NOOP$1;
  }
  {
    setCurrentInstance$1(instance);
    pauseTracking$1();
    applyOptions$1(instance);
    resetTracking$1();
    unsetCurrentInstance$1();
  }
  if (!Component.render && instance.render === NOOP$1 && !isSSR) {
    if (Component.template) {
      warn$3(`Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
    } else {
      warn$3(`Component is missing template or render function.`);
    }
  }
}
function createAttrsProxy$1(instance) {
  return new Proxy(
    instance.attrs,
    {
      get(target, key) {
        markAttrsAccessed$1();
        track$1(instance, "get", "$attrs");
        return target[key];
      },
      set() {
        warn$3(`setupContext.attrs is readonly.`);
        return false;
      },
      deleteProperty() {
        warn$3(`setupContext.attrs is readonly.`);
        return false;
      }
    }
  );
}
function createSetupContext$1(instance) {
  const expose = (exposed) => {
    {
      if (instance.exposed) {
        warn$3(`expose() should be called only once per setup().`);
      }
      if (exposed != null) {
        let exposedType = typeof exposed;
        if (exposedType === "object") {
          if (isArray$2(exposed)) {
            exposedType = "array";
          } else if (isRef$1(exposed)) {
            exposedType = "ref";
          }
        }
        if (exposedType !== "object") {
          warn$3(`expose() should be passed a plain object, received ${exposedType}.`);
        }
      }
    }
    instance.exposed = exposed || {};
  };
  let attrs;
  {
    return Object.freeze({
      get attrs() {
        return attrs || (attrs = createAttrsProxy$1(instance));
      },
      get slots() {
        return shallowReadonly$1(instance.slots);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      },
      expose
    });
  }
}
function getExposeProxy$1(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs$1(markRaw$1(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap$1) {
          return publicPropertiesMap$1[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap$1;
      }
    }));
  }
}
const classifyRE$1 = /(?:^|[-_])(\w)/g;
const classify$1 = (str) => str.replace(classifyRE$1, (c2) => c2.toUpperCase()).replace(/[-_]/g, "");
function getComponentName$1(Component, includeInferred = true) {
  return isFunction$2(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName$1(instance, Component, isRoot = false) {
  let name = getComponentName$1(Component);
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify$1(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent$1(value) {
  return isFunction$2(value) && "__vccOpts" in value;
}
const computed$2 = (getterOrOptions, debugOptions) => {
  return computed$1$1(getterOrOptions, debugOptions, isInSSRComponentSetup$1);
};
function h$2(type, propsOrChildren, children) {
  const l2 = arguments.length;
  if (l2 === 2) {
    if (isObject$1(propsOrChildren) && !isArray$2(propsOrChildren)) {
      if (isVNode$1(propsOrChildren)) {
        return createVNode$1(type, null, [propsOrChildren]);
      }
      return createVNode$1(type, propsOrChildren);
    } else {
      return createVNode$1(type, null, propsOrChildren);
    }
  } else {
    if (l2 > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l2 === 3 && isVNode$1(children)) {
      children = [children];
    }
    return createVNode$1(type, propsOrChildren, children);
  }
}
const ssrContextKey$1 = Symbol(`ssrContext`);
const useSSRContext$1 = () => {
  {
    const ctx = inject$1(ssrContextKey$1);
    if (!ctx) {
      warn$3(`Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`);
    }
    return ctx;
  }
};
function isShallow$2(value) {
  return !!(value && value["__v_isShallow"]);
}
function initCustomFormatter$1() {
  if (typeof window === "undefined") {
    return;
  }
  const vueStyle = { style: "color:#3ba776" };
  const numberStyle = { style: "color:#0b1bc9" };
  const stringStyle = { style: "color:#b62e24" };
  const keywordStyle = { style: "color:#9d288c" };
  const formatter = {
    header(obj) {
      if (!isObject$1(obj)) {
        return null;
      }
      if (obj.__isVue) {
        return ["div", vueStyle, `VueInstance`];
      } else if (isRef$1(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, genRefFlag(obj)],
          "<",
          formatValue(obj.value),
          `>`
        ];
      } else if (isReactive$1(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow$2(obj) ? "ShallowReactive" : "Reactive"],
          "<",
          formatValue(obj),
          `>${isReadonly$1(obj) ? ` (readonly)` : ``}`
        ];
      } else if (isReadonly$1(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow$2(obj) ? "ShallowReadonly" : "Readonly"],
          "<",
          formatValue(obj),
          ">"
        ];
      }
      return null;
    },
    hasBody(obj) {
      return obj && obj.__isVue;
    },
    body(obj) {
      if (obj && obj.__isVue) {
        return [
          "div",
          {},
          ...formatInstance(obj.$)
        ];
      }
    }
  };
  function formatInstance(instance) {
    const blocks = [];
    if (instance.type.props && instance.props) {
      blocks.push(createInstanceBlock("props", toRaw$1(instance.props)));
    }
    if (instance.setupState !== EMPTY_OBJ$1) {
      blocks.push(createInstanceBlock("setup", instance.setupState));
    }
    if (instance.data !== EMPTY_OBJ$1) {
      blocks.push(createInstanceBlock("data", toRaw$1(instance.data)));
    }
    const computed2 = extractKeys(instance, "computed");
    if (computed2) {
      blocks.push(createInstanceBlock("computed", computed2));
    }
    const injected = extractKeys(instance, "inject");
    if (injected) {
      blocks.push(createInstanceBlock("injected", injected));
    }
    blocks.push([
      "div",
      {},
      [
        "span",
        {
          style: keywordStyle.style + ";opacity:0.66"
        },
        "$ (internal): "
      ],
      ["object", { object: instance }]
    ]);
    return blocks;
  }
  function createInstanceBlock(type, target) {
    target = extend$1({}, target);
    if (!Object.keys(target).length) {
      return ["span", {}];
    }
    return [
      "div",
      { style: "line-height:1.25em;margin-bottom:0.6em" },
      [
        "div",
        {
          style: "color:#476582"
        },
        type
      ],
      [
        "div",
        {
          style: "padding-left:1.25em"
        },
        ...Object.keys(target).map((key) => {
          return [
            "div",
            {},
            ["span", keywordStyle, key + ": "],
            formatValue(target[key], false)
          ];
        })
      ]
    ];
  }
  function formatValue(v2, asRaw = true) {
    if (typeof v2 === "number") {
      return ["span", numberStyle, v2];
    } else if (typeof v2 === "string") {
      return ["span", stringStyle, JSON.stringify(v2)];
    } else if (typeof v2 === "boolean") {
      return ["span", keywordStyle, v2];
    } else if (isObject$1(v2)) {
      return ["object", { object: asRaw ? toRaw$1(v2) : v2 }];
    } else {
      return ["span", stringStyle, String(v2)];
    }
  }
  function extractKeys(instance, type) {
    const Comp = instance.type;
    if (isFunction$2(Comp)) {
      return;
    }
    const extracted = {};
    for (const key in instance.ctx) {
      if (isKeyOfType(Comp, key, type)) {
        extracted[key] = instance.ctx[key];
      }
    }
    return extracted;
  }
  function isKeyOfType(Comp, key, type) {
    const opts = Comp[type];
    if (isArray$2(opts) && opts.includes(key) || isObject$1(opts) && key in opts) {
      return true;
    }
    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
      return true;
    }
    if (Comp.mixins && Comp.mixins.some((m2) => isKeyOfType(m2, key, type))) {
      return true;
    }
  }
  function genRefFlag(v2) {
    if (isShallow$2(v2)) {
      return `ShallowRef`;
    }
    if (v2.effect) {
      return `ComputedRef`;
    }
    return `Ref`;
  }
  if (window.devtoolsFormatters) {
    window.devtoolsFormatters.push(formatter);
  } else {
    window.devtoolsFormatters = [formatter];
  }
}
const version$2 = "3.2.47";
const svgNS$1 = "http://www.w3.org/2000/svg";
const doc$1 = typeof document !== "undefined" ? document : null;
const templateContainer$1 = doc$1 && /* @__PURE__ */ doc$1.createElement("template");
const nodeOps$1 = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is2, props) => {
    const el2 = isSVG ? doc$1.createElementNS(svgNS$1, tag) : doc$1.createElement(tag, is2 ? { is: is2 } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el2.setAttribute("multiple", props.multiple);
    }
    return el2;
  },
  createText: (text) => doc$1.createTextNode(text),
  createComment: (text) => doc$1.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el2, text) => {
    el2.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc$1.querySelector(selector),
  setScopeId(el2, id2) {
    el2.setAttribute(id2, "");
  },
  insertStaticContent(content, parent, anchor, isSVG, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling))
          break;
      }
    } else {
      templateContainer$1.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      const template = templateContainer$1.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      before ? before.nextSibling : parent.firstChild,
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
function patchClass$1(el2, value, isSVG) {
  const transitionClasses = el2._vtc;
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el2.removeAttribute("class");
  } else if (isSVG) {
    el2.setAttribute("class", value);
  } else {
    el2.className = value;
  }
}
function patchStyle$1(el2, prev, next) {
  const style2 = el2.style;
  const isCssString = isString$2(next);
  if (next && !isCssString) {
    if (prev && !isString$2(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle$1(style2, key, "");
        }
      }
    }
    for (const key in next) {
      setStyle$1(style2, key, next[key]);
    }
  } else {
    const currentDisplay = style2.display;
    if (isCssString) {
      if (prev !== next) {
        style2.cssText = next;
      }
    } else if (prev) {
      el2.removeAttribute("style");
    }
    if ("_vod" in el2) {
      style2.display = currentDisplay;
    }
  }
}
const semicolonRE$1 = /[^\\];\s*$/;
const importantRE$1 = /\s*!important$/;
function setStyle$1(style2, name, val) {
  if (isArray$2(val)) {
    val.forEach((v2) => setStyle$1(style2, name, v2));
  } else {
    if (val == null)
      val = "";
    {
      if (semicolonRE$1.test(val)) {
        warn$3(`Unexpected semicolon at the end of '${name}' style value: '${val}'`);
      }
    }
    if (name.startsWith("--")) {
      style2.setProperty(name, val);
    } else {
      const prefixed = autoPrefix$1(style2, name);
      if (importantRE$1.test(val)) {
        style2.setProperty(hyphenate$1(prefixed), val.replace(importantRE$1, ""), "important");
      } else {
        style2[prefixed] = val;
      }
    }
  }
}
const prefixes$1 = ["Webkit", "Moz", "ms"];
const prefixCache$1 = {};
function autoPrefix$1(style2, rawName) {
  const cached = prefixCache$1[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize$1(rawName);
  if (name !== "filter" && name in style2) {
    return prefixCache$1[rawName] = name;
  }
  name = capitalize$1(name);
  for (let i2 = 0; i2 < prefixes$1.length; i2++) {
    const prefixed = prefixes$1[i2] + name;
    if (prefixed in style2) {
      return prefixCache$1[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS$1 = "http://www.w3.org/1999/xlink";
function patchAttr$1(el2, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el2.removeAttributeNS(xlinkNS$1, key.slice(6, key.length));
    } else {
      el2.setAttributeNS(xlinkNS$1, key, value);
    }
  } else {
    const isBoolean2 = isSpecialBooleanAttr$1(key);
    if (value == null || isBoolean2 && !includeBooleanAttr$1(value)) {
      el2.removeAttribute(key);
    } else {
      el2.setAttribute(key, isBoolean2 ? "" : value);
    }
  }
}
function patchDOMProp$1(el2, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el2[key] = value == null ? "" : value;
    return;
  }
  if (key === "value" && el2.tagName !== "PROGRESS" && !el2.tagName.includes("-")) {
    el2._value = value;
    const newValue = value == null ? "" : value;
    if (el2.value !== newValue || el2.tagName === "OPTION") {
      el2.value = newValue;
    }
    if (value == null) {
      el2.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el2[key];
    if (type === "boolean") {
      value = includeBooleanAttr$1(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el2[key] = value;
  } catch (e2) {
    if (!needRemove) {
      warn$3(`Failed setting prop "${key}" on <${el2.tagName.toLowerCase()}>: value ${value} is invalid.`, e2);
    }
  }
  needRemove && el2.removeAttribute(key);
}
function addEventListener$1(el2, event, handler, options) {
  el2.addEventListener(event, handler, options);
}
function removeEventListener$1(el2, event, handler, options) {
  el2.removeEventListener(event, handler, options);
}
function patchEvent$1(el2, rawName, prevValue, nextValue, instance = null) {
  const invokers = el2._vei || (el2._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName$1(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker$1(nextValue, instance);
      addEventListener$1(el2, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener$1(el2, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE$1 = /(?:Once|Passive|Capture)$/;
function parseName$1(name) {
  let options;
  if (optionsModifierRE$1.test(name)) {
    options = {};
    let m2;
    while (m2 = name.match(optionsModifierRE$1)) {
      name = name.slice(0, name.length - m2[0].length);
      options[m2[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate$1(name.slice(2));
  return [event, options];
}
let cachedNow$1 = 0;
const p$1 = /* @__PURE__ */ Promise.resolve();
const getNow$1 = () => cachedNow$1 || (p$1.then(() => cachedNow$1 = 0), cachedNow$1 = Date.now());
function createInvoker$1(initialValue, instance) {
  const invoker = (e2) => {
    if (!e2._vts) {
      e2._vts = Date.now();
    } else if (e2._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling$1(patchStopImmediatePropagation$1(e2, invoker.value), instance, 5, [e2]);
  };
  invoker.value = initialValue;
  invoker.attached = getNow$1();
  return invoker;
}
function patchStopImmediatePropagation$1(e2, value) {
  if (isArray$2(value)) {
    const originalStop = e2.stopImmediatePropagation;
    e2.stopImmediatePropagation = () => {
      originalStop.call(e2);
      e2._stopped = true;
    };
    return value.map((fn2) => (e3) => !e3._stopped && fn2 && fn2(e3));
  } else {
    return value;
  }
}
const nativeOnRE$1 = /^on[a-z]/;
const patchProp$1 = (el2, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass$1(el2, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle$1(el2, prevValue, nextValue);
  } else if (isOn$1(key)) {
    if (!isModelListener$1(key)) {
      patchEvent$1(el2, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp$1(el2, key, nextValue, isSVG)) {
    patchDOMProp$1(el2, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
  } else {
    if (key === "true-value") {
      el2._trueValue = nextValue;
    } else if (key === "false-value") {
      el2._falseValue = nextValue;
    }
    patchAttr$1(el2, key, nextValue, isSVG);
  }
};
function shouldSetAsProp$1(el2, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el2 && nativeOnRE$1.test(key) && isFunction$2(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el2.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el2.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE$1.test(key) && isString$2(value)) {
    return false;
  }
  return key in el2;
}
function useCssVars$1(getter) {
  const instance = getCurrentInstance$1();
  if (!instance) {
    warn$3(`useCssVars is called without current active component instance.`);
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)).forEach((node) => setVarsOnNode$1(node, vars));
  };
  const setVars = () => {
    const vars = getter(instance.proxy);
    setVarsOnVNode$1(instance.subTree, vars);
    updateTeleports(vars);
  };
  watchPostEffect$1(setVars);
  onMounted$1(() => {
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted$1(() => ob.disconnect());
  });
}
function setVarsOnVNode$1(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode$1(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode$1(vnode.el, vars);
  } else if (vnode.type === Fragment$1) {
    vnode.children.forEach((c2) => setVarsOnVNode$1(c2, vars));
  } else if (vnode.type === Static$1) {
    let { el: el2, anchor } = vnode;
    while (el2) {
      setVarsOnNode$1(el2, vars);
      if (el2 === anchor)
        break;
      el2 = el2.nextSibling;
    }
  }
}
function setVarsOnNode$1(el2, vars) {
  if (el2.nodeType === 1) {
    const style2 = el2.style;
    for (const key in vars) {
      style2.setProperty(`--${key}`, vars[key]);
    }
  }
}
const TRANSITION$1 = "transition";
const ANIMATION$1 = "animation";
const Transition$1 = (props, { slots }) => h$2(BaseTransition$1, resolveTransitionProps$1(props), slots);
Transition$1.displayName = "Transition";
const DOMTransitionPropsValidators$1 = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators$1 = Transition$1.props = /* @__PURE__ */ extend$1({}, BaseTransition$1.props, DOMTransitionPropsValidators$1);
const callHook$2 = (hook, args = []) => {
  if (isArray$2(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback$1 = (hook) => {
  return hook ? isArray$2(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps$1(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators$1)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const { name = "v", type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;
  const durations = normalizeDuration$1(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
  const finishEnter = (el2, isAppear, done) => {
    removeTransitionClass$1(el2, isAppear ? appearToClass : enterToClass);
    removeTransitionClass$1(el2, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el2, done) => {
    el2._isLeaving = false;
    removeTransitionClass$1(el2, leaveFromClass);
    removeTransitionClass$1(el2, leaveToClass);
    removeTransitionClass$1(el2, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el2, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el2, isAppear, done);
      callHook$2(hook, [el2, resolve2]);
      nextFrame$2(() => {
        removeTransitionClass$1(el2, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass$1(el2, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback$1(hook)) {
          whenTransitionEnds$1(el2, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend$1(baseProps, {
    onBeforeEnter(el2) {
      callHook$2(onBeforeEnter, [el2]);
      addTransitionClass$1(el2, enterFromClass);
      addTransitionClass$1(el2, enterActiveClass);
    },
    onBeforeAppear(el2) {
      callHook$2(onBeforeAppear, [el2]);
      addTransitionClass$1(el2, appearFromClass);
      addTransitionClass$1(el2, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el2, done) {
      el2._isLeaving = true;
      const resolve2 = () => finishLeave(el2, done);
      addTransitionClass$1(el2, leaveFromClass);
      forceReflow$1();
      addTransitionClass$1(el2, leaveActiveClass);
      nextFrame$2(() => {
        if (!el2._isLeaving) {
          return;
        }
        removeTransitionClass$1(el2, leaveFromClass);
        addTransitionClass$1(el2, leaveToClass);
        if (!hasExplicitCallback$1(onLeave)) {
          whenTransitionEnds$1(el2, type, leaveDuration, resolve2);
        }
      });
      callHook$2(onLeave, [el2, resolve2]);
    },
    onEnterCancelled(el2) {
      finishEnter(el2, false);
      callHook$2(onEnterCancelled, [el2]);
    },
    onAppearCancelled(el2) {
      finishEnter(el2, true);
      callHook$2(onAppearCancelled, [el2]);
    },
    onLeaveCancelled(el2) {
      finishLeave(el2);
      callHook$2(onLeaveCancelled, [el2]);
    }
  });
}
function normalizeDuration$1(duration) {
  if (duration == null) {
    return null;
  } else if (isObject$1(duration)) {
    return [NumberOf$1(duration.enter), NumberOf$1(duration.leave)];
  } else {
    const n2 = NumberOf$1(duration);
    return [n2, n2];
  }
}
function NumberOf$1(val) {
  const res = toNumber$1(val);
  {
    assertNumber$1(res, "<transition> explicit duration");
  }
  return res;
}
function addTransitionClass$1(el2, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el2.classList.add(c2));
  (el2._vtc || (el2._vtc = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass$1(el2, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el2.classList.remove(c2));
  const { _vtc } = el2;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el2._vtc = void 0;
    }
  }
}
function nextFrame$2(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId$1 = 0;
function whenTransitionEnds$1(el2, expectedType, explicitTimeout, resolve2) {
  const id2 = el2._endId = ++endId$1;
  const resolveIfNotStale = () => {
    if (id2 === el2._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo$1(el2, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el2.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e2) => {
    if (e2.target === el2 && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el2.addEventListener(endEvent, onEnd);
}
function getTransitionInfo$1(el2, expectedType) {
  const styles = window.getComputedStyle(el2);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION$1}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION$1}Duration`);
  const transitionTimeout = getTimeout$1(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION$1}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION$1}Duration`);
  const animationTimeout = getTimeout$1(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION$1) {
    if (transitionTimeout > 0) {
      type = TRANSITION$1;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION$1) {
    if (animationTimeout > 0) {
      type = ANIMATION$1;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION$1 : ANIMATION$1 : null;
    propCount = type ? type === TRANSITION$1 ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION$1 && /\b(transform|all)(,|$)/.test(getStyleProperties(`${TRANSITION$1}Property`).toString());
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout$1(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d2, i2) => toMs$1(d2) + toMs$1(delays[i2])));
}
function toMs$1(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow$1() {
  return document.body.offsetHeight;
}
const positionMap$1 = /* @__PURE__ */ new WeakMap();
const newPositionMap$1 = /* @__PURE__ */ new WeakMap();
const TransitionGroupImpl$1 = {
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend$1({}, TransitionPropsValidators$1, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = getCurrentInstance$1();
    const state = useTransitionState$1();
    let prevChildren;
    let children;
    onUpdated$1(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform$1(prevChildren[0].el, instance.vnode.el, moveClass)) {
        return;
      }
      prevChildren.forEach(callPendingCbs$1);
      prevChildren.forEach(recordPosition$1);
      const movedChildren = prevChildren.filter(applyTranslation$1);
      forceReflow$1();
      movedChildren.forEach((c2) => {
        const el2 = c2.el;
        const style2 = el2.style;
        addTransitionClass$1(el2, moveClass);
        style2.transform = style2.webkitTransform = style2.transitionDuration = "";
        const cb = el2._moveCb = (e2) => {
          if (e2 && e2.target !== el2) {
            return;
          }
          if (!e2 || /transform$/.test(e2.propertyName)) {
            el2.removeEventListener("transitionend", cb);
            el2._moveCb = null;
            removeTransitionClass$1(el2, moveClass);
          }
        };
        el2.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw$1(props);
      const cssTransitionProps = resolveTransitionProps$1(rawProps);
      let tag = rawProps.tag || Fragment$1;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren$1(slots.default()) : [];
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        if (child.key != null) {
          setTransitionHooks$1(child, resolveTransitionHooks$1(child, cssTransitionProps, state, instance));
        } else {
          warn$3(`<TransitionGroup> children must be keyed.`);
        }
      }
      if (prevChildren) {
        for (let i2 = 0; i2 < prevChildren.length; i2++) {
          const child = prevChildren[i2];
          setTransitionHooks$1(child, resolveTransitionHooks$1(child, cssTransitionProps, state, instance));
          positionMap$1.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode$1(tag, null, children);
    };
  }
};
const removeMode$1 = (props) => delete props.mode;
/* @__PURE__ */ removeMode$1(TransitionGroupImpl$1.props);
function callPendingCbs$1(c2) {
  const el2 = c2.el;
  if (el2._moveCb) {
    el2._moveCb();
  }
  if (el2._enterCb) {
    el2._enterCb();
  }
}
function recordPosition$1(c2) {
  newPositionMap$1.set(c2, c2.el.getBoundingClientRect());
}
function applyTranslation$1(c2) {
  const oldPos = positionMap$1.get(c2);
  const newPos = newPositionMap$1.get(c2);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s = c2.el.style;
    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
    s.transitionDuration = "0s";
    return c2;
  }
}
function hasCSSTransform$1(el2, root, moveClass) {
  const clone2 = el2.cloneNode();
  if (el2._vtc) {
    el2._vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c2) => c2 && clone2.classList.remove(c2));
    });
  }
  moveClass.split(/\s+/).forEach((c2) => c2 && clone2.classList.add(c2));
  clone2.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone2);
  const { hasTransform } = getTransitionInfo$1(clone2);
  container.removeChild(clone2);
  return hasTransform;
}
const getModelAssigner$1 = (vnode) => {
  const fn2 = vnode.props["onUpdate:modelValue"] || false;
  return isArray$2(fn2) ? (value) => invokeArrayFns$1(fn2, value) : fn2;
};
function onCompositionStart$1(e2) {
  e2.target.composing = true;
}
function onCompositionEnd$1(e2) {
  const target = e2.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const vModelText$1 = {
  created(el2, { modifiers: { lazy, trim, number } }, vnode) {
    el2._assign = getModelAssigner$1(vnode);
    const castToNumber = number || vnode.props && vnode.props.type === "number";
    addEventListener$1(el2, lazy ? "change" : "input", (e2) => {
      if (e2.target.composing)
        return;
      let domValue = el2.value;
      if (trim) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber$1(domValue);
      }
      el2._assign(domValue);
    });
    if (trim) {
      addEventListener$1(el2, "change", () => {
        el2.value = el2.value.trim();
      });
    }
    if (!lazy) {
      addEventListener$1(el2, "compositionstart", onCompositionStart$1);
      addEventListener$1(el2, "compositionend", onCompositionEnd$1);
      addEventListener$1(el2, "change", onCompositionEnd$1);
    }
  },
  mounted(el2, { value }) {
    el2.value = value == null ? "" : value;
  },
  beforeUpdate(el2, { value, modifiers: { lazy, trim, number } }, vnode) {
    el2._assign = getModelAssigner$1(vnode);
    if (el2.composing)
      return;
    if (document.activeElement === el2 && el2.type !== "range") {
      if (lazy) {
        return;
      }
      if (trim && el2.value.trim() === value) {
        return;
      }
      if ((number || el2.type === "number") && looseToNumber$1(el2.value) === value) {
        return;
      }
    }
    const newValue = value == null ? "" : value;
    if (el2.value !== newValue) {
      el2.value = newValue;
    }
  }
};
const systemModifiers$1 = ["ctrl", "shift", "alt", "meta"];
const modifierGuards$1 = {
  stop: (e2) => e2.stopPropagation(),
  prevent: (e2) => e2.preventDefault(),
  self: (e2) => e2.target !== e2.currentTarget,
  ctrl: (e2) => !e2.ctrlKey,
  shift: (e2) => !e2.shiftKey,
  alt: (e2) => !e2.altKey,
  meta: (e2) => !e2.metaKey,
  left: (e2) => "button" in e2 && e2.button !== 0,
  middle: (e2) => "button" in e2 && e2.button !== 1,
  right: (e2) => "button" in e2 && e2.button !== 2,
  exact: (e2, modifiers) => systemModifiers$1.some((m2) => e2[`${m2}Key`] && !modifiers.includes(m2))
};
const withModifiers$1 = (fn2, modifiers) => {
  return (event, ...args) => {
    for (let i2 = 0; i2 < modifiers.length; i2++) {
      const guard = modifierGuards$1[modifiers[i2]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn2(event, ...args);
  };
};
const keyNames$1 = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys$1 = (fn2, modifiers) => {
  return (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate$1(event.key);
    if (modifiers.some((k2) => k2 === eventKey || keyNames$1[k2] === eventKey)) {
      return fn2(event);
    }
  };
};
const vShow$1 = {
  beforeMount(el2, { value }, { transition }) {
    el2._vod = el2.style.display === "none" ? "" : el2.style.display;
    if (transition && value) {
      transition.beforeEnter(el2);
    } else {
      setDisplay$1(el2, value);
    }
  },
  mounted(el2, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el2);
    }
  },
  updated(el2, { value, oldValue }, { transition }) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el2);
        setDisplay$1(el2, true);
        transition.enter(el2);
      } else {
        transition.leave(el2, () => {
          setDisplay$1(el2, false);
        });
      }
    } else {
      setDisplay$1(el2, value);
    }
  },
  beforeUnmount(el2, { value }) {
    setDisplay$1(el2, value);
  }
};
function setDisplay$1(el2, value) {
  el2.style.display = value ? el2._vod : "none";
}
const rendererOptions$1 = /* @__PURE__ */ extend$1({ patchProp: patchProp$1 }, nodeOps$1);
let renderer$1;
function ensureRenderer$1() {
  return renderer$1 || (renderer$1 = createRenderer$1(rendererOptions$1));
}
const createApp$1 = (...args) => {
  const app = ensureRenderer$1().createApp(...args);
  {
    injectNativeTagCheck$1(app);
    injectCompilerOptionsCheck$1(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer$1(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction$2(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
function injectNativeTagCheck$1(app) {
  Object.defineProperty(app.config, "isNativeTag", {
    value: (tag) => isHTMLTag$1(tag) || isSVGTag$1(tag),
    writable: false
  });
}
function injectCompilerOptionsCheck$1(app) {
  {
    const isCustomElement = app.config.isCustomElement;
    Object.defineProperty(app.config, "isCustomElement", {
      get() {
        return isCustomElement;
      },
      set() {
        warn$3(`The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`);
      }
    });
    const compilerOptions = app.config.compilerOptions;
    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
    Object.defineProperty(app.config, "compilerOptions", {
      get() {
        warn$3(msg);
        return compilerOptions;
      },
      set() {
        warn$3(msg);
      }
    });
  }
}
function normalizeContainer$1(container) {
  if (isString$2(container)) {
    const res = document.querySelector(container);
    if (!res) {
      warn$3(`Failed to mount app: mount target selector "${container}" returned null.`);
    }
    return res;
  }
  if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
    warn$3(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
  }
  return container;
}
function initDev$1() {
  {
    initCustomFormatter$1();
  }
}
{
  initDev$1();
}
var isVue2 = false;
function set$2(target, key, val) {
  if (Array.isArray(target)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }
  target[key] = val;
  return val;
}
function del(target, key) {
  if (Array.isArray(target)) {
    target.splice(key, 1);
    return;
  }
  delete target[key];
}
function getDevtoolsGlobalHook() {
  return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
  return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
}
const isProxyAvailable = typeof Proxy === "function";
const HOOK_SETUP = "devtools-plugin:setup";
const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";
let supported$1;
let perf$1;
function isPerformanceSupported() {
  var _a2;
  if (supported$1 !== void 0) {
    return supported$1;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported$1 = true;
    perf$1 = window.performance;
  } else if (typeof global !== "undefined" && ((_a2 = global.perf_hooks) === null || _a2 === void 0 ? void 0 : _a2.performance)) {
    supported$1 = true;
    perf$1 = global.perf_hooks.performance;
  } else {
    supported$1 = false;
  }
  return supported$1;
}
function now() {
  return isPerformanceSupported() ? perf$1.now() : Date.now();
}
class ApiProxy {
  constructor(plugin2, hook) {
    this.target = null;
    this.targetQueue = [];
    this.onQueue = [];
    this.plugin = plugin2;
    this.hook = hook;
    const defaultSettings = {};
    if (plugin2.settings) {
      for (const id2 in plugin2.settings) {
        const item = plugin2.settings[id2];
        defaultSettings[id2] = item.defaultValue;
      }
    }
    const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin2.id}`;
    let currentSettings = Object.assign({}, defaultSettings);
    try {
      const raw = localStorage.getItem(localSettingsSaveId);
      const data = JSON.parse(raw);
      Object.assign(currentSettings, data);
    } catch (e2) {
    }
    this.fallbacks = {
      getSettings() {
        return currentSettings;
      },
      setSettings(value) {
        try {
          localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
        } catch (e2) {
        }
        currentSettings = value;
      },
      now() {
        return now();
      }
    };
    if (hook) {
      hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
    }
    this.proxiedOn = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target.on[prop];
        } else {
          return (...args) => {
            this.onQueue.push({
              method: prop,
              args
            });
          };
        }
      }
    });
    this.proxiedTarget = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target[prop];
        } else if (prop === "on") {
          return this.proxiedOn;
        } else if (Object.keys(this.fallbacks).includes(prop)) {
          return (...args) => {
            this.targetQueue.push({
              method: prop,
              args,
              resolve: () => {
              }
            });
            return this.fallbacks[prop](...args);
          };
        } else {
          return (...args) => {
            return new Promise((resolve2) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: resolve2
              });
            });
          };
        }
      }
    });
  }
  async setRealTarget(target) {
    this.target = target;
    for (const item of this.onQueue) {
      this.target.on[item.method](...item.args);
    }
    for (const item of this.targetQueue) {
      item.resolve(await this.target[item.method](...item.args));
    }
  }
}
function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
  const descriptor = pluginDescriptor;
  const target = getTarget();
  const hook = getDevtoolsGlobalHook();
  const enableProxy = isProxyAvailable && descriptor.enableEarlyProxy;
  if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
    hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
  } else {
    const proxy = enableProxy ? new ApiProxy(descriptor, hook) : null;
    const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
    list.push({
      pluginDescriptor: descriptor,
      setupFn,
      proxy
    });
    if (proxy)
      setupFn(proxy.proxiedTarget);
  }
}
/*!
  * pinia v2.0.30
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */
let activePinia;
const setActivePinia = (pinia) => activePinia = pinia;
const piniaSymbol = Symbol("pinia");
function isPlainObject$1(o2) {
  return o2 && typeof o2 === "object" && Object.prototype.toString.call(o2) === "[object Object]" && typeof o2.toJSON !== "function";
}
var MutationType;
(function(MutationType2) {
  MutationType2["direct"] = "direct";
  MutationType2["patchObject"] = "patch object";
  MutationType2["patchFunction"] = "patch function";
})(MutationType || (MutationType = {}));
const IS_CLIENT = typeof window !== "undefined";
const USE_DEVTOOLS = IS_CLIENT;
const _global$1 = /* @__PURE__ */ (() => typeof window === "object" && window.window === window ? window : typeof self === "object" && self.self === self ? self : typeof global === "object" && global.global === global ? global : typeof globalThis === "object" ? globalThis : { HTMLElement: null })();
function bom(blob, { autoBom = false } = {}) {
  if (autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
    return new Blob([String.fromCharCode(65279), blob], { type: blob.type });
  }
  return blob;
}
function download(url, name, opts) {
  const xhr = new XMLHttpRequest();
  xhr.open("GET", url);
  xhr.responseType = "blob";
  xhr.onload = function() {
    saveAs(xhr.response, name, opts);
  };
  xhr.onerror = function() {
    console.error("could not download file");
  };
  xhr.send();
}
function corsEnabled(url) {
  const xhr = new XMLHttpRequest();
  xhr.open("HEAD", url, false);
  try {
    xhr.send();
  } catch (e2) {
  }
  return xhr.status >= 200 && xhr.status <= 299;
}
function click(node) {
  try {
    node.dispatchEvent(new MouseEvent("click"));
  } catch (e2) {
    const evt = document.createEvent("MouseEvents");
    evt.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
    node.dispatchEvent(evt);
  }
}
const _navigator = typeof navigator === "object" ? navigator : { userAgent: "" };
const isMacOSWebView = /* @__PURE__ */ (() => /Macintosh/.test(_navigator.userAgent) && /AppleWebKit/.test(_navigator.userAgent) && !/Safari/.test(_navigator.userAgent))();
const saveAs = !IS_CLIENT ? () => {
} : typeof HTMLAnchorElement !== "undefined" && "download" in HTMLAnchorElement.prototype && !isMacOSWebView ? downloadSaveAs : "msSaveOrOpenBlob" in _navigator ? msSaveAs : fileSaverSaveAs;
function downloadSaveAs(blob, name = "download", opts) {
  const a2 = document.createElement("a");
  a2.download = name;
  a2.rel = "noopener";
  if (typeof blob === "string") {
    a2.href = blob;
    if (a2.origin !== location.origin) {
      if (corsEnabled(a2.href)) {
        download(blob, name, opts);
      } else {
        a2.target = "_blank";
        click(a2);
      }
    } else {
      click(a2);
    }
  } else {
    a2.href = URL.createObjectURL(blob);
    setTimeout(function() {
      URL.revokeObjectURL(a2.href);
    }, 4e4);
    setTimeout(function() {
      click(a2);
    }, 0);
  }
}
function msSaveAs(blob, name = "download", opts) {
  if (typeof blob === "string") {
    if (corsEnabled(blob)) {
      download(blob, name, opts);
    } else {
      const a2 = document.createElement("a");
      a2.href = blob;
      a2.target = "_blank";
      setTimeout(function() {
        click(a2);
      });
    }
  } else {
    navigator.msSaveOrOpenBlob(bom(blob, opts), name);
  }
}
function fileSaverSaveAs(blob, name, opts, popup) {
  popup = popup || open("", "_blank");
  if (popup) {
    popup.document.title = popup.document.body.innerText = "downloading...";
  }
  if (typeof blob === "string")
    return download(blob, name, opts);
  const force = blob.type === "application/octet-stream";
  const isSafari = /constructor/i.test(String(_global$1.HTMLElement)) || "safari" in _global$1;
  const isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
  if ((isChromeIOS || force && isSafari || isMacOSWebView) && typeof FileReader !== "undefined") {
    const reader = new FileReader();
    reader.onloadend = function() {
      let url = reader.result;
      if (typeof url !== "string") {
        popup = null;
        throw new Error("Wrong reader.result type");
      }
      url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, "data:attachment/file;");
      if (popup) {
        popup.location.href = url;
      } else {
        location.assign(url);
      }
      popup = null;
    };
    reader.readAsDataURL(blob);
  } else {
    const url = URL.createObjectURL(blob);
    if (popup)
      popup.location.assign(url);
    else
      location.href = url;
    popup = null;
    setTimeout(function() {
      URL.revokeObjectURL(url);
    }, 4e4);
  }
}
function toastMessage(message, type) {
  const piniaMessage = "\u{1F34D} " + message;
  if (typeof __VUE_DEVTOOLS_TOAST__ === "function") {
    __VUE_DEVTOOLS_TOAST__(piniaMessage, type);
  } else if (type === "error") {
    console.error(piniaMessage);
  } else if (type === "warn") {
    console.warn(piniaMessage);
  } else {
    console.log(piniaMessage);
  }
}
function isPinia(o2) {
  return "_a" in o2 && "install" in o2;
}
function checkClipboardAccess() {
  if (!("clipboard" in navigator)) {
    toastMessage(`Your browser doesn't support the Clipboard API`, "error");
    return true;
  }
}
function checkNotFocusedError(error) {
  if (error instanceof Error && error.message.toLowerCase().includes("document is not focused")) {
    toastMessage('You need to activate the "Emulate a focused page" setting in the "Rendering" panel of devtools.', "warn");
    return true;
  }
  return false;
}
async function actionGlobalCopyState(pinia) {
  if (checkClipboardAccess())
    return;
  try {
    await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));
    toastMessage("Global state copied to clipboard.");
  } catch (error) {
    if (checkNotFocusedError(error))
      return;
    toastMessage(`Failed to serialize the state. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalPasteState(pinia) {
  if (checkClipboardAccess())
    return;
  try {
    pinia.state.value = JSON.parse(await navigator.clipboard.readText());
    toastMessage("Global state pasted from clipboard.");
  } catch (error) {
    if (checkNotFocusedError(error))
      return;
    toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalSaveState(pinia) {
  try {
    saveAs(new Blob([JSON.stringify(pinia.state.value)], {
      type: "text/plain;charset=utf-8"
    }), "pinia-state.json");
  } catch (error) {
    toastMessage(`Failed to export the state as JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
let fileInput;
function getFileOpener() {
  if (!fileInput) {
    fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = ".json";
  }
  function openFile() {
    return new Promise((resolve2, reject) => {
      fileInput.onchange = async () => {
        const files = fileInput.files;
        if (!files)
          return resolve2(null);
        const file = files.item(0);
        if (!file)
          return resolve2(null);
        return resolve2({ text: await file.text(), file });
      };
      fileInput.oncancel = () => resolve2(null);
      fileInput.onerror = reject;
      fileInput.click();
    });
  }
  return openFile;
}
async function actionGlobalOpenStateFile(pinia) {
  try {
    const open2 = await getFileOpener();
    const result = await open2();
    if (!result)
      return;
    const { text, file } = result;
    pinia.state.value = JSON.parse(text);
    toastMessage(`Global state imported from "${file.name}".`);
  } catch (error) {
    toastMessage(`Failed to export the state as JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
function formatDisplay$1(display) {
  return {
    _custom: {
      display
    }
  };
}
const PINIA_ROOT_LABEL = "\u{1F34D} Pinia (root)";
const PINIA_ROOT_ID = "_root";
function formatStoreForInspectorTree(store) {
  return isPinia(store) ? {
    id: PINIA_ROOT_ID,
    label: PINIA_ROOT_LABEL
  } : {
    id: store.$id,
    label: store.$id
  };
}
function formatStoreForInspectorState(store) {
  if (isPinia(store)) {
    const storeNames = Array.from(store._s.keys());
    const storeMap = store._s;
    const state2 = {
      state: storeNames.map((storeId) => ({
        editable: true,
        key: storeId,
        value: store.state.value[storeId]
      })),
      getters: storeNames.filter((id2) => storeMap.get(id2)._getters).map((id2) => {
        const store2 = storeMap.get(id2);
        return {
          editable: false,
          key: id2,
          value: store2._getters.reduce((getters, key) => {
            getters[key] = store2[key];
            return getters;
          }, {})
        };
      })
    };
    return state2;
  }
  const state = {
    state: Object.keys(store.$state).map((key) => ({
      editable: true,
      key,
      value: store.$state[key]
    }))
  };
  if (store._getters && store._getters.length) {
    state.getters = store._getters.map((getterName) => ({
      editable: false,
      key: getterName,
      value: store[getterName]
    }));
  }
  if (store._customProperties.size) {
    state.customProperties = Array.from(store._customProperties).map((key) => ({
      editable: true,
      key,
      value: store[key]
    }));
  }
  return state;
}
function formatEventData(events) {
  if (!events)
    return {};
  if (Array.isArray(events)) {
    return events.reduce((data, event) => {
      data.keys.push(event.key);
      data.operations.push(event.type);
      data.oldValue[event.key] = event.oldValue;
      data.newValue[event.key] = event.newValue;
      return data;
    }, {
      oldValue: {},
      keys: [],
      operations: [],
      newValue: {}
    });
  } else {
    return {
      operation: formatDisplay$1(events.type),
      key: formatDisplay$1(events.key),
      oldValue: events.oldValue,
      newValue: events.newValue
    };
  }
}
function formatMutationType(type) {
  switch (type) {
    case MutationType.direct:
      return "mutation";
    case MutationType.patchFunction:
      return "$patch";
    case MutationType.patchObject:
      return "$patch";
    default:
      return "unknown";
  }
}
let isTimelineActive = true;
const componentStateTypes = [];
const MUTATIONS_LAYER_ID = "pinia:mutations";
const INSPECTOR_ID = "pinia";
const { assign: assign$1$1 } = Object;
const getStoreType = (id2) => "\u{1F34D} " + id2;
function registerPiniaDevtools(app, pinia) {
  setupDevtoolsPlugin({
    id: "dev.esm.pinia",
    label: "Pinia \u{1F34D}",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes,
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      toastMessage("You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.addTimelineLayer({
      id: MUTATIONS_LAYER_ID,
      label: `Pinia \u{1F34D}`,
      color: 15064968
    });
    api.addInspector({
      id: INSPECTOR_ID,
      label: "Pinia \u{1F34D}",
      icon: "storage",
      treeFilterPlaceholder: "Search stores",
      actions: [
        {
          icon: "content_copy",
          action: () => {
            actionGlobalCopyState(pinia);
          },
          tooltip: "Serialize and copy the state"
        },
        {
          icon: "content_paste",
          action: async () => {
            await actionGlobalPasteState(pinia);
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
          },
          tooltip: "Replace the state with the content of your clipboard"
        },
        {
          icon: "save",
          action: () => {
            actionGlobalSaveState(pinia);
          },
          tooltip: "Save the state as a JSON file"
        },
        {
          icon: "folder_open",
          action: async () => {
            await actionGlobalOpenStateFile(pinia);
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
          },
          tooltip: "Import the state from a JSON file"
        }
      ],
      nodeActions: [
        {
          icon: "restore",
          tooltip: "Reset the state (option store only)",
          action: (nodeId) => {
            const store = pinia._s.get(nodeId);
            if (!store) {
              toastMessage(`Cannot reset "${nodeId}" store because it wasn't found.`, "warn");
            } else if (!store._isOptionsAPI) {
              toastMessage(`Cannot reset "${nodeId}" store because it's a setup store.`, "warn");
            } else {
              store.$reset();
              toastMessage(`Store "${nodeId}" reset.`);
            }
          }
        }
      ]
    });
    api.on.inspectComponent((payload, ctx) => {
      const proxy = payload.componentInstance && payload.componentInstance.proxy;
      if (proxy && proxy._pStores) {
        const piniaStores = payload.componentInstance.proxy._pStores;
        Object.values(piniaStores).forEach((store) => {
          payload.instanceData.state.push({
            type: getStoreType(store.$id),
            key: "state",
            editable: true,
            value: store._isOptionsAPI ? {
              _custom: {
                value: toRaw$1(store.$state),
                actions: [
                  {
                    icon: "restore",
                    tooltip: "Reset the state of this store",
                    action: () => store.$reset()
                  }
                ]
              }
            } : Object.keys(store.$state).reduce((state, key) => {
              state[key] = store.$state[key];
              return state;
            }, {})
          });
          if (store._getters && store._getters.length) {
            payload.instanceData.state.push({
              type: getStoreType(store.$id),
              key: "getters",
              editable: false,
              value: store._getters.reduce((getters, key) => {
                try {
                  getters[key] = store[key];
                } catch (error) {
                  getters[key] = error;
                }
                return getters;
              }, {})
            });
          }
        });
      }
    });
    api.on.getInspectorTree((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        let stores = [pinia];
        stores = stores.concat(Array.from(pinia._s.values()));
        payload.rootNodes = (payload.filter ? stores.filter((store) => "$id" in store ? store.$id.toLowerCase().includes(payload.filter.toLowerCase()) : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase())) : stores).map(formatStoreForInspectorTree);
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return;
        }
        if (inspectedStore) {
          payload.state = formatStoreForInspectorState(inspectedStore);
        }
      }
    });
    api.on.editInspectorState((payload, ctx) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return toastMessage(`store "${payload.nodeId}" not found`, "error");
        }
        const { path } = payload;
        if (!isPinia(inspectedStore)) {
          if (path.length !== 1 || !inspectedStore._customProperties.has(path[0]) || path[0] in inspectedStore.$state) {
            path.unshift("$state");
          }
        } else {
          path.unshift("state");
        }
        isTimelineActive = false;
        payload.set(inspectedStore, path, payload.state.value);
        isTimelineActive = true;
      }
    });
    api.on.editComponentState((payload) => {
      if (payload.type.startsWith("\u{1F34D}")) {
        const storeId = payload.type.replace(/^🍍\s*/, "");
        const store = pinia._s.get(storeId);
        if (!store) {
          return toastMessage(`store "${storeId}" not found`, "error");
        }
        const { path } = payload;
        if (path[0] !== "state") {
          return toastMessage(`Invalid path for store "${storeId}":
${path}
Only state can be modified.`);
        }
        path[0] = "$state";
        isTimelineActive = false;
        payload.set(store, path, payload.state.value);
        isTimelineActive = true;
      }
    });
  });
}
function addStoreToDevtools(app, store) {
  if (!componentStateTypes.includes(getStoreType(store.$id))) {
    componentStateTypes.push(getStoreType(store.$id));
  }
  setupDevtoolsPlugin({
    id: "dev.esm.pinia",
    label: "Pinia \u{1F34D}",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes,
    app,
    settings: {
      logStoreChanges: {
        label: "Notify about new/deleted stores",
        type: "boolean",
        defaultValue: true
      }
    }
  }, (api) => {
    const now2 = typeof api.now === "function" ? api.now.bind(api) : Date.now;
    store.$onAction(({ after, onError, name, args }) => {
      const groupId = runningActionId++;
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: {
          time: now2(),
          title: "\u{1F6EB} " + name,
          subtitle: "start",
          data: {
            store: formatDisplay$1(store.$id),
            action: formatDisplay$1(name),
            args
          },
          groupId
        }
      });
      after((result) => {
        activeAction = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: now2(),
            title: "\u{1F6EC} " + name,
            subtitle: "end",
            data: {
              store: formatDisplay$1(store.$id),
              action: formatDisplay$1(name),
              args,
              result
            },
            groupId
          }
        });
      });
      onError((error) => {
        activeAction = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: now2(),
            logType: "error",
            title: "\u{1F4A5} " + name,
            subtitle: "end",
            data: {
              store: formatDisplay$1(store.$id),
              action: formatDisplay$1(name),
              args,
              error
            },
            groupId
          }
        });
      });
    }, true);
    store._customProperties.forEach((name) => {
      watch$1(() => unref$1(store[name]), (newValue, oldValue) => {
        api.notifyComponentUpdate();
        api.sendInspectorState(INSPECTOR_ID);
        if (isTimelineActive) {
          api.addTimelineEvent({
            layerId: MUTATIONS_LAYER_ID,
            event: {
              time: now2(),
              title: "Change",
              subtitle: name,
              data: {
                newValue,
                oldValue
              },
              groupId: activeAction
            }
          });
        }
      }, { deep: true });
    });
    store.$subscribe(({ events, type }, state) => {
      api.notifyComponentUpdate();
      api.sendInspectorState(INSPECTOR_ID);
      if (!isTimelineActive)
        return;
      const eventData = {
        time: now2(),
        title: formatMutationType(type),
        data: assign$1$1({ store: formatDisplay$1(store.$id) }, formatEventData(events)),
        groupId: activeAction
      };
      activeAction = void 0;
      if (type === MutationType.patchFunction) {
        eventData.subtitle = "\u2935\uFE0F";
      } else if (type === MutationType.patchObject) {
        eventData.subtitle = "\u{1F9E9}";
      } else if (events && !Array.isArray(events)) {
        eventData.subtitle = events.type;
      }
      if (events) {
        eventData.data["rawEvent(s)"] = {
          _custom: {
            display: "DebuggerEvent",
            type: "object",
            tooltip: "raw DebuggerEvent[]",
            value: events
          }
        };
      }
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: eventData
      });
    }, { detached: true, flush: "sync" });
    const hotUpdate = store._hotUpdate;
    store._hotUpdate = markRaw$1((newStore) => {
      hotUpdate(newStore);
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: {
          time: now2(),
          title: "\u{1F525} " + store.$id,
          subtitle: "HMR update",
          data: {
            store: formatDisplay$1(store.$id),
            info: formatDisplay$1(`HMR update`)
          }
        }
      });
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID);
      api.sendInspectorState(INSPECTOR_ID);
    });
    const { $dispose } = store;
    store.$dispose = () => {
      $dispose();
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID);
      api.sendInspectorState(INSPECTOR_ID);
      api.getSettings().logStoreChanges && toastMessage(`Disposed "${store.$id}" store \u{1F5D1}`);
    };
    api.notifyComponentUpdate();
    api.sendInspectorTree(INSPECTOR_ID);
    api.sendInspectorState(INSPECTOR_ID);
    api.getSettings().logStoreChanges && toastMessage(`"${store.$id}" store installed \u{1F195}`);
  });
}
let runningActionId = 0;
let activeAction;
function patchActionForGrouping(store, actionNames) {
  const actions = actionNames.reduce((storeActions, actionName) => {
    storeActions[actionName] = toRaw$1(store)[actionName];
    return storeActions;
  }, {});
  for (const actionName in actions) {
    store[actionName] = function() {
      const _actionId = runningActionId;
      const trackedStore = new Proxy(store, {
        get(...args) {
          activeAction = _actionId;
          return Reflect.get(...args);
        },
        set(...args) {
          activeAction = _actionId;
          return Reflect.set(...args);
        }
      });
      return actions[actionName].apply(trackedStore, arguments);
    };
  }
}
function devtoolsPlugin({ app, store, options }) {
  if (store.$id.startsWith("__hot:")) {
    return;
  }
  if (options.state) {
    store._isOptionsAPI = true;
  }
  if (typeof options.state === "function") {
    patchActionForGrouping(
      store,
      Object.keys(options.actions)
    );
    const originalHotUpdate = store._hotUpdate;
    toRaw$1(store)._hotUpdate = function(newStore) {
      originalHotUpdate.apply(this, arguments);
      patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions));
    };
  }
  addStoreToDevtools(
    app,
    store
  );
}
function createPinia() {
  const scope = effectScope$1(true);
  const state = scope.run(() => ref$1({}));
  let _p2 = [];
  let toBeInstalled = [];
  const pinia = markRaw$1({
    install(app) {
      setActivePinia(pinia);
      if (!isVue2) {
        pinia._a = app;
        app.provide(piniaSymbol, pinia);
        app.config.globalProperties.$pinia = pinia;
        if (USE_DEVTOOLS) {
          registerPiniaDevtools(app, pinia);
        }
        toBeInstalled.forEach((plugin2) => _p2.push(plugin2));
        toBeInstalled = [];
      }
    },
    use(plugin2) {
      if (!this._a && !isVue2) {
        toBeInstalled.push(plugin2);
      } else {
        _p2.push(plugin2);
      }
      return this;
    },
    _p: _p2,
    _a: null,
    _e: scope,
    _s: /* @__PURE__ */ new Map(),
    state
  });
  if (USE_DEVTOOLS && typeof Proxy !== "undefined") {
    pinia.use(devtoolsPlugin);
  }
  return pinia;
}
function patchObject(newState, oldState) {
  for (const key in oldState) {
    const subPatch = oldState[key];
    if (!(key in newState)) {
      continue;
    }
    const targetValue = newState[key];
    if (isPlainObject$1(targetValue) && isPlainObject$1(subPatch) && !isRef$1(subPatch) && !isReactive$1(subPatch)) {
      newState[key] = patchObject(targetValue, subPatch);
    } else {
      {
        newState[key] = subPatch;
      }
    }
  }
  return newState;
}
const noop$2 = () => {
};
function addSubscription(subscriptions, callback, detached, onCleanup = noop$2) {
  subscriptions.push(callback);
  const removeSubscription = () => {
    const idx = subscriptions.indexOf(callback);
    if (idx > -1) {
      subscriptions.splice(idx, 1);
      onCleanup();
    }
  };
  if (!detached && getCurrentScope$1()) {
    onScopeDispose$1(removeSubscription);
  }
  return removeSubscription;
}
function triggerSubscriptions(subscriptions, ...args) {
  subscriptions.slice().forEach((callback) => {
    callback(...args);
  });
}
function mergeReactiveObjects(target, patchToApply) {
  if (target instanceof Map && patchToApply instanceof Map) {
    patchToApply.forEach((value, key) => target.set(key, value));
  }
  if (target instanceof Set && patchToApply instanceof Set) {
    patchToApply.forEach(target.add, target);
  }
  for (const key in patchToApply) {
    if (!patchToApply.hasOwnProperty(key))
      continue;
    const subPatch = patchToApply[key];
    const targetValue = target[key];
    if (isPlainObject$1(targetValue) && isPlainObject$1(subPatch) && target.hasOwnProperty(key) && !isRef$1(subPatch) && !isReactive$1(subPatch)) {
      target[key] = mergeReactiveObjects(targetValue, subPatch);
    } else {
      target[key] = subPatch;
    }
  }
  return target;
}
const skipHydrateSymbol = Symbol("pinia:skipHydration");
function shouldHydrate(obj) {
  return !isPlainObject$1(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
}
const { assign: assign$2 } = Object;
function isComputed(o2) {
  return !!(isRef$1(o2) && o2.effect);
}
function createOptionsStore(id2, options, pinia, hot) {
  const { state, actions, getters } = options;
  const initialState = pinia.state.value[id2];
  let store;
  function setup() {
    if (!initialState && !hot) {
      {
        pinia.state.value[id2] = state ? state() : {};
      }
    }
    const localState = hot ? toRefs$1(ref$1(state ? state() : {}).value) : toRefs$1(pinia.state.value[id2]);
    return assign$2(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {
      if (name in localState) {
        console.warn(`[\u{1F34D}]: A getter cannot have the same name as another state property. Rename one of them. Found with "${name}" in store "${id2}".`);
      }
      computedGetters[name] = markRaw$1(computed$2(() => {
        setActivePinia(pinia);
        const store2 = pinia._s.get(id2);
        return getters[name].call(store2, store2);
      }));
      return computedGetters;
    }, {}));
  }
  store = createSetupStore(id2, setup, options, pinia, hot, true);
  store.$reset = function $reset() {
    const newState = state ? state() : {};
    this.$patch(($state) => {
      assign$2($state, newState);
    });
  };
  return store;
}
function createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {
  let scope;
  const optionsForPlugin = assign$2({ actions: {} }, options);
  if (!pinia._e.active) {
    throw new Error("Pinia destroyed");
  }
  const $subscribeOptions = {
    deep: true
  };
  {
    $subscribeOptions.onTrigger = (event) => {
      if (isListening) {
        debuggerEvents = event;
      } else if (isListening == false && !store._hotUpdating) {
        if (Array.isArray(debuggerEvents)) {
          debuggerEvents.push(event);
        } else {
          console.error("\u{1F34D} debuggerEvents should be an array. This is most likely an internal Pinia bug.");
        }
      }
    };
  }
  let isListening;
  let isSyncListening;
  let subscriptions = markRaw$1([]);
  let actionSubscriptions = markRaw$1([]);
  let debuggerEvents;
  const initialState = pinia.state.value[$id];
  if (!isOptionsStore && !initialState && !hot) {
    {
      pinia.state.value[$id] = {};
    }
  }
  const hotState = ref$1({});
  let activeListener;
  function $patch(partialStateOrMutator) {
    let subscriptionMutation;
    isListening = isSyncListening = false;
    {
      debuggerEvents = [];
    }
    if (typeof partialStateOrMutator === "function") {
      partialStateOrMutator(pinia.state.value[$id]);
      subscriptionMutation = {
        type: MutationType.patchFunction,
        storeId: $id,
        events: debuggerEvents
      };
    } else {
      mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);
      subscriptionMutation = {
        type: MutationType.patchObject,
        payload: partialStateOrMutator,
        storeId: $id,
        events: debuggerEvents
      };
    }
    const myListenerId = activeListener = Symbol();
    nextTick$1().then(() => {
      if (activeListener === myListenerId) {
        isListening = true;
      }
    });
    isSyncListening = true;
    triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);
  }
  const $reset = () => {
    throw new Error(`\u{1F34D}: Store "${$id}" is built using the setup syntax and does not implement $reset().`);
  };
  function $dispose() {
    scope.stop();
    subscriptions = [];
    actionSubscriptions = [];
    pinia._s.delete($id);
  }
  function wrapAction(name, action) {
    return function() {
      setActivePinia(pinia);
      const args = Array.from(arguments);
      const afterCallbackList = [];
      const onErrorCallbackList = [];
      function after(callback) {
        afterCallbackList.push(callback);
      }
      function onError(callback) {
        onErrorCallbackList.push(callback);
      }
      triggerSubscriptions(actionSubscriptions, {
        args,
        name,
        store,
        after,
        onError
      });
      let ret;
      try {
        ret = action.apply(this && this.$id === $id ? this : store, args);
      } catch (error) {
        triggerSubscriptions(onErrorCallbackList, error);
        throw error;
      }
      if (ret instanceof Promise) {
        return ret.then((value) => {
          triggerSubscriptions(afterCallbackList, value);
          return value;
        }).catch((error) => {
          triggerSubscriptions(onErrorCallbackList, error);
          return Promise.reject(error);
        });
      }
      triggerSubscriptions(afterCallbackList, ret);
      return ret;
    };
  }
  const _hmrPayload = /* @__PURE__ */ markRaw$1({
    actions: {},
    getters: {},
    state: [],
    hotState
  });
  const partialStore = {
    _p: pinia,
    $id,
    $onAction: addSubscription.bind(null, actionSubscriptions),
    $patch,
    $reset,
    $subscribe(callback, options2 = {}) {
      const removeSubscription = addSubscription(subscriptions, callback, options2.detached, () => stopWatcher());
      const stopWatcher = scope.run(() => watch$1(() => pinia.state.value[$id], (state) => {
        if (options2.flush === "sync" ? isSyncListening : isListening) {
          callback({
            storeId: $id,
            type: MutationType.direct,
            events: debuggerEvents
          }, state);
        }
      }, assign$2({}, $subscribeOptions, options2)));
      return removeSubscription;
    },
    $dispose
  };
  const store = reactive$1(
    assign$2(
      {
        _hmrPayload,
        _customProperties: markRaw$1(/* @__PURE__ */ new Set())
      },
      partialStore
    )
  );
  pinia._s.set($id, store);
  const setupStore = pinia._e.run(() => {
    scope = effectScope$1();
    return scope.run(() => setup());
  });
  for (const key in setupStore) {
    const prop = setupStore[key];
    if (isRef$1(prop) && !isComputed(prop) || isReactive$1(prop)) {
      if (hot) {
        set$2(hotState.value, key, toRef$1(setupStore, key));
      } else if (!isOptionsStore) {
        if (initialState && shouldHydrate(prop)) {
          if (isRef$1(prop)) {
            prop.value = initialState[key];
          } else {
            mergeReactiveObjects(prop, initialState[key]);
          }
        }
        {
          pinia.state.value[$id][key] = prop;
        }
      }
      {
        _hmrPayload.state.push(key);
      }
    } else if (typeof prop === "function") {
      const actionValue = hot ? prop : wrapAction(key, prop);
      {
        setupStore[key] = actionValue;
      }
      {
        _hmrPayload.actions[key] = prop;
      }
      optionsForPlugin.actions[key] = prop;
    } else {
      if (isComputed(prop)) {
        _hmrPayload.getters[key] = isOptionsStore ? options.getters[key] : prop;
        if (IS_CLIENT) {
          const getters = setupStore._getters || (setupStore._getters = markRaw$1([]));
          getters.push(key);
        }
      }
    }
  }
  {
    assign$2(store, setupStore);
    assign$2(toRaw$1(store), setupStore);
  }
  Object.defineProperty(store, "$state", {
    get: () => hot ? hotState.value : pinia.state.value[$id],
    set: (state) => {
      if (hot) {
        throw new Error("cannot set hotState");
      }
      $patch(($state) => {
        assign$2($state, state);
      });
    }
  });
  {
    store._hotUpdate = markRaw$1((newStore) => {
      store._hotUpdating = true;
      newStore._hmrPayload.state.forEach((stateKey) => {
        if (stateKey in store.$state) {
          const newStateTarget = newStore.$state[stateKey];
          const oldStateSource = store.$state[stateKey];
          if (typeof newStateTarget === "object" && isPlainObject$1(newStateTarget) && isPlainObject$1(oldStateSource)) {
            patchObject(newStateTarget, oldStateSource);
          } else {
            newStore.$state[stateKey] = oldStateSource;
          }
        }
        set$2(store, stateKey, toRef$1(newStore.$state, stateKey));
      });
      Object.keys(store.$state).forEach((stateKey) => {
        if (!(stateKey in newStore.$state)) {
          del(store, stateKey);
        }
      });
      isListening = false;
      isSyncListening = false;
      pinia.state.value[$id] = toRef$1(newStore._hmrPayload, "hotState");
      isSyncListening = true;
      nextTick$1().then(() => {
        isListening = true;
      });
      for (const actionName in newStore._hmrPayload.actions) {
        const action = newStore[actionName];
        set$2(store, actionName, wrapAction(actionName, action));
      }
      for (const getterName in newStore._hmrPayload.getters) {
        const getter = newStore._hmrPayload.getters[getterName];
        const getterValue = isOptionsStore ? computed$2(() => {
          setActivePinia(pinia);
          return getter.call(store, store);
        }) : getter;
        set$2(store, getterName, getterValue);
      }
      Object.keys(store._hmrPayload.getters).forEach((key) => {
        if (!(key in newStore._hmrPayload.getters)) {
          del(store, key);
        }
      });
      Object.keys(store._hmrPayload.actions).forEach((key) => {
        if (!(key in newStore._hmrPayload.actions)) {
          del(store, key);
        }
      });
      store._hmrPayload = newStore._hmrPayload;
      store._getters = newStore._getters;
      store._hotUpdating = false;
    });
  }
  if (USE_DEVTOOLS) {
    const nonEnumerable = {
      writable: true,
      configurable: true,
      enumerable: false
    };
    ["_p", "_hmrPayload", "_getters", "_customProperties"].forEach((p2) => {
      Object.defineProperty(store, p2, assign$2({ value: store[p2] }, nonEnumerable));
    });
  }
  pinia._p.forEach((extender) => {
    if (USE_DEVTOOLS) {
      const extensions = scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      }));
      Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));
      assign$2(store, extensions);
    } else {
      assign$2(store, scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      })));
    }
  });
  if (store.$state && typeof store.$state === "object" && typeof store.$state.constructor === "function" && !store.$state.constructor.toString().includes("[native code]")) {
    console.warn(`[\u{1F34D}]: The "state" must be a plain object. It cannot be
	state: () => new MyClass()
Found in store "${store.$id}".`);
  }
  if (initialState && isOptionsStore && options.hydrate) {
    options.hydrate(store.$state, initialState);
  }
  isListening = true;
  isSyncListening = true;
  return store;
}
function defineStore(idOrOptions, setup, setupOptions) {
  let id2;
  let options;
  const isSetupStore = typeof setup === "function";
  if (typeof idOrOptions === "string") {
    id2 = idOrOptions;
    options = isSetupStore ? setupOptions : setup;
  } else {
    options = idOrOptions;
    id2 = idOrOptions.id;
  }
  function useStore(pinia, hot) {
    const currentInstance2 = getCurrentInstance$1();
    pinia = pinia || currentInstance2 && inject$1(piniaSymbol, null);
    if (pinia)
      setActivePinia(pinia);
    if (!activePinia) {
      throw new Error(`[\u{1F34D}]: getActivePinia was called with no active Pinia. Did you forget to install pinia?
	const pinia = createPinia()
	app.use(pinia)
This will fail in production.`);
    }
    pinia = activePinia;
    if (!pinia._s.has(id2)) {
      if (isSetupStore) {
        createSetupStore(id2, setup, options, pinia);
      } else {
        createOptionsStore(id2, options, pinia);
      }
      {
        useStore._pinia = pinia;
      }
    }
    const store = pinia._s.get(id2);
    if (hot) {
      const hotId = "__hot:" + id2;
      const newStore = isSetupStore ? createSetupStore(hotId, setup, options, pinia, true) : createOptionsStore(hotId, assign$2({}, options), pinia, true);
      hot._hotUpdate(newStore);
      delete pinia.state.value[hotId];
      pinia._s.delete(hotId);
    }
    if (IS_CLIENT && currentInstance2 && currentInstance2.proxy && !hot) {
      const vm = currentInstance2.proxy;
      const cache2 = "_pStores" in vm ? vm._pStores : vm._pStores = {};
      cache2[id2] = store;
    }
    return store;
  }
  useStore.$id = id2;
  return useStore;
}
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].includes(getBasePlacement(placement)) ? "x" : "y";
}
function getLengthFromAxis(axis) {
  return axis === "y" ? "height" : "width";
}
function computeCoordsFromPlacement(_ref) {
  let {
    reference,
    floating,
    placement
  } = _ref;
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  let coords;
  switch (getBasePlacement(placement)) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  switch (getAlignment(placement)) {
    case "start":
      coords[mainAxis] = coords[mainAxis] - (reference[length] / 2 - floating[length] / 2);
      break;
    case "end":
      coords[mainAxis] = coords[mainAxis] + (reference[length] / 2 - floating[length] / 2);
      break;
  }
  return coords;
}
const computePosition$1 = async (reference, floating, config2) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config2;
  {
    if (platform2 == null) {
      console.error(["Floating UI: `platform` property was not passed to config. If you", "want to use Floating UI on the web, install @floating-ui/dom", "instead of the /core package. Otherwise, you can create your own", "`platform`: https://floating-ui.com/docs/platform"].join(" "));
    }
    if (middleware.filter((_ref) => {
      let {
        name
      } = _ref;
      return name === "autoPlacement" || name === "flip";
    }).length > 1) {
      throw new Error(["Floating UI: duplicate `flip` and/or `autoPlacement`", "middleware detected. This will lead to an infinite loop. Ensure only", "one of either has been passed to the `middleware` array."].join(" "));
    }
  }
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x2,
    y
  } = computeCoordsFromPlacement({
    ...rects,
    placement
  });
  let statefulPlacement = placement;
  let middlewareData = {};
  let _debug_loop_count_ = 0;
  for (let i2 = 0; i2 < middleware.length; i2++) {
    {
      _debug_loop_count_++;
      if (_debug_loop_count_ > 100) {
        throw new Error(["Floating UI: The middleware lifecycle appears to be", "running in an infinite loop. This is usually caused by a `reset`", "continually being returned without a break condition."].join(" "));
      }
    }
    const {
      name,
      fn: fn2
    } = middleware[i2];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn2({
      x: x2,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x2 = nextX != null ? nextX : x2;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: data != null ? data : {}
    };
    if (reset) {
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x2,
          y
        } = computeCoordsFromPlacement({
          ...rects,
          placement: statefulPlacement
        }));
      }
      i2 = -1;
      continue;
    }
  }
  return {
    x: x2,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getSideObjectFromPadding(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
async function detectOverflow(middlewareArguments, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    x: x2,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = middlewareArguments;
  const {
    boundary = "clippingParents",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = options;
  const paddingObject = getSideObjectFromPadding(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = await platform2.getClippingClientRect({
    element: await platform2.isElement(element) ? element : element.contextElement || await platform2.getDocumentElement({
      element: elements.floating
    }),
    boundary,
    rootBoundary
  });
  const elementClientRect = rectToClientRect(await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect: elementContext === "floating" ? {
      ...rects.floating,
      x: x2,
      y
    } : rects.reference,
    offsetParent: await platform2.getOffsetParent({
      element: elements.floating
    }),
    strategy
  }));
  return {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
}
const min$1 = Math.min;
const max$1 = Math.max;
function within(min$1$1, value, max$1$1) {
  return max$1(min$1$1, min$1(value, max$1$1));
}
const arrow = (options) => ({
  name: "arrow",
  options,
  async fn(middlewareArguments) {
    const {
      element,
      padding = 0
    } = options != null ? options : {};
    const {
      x: x2,
      y,
      placement,
      rects,
      platform: platform2
    } = middlewareArguments;
    if (element == null) {
      {
        console.warn("Floating UI: No `element` was passed to the `arrow` middleware.");
      }
      return {};
    }
    const paddingObject = getSideObjectFromPadding(padding);
    const coords = {
      x: x2,
      y
    };
    const basePlacement = getBasePlacement(placement);
    const axis = getMainAxisFromPlacement(basePlacement);
    const length = getLengthFromAxis(axis);
    const arrowDimensions = await platform2.getDimensions({
      element
    });
    const minProp = axis === "y" ? "top" : "left";
    const maxProp = axis === "y" ? "bottom" : "right";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await platform2.getOffsetParent({
      element
    });
    const clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    const centerToReference = endDiff / 2 - startDiff / 2;
    const min2 = paddingObject[minProp];
    const max2 = clientSize - arrowDimensions[length] - paddingObject[maxProp];
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset2 = within(min2, center, max2);
    return {
      data: {
        [axis]: offset2,
        centerOffset: center - offset2
      }
    };
  }
});
const hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (matched) => hash$1[matched]);
}
function getAlignmentSides(placement, rects) {
  const isStart = getAlignment(placement) === "start";
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  let mainAlignmentSide = mainAxis === "x" ? isStart ? "right" : "left" : isStart ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return {
    main: mainAlignmentSide,
    cross: getOppositePlacement(mainAlignmentSide)
  };
}
const hash = {
  start: "end",
  end: "start"
};
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (matched) => hash[matched]);
}
const basePlacements = ["top", "right", "bottom", "left"];
const allPlacements = /* @__PURE__ */ basePlacements.reduce((acc, basePlacement) => acc.concat(basePlacement, basePlacement + "-start", basePlacement + "-end"), []);
function getPlacementList(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getBasePlacement(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter((placement) => {
    if (alignment) {
      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
    }
    return true;
  });
}
const autoPlacement = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "autoPlacement",
    options,
    async fn(middlewareArguments) {
      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _middlewareData$autoP5, _placementsSortedByLe;
      const {
        x: x2,
        y,
        rects,
        middlewareData,
        placement
      } = middlewareArguments;
      const {
        alignment = null,
        allowedPlacements = allPlacements,
        autoAlignment = true,
        ...detectOverflowOptions
      } = options;
      if ((_middlewareData$autoP = middlewareData.autoPlacement) != null && _middlewareData$autoP.skip) {
        return {};
      }
      const placements2 = getPlacementList(alignment, autoAlignment, allowedPlacements);
      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);
      const currentIndex = (_middlewareData$autoP2 = (_middlewareData$autoP3 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP3.index) != null ? _middlewareData$autoP2 : 0;
      const currentPlacement = placements2[currentIndex];
      const {
        main: main2,
        cross
      } = getAlignmentSides(currentPlacement, rects);
      if (placement !== currentPlacement) {
        return {
          x: x2,
          y,
          reset: {
            placement: placements2[0]
          }
        };
      }
      const currentOverflows = [overflow[getBasePlacement(currentPlacement)], overflow[main2], overflow[cross]];
      const allOverflows = [...(_middlewareData$autoP4 = (_middlewareData$autoP5 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP5.overflows) != null ? _middlewareData$autoP4 : [], {
        placement: currentPlacement,
        overflows: currentOverflows
      }];
      const nextPlacement = placements2[currentIndex + 1];
      if (nextPlacement) {
        return {
          data: {
            index: currentIndex + 1,
            overflows: allOverflows
          },
          reset: {
            placement: nextPlacement
          }
        };
      }
      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a2, b2) => a2.overflows[0] - b2.overflows[0]);
      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find((_ref) => {
        let {
          overflows
        } = _ref;
        return overflows.every((overflow2) => overflow2 <= 0);
      })) == null ? void 0 : _placementsSortedByLe.placement;
      return {
        data: {
          skip: true
        },
        reset: {
          placement: placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement
        }
      };
    }
  };
};
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
const flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(middlewareArguments) {
      var _middlewareData$flip, _middlewareData$flip2;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement
      } = middlewareArguments;
      if ((_middlewareData$flip = middlewareData.flip) != null && _middlewareData$flip.skip) {
        return {};
      }
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        flipAlignment = true,
        ...detectOverflowOptions
      } = options;
      const basePlacement = getBasePlacement(placement);
      const isBasePlacement = basePlacement === initialPlacement;
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[basePlacement]);
      }
      if (checkCrossAxis) {
        const {
          main: main2,
          cross
        } = getAlignmentSides(placement, rects);
        overflows.push(overflow[main2], overflow[cross]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side) => side <= 0)) {
        var _middlewareData$flip$, _middlewareData$flip3;
        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip3 = middlewareData.flip) == null ? void 0 : _middlewareData$flip3.index) != null ? _middlewareData$flip$ : 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = "bottom";
        switch (fallbackStrategy) {
          case "bestFit": {
            var _overflowsData$slice$;
            const placement2 = (_overflowsData$slice$ = overflowsData.slice().sort((a2, b2) => a2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0) - b2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0))[0]) == null ? void 0 : _overflowsData$slice$.placement;
            if (placement2) {
              resetPlacement = placement2;
            }
            break;
          }
          case "initialPlacement":
            resetPlacement = initialPlacement;
            break;
        }
        return {
          data: {
            skip: true
          },
          reset: {
            placement: resetPlacement
          }
        };
      }
      return {};
    }
  };
};
function convertValueToCoords(_ref) {
  let {
    placement,
    rects,
    value
  } = _ref;
  const basePlacement = getBasePlacement(placement);
  const multiplier = ["left", "top"].includes(basePlacement) ? -1 : 1;
  const rawValue = typeof value === "function" ? value({
    ...rects,
    placement
  }) : value;
  const {
    mainAxis,
    crossAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0
  } : {
    mainAxis: 0,
    crossAxis: 0,
    ...rawValue
  };
  return getMainAxisFromPlacement(basePlacement) === "x" ? {
    x: crossAxis,
    y: mainAxis * multiplier
  } : {
    x: mainAxis * multiplier,
    y: crossAxis
  };
}
const offset = function(value) {
  if (value === void 0) {
    value = 0;
  }
  return {
    name: "offset",
    options: value,
    fn(middlewareArguments) {
      const {
        x: x2,
        y,
        placement,
        rects
      } = middlewareArguments;
      const diffCoords = convertValueToCoords({
        placement,
        rects,
        value
      });
      return {
        x: x2 + diffCoords.x,
        y: y + diffCoords.y,
        data: diffCoords
      };
    }
  };
};
function getCrossAxis(axis) {
  return axis === "x" ? "y" : "x";
}
const shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(middlewareArguments) {
      const {
        x: x2,
        y,
        placement
      } = middlewareArguments;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x3,
              y: y2
            } = _ref;
            return {
              x: x3,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = options;
      const coords = {
        x: x2,
        y
      };
      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);
      const mainAxis = getMainAxisFromPlacement(getBasePlacement(placement));
      const crossAxis = getCrossAxis(mainAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = within(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = within(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...middlewareArguments,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x2,
          y: limitedCoords.y - y
        }
      };
    }
  };
};
const size$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(middlewareArguments) {
      var _middlewareData$size;
      const {
        placement,
        rects,
        middlewareData
      } = middlewareArguments;
      const {
        apply,
        ...detectOverflowOptions
      } = options;
      if ((_middlewareData$size = middlewareData.size) != null && _middlewareData$size.skip) {
        return {};
      }
      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);
      const basePlacement = getBasePlacement(placement);
      const isEnd = getAlignment(placement) === "end";
      let heightSide;
      let widthSide;
      if (basePlacement === "top" || basePlacement === "bottom") {
        heightSide = basePlacement;
        widthSide = isEnd ? "left" : "right";
      } else {
        widthSide = basePlacement;
        heightSide = isEnd ? "top" : "bottom";
      }
      const xMin = max$1(overflow.left, 0);
      const xMax = max$1(overflow.right, 0);
      const yMin = max$1(overflow.top, 0);
      const yMax = max$1(overflow.bottom, 0);
      const dimensions = {
        height: rects.floating.height - (["left", "right"].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max$1(overflow.top, overflow.bottom)) : overflow[heightSide]),
        width: rects.floating.width - (["top", "bottom"].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max$1(overflow.left, overflow.right)) : overflow[widthSide])
      };
      apply == null ? void 0 : apply({
        ...dimensions,
        ...rects
      });
      return {
        data: {
          skip: true
        },
        reset: {
          rects: true
        }
      };
    }
  };
};
function isWindow(value) {
  return (value == null ? void 0 : value.toString()) === "[object Window]";
}
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (!isWindow(node)) {
    const ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeName(node) {
  return isWindow(node) ? "" : node ? (node.nodeName || "").toLowerCase() : "";
}
function isHTMLElement(value) {
  return value instanceof getWindow(value).HTMLElement;
}
function isElement(value) {
  return value instanceof getWindow(value).Element;
}
function isNode(value) {
  return value instanceof getWindow(value).Node;
}
function isShadowRoot(node) {
  const OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isScrollParent(element) {
  const {
    overflow,
    overflowX,
    overflowY
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const isFirefox = navigator.userAgent.toLowerCase().includes("firefox");
  const css = getComputedStyle$1(element);
  return css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].includes(css.willChange) || isFirefox && css.willChange === "filter" || isFirefox && (css.filter ? css.filter !== "none" : false);
}
const min = Math.min;
const max = Math.max;
const round = Math.round;
function getBoundingClientRect(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  const clientRect = element.getBoundingClientRect();
  let scaleX = 1;
  let scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  return {
    width: clientRect.width / scaleX,
    height: clientRect.height / scaleY,
    top: clientRect.top / scaleY,
    right: clientRect.right / scaleX,
    bottom: clientRect.bottom / scaleY,
    left: clientRect.left / scaleX,
    x: clientRect.left / scaleX,
    y: clientRect.top / scaleY
  };
}
function getDocumentElement(node) {
  return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
}
function getNodeScroll(element) {
  if (isWindow(element)) {
    return {
      scrollLeft: element.pageXOffset,
      scrollTop: element.pageYOffset
    };
  }
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function isScaled(element) {
  const rect = getBoundingClientRect(element);
  return round(rect.width) !== element.offsetWidth || round(rect.height) !== element.offsetHeight;
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const rect = getBoundingClientRect(element, isOffsetParentAnElement && isScaled(offsetParent));
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  return node.assignedSlot || node.parentNode || (isShadowRoot(node) ? node.host : null) || getDocumentElement(node);
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !["html", "body"].includes(getNodeName(currentNode))) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  const window2 = getWindow(element);
  let offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
function getDimensions(element) {
  return {
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    ...rect,
    x: rect.x - scroll.scrollLeft + offsets.x,
    y: rect.y - scroll.scrollTop + offsets.y
  };
}
function getViewportRect(element) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x2 = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) < 0.01) {
      x2 = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2,
    y
  };
}
function getDocumentRect(element) {
  var _element$ownerDocumen;
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  const width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  const height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle$1(body || html).direction === "rtl") {
    x2 += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x2,
    y
  };
}
function getScrollParent(node) {
  if (["html", "body", "#document"].includes(getNodeName(node))) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}
function getScrollParents(node, list) {
  var _node$ownerDocument;
  if (list === void 0) {
    list = [];
  }
  const scrollParent = getScrollParent(node);
  const isBody = scrollParent === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
  const win = getWindow(scrollParent);
  const target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  const updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(getScrollParents(getParentNode(target)));
}
function contains(parent, child) {
  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    let next = child;
    do {
      if (next && parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function getInnerBoundingClientRect(element) {
  const clientRect = getBoundingClientRect(element);
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  return {
    top,
    left,
    x: left,
    y: top,
    right: left + element.clientWidth,
    bottom: top + element.clientHeight,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function getClientRectFromClippingParent(element, clippingParent) {
  if (clippingParent === "viewport") {
    return rectToClientRect(getViewportRect(element));
  }
  if (isElement(clippingParent)) {
    return getInnerBoundingClientRect(clippingParent);
  }
  return rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  const clippingParents = getScrollParents(getParentNode(element));
  const canEscapeClipping = ["absolute", "fixed"].includes(getComputedStyle$1(element).position);
  const clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents.filter((clippingParent) => isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body");
}
function getClippingClientRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary
  } = _ref;
  const mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  const clippingParents = [...mainClippingParents, rootBoundary];
  const firstClippingParent = clippingParents[0];
  const clippingRect = clippingParents.reduce((accRect, clippingParent) => {
    const rect = getClientRectFromClippingParent(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingParent(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
const platform = {
  getElementRects: (_ref) => {
    let {
      reference,
      floating,
      strategy
    } = _ref;
    return {
      reference: getRectRelativeToOffsetParent(reference, getOffsetParent(floating), strategy),
      floating: {
        ...getDimensions(floating),
        x: 0,
        y: 0
      }
    };
  },
  convertOffsetParentRelativeRectToViewportRelativeRect: (args) => convertOffsetParentRelativeRectToViewportRelativeRect(args),
  getOffsetParent: (_ref2) => {
    let {
      element
    } = _ref2;
    return getOffsetParent(element);
  },
  isElement: (value) => isElement(value),
  getDocumentElement: (_ref3) => {
    let {
      element
    } = _ref3;
    return getDocumentElement(element);
  },
  getClippingClientRect: (args) => getClippingClientRect(args),
  getDimensions: (_ref4) => {
    let {
      element
    } = _ref4;
    return getDimensions(element);
  },
  getClientRects: (_ref5) => {
    let {
      element
    } = _ref5;
    return element.getClientRects();
  }
};
const computePosition = (reference, floating, options) => computePosition$1(reference, floating, {
  platform,
  ...options
});
var __defProp$1 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp$1.call(b2, prop))
      __defNormalProp$1(a2, prop, b2[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b2)) {
      if (__propIsEnum$1.call(b2, prop))
        __defNormalProp$1(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
function assign$1(to2, from) {
  for (const key in from) {
    if (Object.prototype.hasOwnProperty.call(from, key)) {
      if (typeof from[key] === "object" && to2[key]) {
        assign$1(to2[key], from[key]);
      } else {
        to2[key] = from[key];
      }
    }
  }
}
const config$2 = {
  disabled: false,
  distance: 5,
  skidding: 0,
  container: "body",
  boundary: void 0,
  instantMove: false,
  disposeTimeout: 5e3,
  popperTriggers: [],
  strategy: "absolute",
  preventOverflow: true,
  flip: true,
  shift: true,
  overflowPadding: 0,
  arrowPadding: 0,
  arrowOverflow: true,
  themes: {
    tooltip: {
      placement: "top",
      triggers: ["hover", "focus", "touch"],
      hideTriggers: (events) => [...events, "click"],
      delay: {
        show: 200,
        hide: 0
      },
      handleResize: false,
      html: false,
      loadingContent: "..."
    },
    dropdown: {
      placement: "bottom",
      triggers: ["click"],
      delay: 0,
      handleResize: true,
      autoHide: true
    },
    menu: {
      $extend: "dropdown",
      triggers: ["hover", "focus"],
      popperTriggers: ["hover", "focus"],
      delay: {
        show: 0,
        hide: 400
      }
    }
  }
};
function getDefaultConfig(theme, key) {
  let themeConfig = config$2.themes[theme] || {};
  let value;
  do {
    value = themeConfig[key];
    if (typeof value === "undefined") {
      if (themeConfig.$extend) {
        themeConfig = config$2.themes[themeConfig.$extend] || {};
      } else {
        themeConfig = null;
        value = config$2[key];
      }
    } else {
      themeConfig = null;
    }
  } while (themeConfig);
  return value;
}
function getThemeClasses(theme) {
  const result = [theme];
  let themeConfig = config$2.themes[theme] || {};
  do {
    if (themeConfig.$extend && !themeConfig.$resetCss) {
      result.push(themeConfig.$extend);
      themeConfig = config$2.themes[themeConfig.$extend] || {};
    } else {
      themeConfig = null;
    }
  } while (themeConfig);
  return result.map((c2) => `v-popper--theme-${c2}`);
}
function getAllParentThemes(theme) {
  const result = [theme];
  let themeConfig = config$2.themes[theme] || {};
  do {
    if (themeConfig.$extend) {
      result.push(themeConfig.$extend);
      themeConfig = config$2.themes[themeConfig.$extend] || {};
    } else {
      themeConfig = null;
    }
  } while (themeConfig);
  return result;
}
let supportsPassive = false;
if (typeof window !== "undefined") {
  supportsPassive = false;
  try {
    const opts = Object.defineProperty({}, "passive", {
      get() {
        supportsPassive = true;
      }
    });
    window.addEventListener("test", null, opts);
  } catch (e2) {
  }
}
let isIOS = false;
if (typeof window !== "undefined" && typeof navigator !== "undefined") {
  isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
}
const placements = ["auto", "top", "bottom", "left", "right"].reduce((acc, base) => acc.concat([
  base,
  `${base}-start`,
  `${base}-end`
]), []);
const SHOW_EVENT_MAP = {
  hover: "mouseenter",
  focus: "focus",
  click: "click",
  touch: "touchstart"
};
const HIDE_EVENT_MAP = {
  hover: "mouseleave",
  focus: "blur",
  click: "click",
  touch: "touchend"
};
function removeFromArray(array, item) {
  const index = array.indexOf(item);
  if (index !== -1) {
    array.splice(index, 1);
  }
}
function nextFrame$1() {
  return new Promise((resolve2) => requestAnimationFrame(() => {
    requestAnimationFrame(resolve2);
  }));
}
const shownPoppers = [];
let hidingPopper = null;
const shownPoppersByTheme = {};
function getShownPoppersByTheme(theme) {
  let list = shownPoppersByTheme[theme];
  if (!list) {
    list = shownPoppersByTheme[theme] = [];
  }
  return list;
}
let Element$1 = function() {
};
if (typeof window !== "undefined") {
  Element$1 = window.Element;
}
function defaultPropFactory(prop) {
  return function(props) {
    return getDefaultConfig(props.theme, prop);
  };
}
const PROVIDE_KEY = "__floating-vue__popper";
var PrivatePopper = () => defineComponent$1({
  name: "VPopper",
  provide() {
    return {
      [PROVIDE_KEY]: {
        parentPopper: this
      }
    };
  },
  inject: {
    [PROVIDE_KEY]: { default: null }
  },
  props: {
    theme: {
      type: String,
      required: true
    },
    targetNodes: {
      type: Function,
      required: true
    },
    referenceNode: {
      type: Function,
      default: null
    },
    popperNode: {
      type: Function,
      required: true
    },
    shown: {
      type: Boolean,
      default: false
    },
    showGroup: {
      type: String,
      default: null
    },
    ariaId: {
      default: null
    },
    disabled: {
      type: Boolean,
      default: defaultPropFactory("disabled")
    },
    positioningDisabled: {
      type: Boolean,
      default: defaultPropFactory("positioningDisabled")
    },
    placement: {
      type: String,
      default: defaultPropFactory("placement"),
      validator: (value) => placements.includes(value)
    },
    delay: {
      type: [String, Number, Object],
      default: defaultPropFactory("delay")
    },
    distance: {
      type: [Number, String],
      default: defaultPropFactory("distance")
    },
    skidding: {
      type: [Number, String],
      default: defaultPropFactory("skidding")
    },
    triggers: {
      type: Array,
      default: defaultPropFactory("triggers")
    },
    showTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("showTriggers")
    },
    hideTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("hideTriggers")
    },
    popperTriggers: {
      type: Array,
      default: defaultPropFactory("popperTriggers")
    },
    popperShowTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("popperShowTriggers")
    },
    popperHideTriggers: {
      type: [Array, Function],
      default: defaultPropFactory("popperHideTriggers")
    },
    container: {
      type: [String, Object, Element$1, Boolean],
      default: defaultPropFactory("container")
    },
    boundary: {
      type: [String, Element$1],
      default: defaultPropFactory("boundary")
    },
    strategy: {
      type: String,
      validator: (value) => ["absolute", "fixed"].includes(value),
      default: defaultPropFactory("strategy")
    },
    autoHide: {
      type: [Boolean, Function],
      default: defaultPropFactory("autoHide")
    },
    handleResize: {
      type: Boolean,
      default: defaultPropFactory("handleResize")
    },
    instantMove: {
      type: Boolean,
      default: defaultPropFactory("instantMove")
    },
    eagerMount: {
      type: Boolean,
      default: defaultPropFactory("eagerMount")
    },
    popperClass: {
      type: [String, Array, Object],
      default: defaultPropFactory("popperClass")
    },
    computeTransformOrigin: {
      type: Boolean,
      default: defaultPropFactory("computeTransformOrigin")
    },
    autoMinSize: {
      type: Boolean,
      default: defaultPropFactory("autoMinSize")
    },
    autoSize: {
      type: [Boolean, String],
      default: defaultPropFactory("autoSize")
    },
    autoMaxSize: {
      type: Boolean,
      default: defaultPropFactory("autoMaxSize")
    },
    autoBoundaryMaxSize: {
      type: Boolean,
      default: defaultPropFactory("autoBoundaryMaxSize")
    },
    preventOverflow: {
      type: Boolean,
      default: defaultPropFactory("preventOverflow")
    },
    overflowPadding: {
      type: [Number, String],
      default: defaultPropFactory("overflowPadding")
    },
    arrowPadding: {
      type: [Number, String],
      default: defaultPropFactory("arrowPadding")
    },
    arrowOverflow: {
      type: Boolean,
      default: defaultPropFactory("arrowOverflow")
    },
    flip: {
      type: Boolean,
      default: defaultPropFactory("flip")
    },
    shift: {
      type: Boolean,
      default: defaultPropFactory("shift")
    },
    shiftCrossAxis: {
      type: Boolean,
      default: defaultPropFactory("shiftCrossAxis")
    },
    noAutoFocus: {
      type: Boolean,
      default: defaultPropFactory("noAutoFocus")
    }
  },
  emits: [
    "show",
    "hide",
    "update:shown",
    "apply-show",
    "apply-hide",
    "close-group",
    "close-directive",
    "auto-hide",
    "resize",
    "dispose"
  ],
  data() {
    return {
      isShown: false,
      isMounted: false,
      skipTransition: false,
      classes: {
        showFrom: false,
        showTo: false,
        hideFrom: false,
        hideTo: true
      },
      result: {
        x: 0,
        y: 0,
        placement: "",
        strategy: this.strategy,
        arrow: {
          x: 0,
          y: 0,
          centerOffset: 0
        },
        transformOrigin: null
      },
      shownChildren: /* @__PURE__ */ new Set(),
      lastAutoHide: true
    };
  },
  computed: {
    popperId() {
      return this.ariaId != null ? this.ariaId : this.randomId;
    },
    shouldMountContent() {
      return this.eagerMount || this.isMounted;
    },
    slotData() {
      return {
        popperId: this.popperId,
        isShown: this.isShown,
        shouldMountContent: this.shouldMountContent,
        skipTransition: this.skipTransition,
        autoHide: typeof this.autoHide === "function" ? this.lastAutoHide : this.autoHide,
        show: this.show,
        hide: this.hide,
        handleResize: this.handleResize,
        onResize: this.onResize,
        classes: __spreadProps(__spreadValues$1({}, this.classes), {
          popperClass: this.popperClass
        }),
        result: this.positioningDisabled ? null : this.result,
        attrs: this.$attrs
      };
    },
    parentPopper() {
      var _a2;
      return (_a2 = this[PROVIDE_KEY]) == null ? void 0 : _a2.parentPopper;
    },
    hasPopperShowTriggerHover() {
      var _a2, _b;
      return ((_a2 = this.popperTriggers) == null ? void 0 : _a2.includes("hover")) || ((_b = this.popperShowTriggers) == null ? void 0 : _b.includes("hover"));
    }
  },
  watch: __spreadValues$1(__spreadValues$1({
    shown: "$_autoShowHide",
    disabled(value) {
      if (value) {
        this.dispose();
      } else {
        this.init();
      }
    },
    async container() {
      if (this.isShown) {
        this.$_ensureTeleport();
        await this.$_computePosition();
      }
    }
  }, [
    "triggers",
    "positioningDisabled"
  ].reduce((acc, prop) => {
    acc[prop] = "$_refreshListeners";
    return acc;
  }, {})), [
    "placement",
    "distance",
    "skidding",
    "boundary",
    "strategy",
    "overflowPadding",
    "arrowPadding",
    "preventOverflow",
    "shift",
    "shiftCrossAxis",
    "flip"
  ].reduce((acc, prop) => {
    acc[prop] = "$_computePosition";
    return acc;
  }, {})),
  created() {
    this.$_isDisposed = true;
    this.randomId = `popper_${[Math.random(), Date.now()].map((n2) => n2.toString(36).substring(2, 10)).join("_")}`;
    if (this.autoMinSize) {
      console.warn('[floating-vue] `autoMinSize` option is deprecated. Use `autoSize="min"` instead.');
    }
    if (this.autoMaxSize) {
      console.warn("[floating-vue] `autoMaxSize` option is deprecated. Use `autoBoundaryMaxSize` instead.");
    }
  },
  mounted() {
    this.init();
    this.$_detachPopperNode();
  },
  activated() {
    this.$_autoShowHide();
  },
  deactivated() {
    this.hide();
  },
  beforeUnmount() {
    this.dispose();
  },
  methods: {
    show({ event = null, skipDelay = false, force = false } = {}) {
      var _a2, _b;
      if (((_a2 = this.parentPopper) == null ? void 0 : _a2.lockedChild) && this.parentPopper.lockedChild !== this)
        return;
      this.$_pendingHide = false;
      if (force || !this.disabled) {
        if (((_b = this.parentPopper) == null ? void 0 : _b.lockedChild) === this) {
          this.parentPopper.lockedChild = null;
        }
        this.$_scheduleShow(event, skipDelay);
        this.$emit("show");
        this.$_showFrameLocked = true;
        requestAnimationFrame(() => {
          this.$_showFrameLocked = false;
        });
      }
      this.$emit("update:shown", true);
    },
    hide({ event = null, skipDelay = false } = {}) {
      var _a2;
      if (this.$_hideInProgress)
        return;
      if (this.shownChildren.size > 0) {
        this.$_pendingHide = true;
        return;
      }
      if (this.hasPopperShowTriggerHover && this.$_isAimingPopper()) {
        if (this.parentPopper) {
          this.parentPopper.lockedChild = this;
          clearTimeout(this.parentPopper.lockedChildTimer);
          this.parentPopper.lockedChildTimer = setTimeout(() => {
            if (this.parentPopper.lockedChild === this) {
              this.parentPopper.lockedChild.hide({ skipDelay });
              this.parentPopper.lockedChild = null;
            }
          }, 1e3);
        }
        return;
      }
      if (((_a2 = this.parentPopper) == null ? void 0 : _a2.lockedChild) === this) {
        this.parentPopper.lockedChild = null;
      }
      this.$_pendingHide = false;
      this.$_scheduleHide(event, skipDelay);
      this.$emit("hide");
      this.$emit("update:shown", false);
    },
    init() {
      var _a2, _b;
      if (!this.$_isDisposed)
        return;
      this.$_isDisposed = false;
      this.isMounted = false;
      this.$_events = [];
      this.$_preventShow = false;
      this.$_referenceNode = (_b = (_a2 = this.referenceNode) == null ? void 0 : _a2.call(this)) != null ? _b : this.$el;
      this.$_targetNodes = this.targetNodes().filter((e2) => e2.nodeType === e2.ELEMENT_NODE);
      this.$_popperNode = this.popperNode();
      this.$_innerNode = this.$_popperNode.querySelector(".v-popper__inner");
      this.$_arrowNode = this.$_popperNode.querySelector(".v-popper__arrow-container");
      this.$_swapTargetAttrs("title", "data-original-title");
      this.$_detachPopperNode();
      if (this.triggers.length) {
        this.$_addEventListeners();
      }
      if (this.shown) {
        this.show();
      }
    },
    dispose() {
      if (this.$_isDisposed)
        return;
      this.$_isDisposed = true;
      this.$_removeEventListeners();
      this.hide({ skipDelay: true });
      this.$_detachPopperNode();
      this.isMounted = false;
      this.isShown = false;
      this.$_updateParentShownChildren(false);
      this.$_swapTargetAttrs("data-original-title", "title");
      this.$emit("dispose");
    },
    async onResize() {
      if (this.isShown) {
        await this.$_computePosition();
        this.$emit("resize");
      }
    },
    async $_computePosition() {
      var _a2;
      if (this.$_isDisposed || this.positioningDisabled)
        return;
      const options2 = {
        strategy: this.strategy,
        middleware: []
      };
      if (this.distance || this.skidding) {
        options2.middleware.push(offset({
          mainAxis: this.distance,
          crossAxis: this.skidding
        }));
      }
      const isPlacementAuto = this.placement.startsWith("auto");
      if (isPlacementAuto) {
        options2.middleware.push(autoPlacement({
          alignment: (_a2 = this.placement.split("-")[1]) != null ? _a2 : ""
        }));
      } else {
        options2.placement = this.placement;
      }
      if (this.preventOverflow) {
        if (this.shift) {
          options2.middleware.push(shift({
            padding: this.overflowPadding,
            boundary: this.boundary,
            crossAxis: this.shiftCrossAxis
          }));
        }
        if (!isPlacementAuto && this.flip) {
          options2.middleware.push(flip({
            padding: this.overflowPadding,
            boundary: this.boundary
          }));
        }
      }
      options2.middleware.push(arrow({
        element: this.$_arrowNode,
        padding: this.arrowPadding
      }));
      if (this.arrowOverflow) {
        options2.middleware.push({
          name: "arrowOverflow",
          fn: ({ placement, rects, middlewareData }) => {
            let overflow;
            const { centerOffset } = middlewareData.arrow;
            if (placement.startsWith("top") || placement.startsWith("bottom")) {
              overflow = Math.abs(centerOffset) > rects.reference.width / 2;
            } else {
              overflow = Math.abs(centerOffset) > rects.reference.height / 2;
            }
            return {
              data: {
                overflow
              }
            };
          }
        });
      }
      if (this.autoMinSize || this.autoSize) {
        const autoSize = this.autoSize ? this.autoSize : this.autoMinSize ? "min" : null;
        options2.middleware.push({
          name: "autoSize",
          fn: ({ rects, placement, middlewareData }) => {
            var _a22;
            if ((_a22 = middlewareData.autoSize) == null ? void 0 : _a22.skip) {
              return {};
            }
            let width;
            let height;
            if (placement.startsWith("top") || placement.startsWith("bottom")) {
              width = rects.reference.width;
            } else {
              height = rects.reference.height;
            }
            this.$_innerNode.style[autoSize === "min" ? "minWidth" : autoSize === "max" ? "maxWidth" : "width"] = width != null ? `${width}px` : null;
            this.$_innerNode.style[autoSize === "min" ? "minHeight" : autoSize === "max" ? "maxHeight" : "height"] = height != null ? `${height}px` : null;
            return {
              data: {
                skip: true
              },
              reset: {
                rects: true
              }
            };
          }
        });
      }
      if (this.autoMaxSize || this.autoBoundaryMaxSize) {
        this.$_innerNode.style.maxWidth = null;
        this.$_innerNode.style.maxHeight = null;
        options2.middleware.push(size$1({
          boundary: this.boundary,
          padding: this.overflowPadding,
          apply: ({ width, height }) => {
            this.$_innerNode.style.maxWidth = width != null ? `${width}px` : null;
            this.$_innerNode.style.maxHeight = height != null ? `${height}px` : null;
          }
        }));
      }
      const data = await computePosition(this.$_referenceNode, this.$_popperNode, options2);
      Object.assign(this.result, {
        x: data.x,
        y: data.y,
        placement: data.placement,
        strategy: data.strategy,
        arrow: __spreadValues$1(__spreadValues$1({}, data.middlewareData.arrow), data.middlewareData.arrowOverflow)
      });
    },
    $_scheduleShow(event = null, skipDelay = false) {
      this.$_updateParentShownChildren(true);
      this.$_hideInProgress = false;
      clearTimeout(this.$_scheduleTimer);
      if (hidingPopper && this.instantMove && hidingPopper.instantMove && hidingPopper !== this.parentPopper) {
        hidingPopper.$_applyHide(true);
        this.$_applyShow(true);
        return;
      }
      if (skipDelay) {
        this.$_applyShow();
      } else {
        this.$_scheduleTimer = setTimeout(this.$_applyShow.bind(this), this.$_computeDelay("show"));
      }
    },
    $_scheduleHide(event = null, skipDelay = false) {
      if (this.shownChildren.size > 0) {
        this.$_pendingHide = true;
        return;
      }
      this.$_updateParentShownChildren(false);
      this.$_hideInProgress = true;
      clearTimeout(this.$_scheduleTimer);
      if (this.isShown) {
        hidingPopper = this;
      }
      if (skipDelay) {
        this.$_applyHide();
      } else {
        this.$_scheduleTimer = setTimeout(this.$_applyHide.bind(this), this.$_computeDelay("hide"));
      }
    },
    $_computeDelay(type) {
      const delay = this.delay;
      return parseInt(delay && delay[type] || delay || 0);
    },
    async $_applyShow(skipTransition = false) {
      clearTimeout(this.$_disposeTimer);
      clearTimeout(this.$_scheduleTimer);
      this.skipTransition = skipTransition;
      if (this.isShown) {
        return;
      }
      this.$_ensureTeleport();
      await nextFrame$1();
      await this.$_computePosition();
      await this.$_applyShowEffect();
      if (!this.positioningDisabled) {
        this.$_registerEventListeners([
          ...getScrollParents(this.$_referenceNode),
          ...getScrollParents(this.$_popperNode)
        ], "scroll", () => {
          this.$_computePosition();
        });
      }
    },
    async $_applyShowEffect() {
      if (this.$_hideInProgress)
        return;
      if (this.computeTransformOrigin) {
        const bounds = this.$_referenceNode.getBoundingClientRect();
        const popperWrapper = this.$_popperNode.querySelector(".v-popper__wrapper");
        const parentBounds = popperWrapper.parentNode.getBoundingClientRect();
        const x2 = bounds.x + bounds.width / 2 - (parentBounds.left + popperWrapper.offsetLeft);
        const y = bounds.y + bounds.height / 2 - (parentBounds.top + popperWrapper.offsetTop);
        this.result.transformOrigin = `${x2}px ${y}px`;
      }
      this.isShown = true;
      this.$_applyAttrsToTarget({
        "aria-describedby": this.popperId,
        "data-popper-shown": ""
      });
      const showGroup = this.showGroup;
      if (showGroup) {
        let popover;
        for (let i2 = 0; i2 < shownPoppers.length; i2++) {
          popover = shownPoppers[i2];
          if (popover.showGroup !== showGroup) {
            popover.hide();
            popover.$emit("close-group");
          }
        }
      }
      shownPoppers.push(this);
      document.body.classList.add("v-popper--some-open");
      for (const theme of getAllParentThemes(this.theme)) {
        getShownPoppersByTheme(theme).push(this);
        document.body.classList.add(`v-popper--some-open--${theme}`);
      }
      this.$emit("apply-show");
      this.classes.showFrom = true;
      this.classes.showTo = false;
      this.classes.hideFrom = false;
      this.classes.hideTo = false;
      await nextFrame$1();
      this.classes.showFrom = false;
      this.classes.showTo = true;
      if (!this.noAutoFocus)
        this.$_popperNode.focus();
    },
    async $_applyHide(skipTransition = false) {
      if (this.shownChildren.size > 0) {
        this.$_pendingHide = true;
        this.$_hideInProgress = false;
        return;
      }
      clearTimeout(this.$_scheduleTimer);
      if (!this.isShown) {
        return;
      }
      this.skipTransition = skipTransition;
      removeFromArray(shownPoppers, this);
      if (shownPoppers.length === 0) {
        document.body.classList.remove("v-popper--some-open");
      }
      for (const theme of getAllParentThemes(this.theme)) {
        const list = getShownPoppersByTheme(theme);
        removeFromArray(list, this);
        if (list.length === 0) {
          document.body.classList.remove(`v-popper--some-open--${theme}`);
        }
      }
      if (hidingPopper === this) {
        hidingPopper = null;
      }
      this.isShown = false;
      this.$_applyAttrsToTarget({
        "aria-describedby": void 0,
        "data-popper-shown": void 0
      });
      clearTimeout(this.$_disposeTimer);
      const disposeTime = getDefaultConfig(this.theme, "disposeTimeout");
      if (disposeTime !== null) {
        this.$_disposeTimer = setTimeout(() => {
          if (this.$_popperNode) {
            this.$_detachPopperNode();
            this.isMounted = false;
          }
        }, disposeTime);
      }
      this.$_removeEventListeners("scroll");
      this.$emit("apply-hide");
      this.classes.showFrom = false;
      this.classes.showTo = false;
      this.classes.hideFrom = true;
      this.classes.hideTo = false;
      await nextFrame$1();
      this.classes.hideFrom = false;
      this.classes.hideTo = true;
    },
    $_autoShowHide() {
      if (this.shown) {
        this.show();
      } else {
        this.hide();
      }
    },
    $_ensureTeleport() {
      if (this.$_isDisposed)
        return;
      let container = this.container;
      if (typeof container === "string") {
        container = window.document.querySelector(container);
      } else if (container === false) {
        container = this.$_targetNodes[0].parentNode;
      }
      if (!container) {
        throw new Error("No container for popover: " + this.container);
      }
      container.appendChild(this.$_popperNode);
      this.isMounted = true;
    },
    $_addEventListeners() {
      const handleShow = (event) => {
        if (this.isShown && !this.$_hideInProgress) {
          return;
        }
        event.usedByTooltip = true;
        !this.$_preventShow && this.show({ event });
      };
      this.$_registerTriggerListeners(this.$_targetNodes, SHOW_EVENT_MAP, this.triggers, this.showTriggers, handleShow);
      this.$_registerTriggerListeners([this.$_popperNode], SHOW_EVENT_MAP, this.popperTriggers, this.popperShowTriggers, handleShow);
      const handleHide = (event) => {
        if (event.usedByTooltip) {
          return;
        }
        this.hide({ event });
      };
      this.$_registerTriggerListeners(this.$_targetNodes, HIDE_EVENT_MAP, this.triggers, this.hideTriggers, handleHide);
      this.$_registerTriggerListeners([this.$_popperNode], HIDE_EVENT_MAP, this.popperTriggers, this.popperHideTriggers, handleHide);
    },
    $_registerEventListeners(targetNodes, eventType, handler) {
      this.$_events.push({ targetNodes, eventType, handler });
      targetNodes.forEach((node) => node.addEventListener(eventType, handler, supportsPassive ? {
        passive: true
      } : void 0));
    },
    $_registerTriggerListeners(targetNodes, eventMap, commonTriggers, customTrigger, handler) {
      let triggers = commonTriggers;
      if (customTrigger != null) {
        triggers = typeof customTrigger === "function" ? customTrigger(triggers) : customTrigger;
      }
      triggers.forEach((trigger2) => {
        const eventType = eventMap[trigger2];
        if (eventType) {
          this.$_registerEventListeners(targetNodes, eventType, handler);
        }
      });
    },
    $_removeEventListeners(filterEventType) {
      const newList = [];
      this.$_events.forEach((listener) => {
        const { targetNodes, eventType, handler } = listener;
        if (!filterEventType || filterEventType === eventType) {
          targetNodes.forEach((node) => node.removeEventListener(eventType, handler));
        } else {
          newList.push(listener);
        }
      });
      this.$_events = newList;
    },
    $_refreshListeners() {
      if (!this.$_isDisposed) {
        this.$_removeEventListeners();
        this.$_addEventListeners();
      }
    },
    $_handleGlobalClose(event, touch = false) {
      if (this.$_showFrameLocked)
        return;
      this.hide({ event });
      if (event.closePopover) {
        this.$emit("close-directive");
      } else {
        this.$emit("auto-hide");
      }
      if (touch) {
        this.$_preventShow = true;
        setTimeout(() => {
          this.$_preventShow = false;
        }, 300);
      }
    },
    $_detachPopperNode() {
      this.$_popperNode.parentNode && this.$_popperNode.parentNode.removeChild(this.$_popperNode);
    },
    $_swapTargetAttrs(attrFrom, attrTo) {
      for (const el2 of this.$_targetNodes) {
        const value = el2.getAttribute(attrFrom);
        if (value) {
          el2.removeAttribute(attrFrom);
          el2.setAttribute(attrTo, value);
        }
      }
    },
    $_applyAttrsToTarget(attrs) {
      for (const el2 of this.$_targetNodes) {
        for (const n2 in attrs) {
          const value = attrs[n2];
          if (value == null) {
            el2.removeAttribute(n2);
          } else {
            el2.setAttribute(n2, value);
          }
        }
      }
    },
    $_updateParentShownChildren(value) {
      let parent = this.parentPopper;
      while (parent) {
        if (value) {
          parent.shownChildren.add(this.randomId);
        } else {
          parent.shownChildren.delete(this.randomId);
          if (parent.$_pendingHide) {
            parent.hide();
          }
        }
        parent = parent.parentPopper;
      }
    },
    $_isAimingPopper() {
      const referenceBounds = this.$_referenceNode.getBoundingClientRect();
      if (mouseX >= referenceBounds.left && mouseX <= referenceBounds.right && mouseY >= referenceBounds.top && mouseY <= referenceBounds.bottom) {
        const popperBounds = this.$_popperNode.getBoundingClientRect();
        const vectorX = mouseX - mousePreviousX;
        const vectorY = mouseY - mousePreviousY;
        const distance = popperBounds.left + popperBounds.width / 2 - mousePreviousX + (popperBounds.top + popperBounds.height / 2) - mousePreviousY;
        const newVectorLength = distance + popperBounds.width + popperBounds.height;
        const edgeX = mousePreviousX + vectorX * newVectorLength;
        const edgeY = mousePreviousY + vectorY * newVectorLength;
        return lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.left, popperBounds.top, popperBounds.left, popperBounds.bottom) || lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.left, popperBounds.top, popperBounds.right, popperBounds.top) || lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.right, popperBounds.top, popperBounds.right, popperBounds.bottom) || lineIntersectsLine(mousePreviousX, mousePreviousY, edgeX, edgeY, popperBounds.left, popperBounds.bottom, popperBounds.right, popperBounds.bottom);
      }
      return false;
    }
  },
  render() {
    return this.$slots.default(this.slotData);
  }
});
if (typeof document !== "undefined" && typeof window !== "undefined") {
  if (isIOS) {
    document.addEventListener("touchstart", handleGlobalMousedown, supportsPassive ? {
      passive: true,
      capture: true
    } : true);
    document.addEventListener("touchend", handleGlobalTouchend, supportsPassive ? {
      passive: true,
      capture: true
    } : true);
  } else {
    window.addEventListener("mousedown", handleGlobalMousedown, true);
    window.addEventListener("click", handleGlobalClick, true);
  }
  window.addEventListener("resize", computePositionAllShownPoppers);
}
function handleGlobalMousedown(event) {
  for (let i2 = 0; i2 < shownPoppers.length; i2++) {
    const popper = shownPoppers[i2];
    try {
      const popperContent = popper.popperNode();
      popper.$_mouseDownContains = popperContent.contains(event.target);
    } catch (e2) {
    }
  }
}
function handleGlobalClick(event) {
  handleGlobalClose(event);
}
function handleGlobalTouchend(event) {
  handleGlobalClose(event, true);
}
function handleGlobalClose(event, touch = false) {
  const preventClose = {};
  for (let i2 = shownPoppers.length - 1; i2 >= 0; i2--) {
    const popper = shownPoppers[i2];
    try {
      const contains2 = popper.$_containsGlobalTarget = isContainingEventTarget(popper, event);
      popper.$_pendingHide = false;
      requestAnimationFrame(() => {
        popper.$_pendingHide = false;
        if (preventClose[popper.randomId])
          return;
        if (shouldAutoHide(popper, contains2, event)) {
          popper.$_handleGlobalClose(event, touch);
          if (!event.closeAllPopover && event.closePopover && contains2) {
            let parent2 = popper.parentPopper;
            while (parent2) {
              preventClose[parent2.randomId] = true;
              parent2 = parent2.parentPopper;
            }
            return;
          }
          let parent = popper.parentPopper;
          while (parent) {
            if (shouldAutoHide(parent, parent.$_containsGlobalTarget, event)) {
              parent.$_handleGlobalClose(event, touch);
            } else {
              break;
            }
            parent = parent.parentPopper;
          }
        }
      });
    } catch (e2) {
    }
  }
}
function isContainingEventTarget(popper, event) {
  const popperContent = popper.popperNode();
  return popper.$_mouseDownContains || popperContent.contains(event.target);
}
function shouldAutoHide(popper, contains2, event) {
  return event.closeAllPopover || event.closePopover && contains2 || getAutoHideResult(popper, event) && !contains2;
}
function getAutoHideResult(popper, event) {
  if (typeof popper.autoHide === "function") {
    const result = popper.autoHide(event);
    popper.lastAutoHide = result;
    return result;
  }
  return popper.autoHide;
}
function computePositionAllShownPoppers(event) {
  for (let i2 = 0; i2 < shownPoppers.length; i2++) {
    const popper = shownPoppers[i2];
    popper.$_computePosition(event);
  }
}
let mousePreviousX = 0;
let mousePreviousY = 0;
let mouseX = 0;
let mouseY = 0;
if (typeof window !== "undefined") {
  window.addEventListener("mousemove", (event) => {
    mousePreviousX = mouseX;
    mousePreviousY = mouseY;
    mouseX = event.clientX;
    mouseY = event.clientY;
  }, supportsPassive ? {
    passive: true
  } : void 0);
}
function lineIntersectsLine(x1, y1, x2, y2, x3, y3, x4, y4) {
  const uA = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
  const uB = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
  return uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1;
}
var _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _sfc_main$6 = {
  extends: PrivatePopper()
};
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock$1(), createElementBlock$1("div", {
    ref: "reference",
    class: normalizeClass$1(["v-popper", {
      "v-popper--shown": _ctx.slotData.isShown
    }])
  }, [
    renderSlot$1(_ctx.$slots, "default", normalizeProps$1(guardReactiveProps$1(_ctx.slotData)))
  ], 2);
}
var Popper$1 = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$3]]);
function getInternetExplorerVersion() {
  var ua2 = window.navigator.userAgent;
  var msie = ua2.indexOf("MSIE ");
  if (msie > 0) {
    return parseInt(ua2.substring(msie + 5, ua2.indexOf(".", msie)), 10);
  }
  var trident = ua2.indexOf("Trident/");
  if (trident > 0) {
    var rv = ua2.indexOf("rv:");
    return parseInt(ua2.substring(rv + 3, ua2.indexOf(".", rv)), 10);
  }
  var edge = ua2.indexOf("Edge/");
  if (edge > 0) {
    return parseInt(ua2.substring(edge + 5, ua2.indexOf(".", edge)), 10);
  }
  return -1;
}
let isIE;
function initCompat() {
  if (!initCompat.init) {
    initCompat.init = true;
    isIE = getInternetExplorerVersion() !== -1;
  }
}
var script = {
  name: "ResizeObserver",
  props: {
    emitOnMount: {
      type: Boolean,
      default: false
    },
    ignoreWidth: {
      type: Boolean,
      default: false
    },
    ignoreHeight: {
      type: Boolean,
      default: false
    }
  },
  emits: [
    "notify"
  ],
  mounted() {
    initCompat();
    nextTick$1(() => {
      this._w = this.$el.offsetWidth;
      this._h = this.$el.offsetHeight;
      if (this.emitOnMount) {
        this.emitSize();
      }
    });
    const object = document.createElement("object");
    this._resizeObject = object;
    object.setAttribute("aria-hidden", "true");
    object.setAttribute("tabindex", -1);
    object.onload = this.addResizeHandlers;
    object.type = "text/html";
    if (isIE) {
      this.$el.appendChild(object);
    }
    object.data = "about:blank";
    if (!isIE) {
      this.$el.appendChild(object);
    }
  },
  beforeUnmount() {
    this.removeResizeHandlers();
  },
  methods: {
    compareAndNotify() {
      if (!this.ignoreWidth && this._w !== this.$el.offsetWidth || !this.ignoreHeight && this._h !== this.$el.offsetHeight) {
        this._w = this.$el.offsetWidth;
        this._h = this.$el.offsetHeight;
        this.emitSize();
      }
    },
    emitSize() {
      this.$emit("notify", {
        width: this._w,
        height: this._h
      });
    },
    addResizeHandlers() {
      this._resizeObject.contentDocument.defaultView.addEventListener("resize", this.compareAndNotify);
      this.compareAndNotify();
    },
    removeResizeHandlers() {
      if (this._resizeObject && this._resizeObject.onload) {
        if (!isIE && this._resizeObject.contentDocument) {
          this._resizeObject.contentDocument.defaultView.removeEventListener("resize", this.compareAndNotify);
        }
        this.$el.removeChild(this._resizeObject);
        this._resizeObject.onload = null;
        this._resizeObject = null;
      }
    }
  }
};
const _withId = /* @__PURE__ */ withScopeId$1();
pushScopeId$1("data-v-b329ee4c");
const _hoisted_1$2 = {
  class: "resize-observer",
  tabindex: "-1"
};
popScopeId$1();
const render$2 = /* @__PURE__ */ _withId((_ctx, _cache, $props, $setup, $data, $options) => {
  return openBlock$1(), createBlock$1("div", _hoisted_1$2);
});
script.render = render$2;
script.__scopeId = "data-v-b329ee4c";
script.__file = "src/components/ResizeObserver.vue";
var PrivateThemeClass = (prop = "theme") => ({
  computed: {
    themeClass() {
      return getThemeClasses(this[prop]);
    }
  }
});
const _sfc_main$5 = defineComponent$1({
  name: "VPopperContent",
  components: {
    ResizeObserver: script
  },
  mixins: [
    PrivateThemeClass()
  ],
  props: {
    popperId: String,
    theme: String,
    shown: Boolean,
    mounted: Boolean,
    skipTransition: Boolean,
    autoHide: Boolean,
    handleResize: Boolean,
    classes: Object,
    result: Object
  },
  emits: [
    "hide",
    "resize"
  ],
  methods: {
    toPx(value) {
      if (value != null && !isNaN(value)) {
        return `${value}px`;
      }
      return null;
    }
  }
});
const _hoisted_1$1 = ["id", "aria-hidden", "tabindex", "data-popper-placement"];
const _hoisted_2$1 = {
  ref: "inner",
  class: "v-popper__inner"
};
const _hoisted_3 = /* @__PURE__ */ createBaseVNode$1("div", { class: "v-popper__arrow-outer" }, null, -1);
const _hoisted_4 = /* @__PURE__ */ createBaseVNode$1("div", { class: "v-popper__arrow-inner" }, null, -1);
const _hoisted_5 = [
  _hoisted_3,
  _hoisted_4
];
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ResizeObserver = resolveComponent$1("ResizeObserver");
  return openBlock$1(), createElementBlock$1("div", {
    id: _ctx.popperId,
    ref: "popover",
    class: normalizeClass$1(["v-popper__popper", [
      _ctx.themeClass,
      _ctx.classes.popperClass,
      {
        "v-popper__popper--shown": _ctx.shown,
        "v-popper__popper--hidden": !_ctx.shown,
        "v-popper__popper--show-from": _ctx.classes.showFrom,
        "v-popper__popper--show-to": _ctx.classes.showTo,
        "v-popper__popper--hide-from": _ctx.classes.hideFrom,
        "v-popper__popper--hide-to": _ctx.classes.hideTo,
        "v-popper__popper--skip-transition": _ctx.skipTransition,
        "v-popper__popper--arrow-overflow": _ctx.result && _ctx.result.arrow.overflow,
        "v-popper__popper--no-positioning": !_ctx.result
      }
    ]]),
    style: normalizeStyle$1(_ctx.result ? {
      position: _ctx.result.strategy,
      transform: `translate3d(${Math.round(_ctx.result.x)}px,${Math.round(_ctx.result.y)}px,0)`
    } : void 0),
    "aria-hidden": _ctx.shown ? "false" : "true",
    tabindex: _ctx.autoHide ? 0 : void 0,
    "data-popper-placement": _ctx.result ? _ctx.result.placement : void 0,
    onKeyup: _cache[2] || (_cache[2] = withKeys$1(($event) => _ctx.autoHide && _ctx.$emit("hide"), ["esc"]))
  }, [
    createBaseVNode$1("div", {
      class: "v-popper__backdrop",
      onClick: _cache[0] || (_cache[0] = ($event) => _ctx.autoHide && _ctx.$emit("hide"))
    }),
    createBaseVNode$1("div", {
      class: "v-popper__wrapper",
      style: normalizeStyle$1(_ctx.result ? {
        transformOrigin: _ctx.result.transformOrigin
      } : void 0)
    }, [
      createBaseVNode$1("div", _hoisted_2$1, [
        _ctx.mounted ? (openBlock$1(), createElementBlock$1(Fragment$1, { key: 0 }, [
          createBaseVNode$1("div", null, [
            renderSlot$1(_ctx.$slots, "default")
          ]),
          _ctx.handleResize ? (openBlock$1(), createBlock$1(_component_ResizeObserver, {
            key: 0,
            onNotify: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("resize", $event))
          })) : createCommentVNode$1("", true)
        ], 64)) : createCommentVNode$1("", true)
      ], 512),
      createBaseVNode$1("div", {
        ref: "arrow",
        class: "v-popper__arrow-container",
        style: normalizeStyle$1(_ctx.result ? {
          left: _ctx.toPx(_ctx.result.arrow.x),
          top: _ctx.toPx(_ctx.result.arrow.y)
        } : void 0)
      }, _hoisted_5, 4)
    ], 4)
  ], 46, _hoisted_1$1);
}
var PrivatePopperContent = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$2]]);
var PrivatePopperMethods = {
  methods: {
    show(...args) {
      return this.$refs.popper.show(...args);
    },
    hide(...args) {
      return this.$refs.popper.hide(...args);
    },
    dispose(...args) {
      return this.$refs.popper.dispose(...args);
    },
    onResize(...args) {
      return this.$refs.popper.onResize(...args);
    }
  }
};
const _sfc_main$4 = defineComponent$1({
  name: "VPopperWrapper",
  components: {
    Popper: Popper$1,
    PopperContent: PrivatePopperContent
  },
  mixins: [
    PrivatePopperMethods,
    PrivateThemeClass("finalTheme")
  ],
  props: {
    theme: {
      type: String,
      default: null
    }
  },
  computed: {
    finalTheme() {
      var _a2;
      return (_a2 = this.theme) != null ? _a2 : this.$options.vPopperTheme;
    }
  },
  methods: {
    getTargetNodes() {
      return Array.from(this.$el.children).filter((node) => node !== this.$refs.popperContent.$el);
    }
  }
});
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_PopperContent = resolveComponent$1("PopperContent");
  const _component_Popper = resolveComponent$1("Popper");
  return openBlock$1(), createBlock$1(_component_Popper, {
    ref: "popper",
    theme: _ctx.finalTheme,
    "target-nodes": _ctx.getTargetNodes,
    "popper-node": () => _ctx.$refs.popperContent.$el,
    class: normalizeClass$1([
      _ctx.themeClass
    ])
  }, {
    default: withCtx$1(({
      popperId,
      isShown,
      shouldMountContent,
      skipTransition,
      autoHide,
      show,
      hide,
      handleResize,
      onResize,
      classes,
      result
    }) => [
      renderSlot$1(_ctx.$slots, "default", {
        shown: isShown,
        show,
        hide
      }),
      createVNode$1(_component_PopperContent, {
        ref: "popperContent",
        "popper-id": popperId,
        theme: _ctx.finalTheme,
        shown: isShown,
        mounted: shouldMountContent,
        "skip-transition": skipTransition,
        "auto-hide": autoHide,
        "handle-resize": handleResize,
        classes,
        result,
        onHide: hide,
        onResize
      }, {
        default: withCtx$1(() => [
          renderSlot$1(_ctx.$slots, "popper", {
            shown: isShown,
            hide
          })
        ]),
        _: 2
      }, 1032, ["popper-id", "theme", "shown", "mounted", "skip-transition", "auto-hide", "handle-resize", "classes", "result", "onHide", "onResize"])
    ]),
    _: 3
  }, 8, ["theme", "target-nodes", "popper-node", "class"]);
}
var PrivatePopperWrapper = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$1]]);
const _sfc_main$3 = defineComponent$1(__spreadProps(__spreadValues$1({}, PrivatePopperWrapper), {
  name: "VDropdown",
  vPopperTheme: "dropdown"
}));
const _sfc_main$2 = defineComponent$1(__spreadProps(__spreadValues$1({}, PrivatePopperWrapper), {
  name: "VMenu",
  vPopperTheme: "menu"
}));
const _sfc_main$1 = defineComponent$1(__spreadProps(__spreadValues$1({}, PrivatePopperWrapper), {
  name: "VTooltip",
  vPopperTheme: "tooltip"
}));
const _sfc_main = defineComponent$1({
  name: "VTooltipDirective",
  components: {
    Popper: PrivatePopper(),
    PopperContent: PrivatePopperContent
  },
  mixins: [
    PrivatePopperMethods
  ],
  inheritAttrs: false,
  props: {
    theme: {
      type: String,
      default: "tooltip"
    },
    html: {
      type: Boolean,
      default: (props) => getDefaultConfig(props.theme, "html")
    },
    content: {
      type: [String, Number, Function],
      default: null
    },
    loadingContent: {
      type: String,
      default: (props) => getDefaultConfig(props.theme, "loadingContent")
    }
  },
  data() {
    return {
      asyncContent: null
    };
  },
  computed: {
    isContentAsync() {
      return typeof this.content === "function";
    },
    loading() {
      return this.isContentAsync && this.asyncContent == null;
    },
    finalContent() {
      if (this.isContentAsync) {
        return this.loading ? this.loadingContent : this.asyncContent;
      }
      return this.content;
    }
  },
  watch: {
    content: {
      handler() {
        this.fetchContent(true);
      },
      immediate: true
    },
    async finalContent() {
      await this.$nextTick();
      this.$refs.popper.onResize();
    }
  },
  created() {
    this.$_fetchId = 0;
  },
  methods: {
    fetchContent(force) {
      if (typeof this.content === "function" && this.$_isShown && (force || !this.$_loading && this.asyncContent == null)) {
        this.asyncContent = null;
        this.$_loading = true;
        const fetchId = ++this.$_fetchId;
        const result = this.content(this);
        if (result.then) {
          result.then((res) => this.onResult(fetchId, res));
        } else {
          this.onResult(fetchId, result);
        }
      }
    },
    onResult(fetchId, result) {
      if (fetchId !== this.$_fetchId)
        return;
      this.$_loading = false;
      this.asyncContent = result;
    },
    onShow() {
      this.$_isShown = true;
      this.fetchContent();
    },
    onHide() {
      this.$_isShown = false;
    }
  }
});
const _hoisted_1 = ["innerHTML"];
const _hoisted_2 = ["textContent"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_PopperContent = resolveComponent$1("PopperContent");
  const _component_Popper = resolveComponent$1("Popper");
  return openBlock$1(), createBlock$1(_component_Popper, mergeProps$1({ ref: "popper" }, _ctx.$attrs, {
    theme: _ctx.theme,
    "popper-node": () => _ctx.$refs.popperContent.$el,
    onApplyShow: _ctx.onShow,
    onApplyHide: _ctx.onHide
  }), {
    default: withCtx$1(({
      popperId,
      isShown,
      shouldMountContent,
      skipTransition,
      autoHide,
      hide,
      handleResize,
      onResize,
      classes,
      result
    }) => [
      createVNode$1(_component_PopperContent, {
        ref: "popperContent",
        class: normalizeClass$1({
          "v-popper--tooltip-loading": _ctx.loading
        }),
        "popper-id": popperId,
        theme: _ctx.theme,
        shown: isShown,
        mounted: shouldMountContent,
        "skip-transition": skipTransition,
        "auto-hide": autoHide,
        "handle-resize": handleResize,
        classes,
        result,
        onHide: hide,
        onResize
      }, {
        default: withCtx$1(() => [
          _ctx.html ? (openBlock$1(), createElementBlock$1("div", {
            key: 0,
            innerHTML: _ctx.finalContent
          }, null, 8, _hoisted_1)) : (openBlock$1(), createElementBlock$1("div", {
            key: 1,
            textContent: toDisplayString$1(_ctx.finalContent)
          }, null, 8, _hoisted_2))
        ]),
        _: 2
      }, 1032, ["class", "popper-id", "theme", "shown", "mounted", "skip-transition", "auto-hide", "handle-resize", "classes", "result", "onHide", "onResize"])
    ]),
    _: 1
  }, 16, ["theme", "popper-node", "onApplyShow", "onApplyHide"]);
}
var PrivateTooltipDirective = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
const TARGET_CLASS = "v-popper--has-tooltip";
function getPlacement(options2, modifiers) {
  let result = options2.placement;
  if (!result && modifiers) {
    for (const pos of placements) {
      if (modifiers[pos]) {
        result = pos;
      }
    }
  }
  if (!result) {
    result = getDefaultConfig(options2.theme || "tooltip", "placement");
  }
  return result;
}
function getOptions$1(el2, value, modifiers) {
  let options2;
  const type = typeof value;
  if (type === "string") {
    options2 = { content: value };
  } else if (value && type === "object") {
    options2 = value;
  } else {
    options2 = { content: false };
  }
  options2.placement = getPlacement(options2, modifiers);
  options2.targetNodes = () => [el2];
  options2.referenceNode = () => el2;
  return options2;
}
let directiveApp;
let directives;
let uid$2 = 0;
function ensureDirectiveApp() {
  if (directiveApp)
    return;
  directives = ref$1([]);
  directiveApp = createApp$1({
    name: "VTooltipDirectiveApp",
    setup() {
      return {
        directives
      };
    },
    render() {
      return this.directives.map((directive) => {
        return h$2(PrivateTooltipDirective, __spreadProps(__spreadValues$1({}, directive.options), {
          shown: directive.shown || directive.options.shown,
          key: directive.id
        }));
      });
    },
    devtools: {
      hide: true
    }
  });
  const mountTarget = document.createElement("div");
  document.body.appendChild(mountTarget);
  directiveApp.mount(mountTarget);
}
function createTooltip(el2, value, modifiers) {
  ensureDirectiveApp();
  const options2 = ref$1(getOptions$1(el2, value, modifiers));
  const shown = ref$1(false);
  const item = {
    id: uid$2++,
    options: options2,
    shown
  };
  directives.value.push(item);
  if (el2.classList) {
    el2.classList.add(TARGET_CLASS);
  }
  const result = el2.$_popper = {
    options: options2,
    item,
    show() {
      shown.value = true;
    },
    hide() {
      shown.value = false;
    }
  };
  return result;
}
function destroyTooltip(el2) {
  if (el2.$_popper) {
    const index = directives.value.indexOf(el2.$_popper.item);
    if (index !== -1)
      directives.value.splice(index, 1);
    delete el2.$_popper;
    delete el2.$_popperOldShown;
    delete el2.$_popperMountTarget;
  }
  if (el2.classList) {
    el2.classList.remove(TARGET_CLASS);
  }
}
function bind(el2, { value, modifiers }) {
  const options2 = getOptions$1(el2, value, modifiers);
  if (!options2.content || getDefaultConfig(options2.theme || "tooltip", "disabled")) {
    destroyTooltip(el2);
  } else {
    let directive;
    if (el2.$_popper) {
      directive = el2.$_popper;
      directive.options.value = options2;
    } else {
      directive = createTooltip(el2, value, modifiers);
    }
    if (typeof value.shown !== "undefined" && value.shown !== el2.$_popperOldShown) {
      el2.$_popperOldShown = value.shown;
      value.shown ? directive.show() : directive.hide();
    }
  }
}
var PrivateVTooltip = {
  beforeMount: bind,
  updated: bind,
  beforeUnmount(el2) {
    destroyTooltip(el2);
  }
};
function addListeners(el2) {
  el2.addEventListener("click", onClick);
  el2.addEventListener("touchstart", onTouchStart, supportsPassive ? {
    passive: true
  } : false);
}
function removeListeners(el2) {
  el2.removeEventListener("click", onClick);
  el2.removeEventListener("touchstart", onTouchStart);
  el2.removeEventListener("touchend", onTouchEnd);
  el2.removeEventListener("touchcancel", onTouchCancel);
}
function onClick(event) {
  const el2 = event.currentTarget;
  event.closePopover = !el2.$_vclosepopover_touch;
  event.closeAllPopover = el2.$_closePopoverModifiers && !!el2.$_closePopoverModifiers.all;
}
function onTouchStart(event) {
  if (event.changedTouches.length === 1) {
    const el2 = event.currentTarget;
    el2.$_vclosepopover_touch = true;
    const touch = event.changedTouches[0];
    el2.$_vclosepopover_touchPoint = touch;
    el2.addEventListener("touchend", onTouchEnd);
    el2.addEventListener("touchcancel", onTouchCancel);
  }
}
function onTouchEnd(event) {
  const el2 = event.currentTarget;
  el2.$_vclosepopover_touch = false;
  if (event.changedTouches.length === 1) {
    const touch = event.changedTouches[0];
    const firstTouch = el2.$_vclosepopover_touchPoint;
    event.closePopover = Math.abs(touch.screenY - firstTouch.screenY) < 20 && Math.abs(touch.screenX - firstTouch.screenX) < 20;
    event.closeAllPopover = el2.$_closePopoverModifiers && !!el2.$_closePopoverModifiers.all;
  }
}
function onTouchCancel(event) {
  const el2 = event.currentTarget;
  el2.$_vclosepopover_touch = false;
}
var PrivateVClosePopper = {
  beforeMount(el2, { value, modifiers }) {
    el2.$_closePopoverModifiers = modifiers;
    if (typeof value === "undefined" || value) {
      addListeners(el2);
    }
  },
  updated(el2, { value, oldValue, modifiers }) {
    el2.$_closePopoverModifiers = modifiers;
    if (value !== oldValue) {
      if (typeof value === "undefined" || value) {
        addListeners(el2);
      } else {
        removeListeners(el2);
      }
    }
  },
  beforeUnmount(el2) {
    removeListeners(el2);
  }
};
const VTooltip = PrivateVTooltip;
const Dropdown = _sfc_main$3;
function install(app, options2 = {}) {
  if (app.$_vTooltipInstalled)
    return;
  app.$_vTooltipInstalled = true;
  assign$1(config$2, options2);
  app.directive("tooltip", PrivateVTooltip);
  app.directive("close-popper", PrivateVClosePopper);
  app.component("VTooltip", _sfc_main$1);
  app.component("VDropdown", _sfc_main$3);
  app.component("VMenu", _sfc_main$2);
}
const plugin = {
  version: "2.0.0-beta.20",
  install,
  options: config$2
};
function makeMap(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i2 = 0; i2 < list.length; i2++) {
    map2[list[i2]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
const isGloballyWhitelisted = /* @__PURE__ */ makeMap(GLOBALS_WHITE_LISTED);
function normalizeStyle(value) {
  if (isArray$1(value)) {
    const res = {};
    for (let i2 = 0; i2 < value.length; i2++) {
      const item = value[i2];
      const normalized = isString$1(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString$1(value)) {
    return value;
  } else if (isObject(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*.*?\*\//gs;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString$1(value)) {
    res = value;
  } else if (isArray$1(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      const normalized = normalizeClass(value[i2]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props)
    return null;
  let { class: klass, style: style2 } = props;
  if (klass && !isString$1(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style2) {
    props.style = normalizeStyle(style2);
  }
  return props;
}
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
function looseCompareArrays(a2, b2) {
  if (a2.length !== b2.length)
    return false;
  let equal = true;
  for (let i2 = 0; equal && i2 < a2.length; i2++) {
    equal = looseEqual(a2[i2], b2[i2]);
  }
  return equal;
}
function looseEqual(a2, b2) {
  if (a2 === b2)
    return true;
  let aValidType = isDate(a2);
  let bValidType = isDate(b2);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a2.getTime() === b2.getTime() : false;
  }
  aValidType = isSymbol(a2);
  bValidType = isSymbol(b2);
  if (aValidType || bValidType) {
    return a2 === b2;
  }
  aValidType = isArray$1(a2);
  bValidType = isArray$1(b2);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a2, b2) : false;
  }
  aValidType = isObject(a2);
  bValidType = isObject(b2);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a2).length;
    const bKeysCount = Object.keys(b2).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a2) {
      const aHasKey = a2.hasOwnProperty(key);
      const bHasKey = b2.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a2[key], b2[key])) {
        return false;
      }
    }
  }
  return String(a2) === String(b2);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
const toDisplayString = (val) => {
  return isString$1(val) ? val : val == null ? "" : isArray$1(val) || isObject(val) && (val.toString === objectToString || !isFunction$1(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject(val) && !isArray$1(val) && !isPlainObject(val)) {
    return String(val);
  }
  return val;
};
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = () => {
};
const NO = () => false;
const onRE = /^on[^a-z]/;
const isOn = (key) => onRE.test(key);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el2) => {
  const i2 = arr.indexOf(el2);
  if (i2 > -1) {
    arr.splice(i2, 1);
  }
};
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty$1.call(val, key);
const isArray$1 = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isDate = (val) => toTypeString(val) === "[object Date]";
const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
const isFunction$1 = (val) => typeof val === "function";
const isString$1 = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return isObject(val) && isFunction$1(val.then) && isFunction$1(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString$1(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective = /* @__PURE__ */ makeMap("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
const cacheStringFunction = (fn2) => {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache2[str];
    return hit || (cache2[str] = fn2(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_2, c2) => c2 ? c2.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
const capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
const toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, arg) => {
  for (let i2 = 0; i2 < fns.length; i2++) {
    fns[i2](arg);
  }
};
const def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const looseToNumber = (val) => {
  const n2 = parseFloat(val);
  return isNaN(n2) ? val : n2;
};
const toNumber = (val) => {
  const n2 = isString$1(val) ? Number(val) : NaN;
  return isNaN(n2) ? val : n2;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function warn$2(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn2) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn2();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    } else {
      warn$2(`cannot run an inactive effect scope.`);
    }
  }
  on() {
    activeEffectScope = this;
  }
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i2, l2;
      for (i2 = 0, l2 = this.effects.length; i2 < l2; i2++) {
        this.effects[i2].stop();
      }
      for (i2 = 0, l2 = this.cleanups.length; i2 < l2; i2++) {
        this.cleanups[i2]();
      }
      if (this.scopes) {
        for (i2 = 0, l2 = this.scopes.length; i2 < l2; i2++) {
          this.scopes[i2].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect2, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect2);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn2) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn2);
  } else {
    warn$2(`onScopeDispose() is called when there is no active effect scope to be associated with.`);
  }
}
const createDep = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].w |= trackOpBit;
    }
  }
};
const finalizeDepMarkers = (effect2) => {
  const { deps } = effect2;
  if (deps.length) {
    let ptr = 0;
    for (let i2 = 0; i2 < deps.length; i2++) {
      const dep = deps[i2];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect2);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};
const targetMap = /* @__PURE__ */ new WeakMap();
let effectTrackDepth = 0;
let trackOpBit = 1;
const maxMarkerBits = 30;
let activeEffect;
const ITERATE_KEY = Symbol("iterate");
const MAP_KEY_ITERATE_KEY = Symbol("Map key iterate");
class ReactiveEffect {
  constructor(fn2, scheduler = null, scope) {
    this.fn = fn2;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent = activeEffect;
    let lastShouldTrack = shouldTrack;
    while (parent) {
      if (parent === this) {
        return;
      }
      parent = parent.parent;
    }
    try {
      this.parent = activeEffect;
      activeEffect = this;
      shouldTrack = true;
      trackOpBit = 1 << ++effectTrackDepth;
      if (effectTrackDepth <= maxMarkerBits) {
        initDepMarkers(this);
      } else {
        cleanupEffect(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth <= maxMarkerBits) {
        finalizeDepMarkers(this);
      }
      trackOpBit = 1 << --effectTrackDepth;
      activeEffect = this.parent;
      shouldTrack = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
}
function cleanupEffect(effect2) {
  const { deps } = effect2;
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].delete(effect2);
    }
    deps.length = 0;
  }
}
function effect(fn2, options) {
  if (fn2.effect) {
    fn2 = fn2.effect.fn;
  }
  const _effect = new ReactiveEffect(fn2);
  if (options) {
    extend(_effect, options);
    if (options.scope)
      recordEffectScope(_effect, options.scope);
  }
  if (!options || !options.lazy) {
    _effect.run();
  }
  const runner = _effect.run.bind(_effect);
  runner.effect = _effect;
  return runner;
}
function stop(runner) {
  runner.effect.stop();
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep());
    }
    const eventInfo = { effect: activeEffect, target, type, key };
    trackEffects(dep, eventInfo);
  }
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
    if (activeEffect.onTrack) {
      activeEffect.onTrack(Object.assign({ effect: activeEffect }, debuggerEventExtraInfo));
    }
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray$1(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray$1(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$1(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  const eventInfo = { target, type, key, newValue, oldValue, oldTarget };
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects(deps[0], eventInfo);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects(createDep(effects), eventInfo);
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  const effects = isArray$1(dep) ? dep : [...dep];
  for (const effect2 of effects) {
    if (effect2.computed) {
      triggerEffect(effect2, debuggerEventExtraInfo);
    }
  }
  for (const effect2 of effects) {
    if (!effect2.computed) {
      triggerEffect(effect2, debuggerEventExtraInfo);
    }
  }
}
function triggerEffect(effect2, debuggerEventExtraInfo) {
  if (effect2 !== activeEffect || effect2.allowRecurse) {
    if (effect2.onTrigger) {
      effect2.onTrigger(extend({ effect: effect2 }, debuggerEventExtraInfo));
    }
    if (effect2.scheduler) {
      effect2.scheduler();
    } else {
      effect2.run();
    }
  }
}
function getDepFromReactive(object, key) {
  var _a2;
  return (_a2 = targetMap.get(object)) === null || _a2 === void 0 ? void 0 : _a2.get(key);
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
const get$1 = /* @__PURE__ */ createGetter();
const shallowGet = /* @__PURE__ */ createGetter(false, true);
const readonlyGet = /* @__PURE__ */ createGetter(true);
const shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i2 = 0, l2 = this.length; i2 < l2; i2++) {
        track(arr, "get", i2 + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty(key) {
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray$1(target);
    if (!isReadonly2) {
      if (targetIsArray && hasOwn(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
const set$1 = /* @__PURE__ */ createSetter();
const shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set2(target, key, value, receiver) {
    let oldValue = target[key];
    if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
      return false;
    }
    if (!shallow) {
      if (!isShallow$1(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!isArray$1(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray$1(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn(target, key);
  const oldValue = target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function has$1(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target, "has", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, "iterate", isArray$1(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
const mutableHandlers = {
  get: get$1,
  set: set$1,
  deleteProperty,
  has: has$1,
  ownKeys
};
const readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    {
      warn$2(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
    }
    return true;
  },
  deleteProperty(target, key) {
    {
      warn$2(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
    }
    return true;
  }
};
const shallowReactiveHandlers = /* @__PURE__ */ extend({}, mutableHandlers, {
  get: shallowGet,
  set: shallowSet
});
const shallowReadonlyHandlers = /* @__PURE__ */ extend({}, readonlyHandlers, {
  get: shallowReadonlyGet
});
const toShallow = (value) => value;
const getProto = (v2) => Reflect.getPrototypeOf(v2);
function get(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap2 = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap2(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap2(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget = isMap(target) ? new Map(target) : new Set(target);
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly2, isShallow2) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap2 = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap2(value), wrap2(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap2 = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap2(value[0]), wrap2(value[1])] : wrap2(value),
          done
        };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
    }
    return type === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get(this, key);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has2, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType(target);
    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
  }
}
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function shallowReactive(target) {
  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function shallowReadonly(target) {
  return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject(target)) {
    {
      console.warn(`value cannot be made reactive: ${String(target)}`);
    }
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow$1(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  def(value, "__v_skip", true);
  return value;
}
const toReactive = (value) => isObject(value) ? reactive(value) : value;
const toReadonly = (value) => isObject(value) ? readonly(value) : value;
function trackRefValue(ref2) {
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    {
      trackEffects(ref2.dep || (ref2.dep = createDep()), {
        target: ref2,
        type: "get",
        key: "value"
      });
    }
  }
}
function triggerRefValue(ref2, newVal) {
  ref2 = toRaw(ref2);
  const dep = ref2.dep;
  if (dep) {
    {
      triggerEffects(dep, {
        target: ref2,
        type: "set",
        key: "value",
        newValue: newVal
      });
    }
  }
}
function isRef(r2) {
  return !!(r2 && r2.__v_isRef === true);
}
function ref(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw(value);
    this._value = __v_isShallow ? value : toReactive(value);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow$1(newVal) || isReadonly(newVal);
    newVal = useDirectValue ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive(newVal);
      triggerRefValue(this, newVal);
    }
  }
}
function triggerRef(ref2) {
  triggerRefValue(ref2, ref2.value);
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
  constructor(factory) {
    this.dep = void 0;
    this.__v_isRef = true;
    const { get: get2, set: set2 } = factory(() => trackRefValue(this), () => triggerRefValue(this));
    this._get = get2;
    this._set = set2;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
}
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs(object) {
  if (!isProxy(object)) {
    console.warn(`toRefs() expects a reactive object but received a plain one.`);
  }
  const ret = isArray$1(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = toRef(object, key);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
function toRef(object, key, defaultValue) {
  const val = object[key];
  return isRef(val) ? val : new ObjectRefImpl(object, key, defaultValue);
}
var _a$1$1;
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this[_a$1$1] = false;
    this._dirty = true;
    this.effect = new ReactiveEffect(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    trackRefValue(self2);
    if (self2._dirty || !self2._cacheable) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
}
_a$1$1 = "__v_isReadonly";
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction$1(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = () => {
      console.warn("Write operation failed: computed value is readonly");
    };
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  if (debugOptions && !isSSR) {
    cRef.effect.onTrack = debugOptions.onTrack;
    cRef.effect.onTrigger = debugOptions.onTrigger;
  }
  return cRef;
}
const stack = [];
function pushWarningContext(vnode) {
  stack.push(vnode);
}
function popWarningContext() {
  stack.pop();
}
function warn$1(msg, ...args) {
  pauseTracking();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(appWarnHandler, instance, 11, [
      msg + args.join(""),
      instance && instance.proxy,
      trace.map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`).join("\n"),
      trace
    ]);
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i2) => {
    logs.push(...i2 === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open2 = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
  const close = `>` + postfix;
  return vnode.props ? [open2, ...formatProps(vnode.props), close] : [open2 + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString$1(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction$1(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw(value);
    return raw ? value : [`${key}=`, value];
  }
}
function assertNumber(val, type) {
  if (val === void 0) {
    return;
  } else if (typeof val !== "number") {
    warn$1(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
  } else if (isNaN(val)) {
    warn$1(`${type} is NaN - the duration expression might be incorrect.`);
  }
}
const ErrorTypeStrings = {
  ["sp"]: "serverPrefetch hook",
  ["bc"]: "beforeCreate hook",
  ["c"]: "created hook",
  ["bm"]: "beforeMount hook",
  ["m"]: "mounted hook",
  ["bu"]: "beforeUpdate hook",
  ["u"]: "updated",
  ["bum"]: "beforeUnmount hook",
  ["um"]: "unmounted hook",
  ["a"]: "activated hook",
  ["da"]: "deactivated hook",
  ["ec"]: "errorCaptured hook",
  ["rtc"]: "renderTracked hook",
  ["rtg"]: "renderTriggered hook",
  [0]: "setup function",
  [1]: "render function",
  [2]: "watcher getter",
  [3]: "watcher callback",
  [4]: "watcher cleanup function",
  [5]: "native event handler",
  [6]: "component event handler",
  [7]: "vnode hook",
  [8]: "directive hook",
  [9]: "transition hook",
  [10]: "app errorHandler",
  [11]: "app warnHandler",
  [12]: "ref function",
  [13]: "async component loader",
  [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"
};
function callWithErrorHandling(fn2, instance, type, args) {
  let res;
  try {
    res = args ? fn2(...args) : fn2();
  } catch (err) {
    handleError(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn2, instance, type, args) {
  if (isFunction$1(fn2)) {
    const res = callWithErrorHandling(fn2, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i2 = 0; i2 < fn2.length; i2++) {
    values.push(callWithAsyncErrorHandling(fn2[i2], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = ErrorTypeStrings[type];
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
          if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  {
    const info = ErrorTypeStrings[type];
    if (contextVNode) {
      pushWarningContext(contextVNode);
    }
    warn$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
    if (contextVNode) {
      popWarningContext();
    }
    if (throwInDev) {
      throw err;
    } else {
      console.error(err);
    }
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
const RECURSION_LIMIT = 100;
function nextTick(fn2) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex(id2) {
  let start = flushIndex + 1;
  let end = queue.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJobId = getId(queue[middle]);
    middleJobId < id2 ? start = middle + 1 : end = middle;
  }
  return start;
}
function queueJob(job) {
  if (!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) {
    if (job.id == null) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i2 = queue.indexOf(job);
  if (i2 > flushIndex) {
    queue.splice(i2, 1);
  }
}
function queuePostFlushCb(cb) {
  if (!isArray$1(cb)) {
    if (!activePostFlushCbs || !activePostFlushCbs.includes(cb, cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex)) {
      pendingPostFlushCbs.push(cb);
    }
  } else {
    pendingPostFlushCbs.push(...cb);
  }
  queueFlush();
}
function flushPreFlushCbs(seen, i2 = isFlushing ? flushIndex + 1 : 0) {
  {
    seen = seen || /* @__PURE__ */ new Map();
  }
  for (; i2 < queue.length; i2++) {
    const cb = queue[i2];
    if (cb && cb.pre) {
      if (checkRecursiveUpdates(seen, cb)) {
        continue;
      }
      queue.splice(i2, 1);
      i2--;
      cb();
    }
  }
}
function flushPostFlushCbs(seen) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    {
      seen = seen || /* @__PURE__ */ new Map();
    }
    activePostFlushCbs.sort((a2, b2) => getId(a2) - getId(b2));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      if (checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) {
        continue;
      }
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
const comparator = (a2, b2) => {
  const diff = getId(a2) - getId(b2);
  if (diff === 0) {
    if (a2.pre && !b2.pre)
      return -1;
    if (b2.pre && !a2.pre)
      return 1;
  }
  return diff;
};
function flushJobs(seen) {
  isFlushPending = false;
  isFlushing = true;
  {
    seen = seen || /* @__PURE__ */ new Map();
  }
  queue.sort(comparator);
  const check = (job) => checkRecursiveUpdates(seen, job);
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && job.active !== false) {
        if (check(job)) {
          continue;
        }
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs(seen);
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPostFlushCbs.length) {
      flushJobs(seen);
    }
  }
}
function checkRecursiveUpdates(seen, fn2) {
  if (!seen.has(fn2)) {
    seen.set(fn2, 1);
  } else {
    const count2 = seen.get(fn2);
    if (count2 > RECURSION_LIMIT) {
      const instance = fn2.ownerInstance;
      const componentName = instance && getComponentName(instance.type);
      warn$1(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`);
      return true;
    } else {
      seen.set(fn2, count2 + 1);
    }
  }
}
let isHmrUpdating = false;
const hmrDirtyComponents = /* @__PURE__ */ new Set();
{
  getGlobalThis().__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap(createRecord),
    rerender: tryWrap(rerender),
    reload: tryWrap(reload)
  };
}
const map = /* @__PURE__ */ new Map();
function registerHMR(instance) {
  const id2 = instance.type.__hmrId;
  let record = map.get(id2);
  if (!record) {
    createRecord(id2, instance.type);
    record = map.get(id2);
  }
  record.instances.add(instance);
}
function unregisterHMR(instance) {
  map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id2, initialDef) {
  if (map.has(id2)) {
    return false;
  }
  map.set(id2, {
    initialDef: normalizeClassComponent(initialDef),
    instances: /* @__PURE__ */ new Set()
  });
  return true;
}
function normalizeClassComponent(component) {
  return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id2, newRender) {
  const record = map.get(id2);
  if (!record) {
    return;
  }
  record.initialDef.render = newRender;
  [...record.instances].forEach((instance) => {
    if (newRender) {
      instance.render = newRender;
      normalizeClassComponent(instance.type).render = newRender;
    }
    instance.renderCache = [];
    isHmrUpdating = true;
    instance.update();
    isHmrUpdating = false;
  });
}
function reload(id2, newComp) {
  const record = map.get(id2);
  if (!record)
    return;
  newComp = normalizeClassComponent(newComp);
  updateComponentDef(record.initialDef, newComp);
  const instances = [...record.instances];
  for (const instance of instances) {
    const oldComp = normalizeClassComponent(instance.type);
    if (!hmrDirtyComponents.has(oldComp)) {
      if (oldComp !== record.initialDef) {
        updateComponentDef(oldComp, newComp);
      }
      hmrDirtyComponents.add(oldComp);
    }
    instance.appContext.optionsCache.delete(instance.type);
    if (instance.ceReload) {
      hmrDirtyComponents.add(oldComp);
      instance.ceReload(newComp.styles);
      hmrDirtyComponents.delete(oldComp);
    } else if (instance.parent) {
      queueJob(instance.parent.update);
    } else if (instance.appContext.reload) {
      instance.appContext.reload();
    } else if (typeof window !== "undefined") {
      window.location.reload();
    } else {
      console.warn("[HMR] Root or manually mounted instance modified. Full reload required.");
    }
  }
  queuePostFlushCb(() => {
    for (const instance of instances) {
      hmrDirtyComponents.delete(normalizeClassComponent(instance.type));
    }
  });
}
function updateComponentDef(oldComp, newComp) {
  extend(oldComp, newComp);
  for (const key in oldComp) {
    if (key !== "__file" && !(key in newComp)) {
      delete oldComp[key];
    }
  }
}
function tryWrap(fn2) {
  return (id2, arg) => {
    try {
      return fn2(id2, arg);
    } catch (e2) {
      console.error(e2);
      console.warn(`[HMR] Something went wrong during Vue component hot-reload. Full reload required.`);
    }
  };
}
let devtools;
let buffer = [];
let devtoolsNotInstalled = false;
function emit$1(event, ...args) {
  if (devtools) {
    devtools.emit(event, ...args);
  } else if (!devtoolsNotInstalled) {
    buffer.push({ event, args });
  }
}
function setDevtoolsHook(hook, target) {
  var _a2, _b;
  devtools = hook;
  if (devtools) {
    devtools.enabled = true;
    buffer.forEach(({ event, args }) => devtools.emit(event, ...args));
    buffer = [];
  } else if (typeof window !== "undefined" && window.HTMLElement && !((_b = (_a2 = window.navigator) === null || _a2 === void 0 ? void 0 : _a2.userAgent) === null || _b === void 0 ? void 0 : _b.includes("jsdom"))) {
    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook(newHook, target);
    });
    setTimeout(() => {
      if (!devtools) {
        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        devtoolsNotInstalled = true;
        buffer = [];
      }
    }, 3e3);
  } else {
    devtoolsNotInstalled = true;
    buffer = [];
  }
}
function devtoolsInitApp(app, version2) {
  emit$1("app:init", app, version2, {
    Fragment,
    Text,
    Comment,
    Static
  });
}
function devtoolsUnmountApp(app) {
  emit$1("app:unmount", app);
}
const devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook("component:added");
const devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook("component:updated");
const _devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook("component:removed");
const devtoolsComponentRemoved = (component) => {
  if (devtools && typeof devtools.cleanupBuffer === "function" && !devtools.cleanupBuffer(component)) {
    _devtoolsComponentRemoved(component);
  }
};
function createDevtoolsComponentHook(hook) {
  return (component) => {
    emit$1(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : void 0, component);
  };
}
const devtoolsPerfStart = /* @__PURE__ */ createDevtoolsPerformanceHook("perf:start");
const devtoolsPerfEnd = /* @__PURE__ */ createDevtoolsPerformanceHook("perf:end");
function createDevtoolsPerformanceHook(hook) {
  return (component, type, time) => {
    emit$1(hook, component.appContext.app, component.uid, component, type, time);
  };
}
function devtoolsComponentEmit(component, event, params) {
  emit$1("component:emit", component.appContext.app, component, event, params);
}
function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ;
  {
    const { emitsOptions, propsOptions: [propsOptions] } = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions) && true) {
        if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {
          warn$1(`Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey(event)}" prop.`);
        }
      } else {
        const validator = emitsOptions[event];
        if (isFunction$1(validator)) {
          const isValid = validator(...rawArgs);
          if (!isValid) {
            warn$1(`Invalid event arguments: event validation failed for event "${event}".`);
          }
        }
      }
    }
  }
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number, trim } = props[modifiersKey] || EMPTY_OBJ;
    if (trim) {
      args = rawArgs.map((a2) => isString$1(a2) ? a2.trim() : a2);
    }
    if (number) {
      args = rawArgs.map(looseToNumber);
    }
  }
  {
    devtoolsComponentEmit(instance, event, args);
  }
  {
    const lowerCaseEvent = event.toLowerCase();
    if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {
      warn$1(`Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(instance, instance.type)} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate(event)}" instead of "${event}".`);
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(handler, instance, 6, args);
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(onceHandler, instance, 6, args);
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.emitsCache;
  const cached = cache2.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$1(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject(comp)) {
      cache2.set(comp, null);
    }
    return null;
  }
  if (isArray$1(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend(normalized, raw);
  }
  if (isObject(comp)) {
    cache2.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId(id2) {
  currentScopeId = id2;
}
function popScopeId() {
  currentScopeId = null;
}
const withScopeId = (_id) => withCtx;
function withCtx(fn2, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    let res;
    try {
      res = fn2(...args);
    } finally {
      setCurrentRenderingInstance(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking(1);
      }
    }
    {
      devtoolsComponentUpdated(ctx);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
let accessedAttrs = false;
function markAttrsAccessed() {
  accessedAttrs = true;
}
function renderComponentRoot(instance) {
  const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit: emit2, render: render2, renderCache, data, setupState, ctx, inheritAttrs } = instance;
  let result;
  let fallthroughAttrs;
  const prev = setCurrentRenderingInstance(instance);
  {
    accessedAttrs = false;
  }
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(render2.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render3 = Component;
      if (attrs === props) {
        markAttrsAccessed();
      }
      result = normalizeVNode(render3.length > 1 ? render3(props, true ? {
        get attrs() {
          markAttrsAccessed();
          return attrs;
        },
        slots,
        emit: emit2
      } : { attrs, slots, emit: emit2 }) : render3(props, null));
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment);
  }
  let root = result;
  let setRoot = void 0;
  if (result.patchFlag > 0 && result.patchFlag & 2048) {
    [root, setRoot] = getChildRoot(result);
  }
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
        }
        root = cloneVNode(root, fallthroughAttrs);
      } else if (!accessedAttrs && root.type !== Comment) {
        const allAttrs = Object.keys(attrs);
        const eventAttrs = [];
        const extraAttrs = [];
        for (let i2 = 0, l2 = allAttrs.length; i2 < l2; i2++) {
          const key = allAttrs[i2];
          if (isOn(key)) {
            if (!isModelListener(key)) {
              eventAttrs.push(key[2].toLowerCase() + key.slice(3));
            }
          } else {
            extraAttrs.push(key);
          }
        }
        if (extraAttrs.length) {
          warn$1(`Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`);
        }
        if (eventAttrs.length) {
          warn$1(`Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`);
        }
      }
    }
  }
  if (vnode.dirs) {
    if (!isElementRoot(root)) {
      warn$1(`Runtime directive used on component with non-element root node. The directives will not function as intended.`);
    }
    root = cloneVNode(root);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    if (!isElementRoot(root)) {
      warn$1(`Component inside <Transition> renders non-element root node that cannot be animated.`);
    }
    root.transition = vnode.transition;
  }
  if (setRoot) {
    setRoot(root);
  } else {
    result = root;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getChildRoot = (vnode) => {
  const rawChildren = vnode.children;
  const dynamicChildren = vnode.dynamicChildren;
  const childRoot = filterSingleRoot(rawChildren);
  if (!childRoot) {
    return [vnode, void 0];
  }
  const index = rawChildren.indexOf(childRoot);
  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
  const setRoot = (updatedRoot) => {
    rawChildren[index] = updatedRoot;
    if (dynamicChildren) {
      if (dynamicIndex > -1) {
        dynamicChildren[dynamicIndex] = updatedRoot;
      } else if (updatedRoot.patchFlag > 0) {
        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
      }
    }
  };
  return [normalizeVNode(childRoot), setRoot];
};
function filterSingleRoot(children) {
  let singleRoot;
  for (let i2 = 0; i2 < children.length; i2++) {
    const child = children[i2];
    if (isVNode(child)) {
      if (child.type !== Comment || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
const isElementRoot = (vnode) => {
  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if ((prevChildren || nextChildren) && isHmrUpdating) {
    return true;
  }
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i2 = 0; i2 < dynamicProps.length; i2++) {
        const key = dynamicProps[i2];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i2 = 0; i2 < nextKeys.length; i2++) {
    const key = nextKeys[i2];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el2) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el2;
    parent = parent.parent;
  }
}
const isSuspense = (type) => type.__isSuspense;
const SuspenseImpl = {
  name: "Suspense",
  __isSuspense: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
    if (n1 == null) {
      mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
    } else {
      patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
    }
  },
  hydrate: hydrateSuspense,
  create: createSuspenseBoundary,
  normalize: normalizeSuspenseChildren
};
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
  const eventListener = vnode.props && vnode.props[name];
  if (isFunction$1(eventListener)) {
    eventListener();
  }
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
  const { p: patch, o: { createElement } } = rendererInternals;
  const hiddenContainer = createElement("div");
  const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals);
  patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
  if (suspense.deps > 0) {
    triggerEvent(vnode, "onPending");
    triggerEvent(vnode, "onFallback");
    patch(
      null,
      vnode.ssFallback,
      container,
      anchor,
      parentComponent,
      null,
      isSVG,
      slotScopeIds
    );
    setActiveBranch(suspense, vnode.ssFallback);
  } else {
    suspense.resolve();
  }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
  const suspense = n2.suspense = n1.suspense;
  suspense.vnode = n2;
  n2.el = n1.el;
  const newBranch = n2.ssContent;
  const newFallback = n2.ssFallback;
  const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
  if (pendingBranch) {
    suspense.pendingBranch = newBranch;
    if (isSameVNodeType(newBranch, pendingBranch)) {
      patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else if (isInFallback) {
        patch(
          activeBranch,
          newFallback,
          container,
          anchor,
          parentComponent,
          null,
          isSVG,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, newFallback);
      }
    } else {
      suspense.pendingId++;
      if (isHydrating) {
        suspense.isHydrating = false;
        suspense.activeBranch = pendingBranch;
      } else {
        unmount(pendingBranch, parentComponent, suspense);
      }
      suspense.deps = 0;
      suspense.effects.length = 0;
      suspense.hiddenContainer = createElement("div");
      if (isInFallback) {
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        if (suspense.deps <= 0) {
          suspense.resolve();
        } else {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor,
            parentComponent,
            null,
            isSVG,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        suspense.resolve(true);
      } else {
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        if (suspense.deps <= 0) {
          suspense.resolve();
        }
      }
    }
  } else {
    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
      patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
      setActiveBranch(suspense, newBranch);
    } else {
      triggerEvent(n2, "onPending");
      suspense.pendingBranch = newBranch;
      suspense.pendingId++;
      patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else {
        const { timeout, pendingId } = suspense;
        if (timeout > 0) {
          setTimeout(() => {
            if (suspense.pendingId === pendingId) {
              suspense.fallback(newFallback);
            }
          }, timeout);
        } else if (timeout === 0) {
          suspense.fallback(newFallback);
        }
      }
    }
  }
}
let hasWarned = false;
function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
  if (!hasWarned) {
    hasWarned = true;
    console[console.info ? "info" : "log"](`<Suspense> is an experimental feature and its API will likely change.`);
  }
  const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove: remove2 } } = rendererInternals;
  const timeout = vnode.props ? toNumber(vnode.props.timeout) : void 0;
  {
    assertNumber(timeout, `Suspense timeout`);
  }
  const suspense = {
    vnode,
    parent,
    parentComponent,
    isSVG,
    container,
    hiddenContainer,
    anchor,
    deps: 0,
    pendingId: 0,
    timeout: typeof timeout === "number" ? timeout : -1,
    activeBranch: null,
    pendingBranch: null,
    isInFallback: true,
    isHydrating,
    isUnmounted: false,
    effects: [],
    resolve(resume = false) {
      {
        if (!resume && !suspense.pendingBranch) {
          throw new Error(`suspense.resolve() is called without a pending branch.`);
        }
        if (suspense.isUnmounted) {
          throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);
        }
      }
      const { vnode: vnode2, activeBranch, pendingBranch, pendingId, effects, parentComponent: parentComponent2, container: container2 } = suspense;
      if (suspense.isHydrating) {
        suspense.isHydrating = false;
      } else if (!resume) {
        const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
        if (delayEnter) {
          activeBranch.transition.afterLeave = () => {
            if (pendingId === suspense.pendingId) {
              move(pendingBranch, container2, anchor2, 0);
            }
          };
        }
        let { anchor: anchor2 } = suspense;
        if (activeBranch) {
          anchor2 = next(activeBranch);
          unmount(activeBranch, parentComponent2, suspense, true);
        }
        if (!delayEnter) {
          move(pendingBranch, container2, anchor2, 0);
        }
      }
      setActiveBranch(suspense, pendingBranch);
      suspense.pendingBranch = null;
      suspense.isInFallback = false;
      let parent2 = suspense.parent;
      let hasUnresolvedAncestor = false;
      while (parent2) {
        if (parent2.pendingBranch) {
          parent2.effects.push(...effects);
          hasUnresolvedAncestor = true;
          break;
        }
        parent2 = parent2.parent;
      }
      if (!hasUnresolvedAncestor) {
        queuePostFlushCb(effects);
      }
      suspense.effects = [];
      triggerEvent(vnode2, "onResolve");
    },
    fallback(fallbackVNode) {
      if (!suspense.pendingBranch) {
        return;
      }
      const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, isSVG: isSVG2 } = suspense;
      triggerEvent(vnode2, "onFallback");
      const anchor2 = next(activeBranch);
      const mountFallback = () => {
        if (!suspense.isInFallback) {
          return;
        }
        patch(
          null,
          fallbackVNode,
          container2,
          anchor2,
          parentComponent2,
          null,
          isSVG2,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, fallbackVNode);
      };
      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
      if (delayEnter) {
        activeBranch.transition.afterLeave = mountFallback;
      }
      suspense.isInFallback = true;
      unmount(
        activeBranch,
        parentComponent2,
        null,
        true
      );
      if (!delayEnter) {
        mountFallback();
      }
    },
    move(container2, anchor2, type) {
      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
      suspense.container = container2;
    },
    next() {
      return suspense.activeBranch && next(suspense.activeBranch);
    },
    registerDep(instance, setupRenderEffect) {
      const isInPendingSuspense = !!suspense.pendingBranch;
      if (isInPendingSuspense) {
        suspense.deps++;
      }
      const hydratedEl = instance.vnode.el;
      instance.asyncDep.catch((err) => {
        handleError(err, instance, 0);
      }).then((asyncSetupResult) => {
        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
          return;
        }
        instance.asyncResolved = true;
        const { vnode: vnode2 } = instance;
        {
          pushWarningContext(vnode2);
        }
        handleSetupResult(instance, asyncSetupResult, false);
        if (hydratedEl) {
          vnode2.el = hydratedEl;
        }
        const placeholder = !hydratedEl && instance.subTree.el;
        setupRenderEffect(
          instance,
          vnode2,
          parentNode(hydratedEl || instance.subTree.el),
          hydratedEl ? null : next(instance.subTree),
          suspense,
          isSVG,
          optimized
        );
        if (placeholder) {
          remove2(placeholder);
        }
        updateHOCHostEl(instance, vnode2.el);
        {
          popWarningContext();
        }
        if (isInPendingSuspense && --suspense.deps === 0) {
          suspense.resolve();
        }
      });
    },
    unmount(parentSuspense, doRemove) {
      suspense.isUnmounted = true;
      if (suspense.activeBranch) {
        unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);
      }
      if (suspense.pendingBranch) {
        unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);
      }
    }
  };
  return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
  const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement("div"), null, isSVG, slotScopeIds, optimized, rendererInternals, true);
  const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);
  if (suspense.deps === 0) {
    suspense.resolve();
  }
  return result;
}
function normalizeSuspenseChildren(vnode) {
  const { shapeFlag, children } = vnode;
  const isSlotChildren = shapeFlag & 32;
  vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
  vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
  let block;
  if (isFunction$1(s)) {
    const trackBlock = isBlockTreeEnabled && s._c;
    if (trackBlock) {
      s._d = false;
      openBlock();
    }
    s = s();
    if (trackBlock) {
      s._d = true;
      block = currentBlock;
      closeBlock();
    }
  }
  if (isArray$1(s)) {
    const singleChild = filterSingleRoot(s);
    if (!singleChild) {
      warn$1(`<Suspense> slots expect a single root node.`);
    }
    s = singleChild;
  }
  s = normalizeVNode(s);
  if (block && !s.dynamicChildren) {
    s.dynamicChildren = block.filter((c2) => c2 !== s);
  }
  return s;
}
function queueEffectWithSuspense(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$1(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb(fn2);
  }
}
function setActiveBranch(suspense, branch) {
  suspense.activeBranch = branch;
  const { vnode, parentComponent } = suspense;
  const el2 = vnode.el = branch.el;
  if (parentComponent && parentComponent.subTree === vnode) {
    parentComponent.vnode.el = el2;
    updateHOCHostEl(parentComponent, el2);
  }
}
function provide(key, value) {
  if (!currentInstance) {
    {
      warn$1(`provide() can only be used inside setup().`);
    }
  } else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance) {
    const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$1(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
    } else {
      warn$1(`injection "${String(key)}" not found.`);
    }
  } else {
    warn$1(`inject() can only be used inside setup() or functional components.`);
  }
}
function watchEffect(effect2, options) {
  return doWatch(effect2, null, options);
}
function watchPostEffect(effect2, options) {
  return doWatch(effect2, null, Object.assign(Object.assign({}, options), { flush: "post" }));
}
function watchSyncEffect(effect2, options) {
  return doWatch(effect2, null, Object.assign(Object.assign({}, options), { flush: "sync" }));
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  if (!isFunction$1(cb)) {
    warn$1(`\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`);
  }
  return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
  if (!cb) {
    if (immediate !== void 0) {
      warn$1(`watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`);
    }
    if (deep !== void 0) {
      warn$1(`watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`);
    }
  }
  const warnInvalidSource = (s) => {
    warn$1(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`);
  };
  const instance = getCurrentScope() === (currentInstance === null || currentInstance === void 0 ? void 0 : currentInstance.scope) ? currentInstance : null;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow$1(source);
  } else if (isReactive(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray$1(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s) => isReactive(s) || isShallow$1(s));
    getter = () => source.map((s) => {
      if (isRef(s)) {
        return s.value;
      } else if (isReactive(s)) {
        return traverse(s);
      } else if (isFunction$1(s)) {
        return callWithErrorHandling(s, instance, 2);
      } else {
        warnInvalidSource(s);
      }
    });
  } else if (isFunction$1(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(source, instance, 3, [onCleanup]);
      };
    }
  } else {
    getter = NOOP;
    warnInvalidSource(source);
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn2) => {
    cleanup = effect2.onStop = () => {
      callWithErrorHandling(fn2, instance, 4);
    };
  };
  let ssrCleanup;
  if (isInSSRComponentSetup) {
    onCleanup = NOOP;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    if (flush === "sync") {
      const ctx = useSSRContext();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else {
      return NOOP;
    }
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect2.active) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v2, i2) => hasChanged(v2, oldValue[i2])) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect2.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance)
      job.id = instance.uid;
    scheduler = () => queueJob(job);
  }
  const effect2 = new ReactiveEffect(getter, scheduler);
  {
    effect2.onTrack = onTrack;
    effect2.onTrigger = onTrigger;
  }
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect2.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(effect2.run.bind(effect2), instance && instance.suspense);
  } else {
    effect2.run();
  }
  const unwatch = () => {
    effect2.stop();
    if (instance && instance.scope) {
      remove(instance.scope.effects, effect2);
    }
  };
  if (ssrCleanup)
    ssrCleanup.push(unwatch);
  return unwatch;
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString$1(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction$1(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const cur = currentInstance;
  setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance(cur);
  } else {
    unsetCurrentInstance();
  }
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i2 = 0; i2 < segments.length && cur; i2++) {
      cur = cur[segments[i2]];
    }
    return cur;
  };
}
function traverse(value, seen) {
  if (!isObject(value) || value["__v_skip"]) {
    return value;
  }
  seen = seen || /* @__PURE__ */ new Set();
  if (seen.has(value)) {
    return value;
  }
  seen.add(value);
  if (isRef(value)) {
    traverse(value.value, seen);
  } else if (isArray$1(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      traverse(value[i2], seen);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v2) => {
      traverse(v2, seen);
    });
  } else if (isPlainObject(value)) {
    for (const key in value) {
      traverse(value[key], seen);
    }
  }
  return value;
}
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    onBeforeEnter: TransitionHookValidator,
    onEnter: TransitionHookValidator,
    onAfterEnter: TransitionHookValidator,
    onEnterCancelled: TransitionHookValidator,
    onBeforeLeave: TransitionHookValidator,
    onLeave: TransitionHookValidator,
    onAfterLeave: TransitionHookValidator,
    onLeaveCancelled: TransitionHookValidator,
    onBeforeAppear: TransitionHookValidator,
    onAppear: TransitionHookValidator,
    onAfterAppear: TransitionHookValidator,
    onAppearCancelled: TransitionHookValidator
  },
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        let hasFound = false;
        for (const c2 of children) {
          if (c2.type !== Comment) {
            if (hasFound) {
              warn$1("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
              break;
            }
            child = c2;
            hasFound = true;
          }
        }
      }
      const rawProps = toRaw(props);
      const { mode } = rawProps;
      if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
        warn$1(`invalid <transition> mode: ${mode}`);
      }
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      let transitionKeyChanged = false;
      const { getTransitionKey } = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === "out-in") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (instance.update.active !== false) {
              instance.update();
            }
          };
          return emptyPlaceholder(child);
        } else if (mode === "in-out" && innerChild.type !== Comment) {
          leavingHooks.delayLeave = (el2, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el2._leaveCb = () => {
              earlyRemove();
              el2._leaveCb = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance) {
  const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling(hook, instance, 9, args);
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook2(hook, args);
    if (isArray$1(hook)) {
      if (hook.every((hook2) => hook2.length <= 1))
        done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el2) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el2._leaveCb) {
        el2._leaveCb(true);
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook2(hook, [el2]);
    },
    enter(el2) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el2._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el2]);
        } else {
          callHook2(afterHook, [el2]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el2._enterCb = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el2, done]);
      } else {
        done();
      }
    },
    leave(el2, remove2) {
      const key2 = String(vnode.key);
      if (el2._enterCb) {
        el2._enterCb(true);
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el2]);
      let called = false;
      const done = el2._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el2]);
        } else {
          callHook2(onAfterLeave, [el2]);
        }
        el2._leaveCb = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el2, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks(vnode2, props, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i2 = 0; i2 < children.length; i2++) {
    let child = children[i2];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i2);
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));
    } else if (keepComment || child.type !== Comment) {
      ret.push(key != null ? cloneVNode(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i2 = 0; i2 < ret.length; i2++) {
      ret[i2].patchFlag = -2;
    }
  }
  return ret;
}
function defineComponent(options) {
  return isFunction$1(options) ? { setup: options, name: options.name } : options;
}
const isAsyncWrapper = (i2) => !!i2.type.__asyncLoader;
function defineAsyncComponent(source) {
  if (isFunction$1(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (!comp) {
        warn$1(`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`);
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      if (comp && !isObject(comp) && !isFunction$1(comp)) {
        throw new Error(`Invalid async component load result: ${comp}`);
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return defineComponent({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance;
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError(err, instance, 13, !errorComponent);
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded2 = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded2.value && !error.value) {
            const err = new Error(`Async component timed out after ${timeout}ms.`);
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded2.value = true;
        if (instance.parent && isKeepAlive(instance.parent.vnode)) {
          queueJob(instance.parent.update);
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded2.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, parent) {
  const { ref: ref2, props, children, ce: ce2 } = parent.vnode;
  const vnode = createVNode(comp, props, children);
  vnode.ref = ref2;
  vnode.ce = ce2;
  delete parent.vnode.ce;
  return vnode;
}
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
const KeepAliveImpl = {
  name: `KeepAlive`,
  __isKeepAlive: true,
  props: {
    include: [String, RegExp, Array],
    exclude: [String, RegExp, Array],
    max: [String, Number]
  },
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const sharedContext = instance.ctx;
    if (!sharedContext.renderer) {
      return () => {
        const children = slots.default && slots.default();
        return children && children.length === 1 ? children[0] : children;
      };
    }
    const cache2 = /* @__PURE__ */ new Map();
    const keys = /* @__PURE__ */ new Set();
    let current = null;
    {
      instance.__v_cache = cache2;
    }
    const parentSuspense = instance.suspense;
    const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;
    const storageContainer = createElement("div");
    sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {
      const instance2 = vnode.component;
      move(vnode, container, anchor, 0, parentSuspense);
      patch(instance2.vnode, vnode, container, anchor, instance2, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
      queuePostRenderEffect(() => {
        instance2.isDeactivated = false;
        if (instance2.a) {
          invokeArrayFns(instance2.a);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
      }, parentSuspense);
      {
        devtoolsComponentAdded(instance2);
      }
    };
    sharedContext.deactivate = (vnode) => {
      const instance2 = vnode.component;
      move(vnode, storageContainer, null, 1, parentSuspense);
      queuePostRenderEffect(() => {
        if (instance2.da) {
          invokeArrayFns(instance2.da);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
        instance2.isDeactivated = true;
      }, parentSuspense);
      {
        devtoolsComponentAdded(instance2);
      }
    };
    function unmount(vnode) {
      resetShapeFlag(vnode);
      _unmount(vnode, instance, parentSuspense, true);
    }
    function pruneCache(filter) {
      cache2.forEach((vnode, key) => {
        const name = getComponentName(vnode.type);
        if (name && (!filter || !filter(name))) {
          pruneCacheEntry(key);
        }
      });
    }
    function pruneCacheEntry(key) {
      const cached = cache2.get(key);
      if (!current || !isSameVNodeType(cached, current)) {
        unmount(cached);
      } else if (current) {
        resetShapeFlag(current);
      }
      cache2.delete(key);
      keys.delete(key);
    }
    watch(
      () => [props.include, props.exclude],
      ([include, exclude]) => {
        include && pruneCache((name) => matches$1(include, name));
        exclude && pruneCache((name) => !matches$1(exclude, name));
      },
      { flush: "post", deep: true }
    );
    let pendingCacheKey = null;
    const cacheSubtree = () => {
      if (pendingCacheKey != null) {
        cache2.set(pendingCacheKey, getInnerChild(instance.subTree));
      }
    };
    onMounted(cacheSubtree);
    onUpdated(cacheSubtree);
    onBeforeUnmount(() => {
      cache2.forEach((cached) => {
        const { subTree, suspense } = instance;
        const vnode = getInnerChild(subTree);
        if (cached.type === vnode.type && cached.key === vnode.key) {
          resetShapeFlag(vnode);
          const da2 = vnode.component.da;
          da2 && queuePostRenderEffect(da2, suspense);
          return;
        }
        unmount(cached);
      });
    });
    return () => {
      pendingCacheKey = null;
      if (!slots.default) {
        return null;
      }
      const children = slots.default();
      const rawVNode = children[0];
      if (children.length > 1) {
        {
          warn$1(`KeepAlive should contain exactly one component child.`);
        }
        current = null;
        return children;
      } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
        current = null;
        return rawVNode;
      }
      let vnode = getInnerChild(rawVNode);
      const comp = vnode.type;
      const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp);
      const { include, exclude, max: max2 } = props;
      if (include && (!name || !matches$1(include, name)) || exclude && name && matches$1(exclude, name)) {
        current = vnode;
        return rawVNode;
      }
      const key = vnode.key == null ? comp : vnode.key;
      const cachedVNode = cache2.get(key);
      if (vnode.el) {
        vnode = cloneVNode(vnode);
        if (rawVNode.shapeFlag & 128) {
          rawVNode.ssContent = vnode;
        }
      }
      pendingCacheKey = key;
      if (cachedVNode) {
        vnode.el = cachedVNode.el;
        vnode.component = cachedVNode.component;
        if (vnode.transition) {
          setTransitionHooks(vnode, vnode.transition);
        }
        vnode.shapeFlag |= 512;
        keys.delete(key);
        keys.add(key);
      } else {
        keys.add(key);
        if (max2 && keys.size > parseInt(max2, 10)) {
          pruneCacheEntry(keys.values().next().value);
        }
      }
      vnode.shapeFlag |= 256;
      current = vnode;
      return isSuspense(rawVNode.type) ? rawVNode : vnode;
    };
  }
};
const KeepAlive = KeepAliveImpl;
function matches$1(pattern, name) {
  if (isArray$1(pattern)) {
    return pattern.some((p2) => matches$1(p2, name));
  } else if (isString$1(pattern)) {
    return pattern.split(",").includes(name);
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  return false;
}
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(type, hook, keepAliveRoot, true);
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function resetShapeFlag(vnode) {
  vnode.shapeFlag &= ~256;
  vnode.shapeFlag &= ~512;
}
function getInnerChild(vnode) {
  return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      unsetCurrentInstance();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else {
    const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ""));
    warn$1(`${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`);
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, (...args) => hook(...args), target);
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook("rtg");
const onRenderTracked = createHook("rtc");
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
function validateDirectiveName(name) {
  if (isBuiltInDirective(name)) {
    warn$1("Do not use built-in directive ids as custom directive id: " + name);
  }
}
function withDirectives(vnode, directives2) {
  const internalInstance = currentRenderingInstance;
  if (internalInstance === null) {
    warn$1(`withDirectives can only be used inside render functions.`);
    return vnode;
  }
  const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i2 = 0; i2 < directives2.length; i2++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives2[i2];
    if (dir) {
      if (isFunction$1(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse(value);
      }
      bindings.push({
        dir,
        instance,
        value,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i2 = 0; i2 < bindings.length; i2++) {
    const binding = bindings[i2];
    if (oldBindings) {
      binding.oldValue = oldBindings[i2].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
const COMPONENTS = "components";
const DIRECTIVES = "directives";
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
function resolveDynamicComponent(component) {
  if (isString$1(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveDirective(name) {
  return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      const selfName = getComponentName(Component, false);
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
        return Component;
      }
    }
    const res = resolve(instance[type] || Component[type], name) || resolve(instance.appContext[type], name);
    if (!res && maybeSelfReference) {
      return Component;
    }
    if (warnMissing && !res) {
      const extra = type === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
      warn$1(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
    }
    return res;
  } else {
    warn$1(`resolve${capitalize(type.slice(0, -1))} can only be used in render() or setup().`);
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
}
function renderList(source, renderItem, cache2, index) {
  let ret;
  const cached = cache2 && cache2[index];
  if (isArray$1(source) || isString$1(source)) {
    ret = new Array(source.length);
    for (let i2 = 0, l2 = source.length; i2 < l2; i2++) {
      ret[i2] = renderItem(source[i2], i2, void 0, cached && cached[i2]);
    }
  } else if (typeof source === "number") {
    if (!Number.isInteger(source)) {
      warn$1(`The v-for range expect an integer value but got ${source}.`);
    }
    ret = new Array(source);
    for (let i2 = 0; i2 < source; i2++) {
      ret[i2] = renderItem(i2 + 1, i2, void 0, cached && cached[i2]);
    }
  } else if (isObject(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(source, (item, i2) => renderItem(item, i2, void 0, cached && cached[i2]));
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
        const key = keys[i2];
        ret[i2] = renderItem(source[key], key, i2, cached && cached[i2]);
      }
    }
  } else {
    ret = [];
  }
  if (cache2) {
    cache2[index] = ret;
  }
  return ret;
}
function createSlots(slots, dynamicSlots) {
  for (let i2 = 0; i2 < dynamicSlots.length; i2++) {
    const slot = dynamicSlots[i2];
    if (isArray$1(slot)) {
      for (let j2 = 0; j2 < slot.length; j2++) {
        slots[slot[j2].name] = slot[j2].fn;
      }
    } else if (slot) {
      slots[slot.name] = slot.key ? (...args) => {
        const res = slot.fn(...args);
        if (res)
          res.key = slot.key;
        return res;
      } : slot.fn;
    }
  }
  return slots;
}
function renderSlot(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
    if (name !== "default")
      props.name = name;
    return createVNode("slot", props, fallback && fallback());
  }
  let slot = slots[name];
  if (slot && slot.length > 1) {
    warn$1(`SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`);
    slot = () => [];
  }
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock();
  const validSlotContent = slot && ensureValidVNode(slot(props));
  const rendered = createBlock(Fragment, {
    key: props.key || validSlotContent && validSlotContent.key || `_${name}`
  }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 ? 64 : -2);
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode(child))
      return true;
    if (child.type === Comment)
      return false;
    if (child.type === Fragment && !ensureValidVNode(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
function toHandlers(obj, preserveCaseIfNecessary) {
  const ret = {};
  if (!isObject(obj)) {
    warn$1(`v-on with no argument expects an object value.`);
    return ret;
  }
  for (const key in obj) {
    ret[preserveCaseIfNecessary && /[A-Z]/.test(key) ? `on:${key}` : toHandlerKey(key)] = obj[key];
  }
  return ret;
}
const getPublicInstance = (i2) => {
  if (!i2)
    return null;
  if (isStatefulComponent(i2))
    return getExposeProxy(i2) || i2.proxy;
  return getPublicInstance(i2.parent);
};
const publicPropertiesMap = /* @__PURE__ */ extend(/* @__PURE__ */ Object.create(null), {
  $: (i2) => i2,
  $el: (i2) => i2.vnode.el,
  $data: (i2) => i2.data,
  $props: (i2) => shallowReadonly(i2.props),
  $attrs: (i2) => shallowReadonly(i2.attrs),
  $slots: (i2) => shallowReadonly(i2.slots),
  $refs: (i2) => shallowReadonly(i2.refs),
  $parent: (i2) => getPublicInstance(i2.parent),
  $root: (i2) => getPublicInstance(i2.root),
  $emit: (i2) => i2.emit,
  $options: (i2) => resolveMergedOptions(i2),
  $forceUpdate: (i2) => i2.f || (i2.f = () => queueJob(i2.update)),
  $nextTick: (i2) => i2.n || (i2.n = nextTick.bind(i2.proxy)),
  $watch: (i2) => instanceWatch.bind(i2)
});
const isReservedPrefix = (key) => key === "_" || key === "$";
const hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn(state, key);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    if (key === "__isVue") {
      return true;
    }
    let normalizedProps;
    if (key[0] !== "$") {
      const n2 = accessCache[key];
      if (n2 !== void 0) {
        switch (n2) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if ((normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance, "get", key);
        markAttrsAccessed();
      }
      return publicGetter(instance);
    } else if ((cssModule = type.__cssModules) && (cssModule = cssModule[key])) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)) {
      {
        return globalProperties[key];
      }
    } else if (currentRenderingInstance && (!isString$1(key) || key.indexOf("__v") !== 0)) {
      if (data !== EMPTY_OBJ && isReservedPrefix(key[0]) && hasOwn(data, key)) {
        warn$1(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`);
      } else if (instance === currentRenderingInstance) {
        warn$1(`Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`);
      }
    }
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (setupState.__isScriptSetup && hasOwn(setupState, key)) {
      warn$1(`Cannot mutate <script setup> binding "${key}" from Options API.`);
      return false;
    } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn(instance.props, key)) {
      warn$1(`Attempting to mutate prop "${key}". Props are readonly.`);
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      warn$1(`Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`);
      return false;
    } else {
      if (key in instance.appContext.config.globalProperties) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          value
        });
      } else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
{
  PublicInstanceProxyHandlers.ownKeys = (target) => {
    warn$1(`Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`);
    return Reflect.ownKeys(target);
  };
}
const RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */ extend({}, PublicInstanceProxyHandlers, {
  get(target, key) {
    if (key === Symbol.unscopables) {
      return;
    }
    return PublicInstanceProxyHandlers.get(target, key, target);
  },
  has(_2, key) {
    const has2 = key[0] !== "_" && !isGloballyWhitelisted(key);
    if (!has2 && PublicInstanceProxyHandlers.has(_2, key)) {
      warn$1(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);
    }
    return has2;
  }
});
function createDevRenderContext(instance) {
  const target = {};
  Object.defineProperty(target, `_`, {
    configurable: true,
    enumerable: false,
    get: () => instance
  });
  Object.keys(publicPropertiesMap).forEach((key) => {
    Object.defineProperty(target, key, {
      configurable: true,
      enumerable: false,
      get: () => publicPropertiesMap[key](instance),
      set: NOOP
    });
  });
  return target;
}
function exposePropsOnRenderContext(instance) {
  const { ctx, propsOptions: [propsOptions] } = instance;
  if (propsOptions) {
    Object.keys(propsOptions).forEach((key) => {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => instance.props[key],
        set: NOOP
      });
    });
  }
}
function exposeSetupStateOnRenderContext(instance) {
  const { ctx, setupState } = instance;
  Object.keys(toRaw(setupState)).forEach((key) => {
    if (!setupState.__isScriptSetup) {
      if (isReservedPrefix(key[0])) {
        warn$1(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);
        return;
      }
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => setupState[key],
        set: NOOP
      });
    }
  });
}
function createDuplicateChecker() {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (type, key) => {
    if (cache2[key]) {
      warn$1(`${type} property "${key}" is already defined in ${cache2[key]}.`);
    } else {
      cache2[key] = type;
    }
  };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook$1(options.beforeCreate, instance, "bc");
  }
  const {
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    expose,
    inheritAttrs,
    components,
    directives: directives2,
    filters
  } = options;
  const checkDuplicateProperties = createDuplicateChecker();
  {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties("Props", key);
      }
    }
  }
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction$1(methodHandler)) {
        {
          Object.defineProperty(ctx, key, {
            value: methodHandler.bind(publicThis),
            configurable: true,
            enumerable: true,
            writable: true
          });
        }
        {
          checkDuplicateProperties("Methods", key);
        }
      } else {
        warn$1(`Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`);
      }
    }
  }
  if (dataOptions) {
    if (!isFunction$1(dataOptions)) {
      warn$1(`The data option must be a function. Plain object usage is no longer supported.`);
    }
    const data = dataOptions.call(publicThis, publicThis);
    if (isPromise(data)) {
      warn$1(`data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`);
    }
    if (!isObject(data)) {
      warn$1(`data() should return an object.`);
    } else {
      instance.data = reactive(data);
      {
        for (const key in data) {
          checkDuplicateProperties("Data", key);
          if (!isReservedPrefix(key[0])) {
            Object.defineProperty(ctx, key, {
              configurable: true,
              enumerable: true,
              get: () => data[key],
              set: NOOP
            });
          }
        }
      }
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction$1(opt) ? opt.bind(publicThis, publicThis) : isFunction$1(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      if (get2 === NOOP) {
        warn$1(`Computed property "${key}" has no getter.`);
      }
      const set2 = !isFunction$1(opt) && isFunction$1(opt.set) ? opt.set.bind(publicThis) : () => {
        warn$1(`Write operation failed: computed property "${key}" is readonly.`);
      };
      const c2 = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c2.value,
        set: (v2) => c2.value = v2
      });
      {
        checkDuplicateProperties("Computed", key);
      }
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction$1(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook$1(created, instance, "c");
  }
  function registerLifecycleHook(register, hook) {
    if (isArray$1(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$1(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives2)
    instance.directives = directives2;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {
  if (isArray$1(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject(opt)) {
      if ("default" in opt) {
        injected = inject(opt.from || key, opt.default, true);
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      if (unwrapRef) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => injected.value,
          set: (v2) => injected.value = v2
        });
      } else {
        {
          warn$1(`injected property "${key}" is a ref and will be auto-unwrapped and no longer needs \`.value\` in the next minor release. To opt-in to the new behavior now, set \`app.config.unwrapInjectedRef = true\` (this config is temporary and will not be needed in the future.)`);
        }
        ctx[key] = injected;
      }
    } else {
      ctx[key] = injected;
    }
    {
      checkDuplicateProperties("Inject", key);
    }
  }
}
function callHook$1(hook, instance, type) {
  callWithAsyncErrorHandling(isArray$1(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString$1(raw)) {
    const handler = ctx[raw];
    if (isFunction$1(handler)) {
      watch(getter, handler);
    } else {
      warn$1(`Invalid watch handler specified by key "${raw}"`, handler);
    }
  } else if (isFunction$1(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject(raw)) {
    if (isArray$1(raw)) {
      raw.forEach((r2) => createWatcher(r2, ctx, publicThis, key));
    } else {
      const handler = isFunction$1(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$1(handler)) {
        watch(getter, handler, raw);
      } else {
        warn$1(`Invalid watch handler specified by key "${raw.handler}"`, handler);
      }
    }
  } else {
    warn$1(`Invalid watch option: "${key}"`, raw);
  }
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const { mixins: globalMixins, optionsCache: cache2, config: { optionMergeStrategies } } = instance.appContext;
  const cached = cache2.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach((m2) => mergeOptions$1(resolved, m2, optionMergeStrategies, true));
    }
    mergeOptions$1(resolved, base, optionMergeStrategies);
  }
  if (isObject(base)) {
    cache2.set(base, resolved);
  }
  return resolved;
}
function mergeOptions$1(to2, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions$1(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach((m2) => mergeOptions$1(to2, m2, strats, true));
  }
  for (const key in from) {
    if (asMixin && key === "expose") {
      warn$1(`"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`);
    } else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from[key]) : from[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeObjectOptions,
  emits: mergeObjectOptions,
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  watch: mergeWatchOptions,
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to2, from) {
  if (!from) {
    return to2;
  }
  if (!to2) {
    return from;
  }
  return function mergedDataFn() {
    return extend(isFunction$1(to2) ? to2.call(this, this) : to2, isFunction$1(from) ? from.call(this, this) : from);
  };
}
function mergeInject(to2, from) {
  return mergeObjectOptions(normalizeInject(to2), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray$1(raw)) {
    const res = {};
    for (let i2 = 0; i2 < raw.length; i2++) {
      res[raw[i2]] = raw[i2];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to2, from) {
  return to2 ? [...new Set([].concat(to2, from))] : from;
}
function mergeObjectOptions(to2, from) {
  return to2 ? extend(extend(/* @__PURE__ */ Object.create(null), to2), from) : from;
}
function mergeWatchOptions(to2, from) {
  if (!to2)
    return from;
  if (!from)
    return to2;
  const merged = extend(/* @__PURE__ */ Object.create(null), to2);
  for (const key in from) {
    merged[key] = mergeAsArray(to2[key], from[key]);
  }
  return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  {
    validateProps(rawProps || {}, props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function isInHmrContext(instance) {
  while (instance) {
    if (instance.type.__hmrId)
      return true;
    instance = instance.parent;
  }
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const { props, attrs, vnode: { patchFlag } } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (!isInHmrContext(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
        let key = propsToUpdate[i2];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || !hasOwn(rawProps, key) && ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && (rawPrevProps[key] !== void 0 || rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(options, rawCurrentProps, key, void 0, instance, true);
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance, "set", "$attrs");
  }
  {
    validateProps(rawProps || {}, props, instance);
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i2 = 0; i2 < needCastKeys.length; i2++) {
      const key = needCastKeys[i2];
      props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction$1(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(null, props);
          unsetCurrentInstance();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[0]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[1] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.propsCache;
  const cached = cache2.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$1(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject(comp)) {
      cache2.set(comp, EMPTY_ARR);
    }
    return EMPTY_ARR;
  }
  if (isArray$1(raw)) {
    for (let i2 = 0; i2 < raw.length; i2++) {
      if (!isString$1(raw[i2])) {
        warn$1(`props must be strings when using array syntax.`, raw[i2]);
      }
      const normalizedKey = camelize(raw[i2]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    if (!isObject(raw)) {
      warn$1(`invalid props options`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$1(opt) || isFunction$1(opt) ? { type: opt } : Object.assign({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[0] = booleanIndex > -1;
          prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject(comp)) {
    cache2.set(comp, res);
  }
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$") {
    return true;
  } else {
    warn$1(`Invalid prop name: "${key}" is a reserved property.`);
  }
  return false;
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\s*(function|class) (\w+)/);
  return match ? match[2] : ctor === null ? "null" : "";
}
function isSameType(a2, b2) {
  return getType(a2) === getType(b2);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray$1(expectedTypes)) {
    return expectedTypes.findIndex((t2) => isSameType(t2, type));
  } else if (isFunction$1(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validateProps(rawProps, props, instance) {
  const resolvedValues = toRaw(props);
  const options = instance.propsOptions[0];
  for (const key in options) {
    let opt = options[key];
    if (opt == null)
      continue;
    validateProp(key, resolvedValues[key], opt, !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key)));
  }
}
function validateProp(name, value, prop, isAbsent) {
  const { type, required, validator } = prop;
  if (required && isAbsent) {
    warn$1('Missing required prop: "' + name + '"');
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  if (type != null && type !== true) {
    let isValid = false;
    const types = isArray$1(type) ? type : [type];
    const expectedTypes = [];
    for (let i2 = 0; i2 < types.length && !isValid; i2++) {
      const { valid, expectedType } = assertType(value, types[i2]);
      expectedTypes.push(expectedType || "");
      isValid = valid;
    }
    if (!isValid) {
      warn$1(getInvalidTypeMessage(name, value, expectedTypes));
      return;
    }
  }
  if (validator && !validator(value)) {
    warn$1('Invalid prop: custom validator check failed for prop "' + name + '".');
  }
}
const isSimpleType = /* @__PURE__ */ makeMap("String,Number,Boolean,Function,Symbol,BigInt");
function assertType(value, type) {
  let valid;
  const expectedType = getType(type);
  if (isSimpleType(expectedType)) {
    const t2 = typeof value;
    valid = t2 === expectedType.toLowerCase();
    if (!valid && t2 === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject(value);
  } else if (expectedType === "Array") {
    valid = isArray$1(value);
  } else if (expectedType === "null") {
    valid = value === null;
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize).join(" | ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType(value);
  const expectedValue = styleValue(value, expectedType);
  const receivedValue = styleValue(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function styleValue(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value) => isArray$1(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
const normalizeSlot$1 = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    if (currentInstance) {
      warn$1(`Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`);
    }
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value = rawSlots[key];
    if (isFunction$1(value)) {
      slots[key] = normalizeSlot$1(key, value, ctx);
    } else if (value != null) {
      {
        warn$1(`Non-function value encountered for slot "${key}". Prefer function slots for better performance.`);
      }
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  if (!isKeepAlive(instance.vnode) && true) {
    warn$1(`Non-function value encountered for default slot. Prefer function slots for better performance.`);
  }
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = toRaw(children);
      def(children, "_", type);
    } else {
      normalizeObjectSlots(children, instance.slots = {});
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (isHmrUpdating) {
        extend(slots, children);
      } else if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render2, hydrate2) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction$1(rootComponent)) {
      rootComponent = Object.assign({}, rootComponent);
    }
    if (rootProps != null && !isObject(rootProps)) {
      warn$1(`root props passed to app.mount() must be an object.`);
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version: version$1,
      get config() {
        return context.config;
      },
      set config(v2) {
        {
          warn$1(`app.config cannot be replaced. Modify individual options instead.`);
        }
      },
      use(plugin2, ...options) {
        if (installedPlugins.has(plugin2)) {
          warn$1(`Plugin has already been applied to target app.`);
        } else if (plugin2 && isFunction$1(plugin2.install)) {
          installedPlugins.add(plugin2);
          plugin2.install(app, ...options);
        } else if (isFunction$1(plugin2)) {
          installedPlugins.add(plugin2);
          plugin2(app, ...options);
        } else {
          warn$1(`A plugin must either be a function or an object with an "install" function.`);
        }
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else {
            warn$1("Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : ""));
          }
        }
        return app;
      },
      component(name, component) {
        {
          validateComponentName(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (context.components[name]) {
          warn$1(`Component "${name}" has already been registered in target app.`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        {
          validateDirectiveName(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (context.directives[name]) {
          warn$1(`Directive "${name}" has already been registered in target app.`);
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          if (rootContainer.__vue_app__) {
            warn$1(`There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`);
          }
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          {
            context.reload = () => {
              render2(cloneVNode(vnode), rootContainer, isSVG);
            };
          }
          if (isHydrate && hydrate2) {
            hydrate2(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          {
            app._instance = vnode.component;
            devtoolsInitApp(app, version$1);
          }
          return getExposeProxy(vnode.component) || vnode.component.proxy;
        } else {
          warn$1(`App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``);
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          {
            app._instance = null;
            devtoolsUnmountApp(app);
          }
          delete app._container.__vue_app__;
        } else {
          warn$1(`Cannot unmount an app that is not mounted.`);
        }
      },
      provide(key, value) {
        if (key in context.provides) {
          warn$1(`App already provides property with key "${String(key)}". It will be overwritten with the new value.`);
        }
        context.provides[key] = value;
        return app;
      }
    };
    return app;
  };
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$1(rawRef)) {
    rawRef.forEach((r2, i2) => setRef(r2, oldRawRef && (isArray$1(oldRawRef) ? oldRawRef[i2] : oldRawRef), parentSuspense, vnode, isUnmount));
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  if (!owner) {
    warn$1(`Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`);
    return;
  }
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString$1(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction$1(ref2)) {
    callWithErrorHandling(ref2, owner, 12, [value, refs]);
  } else {
    const _isString = isString$1(ref2);
    const _isRef = isRef(ref2);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? hasOwn(setupState, ref2) ? setupState[ref2] : refs[ref2] : ref2.value;
          if (isUnmount) {
            isArray$1(existing) && remove(existing, refValue);
          } else {
            if (!isArray$1(existing)) {
              if (_isString) {
                refs[ref2] = [refValue];
                if (hasOwn(setupState, ref2)) {
                  setupState[ref2] = refs[ref2];
                }
              } else {
                ref2.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref2.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref2] = value;
          if (hasOwn(setupState, ref2)) {
            setupState[ref2] = value;
          }
        } else if (_isRef) {
          ref2.value = value;
          if (rawRef.k)
            refs[rawRef.k] = value;
        } else {
          warn$1("Invalid template ref type:", ref2, `(${typeof ref2})`);
        }
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    } else {
      warn$1("Invalid template ref type:", ref2, `(${typeof ref2})`);
    }
  }
}
let hasMismatch = false;
const isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== "foreignObject";
const isComment = (node) => node.nodeType === 8;
function createHydrationFunctions(rendererInternals) {
  const { mt: mountComponent, p: patch, o: { patchProp: patchProp2, createText, nextSibling, parentNode, remove: remove2, insert, createComment } } = rendererInternals;
  const hydrate2 = (vnode, container) => {
    if (!container.hasChildNodes()) {
      warn$1(`Attempting to hydrate existing markup but container is empty. Performing full mount instead.`);
      patch(null, vnode, container);
      flushPostFlushCbs();
      container._vnode = vnode;
      return;
    }
    hasMismatch = false;
    hydrateNode(container.firstChild, vnode, null, null, null);
    flushPostFlushCbs();
    container._vnode = vnode;
    if (hasMismatch && true) {
      console.error(`Hydration completed but contains mismatches.`);
    }
  };
  const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
    const isFragmentStart = isComment(node) && node.data === "[";
    const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);
    const { type, ref: ref2, shapeFlag, patchFlag } = vnode;
    let domType = node.nodeType;
    vnode.el = node;
    if (patchFlag === -2) {
      optimized = false;
      vnode.dynamicChildren = null;
    }
    let nextNode = null;
    switch (type) {
      case Text:
        if (domType !== 3) {
          if (vnode.children === "") {
            insert(vnode.el = createText(""), parentNode(node), node);
            nextNode = node;
          } else {
            nextNode = onMismatch();
          }
        } else {
          if (node.data !== vnode.children) {
            hasMismatch = true;
            warn$1(`Hydration text mismatch:
- Client: ${JSON.stringify(node.data)}
- Server: ${JSON.stringify(vnode.children)}`);
            node.data = vnode.children;
          }
          nextNode = nextSibling(node);
        }
        break;
      case Comment:
        if (domType !== 8 || isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = nextSibling(node);
        }
        break;
      case Static:
        if (isFragmentStart) {
          node = nextSibling(node);
          domType = node.nodeType;
        }
        if (domType === 1 || domType === 3) {
          nextNode = node;
          const needToAdoptContent = !vnode.children.length;
          for (let i2 = 0; i2 < vnode.staticCount; i2++) {
            if (needToAdoptContent)
              vnode.children += nextNode.nodeType === 1 ? nextNode.outerHTML : nextNode.data;
            if (i2 === vnode.staticCount - 1) {
              vnode.anchor = nextNode;
            }
            nextNode = nextSibling(nextNode);
          }
          return isFragmentStart ? nextSibling(nextNode) : nextNode;
        } else {
          onMismatch();
        }
        break;
      case Fragment:
        if (!isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
        }
        break;
      default:
        if (shapeFlag & 1) {
          if (domType !== 1 || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) {
            nextNode = onMismatch();
          } else {
            nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
          }
        } else if (shapeFlag & 6) {
          vnode.slotScopeIds = slotScopeIds;
          const container = parentNode(node);
          mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
          nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
          if (nextNode && isComment(nextNode) && nextNode.data === "teleport end") {
            nextNode = nextSibling(nextNode);
          }
          if (isAsyncWrapper(vnode)) {
            let subTree;
            if (isFragmentStart) {
              subTree = createVNode(Fragment);
              subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
            } else {
              subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
            }
            subTree.el = node;
            vnode.component.subTree = subTree;
          }
        } else if (shapeFlag & 64) {
          if (domType !== 8) {
            nextNode = onMismatch();
          } else {
            nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
          }
        } else if (shapeFlag & 128) {
          nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
        } else {
          warn$1("Invalid HostVNode type:", type, `(${typeof type})`);
        }
    }
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode);
    }
    return nextNode;
  };
  const hydrateElement = (el2, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const { type, props, patchFlag, shapeFlag, dirs } = vnode;
    const forcePatchValue = type === "input" && dirs || type === "option";
    {
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      if (props) {
        if (forcePatchValue || !optimized || patchFlag & (16 | 32)) {
          for (const key in props) {
            if (forcePatchValue && key.endsWith("value") || isOn(key) && !isReservedProp(key)) {
              patchProp2(el2, key, null, props[key], false, void 0, parentComponent);
            }
          }
        } else if (props.onClick) {
          patchProp2(el2, "onClick", null, props.onClick, false, void 0, parentComponent);
        }
      }
      let vnodeHooks;
      if (vnodeHooks = props && props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHooks, parentComponent, vnode);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
      }
      if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {
        queueEffectWithSuspense(() => {
          vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
          dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
        }, parentSuspense);
      }
      if (shapeFlag & 16 && !(props && (props.innerHTML || props.textContent))) {
        let next = hydrateChildren(el2.firstChild, vnode, el2, parentComponent, parentSuspense, slotScopeIds, optimized);
        let hasWarned2 = false;
        while (next) {
          hasMismatch = true;
          if (!hasWarned2) {
            warn$1(`Hydration children mismatch in <${vnode.type}>: server rendered element contains more child nodes than client vdom.`);
            hasWarned2 = true;
          }
          const cur = next;
          next = next.nextSibling;
          remove2(cur);
        }
      } else if (shapeFlag & 8) {
        if (el2.textContent !== vnode.children) {
          hasMismatch = true;
          warn$1(`Hydration text content mismatch in <${vnode.type}>:
- Client: ${el2.textContent}
- Server: ${vnode.children}`);
          el2.textContent = vnode.children;
        }
      }
    }
    return el2.nextSibling;
  };
  const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!parentVNode.dynamicChildren;
    const children = parentVNode.children;
    const l2 = children.length;
    let hasWarned2 = false;
    for (let i2 = 0; i2 < l2; i2++) {
      const vnode = optimized ? children[i2] : children[i2] = normalizeVNode(children[i2]);
      if (node) {
        node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
      } else if (vnode.type === Text && !vnode.children) {
        continue;
      } else {
        hasMismatch = true;
        if (!hasWarned2) {
          warn$1(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.`);
          hasWarned2 = true;
        }
        patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
      }
    }
    return node;
  };
  const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    const { slotScopeIds: fragmentSlotScopeIds } = vnode;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    const container = parentNode(node);
    const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
    if (next && isComment(next) && next.data === "]") {
      return nextSibling(vnode.anchor = next);
    } else {
      hasMismatch = true;
      insert(vnode.anchor = createComment(`]`), container, next);
      return next;
    }
  };
  const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
    hasMismatch = true;
    warn$1(`Hydration node mismatch:
- Client vnode:`, vnode.type, `
- Server rendered DOM:`, node, node.nodeType === 3 ? `(text)` : isComment(node) && node.data === "[" ? `(start of fragment)` : ``);
    vnode.el = null;
    if (isFragment) {
      const end = locateClosingAsyncAnchor(node);
      while (true) {
        const next2 = nextSibling(node);
        if (next2 && next2 !== end) {
          remove2(next2);
        } else {
          break;
        }
      }
    }
    const next = nextSibling(node);
    const container = parentNode(node);
    remove2(node);
    patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
    return next;
  };
  const locateClosingAsyncAnchor = (node) => {
    let match = 0;
    while (node) {
      node = nextSibling(node);
      if (node && isComment(node)) {
        if (node.data === "[")
          match++;
        if (node.data === "]") {
          if (match === 0) {
            return nextSibling(node);
          } else {
            match--;
          }
        }
      }
    }
    return node;
  };
  return [hydrate2, hydrateNode];
}
let supported;
let perf;
function startMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    perf.mark(`vue-${type}-${instance.uid}`);
  }
  {
    devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
  }
}
function endMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    const startTag = `vue-${type}-${instance.uid}`;
    const endTag = startTag + `:end`;
    perf.mark(endTag);
    perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
    perf.clearMarks(startTag);
    perf.clearMarks(endTag);
  }
  {
    devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
  }
}
function isSupported() {
  if (supported !== void 0) {
    return supported;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported = true;
    perf = window.performance;
  } else {
    supported = false;
  }
  return supported;
}
function initFeatureFlags() {
  const needWarn = [];
  if (needWarn.length) {
    const multi = needWarn.length > 1;
    console.warn(`Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`);
  }
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function createHydrationRenderer(options) {
  return baseCreateRenderer(options, createHydrationFunctions);
}
function baseCreateRenderer(options, createHydrationFns) {
  {
    initFeatureFlags();
  }
  const target = getGlobalThis();
  target.__VUE__ = true;
  {
    setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
  }
  const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, insertStaticContent: hostInsertStaticContent } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref2, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        } else {
          patchStaticNode(n1, n2, container, isSVG);
        }
        break;
      case Fragment:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 64) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else if (shapeFlag & 128) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else {
          warn$1("Invalid VNode type:", type, `(${typeof type})`);
        }
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el2 = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el2, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
  };
  const patchStaticNode = (n1, n2, container, isSVG) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = ({ el: el2, anchor }, container, nextSibling) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostInsert(el2, container, nextSibling);
      el2 = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el: el2, anchor }) => {
    let next;
    while (el2 && el2 !== anchor) {
      next = hostNextSibling(el2);
      hostRemove(el2);
      el2 = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el2;
    let vnodeHook;
    const { type, props, shapeFlag, transition, dirs } = vnode;
    el2 = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
    if (shapeFlag & 8) {
      hostSetElementText(el2, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(vnode.children, el2, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "created");
    }
    setScopeId(el2, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp(key)) {
          hostPatchProp(el2, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if ("value" in props) {
        hostPatchProp(el2, "value", null, props.value);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
    }
    {
      Object.defineProperty(el2, "__vnode", {
        value: vnode,
        enumerable: false
      });
      Object.defineProperty(el2, "__vueParentComponent", {
        value: parentComponent,
        enumerable: false
      });
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el2);
    }
    hostInsert(el2, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el2);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el2, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el2, scopeId);
    }
    if (slotScopeIds) {
      for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
        hostSetScopeId(el2, slotScopeIds[i2]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
        subTree = filterSingleRoot(subTree.children) || subTree;
      }
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(el2, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      const child = children[i2] = optimized ? cloneIfMounted(children[i2]) : normalizeVNode(children[i2]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el2 = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    if (isHmrUpdating) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el2, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
      if (parentComponent && parentComponent.type.__hmrId) {
        traverseStaticChildren(n1, n2);
      }
    } else if (!optimized) {
      patchChildren(n1, n2, el2, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el2, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el2, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el2, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            const key = propsToUpdate[i2];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el2, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el2, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el2, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i2 = 0; i2 < newChildren.length; i2++) {
      const oldVNode = oldChildren[i2];
      const newVNode = newChildren[i2];
      const container = oldVNode.el && (oldVNode.type === Fragment || !isSameVNodeType(oldVNode, newVNode) || oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : fallbackContainer;
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
    }
  };
  const patchProps = (el2, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(el2, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el2, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el2, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (isHmrUpdating || patchFlag & 2048) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && n1.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
        if (parentComponent && parentComponent.type.__hmrId) {
          traverseStaticChildren(n1, n2);
        } else if (n2.key != null || parentComponent && n2 === parentComponent.subTree) {
          traverseStaticChildren(n1, n2, true);
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
    if (instance.type.__hmrId) {
      registerHMR(instance);
    }
    {
      pushWarningContext(initialVNode);
      startMeasure(instance, `mount`);
    }
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      {
        startMeasure(instance, `init`);
      }
      setupComponent(instance);
      {
        endMeasure(instance, `init`);
      }
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
    {
      popWarningContext();
      endMeasure(instance, `mount`);
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        {
          pushWarningContext(n2);
        }
        updateComponentPreRender(instance, n2, optimized);
        {
          popWarningContext();
        }
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el: el2, props } = initialVNode;
        const { bm, m: m2, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm) {
          invokeArrayFns(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el2 && hydrateNode) {
          const hydrateSubTree = () => {
            {
              startMeasure(instance, `render`);
            }
            instance.subTree = renderComponentRoot(instance);
            {
              endMeasure(instance, `render`);
            }
            {
              startMeasure(instance, `hydrate`);
            }
            hydrateNode(el2, instance.subTree, instance, parentSuspense, null);
            {
              endMeasure(instance, `hydrate`);
            }
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          {
            startMeasure(instance, `render`);
          }
          const subTree = instance.subTree = renderComponentRoot(instance);
          {
            endMeasure(instance, `render`);
          }
          {
            startMeasure(instance, `patch`);
          }
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          {
            endMeasure(instance, `patch`);
          }
          initialVNode.el = subTree.el;
        }
        if (m2) {
          queuePostRenderEffect(m2, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        {
          devtoolsComponentAdded(instance);
        }
        initialVNode = container = anchor = null;
      } else {
        let { next, bu: bu2, u: u2, parent, vnode } = instance;
        let originNext = next;
        let vnodeHook;
        {
          pushWarningContext(next || instance.vnode);
        }
        toggleRecurse(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu2) {
          invokeArrayFns(bu2);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        toggleRecurse(instance, true);
        {
          startMeasure(instance, `render`);
        }
        const nextTree = renderComponentRoot(instance);
        {
          endMeasure(instance, `render`);
        }
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        {
          startMeasure(instance, `patch`);
        }
        patch(
          prevTree,
          nextTree,
          hostParentNode(prevTree.el),
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          isSVG
        );
        {
          endMeasure(instance, `patch`);
        }
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u2) {
          queuePostRenderEffect(u2, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
        }
        {
          devtoolsComponentUpdated(instance);
        }
        {
          popWarningContext();
        }
      }
    };
    const effect2 = instance.effect = new ReactiveEffect(
      componentUpdateFn,
      () => queueJob(update),
      instance.scope
    );
    const update = instance.update = () => effect2.run();
    update.id = instance.uid;
    toggleRecurse(instance, true);
    {
      effect2.onTrack = instance.rtc ? (e2) => invokeArrayFns(instance.rtc, e2) : void 0;
      effect2.onTrigger = instance.rtg ? (e2) => invokeArrayFns(instance.rtg, e2) : void 0;
      update.ownerInstance = instance;
    }
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs();
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i2;
    for (i2 = 0; i2 < commonLength; i2++) {
      const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      patch(c1[i2], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i2 = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[i2];
      const n2 = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      i2++;
    }
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i2 > e1) {
      if (i2 <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i2 <= e2) {
          patch(null, c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          i2++;
        }
      }
    } else if (i2 > e2) {
      while (i2 <= e1) {
        unmount(c1[i2], parentComponent, parentSuspense, true);
        i2++;
      }
    } else {
      const s1 = i2;
      const s2 = i2;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i2 = s2; i2 <= e2; i2++) {
        const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
        if (nextChild.key != null) {
          if (keyToNewIndexMap.has(nextChild.key)) {
            warn$1(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
          }
          keyToNewIndexMap.set(nextChild.key, i2);
        }
      }
      let j2;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i2 = 0; i2 < toBePatched; i2++)
        newIndexToOldIndexMap[i2] = 0;
      for (i2 = s1; i2 <= e1; i2++) {
        const prevChild = c1[i2];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j2 = s2; j2 <= e2; j2++) {
            if (newIndexToOldIndexMap[j2 - s2] === 0 && isSameVNodeType(prevChild, c2[j2])) {
              newIndex = j2;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i2 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j2 = increasingNewIndexSequence.length - 1;
      for (i2 = toBePatched - 1; i2 >= 0; i2--) {
        const nextIndex = s2 + i2;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i2] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (moved) {
          if (j2 < 0 || i2 !== increasingNewIndexSequence[j2]) {
            move(nextChild, container, anchor, 2);
          } else {
            j2--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el: el2, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el2, container, anchor);
      for (let i2 = 0; i2 < children.length; i2++) {
        move(children[i2], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el2);
        hostInsert(el2, container, anchor);
        queuePostRenderEffect(() => transition.enter(el2), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove3 = () => hostInsert(el2, container, anchor);
        const performLeave = () => {
          leave(el2, () => {
            remove3();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el2, remove3, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el2, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const { type, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
      } else if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el: el2, anchor, transition } = vnode;
    if (type === Fragment) {
      if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
        vnode.children.forEach((child) => {
          if (child.type === Comment) {
            hostRemove(child.el);
          } else {
            remove2(child);
          }
        });
      } else {
        removeFragment(el2, anchor);
      }
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el2);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el2, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (instance.type.__hmrId) {
      unregisterHMR(instance);
    }
    const { bum, scope, update, subTree, um } = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    {
      devtoolsComponentRemoved(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      unmount(children[i2], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render2 = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPreFlushCbs();
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate2;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate2, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render: render2,
    hydrate: hydrate2,
    createApp: createAppAPI(render2, hydrate2)
  };
}
function toggleRecurse({ effect: effect2, update }, allowed) {
  effect2.allowRecurse = update.allowRecurse = allowed;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$1(ch1) && isArray$1(ch2)) {
    for (let i2 = 0; i2 < ch1.length; i2++) {
      const c1 = ch1[i2];
      let c2 = ch2[i2];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i2] = cloneIfMounted(ch2[i2]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c2);
      }
      if (c2.type === Text) {
        c2.el = c1.el;
      }
      if (c2.type === Comment && !c2.el) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i2, j2, u2, v2, c2;
  const len = arr.length;
  for (i2 = 0; i2 < len; i2++) {
    const arrI = arr[i2];
    if (arrI !== 0) {
      j2 = result[result.length - 1];
      if (arr[j2] < arrI) {
        p2[i2] = j2;
        result.push(i2);
        continue;
      }
      u2 = 0;
      v2 = result.length - 1;
      while (u2 < v2) {
        c2 = u2 + v2 >> 1;
        if (arr[result[c2]] < arrI) {
          u2 = c2 + 1;
        } else {
          v2 = c2;
        }
      }
      if (arrI < arr[result[u2]]) {
        if (u2 > 0) {
          p2[i2] = result[u2 - 1];
        }
        result[u2] = i2;
      }
    }
  }
  u2 = result.length;
  v2 = result[u2 - 1];
  while (u2-- > 0) {
    result[u2] = v2;
    v2 = p2[v2];
  }
  return result;
}
const isTeleport = (type) => type.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
const resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if (isString$1(targetSelector)) {
    if (!select) {
      warn$1(`Current renderer does not support string target for Teleports. (missing querySelector renderer option)`);
      return null;
    } else {
      const target = select(targetSelector);
      if (!target) {
        warn$1(`Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`);
      }
      return target;
    }
  } else {
    if (!targetSelector && !isTeleportDisabled(props)) {
      warn$1(`Invalid Teleport target: ${targetSelector}`);
    }
    return targetSelector;
  }
};
const TeleportImpl = {
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
    const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;
    const disabled = isTeleportDisabled(n2.props);
    let { shapeFlag, children, dynamicChildren } = n2;
    if (isHmrUpdating) {
      optimized = false;
      dynamicChildren = null;
    }
    if (n1 == null) {
      const placeholder = n2.el = createComment("teleport start");
      const mainAnchor = n2.anchor = createComment("teleport end");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      const target = n2.target = resolveTarget(n2.props, querySelector);
      const targetAnchor = n2.targetAnchor = createText("");
      if (target) {
        insert(targetAnchor, target);
        isSVG = isSVG || isTargetSVG(target);
      } else if (!disabled) {
        warn$1("Invalid Teleport target on mount:", target, `(${typeof target})`);
      }
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          mountChildren(children, container2, anchor2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
      } else if (target) {
        mount(target, targetAnchor);
      }
    } else {
      n2.el = n1.el;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      isSVG = isSVG || isTargetSVG(target);
      if (dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(n2, container, mainAnchor, internals, 1);
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
          if (nextTarget) {
            moveTeleport(n2, nextTarget, null, internals, 0);
          } else {
            warn$1("Invalid Teleport target on update:", target, `(${typeof target})`);
          }
        } else if (wasDisabled) {
          moveTeleport(n2, target, targetAnchor, internals, 1);
        }
      }
    }
    updateCssVars(n2);
  },
  remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
    const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
    if (target) {
      hostRemove(targetAnchor);
    }
    if (doRemove || !isTeleportDisabled(props)) {
      hostRemove(anchor);
      if (shapeFlag & 16) {
        for (let i2 = 0; i2 < children.length; i2++) {
          const child = children[i2];
          unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
        }
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el: el2, anchor, shapeFlag, children, props } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el2, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i2 = 0; i2 < children.length; i2++) {
        move(children[i2], container, parentAnchor, 2);
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {
  const target = vnode.target = resolveTarget(vnode.props, querySelector);
  if (target) {
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        let targetAnchor = targetNode;
        while (targetAnchor) {
          targetAnchor = nextSibling(targetAnchor);
          if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
            vnode.targetAnchor = targetAnchor;
            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
            break;
          }
        }
        hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
      }
    }
    updateCssVars(vnode);
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport = TeleportImpl;
function updateCssVars(vnode) {
  const ctx = vnode.ctx;
  if (ctx && ctx.ut) {
    let node = vnode.children[0].el;
    while (node !== vnode.targetAnchor) {
      if (node.nodeType === 1)
        node.setAttribute("data-v-owner", ctx.uid);
      node = node.nextSibling;
    }
    ctx.ut();
  }
}
const Fragment = Symbol("Fragment");
const Text = Symbol("Text");
const Comment = Symbol("Comment");
const Static = Symbol("Static");
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value) {
  isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true));
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
  return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true));
}
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  if (n2.shapeFlag & 6 && hmrDirtyComponents.has(n2.type)) {
    n1.shapeFlag &= ~256;
    n2.shapeFlag &= ~512;
    return false;
  }
  return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
function transformVNodeArgs(transformer) {
  vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args) => {
  return _createVNode(...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args);
};
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({ ref: ref2, ref_key, ref_for }) => {
  return ref2 != null ? isString$1(ref2) || isRef(ref2) || isFunction$1(ref2) ? { i: currentRenderingInstance, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$1(children) ? 8 : 16;
  }
  if (vnode.key !== vnode.key) {
    warn$1(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
  }
  if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock && (vnode.patchFlag > 0 || shapeFlag & 6) && vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = createVNodeWithArgsTransform;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    if (!type) {
      warn$1(`Invalid vnode type when creating vnode: ${type}.`);
    }
    type = Comment;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(type, props, true);
    if (children) {
      normalizeChildren(cloned, children);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag |= -2;
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style: style2 } = props;
    if (klass && !isString$1(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject(style2)) {
      if (isProxy(style2) && !isArray$1(style2)) {
        style2 = extend({}, style2);
      }
      props.style = normalizeStyle(style2);
    }
  }
  const shapeFlag = isString$1(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject(type) ? 4 : isFunction$1(type) ? 2 : 0;
  if (shapeFlag & 4 && isProxy(type)) {
    type = toRaw(type);
    warn$1(`Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`, `
Component that was made reactive: `, type);
  }
  return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
  if (!props)
    return null;
  return isProxy(props) || InternalObjectKey in props ? extend({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const { props, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? mergeRef && ref2 ? isArray$1(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children: patchFlag === -1 && isArray$1(children) ? children.map(deepCloneVNode) : children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  return cloned;
}
function deepCloneVNode(vnode) {
  const cloned = cloneVNode(vnode);
  if (isArray$1(vnode.children)) {
    cloned.children = vnode.children.map(deepCloneVNode);
  }
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode(Static, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment);
  } else if (isArray$1(child)) {
    return createVNode(
      Fragment,
      null,
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$1(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$1(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMerge = args[i2];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$1(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext = createAppContext();
let uid = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    next: null,
    subTree: null,
    effect: null,
    update: null,
    scope: new EffectScope(true),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    components: null,
    directives: null,
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    emit: null,
    emitted: null,
    propsDefaults: EMPTY_OBJ,
    inheritAttrs: type.inheritAttrs,
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = createDevRenderContext(instance);
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
const setCurrentInstance = (instance) => {
  currentInstance = instance;
  instance.scope.on();
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  currentInstance = null;
};
const isBuiltInTag = /* @__PURE__ */ makeMap("slot,component");
function validateComponentName(name, config2) {
  const appIsNativeTag = config2.isNativeTag || NO;
  if (isBuiltInTag(name) || appIsNativeTag(name)) {
    warn$1("Do not use built-in or reserved HTML elements as component id: " + name);
  }
}
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  var _a2;
  const Component = instance.type;
  {
    if (Component.name) {
      validateComponentName(Component.name, instance.appContext.config);
    }
    if (Component.components) {
      const names = Object.keys(Component.components);
      for (let i2 = 0; i2 < names.length; i2++) {
        validateComponentName(names[i2], instance.appContext.config);
      }
    }
    if (Component.directives) {
      const names = Object.keys(Component.directives);
      for (let i2 = 0; i2 < names.length; i2++) {
        validateDirectiveName(names[i2]);
      }
    }
    if (Component.compilerOptions && isRuntimeOnly()) {
      warn$1(`"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`);
    }
  }
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  {
    exposePropsOnRenderContext(instance);
  }
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(setup, instance, 0, [shallowReadonly(instance.props), setupContext]);
    resetTracking();
    unsetCurrentInstance();
    if (isPromise(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e2) => {
          handleError(e2, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
        if (!instance.suspense) {
          const name = (_a2 = Component.name) !== null && _a2 !== void 0 ? _a2 : "Anonymous";
          warn$1(`Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`);
        }
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction$1(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject(setupResult)) {
    if (isVNode(setupResult)) {
      warn$1(`setup() should not return VNodes directly - return a render function instead.`);
    }
    {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs(setupResult);
    {
      exposeSetupStateOnRenderContext(instance);
    }
  } else if (setupResult !== void 0) {
    warn$1(`setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`);
  }
  finishComponentSetup(instance, isSSR);
}
let compile$1;
let installWithProxy;
function registerRuntimeCompiler(_compile) {
  compile$1 = _compile;
  installWithProxy = (i2) => {
    if (i2.render._rc) {
      i2.withProxy = new Proxy(i2.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    }
  };
}
const isRuntimeOnly = () => !compile$1;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile$1 && !Component.render) {
      const template = Component.template || resolveMergedOptions(instance).template;
      if (template) {
        {
          startMeasure(instance, `compile`);
        }
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend(extend({
          isCustomElement,
          delimiters
        }, compilerOptions), componentCompilerOptions);
        Component.render = compile$1(template, finalCompilerOptions);
        {
          endMeasure(instance, `compile`);
        }
      }
    }
    instance.render = Component.render || NOOP;
    if (installWithProxy) {
      installWithProxy(instance);
    }
  }
  {
    setCurrentInstance(instance);
    pauseTracking();
    applyOptions(instance);
    resetTracking();
    unsetCurrentInstance();
  }
  if (!Component.render && instance.render === NOOP && !isSSR) {
    if (!compile$1 && Component.template) {
      warn$1(`Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
    } else {
      warn$1(`Component is missing template or render function.`);
    }
  }
}
function createAttrsProxy(instance) {
  return new Proxy(
    instance.attrs,
    {
      get(target, key) {
        markAttrsAccessed();
        track(instance, "get", "$attrs");
        return target[key];
      },
      set() {
        warn$1(`setupContext.attrs is readonly.`);
        return false;
      },
      deleteProperty() {
        warn$1(`setupContext.attrs is readonly.`);
        return false;
      }
    }
  );
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    {
      if (instance.exposed) {
        warn$1(`expose() should be called only once per setup().`);
      }
      if (exposed != null) {
        let exposedType = typeof exposed;
        if (exposedType === "object") {
          if (isArray$1(exposed)) {
            exposedType = "array";
          } else if (isRef(exposed)) {
            exposedType = "ref";
          }
        }
        if (exposedType !== "object") {
          warn$1(`expose() should be passed a plain object, received ${exposedType}.`);
        }
      }
    }
    instance.exposed = exposed || {};
  };
  let attrs;
  {
    return Object.freeze({
      get attrs() {
        return attrs || (attrs = createAttrsProxy(instance));
      },
      get slots() {
        return shallowReadonly(instance.slots);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      },
      expose
    });
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap;
      }
    }));
  }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, (c2) => c2.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component, includeInferred = true) {
  return isFunction$1(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name = getComponentName(Component);
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
  return isFunction$1(value) && "__vccOpts" in value;
}
const computed = (getterOrOptions, debugOptions) => {
  return computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
};
const warnRuntimeUsage = (method) => warn$1(`${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);
function defineProps() {
  {
    warnRuntimeUsage(`defineProps`);
  }
  return null;
}
function defineEmits() {
  {
    warnRuntimeUsage(`defineEmits`);
  }
  return null;
}
function defineExpose(exposed) {
  {
    warnRuntimeUsage(`defineExpose`);
  }
}
function withDefaults(props, defaults2) {
  {
    warnRuntimeUsage(`withDefaults`);
  }
  return null;
}
function useSlots() {
  return getContext().slots;
}
function useAttrs() {
  return getContext().attrs;
}
function getContext() {
  const i2 = getCurrentInstance();
  if (!i2) {
    warn$1(`useContext() called without active instance.`);
  }
  return i2.setupContext || (i2.setupContext = createSetupContext(i2));
}
function mergeDefaults(raw, defaults2) {
  const props = isArray$1(raw) ? raw.reduce((normalized, p2) => (normalized[p2] = {}, normalized), {}) : raw;
  for (const key in defaults2) {
    const opt = props[key];
    if (opt) {
      if (isArray$1(opt) || isFunction$1(opt)) {
        props[key] = { type: opt, default: defaults2[key] };
      } else {
        opt.default = defaults2[key];
      }
    } else if (opt === null) {
      props[key] = { default: defaults2[key] };
    } else {
      warn$1(`props default key "${key}" has no corresponding declaration.`);
    }
  }
  return props;
}
function createPropsRestProxy(props, excludedKeys) {
  const ret = {};
  for (const key in props) {
    if (!excludedKeys.includes(key)) {
      Object.defineProperty(ret, key, {
        enumerable: true,
        get: () => props[key]
      });
    }
  }
  return ret;
}
function withAsyncContext(getAwaitable) {
  const ctx = getCurrentInstance();
  if (!ctx) {
    warn$1(`withAsyncContext called without active current instance. This is likely a bug.`);
  }
  let awaitable = getAwaitable();
  unsetCurrentInstance();
  if (isPromise(awaitable)) {
    awaitable = awaitable.catch((e2) => {
      setCurrentInstance(ctx);
      throw e2;
    });
  }
  return [awaitable, () => setCurrentInstance(ctx)];
}
function h$1(type, propsOrChildren, children) {
  const l2 = arguments.length;
  if (l2 === 2) {
    if (isObject(propsOrChildren) && !isArray$1(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l2 > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l2 === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
const ssrContextKey = Symbol(`ssrContext`);
const useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    if (!ctx) {
      warn$1(`Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`);
    }
    return ctx;
  }
};
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function initCustomFormatter() {
  if (typeof window === "undefined") {
    return;
  }
  const vueStyle = { style: "color:#3ba776" };
  const numberStyle = { style: "color:#0b1bc9" };
  const stringStyle = { style: "color:#b62e24" };
  const keywordStyle = { style: "color:#9d288c" };
  const formatter = {
    header(obj) {
      if (!isObject(obj)) {
        return null;
      }
      if (obj.__isVue) {
        return ["div", vueStyle, `VueInstance`];
      } else if (isRef(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, genRefFlag(obj)],
          "<",
          formatValue(obj.value),
          `>`
        ];
      } else if (isReactive(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow(obj) ? "ShallowReactive" : "Reactive"],
          "<",
          formatValue(obj),
          `>${isReadonly(obj) ? ` (readonly)` : ``}`
        ];
      } else if (isReadonly(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow(obj) ? "ShallowReadonly" : "Readonly"],
          "<",
          formatValue(obj),
          ">"
        ];
      }
      return null;
    },
    hasBody(obj) {
      return obj && obj.__isVue;
    },
    body(obj) {
      if (obj && obj.__isVue) {
        return [
          "div",
          {},
          ...formatInstance(obj.$)
        ];
      }
    }
  };
  function formatInstance(instance) {
    const blocks = [];
    if (instance.type.props && instance.props) {
      blocks.push(createInstanceBlock("props", toRaw(instance.props)));
    }
    if (instance.setupState !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("setup", instance.setupState));
    }
    if (instance.data !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("data", toRaw(instance.data)));
    }
    const computed2 = extractKeys(instance, "computed");
    if (computed2) {
      blocks.push(createInstanceBlock("computed", computed2));
    }
    const injected = extractKeys(instance, "inject");
    if (injected) {
      blocks.push(createInstanceBlock("injected", injected));
    }
    blocks.push([
      "div",
      {},
      [
        "span",
        {
          style: keywordStyle.style + ";opacity:0.66"
        },
        "$ (internal): "
      ],
      ["object", { object: instance }]
    ]);
    return blocks;
  }
  function createInstanceBlock(type, target) {
    target = extend({}, target);
    if (!Object.keys(target).length) {
      return ["span", {}];
    }
    return [
      "div",
      { style: "line-height:1.25em;margin-bottom:0.6em" },
      [
        "div",
        {
          style: "color:#476582"
        },
        type
      ],
      [
        "div",
        {
          style: "padding-left:1.25em"
        },
        ...Object.keys(target).map((key) => {
          return [
            "div",
            {},
            ["span", keywordStyle, key + ": "],
            formatValue(target[key], false)
          ];
        })
      ]
    ];
  }
  function formatValue(v2, asRaw = true) {
    if (typeof v2 === "number") {
      return ["span", numberStyle, v2];
    } else if (typeof v2 === "string") {
      return ["span", stringStyle, JSON.stringify(v2)];
    } else if (typeof v2 === "boolean") {
      return ["span", keywordStyle, v2];
    } else if (isObject(v2)) {
      return ["object", { object: asRaw ? toRaw(v2) : v2 }];
    } else {
      return ["span", stringStyle, String(v2)];
    }
  }
  function extractKeys(instance, type) {
    const Comp = instance.type;
    if (isFunction$1(Comp)) {
      return;
    }
    const extracted = {};
    for (const key in instance.ctx) {
      if (isKeyOfType(Comp, key, type)) {
        extracted[key] = instance.ctx[key];
      }
    }
    return extracted;
  }
  function isKeyOfType(Comp, key, type) {
    const opts = Comp[type];
    if (isArray$1(opts) && opts.includes(key) || isObject(opts) && key in opts) {
      return true;
    }
    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
      return true;
    }
    if (Comp.mixins && Comp.mixins.some((m2) => isKeyOfType(m2, key, type))) {
      return true;
    }
  }
  function genRefFlag(v2) {
    if (isShallow(v2)) {
      return `ShallowRef`;
    }
    if (v2.effect) {
      return `ComputedRef`;
    }
    return `Ref`;
  }
  if (window.devtoolsFormatters) {
    window.devtoolsFormatters.push(formatter);
  } else {
    window.devtoolsFormatters = [formatter];
  }
}
function withMemo(memo, render2, cache2, index) {
  const cached = cache2[index];
  if (cached && isMemoSame(cached, memo)) {
    return cached;
  }
  const ret = render2();
  ret.memo = memo.slice();
  return cache2[index] = ret;
}
function isMemoSame(cached, memo) {
  const prev = cached.memo;
  if (prev.length != memo.length) {
    return false;
  }
  for (let i2 = 0; i2 < prev.length; i2++) {
    if (hasChanged(prev[i2], memo[i2])) {
      return false;
    }
  }
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(cached);
  }
  return true;
}
const version$1 = "3.2.47";
const _ssrUtils = {
  createComponentInstance,
  setupComponent,
  renderComponentRoot,
  setCurrentRenderingInstance,
  isVNode,
  normalizeVNode
};
const ssrUtils = _ssrUtils;
const resolveFilter = null;
const compatUtils = null;
const svgNS = "http://www.w3.org/2000/svg";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is2, props) => {
    const el2 = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is2 ? { is: is2 } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el2.setAttribute("multiple", props.multiple);
    }
    return el2;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el2, text) => {
    el2.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el2, id2) {
    el2.setAttribute(id2, "");
  },
  insertStaticContent(content, parent, anchor, isSVG, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling))
          break;
      }
    } else {
      templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      const template = templateContainer.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      before ? before.nextSibling : parent.firstChild,
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
function patchClass(el2, value, isSVG) {
  const transitionClasses = el2._vtc;
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el2.removeAttribute("class");
  } else if (isSVG) {
    el2.setAttribute("class", value);
  } else {
    el2.className = value;
  }
}
function patchStyle(el2, prev, next) {
  const style2 = el2.style;
  const isCssString = isString$1(next);
  if (next && !isCssString) {
    if (prev && !isString$1(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle(style2, key, "");
        }
      }
    }
    for (const key in next) {
      setStyle(style2, key, next[key]);
    }
  } else {
    const currentDisplay = style2.display;
    if (isCssString) {
      if (prev !== next) {
        style2.cssText = next;
      }
    } else if (prev) {
      el2.removeAttribute("style");
    }
    if ("_vod" in el2) {
      style2.display = currentDisplay;
    }
  }
}
const semicolonRE = /[^\\];\s*$/;
const importantRE = /\s*!important$/;
function setStyle(style2, name, val) {
  if (isArray$1(val)) {
    val.forEach((v2) => setStyle(style2, name, v2));
  } else {
    if (val == null)
      val = "";
    {
      if (semicolonRE.test(val)) {
        warn$1(`Unexpected semicolon at the end of '${name}' style value: '${val}'`);
      }
    }
    if (name.startsWith("--")) {
      style2.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style2, name);
      if (importantRE.test(val)) {
        style2.setProperty(hyphenate(prefixed), val.replace(importantRE, ""), "important");
      } else {
        style2[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style2, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style2) {
    return prefixCache[rawName] = name;
  }
  name = capitalize(name);
  for (let i2 = 0; i2 < prefixes.length; i2++) {
    const prefixed = prefixes[i2] + name;
    if (prefixed in style2) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el2, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el2.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el2.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    const isBoolean2 = isSpecialBooleanAttr(key);
    if (value == null || isBoolean2 && !includeBooleanAttr(value)) {
      el2.removeAttribute(key);
    } else {
      el2.setAttribute(key, isBoolean2 ? "" : value);
    }
  }
}
function patchDOMProp(el2, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el2[key] = value == null ? "" : value;
    return;
  }
  if (key === "value" && el2.tagName !== "PROGRESS" && !el2.tagName.includes("-")) {
    el2._value = value;
    const newValue = value == null ? "" : value;
    if (el2.value !== newValue || el2.tagName === "OPTION") {
      el2.value = newValue;
    }
    if (value == null) {
      el2.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el2[key];
    if (type === "boolean") {
      value = includeBooleanAttr(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el2[key] = value;
  } catch (e2) {
    if (!needRemove) {
      warn$1(`Failed setting prop "${key}" on <${el2.tagName.toLowerCase()}>: value ${value} is invalid.`, e2);
    }
  }
  needRemove && el2.removeAttribute(key);
}
function addEventListener(el2, event, handler, options) {
  el2.addEventListener(event, handler, options);
}
function removeEventListener(el2, event, handler, options) {
  el2.removeEventListener(event, handler, options);
}
function patchEvent(el2, rawName, prevValue, nextValue, instance = null) {
  const invokers = el2._vei || (el2._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el2, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el2, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m2;
    while (m2 = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m2[0].length);
      options[m2[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate(name.slice(2));
  return [event, options];
}
let cachedNow = 0;
const p = /* @__PURE__ */ Promise.resolve();
const getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
  const invoker = (e2) => {
    if (!e2._vts) {
      e2._vts = Date.now();
    } else if (e2._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling(patchStopImmediatePropagation(e2, invoker.value), instance, 5, [e2]);
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e2, value) {
  if (isArray$1(value)) {
    const originalStop = e2.stopImmediatePropagation;
    e2.stopImmediatePropagation = () => {
      originalStop.call(e2);
      e2._stopped = true;
    };
    return value.map((fn2) => (e3) => !e3._stopped && fn2 && fn2(e3));
  } else {
    return value;
  }
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el2, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass(el2, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el2, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el2, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el2, key, nextValue, isSVG)) {
    patchDOMProp(el2, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
  } else {
    if (key === "true-value") {
      el2._trueValue = nextValue;
    } else if (key === "false-value") {
      el2._falseValue = nextValue;
    }
    patchAttr(el2, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el2, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el2 && nativeOnRE.test(key) && isFunction$1(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el2.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el2.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key) && isString$1(value)) {
    return false;
  }
  return key in el2;
}
function defineCustomElement(options, hydrate2) {
  const Comp = defineComponent(options);
  class VueCustomElement extends VueElement {
    constructor(initialProps) {
      super(Comp, initialProps, hydrate2);
    }
  }
  VueCustomElement.def = Comp;
  return VueCustomElement;
}
const defineSSRCustomElement = (options) => {
  return defineCustomElement(options, hydrate);
};
const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
};
class VueElement extends BaseClass {
  constructor(_def, _props = {}, hydrate2) {
    super();
    this._def = _def;
    this._props = _props;
    this._instance = null;
    this._connected = false;
    this._resolved = false;
    this._numberProps = null;
    if (this.shadowRoot && hydrate2) {
      hydrate2(this._createVNode(), this.shadowRoot);
    } else {
      if (this.shadowRoot) {
        warn$1(`Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use \`defineSSRCustomElement\`.`);
      }
      this.attachShadow({ mode: "open" });
      if (!this._def.__asyncLoader) {
        this._resolveProps(this._def);
      }
    }
  }
  connectedCallback() {
    this._connected = true;
    if (!this._instance) {
      if (this._resolved) {
        this._update();
      } else {
        this._resolveDef();
      }
    }
  }
  disconnectedCallback() {
    this._connected = false;
    nextTick(() => {
      if (!this._connected) {
        render$1(null, this.shadowRoot);
        this._instance = null;
      }
    });
  }
  _resolveDef() {
    this._resolved = true;
    for (let i2 = 0; i2 < this.attributes.length; i2++) {
      this._setAttr(this.attributes[i2].name);
    }
    new MutationObserver((mutations) => {
      for (const m2 of mutations) {
        this._setAttr(m2.attributeName);
      }
    }).observe(this, { attributes: true });
    const resolve2 = (def2, isAsync = false) => {
      const { props, styles } = def2;
      let numberProps;
      if (props && !isArray$1(props)) {
        for (const key in props) {
          const opt = props[key];
          if (opt === Number || opt && opt.type === Number) {
            if (key in this._props) {
              this._props[key] = toNumber(this._props[key]);
            }
            (numberProps || (numberProps = /* @__PURE__ */ Object.create(null)))[camelize(key)] = true;
          }
        }
      }
      this._numberProps = numberProps;
      if (isAsync) {
        this._resolveProps(def2);
      }
      this._applyStyles(styles);
      this._update();
    };
    const asyncDef = this._def.__asyncLoader;
    if (asyncDef) {
      asyncDef().then((def2) => resolve2(def2, true));
    } else {
      resolve2(this._def);
    }
  }
  _resolveProps(def2) {
    const { props } = def2;
    const declaredPropKeys = isArray$1(props) ? props : Object.keys(props || {});
    for (const key of Object.keys(this)) {
      if (key[0] !== "_" && declaredPropKeys.includes(key)) {
        this._setProp(key, this[key], true, false);
      }
    }
    for (const key of declaredPropKeys.map(camelize)) {
      Object.defineProperty(this, key, {
        get() {
          return this._getProp(key);
        },
        set(val) {
          this._setProp(key, val);
        }
      });
    }
  }
  _setAttr(key) {
    let value = this.getAttribute(key);
    const camelKey = camelize(key);
    if (this._numberProps && this._numberProps[camelKey]) {
      value = toNumber(value);
    }
    this._setProp(camelKey, value, false);
  }
  _getProp(key) {
    return this._props[key];
  }
  _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
    if (val !== this._props[key]) {
      this._props[key] = val;
      if (shouldUpdate && this._instance) {
        this._update();
      }
      if (shouldReflect) {
        if (val === true) {
          this.setAttribute(hyphenate(key), "");
        } else if (typeof val === "string" || typeof val === "number") {
          this.setAttribute(hyphenate(key), val + "");
        } else if (!val) {
          this.removeAttribute(hyphenate(key));
        }
      }
    }
  }
  _update() {
    render$1(this._createVNode(), this.shadowRoot);
  }
  _createVNode() {
    const vnode = createVNode(this._def, extend({}, this._props));
    if (!this._instance) {
      vnode.ce = (instance) => {
        this._instance = instance;
        instance.isCE = true;
        {
          instance.ceReload = (newStyles) => {
            if (this._styles) {
              this._styles.forEach((s) => this.shadowRoot.removeChild(s));
              this._styles.length = 0;
            }
            this._applyStyles(newStyles);
            this._instance = null;
            this._update();
          };
        }
        const dispatch = (event, args) => {
          this.dispatchEvent(new CustomEvent(event, {
            detail: args
          }));
        };
        instance.emit = (event, ...args) => {
          dispatch(event, args);
          if (hyphenate(event) !== event) {
            dispatch(hyphenate(event), args);
          }
        };
        let parent = this;
        while (parent = parent && (parent.parentNode || parent.host)) {
          if (parent instanceof VueElement) {
            instance.parent = parent._instance;
            instance.provides = parent._instance.provides;
            break;
          }
        }
      };
    }
    return vnode;
  }
  _applyStyles(styles) {
    if (styles) {
      styles.forEach((css) => {
        const s = document.createElement("style");
        s.textContent = css;
        this.shadowRoot.appendChild(s);
        {
          (this._styles || (this._styles = [])).push(s);
        }
      });
    }
  }
}
function useCssModule(name = "$style") {
  {
    const instance = getCurrentInstance();
    if (!instance) {
      warn$1(`useCssModule must be called inside setup()`);
      return EMPTY_OBJ;
    }
    const modules = instance.type.__cssModules;
    if (!modules) {
      warn$1(`Current instance does not have CSS modules injected.`);
      return EMPTY_OBJ;
    }
    const mod = modules[name];
    if (!mod) {
      warn$1(`Current instance does not have CSS module named "${name}".`);
      return EMPTY_OBJ;
    }
    return mod;
  }
}
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
    warn$1(`useCssVars is called without current active component instance.`);
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)).forEach((node) => setVarsOnNode(node, vars));
  };
  const setVars = () => {
    const vars = getter(instance.proxy);
    setVarsOnVNode(instance.subTree, vars);
    updateTeleports(vars);
  };
  watchPostEffect(setVars);
  onMounted(() => {
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted(() => ob.disconnect());
  });
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode(vnode.el, vars);
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c2) => setVarsOnVNode(c2, vars));
  } else if (vnode.type === Static) {
    let { el: el2, anchor } = vnode;
    while (el2) {
      setVarsOnNode(el2, vars);
      if (el2 === anchor)
        break;
      el2 = el2.nextSibling;
    }
  }
}
function setVarsOnNode(el2, vars) {
  if (el2.nodeType === 1) {
    const style2 = el2.style;
    for (const key in vars) {
      style2.setProperty(`--${key}`, vars[key]);
    }
  }
}
const TRANSITION = "transition";
const ANIMATION = "animation";
const Transition = (props, { slots }) => h$1(BaseTransition, resolveTransitionProps(props), slots);
Transition.displayName = "Transition";
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /* @__PURE__ */ extend({}, BaseTransition.props, DOMTransitionPropsValidators);
const callHook = (hook, args = []) => {
  if (isArray$1(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback = (hook) => {
  return hook ? isArray$1(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const { name = "v", type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
  const finishEnter = (el2, isAppear, done) => {
    removeTransitionClass(el2, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el2, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el2, done) => {
    el2._isLeaving = false;
    removeTransitionClass(el2, leaveFromClass);
    removeTransitionClass(el2, leaveToClass);
    removeTransitionClass(el2, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el2, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el2, isAppear, done);
      callHook(hook, [el2, resolve2]);
      nextFrame(() => {
        removeTransitionClass(el2, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el2, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el2, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend(baseProps, {
    onBeforeEnter(el2) {
      callHook(onBeforeEnter, [el2]);
      addTransitionClass(el2, enterFromClass);
      addTransitionClass(el2, enterActiveClass);
    },
    onBeforeAppear(el2) {
      callHook(onBeforeAppear, [el2]);
      addTransitionClass(el2, appearFromClass);
      addTransitionClass(el2, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el2, done) {
      el2._isLeaving = true;
      const resolve2 = () => finishLeave(el2, done);
      addTransitionClass(el2, leaveFromClass);
      forceReflow();
      addTransitionClass(el2, leaveActiveClass);
      nextFrame(() => {
        if (!el2._isLeaving) {
          return;
        }
        removeTransitionClass(el2, leaveFromClass);
        addTransitionClass(el2, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el2, type, leaveDuration, resolve2);
        }
      });
      callHook(onLeave, [el2, resolve2]);
    },
    onEnterCancelled(el2) {
      finishEnter(el2, false);
      callHook(onEnterCancelled, [el2]);
    },
    onAppearCancelled(el2) {
      finishEnter(el2, true);
      callHook(onAppearCancelled, [el2]);
    },
    onLeaveCancelled(el2) {
      finishLeave(el2);
      callHook(onLeaveCancelled, [el2]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n2 = NumberOf(duration);
    return [n2, n2];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  {
    assertNumber(res, "<transition> explicit duration");
  }
  return res;
}
function addTransitionClass(el2, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el2.classList.add(c2));
  (el2._vtc || (el2._vtc = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el2, cls) {
  cls.split(/\s+/).forEach((c2) => c2 && el2.classList.remove(c2));
  const { _vtc } = el2;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el2._vtc = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId = 0;
function whenTransitionEnds(el2, expectedType, explicitTimeout, resolve2) {
  const id2 = el2._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id2 === el2._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo(el2, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el2.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e2) => {
    if (e2.target === el2 && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el2.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el2, expectedType) {
  const styles = window.getComputedStyle(el2);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(getStyleProperties(`${TRANSITION}Property`).toString());
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d2, i2) => toMs(d2) + toMs(delays[i2])));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
const positionMap = /* @__PURE__ */ new WeakMap();
const newPositionMap = /* @__PURE__ */ new WeakMap();
const TransitionGroupImpl = {
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevChildren;
    let children;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c2) => {
        const el2 = c2.el;
        const style2 = el2.style;
        addTransitionClass(el2, moveClass);
        style2.transform = style2.webkitTransform = style2.transitionDuration = "";
        const cb = el2._moveCb = (e2) => {
          if (e2 && e2.target !== el2) {
            return;
          }
          if (!e2 || /transform$/.test(e2.propertyName)) {
            el2.removeEventListener("transitionend", cb);
            el2._moveCb = null;
            removeTransitionClass(el2, moveClass);
          }
        };
        el2.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw(props);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      let tag = rawProps.tag || Fragment;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i2 = 0; i2 < children.length; i2++) {
        const child = children[i2];
        if (child.key != null) {
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
        } else {
          warn$1(`<TransitionGroup> children must be keyed.`);
        }
      }
      if (prevChildren) {
        for (let i2 = 0; i2 < prevChildren.length; i2++) {
          const child = prevChildren[i2];
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
          positionMap.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode(tag, null, children);
    };
  }
};
const removeMode = (props) => delete props.mode;
/* @__PURE__ */ removeMode(TransitionGroupImpl.props);
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c2) {
  const el2 = c2.el;
  if (el2._moveCb) {
    el2._moveCb();
  }
  if (el2._enterCb) {
    el2._enterCb();
  }
}
function recordPosition(c2) {
  newPositionMap.set(c2, c2.el.getBoundingClientRect());
}
function applyTranslation(c2) {
  const oldPos = positionMap.get(c2);
  const newPos = newPositionMap.get(c2);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s = c2.el.style;
    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
    s.transitionDuration = "0s";
    return c2;
  }
}
function hasCSSTransform(el2, root, moveClass) {
  const clone2 = el2.cloneNode();
  if (el2._vtc) {
    el2._vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c2) => c2 && clone2.classList.remove(c2));
    });
  }
  moveClass.split(/\s+/).forEach((c2) => c2 && clone2.classList.add(c2));
  clone2.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone2);
  const { hasTransform } = getTransitionInfo(clone2);
  container.removeChild(clone2);
  return hasTransform;
}
const getModelAssigner = (vnode) => {
  const fn2 = vnode.props["onUpdate:modelValue"] || false;
  return isArray$1(fn2) ? (value) => invokeArrayFns(fn2, value) : fn2;
};
function onCompositionStart(e2) {
  e2.target.composing = true;
}
function onCompositionEnd(e2) {
  const target = e2.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const vModelText = {
  created(el2, { modifiers: { lazy, trim, number } }, vnode) {
    el2._assign = getModelAssigner(vnode);
    const castToNumber = number || vnode.props && vnode.props.type === "number";
    addEventListener(el2, lazy ? "change" : "input", (e2) => {
      if (e2.target.composing)
        return;
      let domValue = el2.value;
      if (trim) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber(domValue);
      }
      el2._assign(domValue);
    });
    if (trim) {
      addEventListener(el2, "change", () => {
        el2.value = el2.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el2, "compositionstart", onCompositionStart);
      addEventListener(el2, "compositionend", onCompositionEnd);
      addEventListener(el2, "change", onCompositionEnd);
    }
  },
  mounted(el2, { value }) {
    el2.value = value == null ? "" : value;
  },
  beforeUpdate(el2, { value, modifiers: { lazy, trim, number } }, vnode) {
    el2._assign = getModelAssigner(vnode);
    if (el2.composing)
      return;
    if (document.activeElement === el2 && el2.type !== "range") {
      if (lazy) {
        return;
      }
      if (trim && el2.value.trim() === value) {
        return;
      }
      if ((number || el2.type === "number") && looseToNumber(el2.value) === value) {
        return;
      }
    }
    const newValue = value == null ? "" : value;
    if (el2.value !== newValue) {
      el2.value = newValue;
    }
  }
};
const vModelCheckbox = {
  deep: true,
  created(el2, _2, vnode) {
    el2._assign = getModelAssigner(vnode);
    addEventListener(el2, "change", () => {
      const modelValue = el2._modelValue;
      const elementValue = getValue(el2);
      const checked = el2.checked;
      const assign2 = el2._assign;
      if (isArray$1(modelValue)) {
        const index = looseIndexOf(modelValue, elementValue);
        const found = index !== -1;
        if (checked && !found) {
          assign2(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index, 1);
          assign2(filtered);
        }
      } else if (isSet(modelValue)) {
        const cloned = new Set(modelValue);
        if (checked) {
          cloned.add(elementValue);
        } else {
          cloned.delete(elementValue);
        }
        assign2(cloned);
      } else {
        assign2(getCheckboxValue(el2, checked));
      }
    });
  },
  mounted: setChecked,
  beforeUpdate(el2, binding, vnode) {
    el2._assign = getModelAssigner(vnode);
    setChecked(el2, binding, vnode);
  }
};
function setChecked(el2, { value, oldValue }, vnode) {
  el2._modelValue = value;
  if (isArray$1(value)) {
    el2.checked = looseIndexOf(value, vnode.props.value) > -1;
  } else if (isSet(value)) {
    el2.checked = value.has(vnode.props.value);
  } else if (value !== oldValue) {
    el2.checked = looseEqual(value, getCheckboxValue(el2, true));
  }
}
const vModelRadio = {
  created(el2, { value }, vnode) {
    el2.checked = looseEqual(value, vnode.props.value);
    el2._assign = getModelAssigner(vnode);
    addEventListener(el2, "change", () => {
      el2._assign(getValue(el2));
    });
  },
  beforeUpdate(el2, { value, oldValue }, vnode) {
    el2._assign = getModelAssigner(vnode);
    if (value !== oldValue) {
      el2.checked = looseEqual(value, vnode.props.value);
    }
  }
};
const vModelSelect = {
  deep: true,
  created(el2, { value, modifiers: { number } }, vnode) {
    const isSetModel = isSet(value);
    addEventListener(el2, "change", () => {
      const selectedVal = Array.prototype.filter.call(el2.options, (o2) => o2.selected).map((o2) => number ? looseToNumber(getValue(o2)) : getValue(o2));
      el2._assign(el2.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
    });
    el2._assign = getModelAssigner(vnode);
  },
  mounted(el2, { value }) {
    setSelected(el2, value);
  },
  beforeUpdate(el2, _binding, vnode) {
    el2._assign = getModelAssigner(vnode);
  },
  updated(el2, { value }) {
    setSelected(el2, value);
  }
};
function setSelected(el2, value) {
  const isMultiple = el2.multiple;
  if (isMultiple && !isArray$1(value) && !isSet(value)) {
    warn$1(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
    return;
  }
  for (let i2 = 0, l2 = el2.options.length; i2 < l2; i2++) {
    const option = el2.options[i2];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArray$1(value)) {
        option.selected = looseIndexOf(value, optionValue) > -1;
      } else {
        option.selected = value.has(optionValue);
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el2.selectedIndex !== i2)
          el2.selectedIndex = i2;
        return;
      }
    }
  }
  if (!isMultiple && el2.selectedIndex !== -1) {
    el2.selectedIndex = -1;
  }
}
function getValue(el2) {
  return "_value" in el2 ? el2._value : el2.value;
}
function getCheckboxValue(el2, checked) {
  const key = checked ? "_trueValue" : "_falseValue";
  return key in el2 ? el2[key] : checked;
}
const vModelDynamic = {
  created(el2, binding, vnode) {
    callModelHook(el2, binding, vnode, null, "created");
  },
  mounted(el2, binding, vnode) {
    callModelHook(el2, binding, vnode, null, "mounted");
  },
  beforeUpdate(el2, binding, vnode, prevVNode) {
    callModelHook(el2, binding, vnode, prevVNode, "beforeUpdate");
  },
  updated(el2, binding, vnode, prevVNode) {
    callModelHook(el2, binding, vnode, prevVNode, "updated");
  }
};
function resolveDynamicModel(tagName, type) {
  switch (tagName) {
    case "SELECT":
      return vModelSelect;
    case "TEXTAREA":
      return vModelText;
    default:
      switch (type) {
        case "checkbox":
          return vModelCheckbox;
        case "radio":
          return vModelRadio;
        default:
          return vModelText;
      }
  }
}
function callModelHook(el2, binding, vnode, prevVNode, hook) {
  const modelToUse = resolveDynamicModel(el2.tagName, vnode.props && vnode.props.type);
  const fn2 = modelToUse[hook];
  fn2 && fn2(el2, binding, vnode, prevVNode);
}
function initVModelForSSR() {
  vModelText.getSSRProps = ({ value }) => ({ value });
  vModelRadio.getSSRProps = ({ value }, vnode) => {
    if (vnode.props && looseEqual(vnode.props.value, value)) {
      return { checked: true };
    }
  };
  vModelCheckbox.getSSRProps = ({ value }, vnode) => {
    if (isArray$1(value)) {
      if (vnode.props && looseIndexOf(value, vnode.props.value) > -1) {
        return { checked: true };
      }
    } else if (isSet(value)) {
      if (vnode.props && value.has(vnode.props.value)) {
        return { checked: true };
      }
    } else if (value) {
      return { checked: true };
    }
  };
  vModelDynamic.getSSRProps = (binding, vnode) => {
    if (typeof vnode.type !== "string") {
      return;
    }
    const modelToUse = resolveDynamicModel(
      vnode.type.toUpperCase(),
      vnode.props && vnode.props.type
    );
    if (modelToUse.getSSRProps) {
      return modelToUse.getSSRProps(binding, vnode);
    }
  };
}
const systemModifiers = ["ctrl", "shift", "alt", "meta"];
const modifierGuards = {
  stop: (e2) => e2.stopPropagation(),
  prevent: (e2) => e2.preventDefault(),
  self: (e2) => e2.target !== e2.currentTarget,
  ctrl: (e2) => !e2.ctrlKey,
  shift: (e2) => !e2.shiftKey,
  alt: (e2) => !e2.altKey,
  meta: (e2) => !e2.metaKey,
  left: (e2) => "button" in e2 && e2.button !== 0,
  middle: (e2) => "button" in e2 && e2.button !== 1,
  right: (e2) => "button" in e2 && e2.button !== 2,
  exact: (e2, modifiers) => systemModifiers.some((m2) => e2[`${m2}Key`] && !modifiers.includes(m2))
};
const withModifiers = (fn2, modifiers) => {
  return (event, ...args) => {
    for (let i2 = 0; i2 < modifiers.length; i2++) {
      const guard = modifierGuards[modifiers[i2]];
      if (guard && guard(event, modifiers))
        return;
    }
    return fn2(event, ...args);
  };
};
const keyNames = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys = (fn2, modifiers) => {
  return (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate(event.key);
    if (modifiers.some((k2) => k2 === eventKey || keyNames[k2] === eventKey)) {
      return fn2(event);
    }
  };
};
const vShow = {
  beforeMount(el2, { value }, { transition }) {
    el2._vod = el2.style.display === "none" ? "" : el2.style.display;
    if (transition && value) {
      transition.beforeEnter(el2);
    } else {
      setDisplay(el2, value);
    }
  },
  mounted(el2, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el2);
    }
  },
  updated(el2, { value, oldValue }, { transition }) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el2);
        setDisplay(el2, true);
        transition.enter(el2);
      } else {
        transition.leave(el2, () => {
          setDisplay(el2, false);
        });
      }
    } else {
      setDisplay(el2, value);
    }
  },
  beforeUnmount(el2, { value }) {
    setDisplay(el2, value);
  }
};
function setDisplay(el2, value) {
  el2.style.display = value ? el2._vod : "none";
}
function initVShowForSSR() {
  vShow.getSSRProps = ({ value }) => {
    if (!value) {
      return { style: { display: "none" } };
    }
  };
}
const rendererOptions = /* @__PURE__ */ extend({ patchProp }, nodeOps);
let renderer;
let enabledHydration = false;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
  renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
  enabledHydration = true;
  return renderer;
}
const render$1 = (...args) => {
  ensureRenderer().render(...args);
};
const hydrate = (...args) => {
  ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  {
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction$1(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
const createSSRApp = (...args) => {
  const app = ensureHydrationRenderer().createApp(...args);
  {
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (container) {
      return mount(container, true, container instanceof SVGElement);
    }
  };
  return app;
};
function injectNativeTagCheck(app) {
  Object.defineProperty(app.config, "isNativeTag", {
    value: (tag) => isHTMLTag(tag) || isSVGTag(tag),
    writable: false
  });
}
function injectCompilerOptionsCheck(app) {
  if (isRuntimeOnly()) {
    const isCustomElement = app.config.isCustomElement;
    Object.defineProperty(app.config, "isCustomElement", {
      get() {
        return isCustomElement;
      },
      set() {
        warn$1(`The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`);
      }
    });
    const compilerOptions = app.config.compilerOptions;
    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
    Object.defineProperty(app.config, "compilerOptions", {
      get() {
        warn$1(msg);
        return compilerOptions;
      },
      set() {
        warn$1(msg);
      }
    });
  }
}
function normalizeContainer(container) {
  if (isString$1(container)) {
    const res = document.querySelector(container);
    if (!res) {
      warn$1(`Failed to mount app: mount target selector "${container}" returned null.`);
    }
    return res;
  }
  if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
    warn$1(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
  }
  return container;
}
let ssrDirectiveInitialized = false;
const initDirectivesForSSR = () => {
  if (!ssrDirectiveInitialized) {
    ssrDirectiveInitialized = true;
    initVModelForSSR();
    initVShowForSSR();
  }
};
function initDev() {
  {
    initCustomFormatter();
  }
}
{
  initDev();
}
const compile = () => {
  {
    warn$1(`Runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
  }
};
const vue_runtime_esmBundler = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  compile,
  EffectScope,
  ReactiveEffect,
  customRef,
  effect,
  effectScope,
  getCurrentScope,
  isProxy,
  isReactive,
  isReadonly,
  isRef,
  isShallow: isShallow$1,
  markRaw,
  onScopeDispose,
  proxyRefs,
  reactive,
  readonly,
  ref,
  shallowReactive,
  shallowReadonly,
  shallowRef,
  stop,
  toRaw,
  toRef,
  toRefs,
  triggerRef,
  unref,
  camelize,
  capitalize,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  toDisplayString,
  toHandlerKey,
  BaseTransition,
  Comment,
  Fragment,
  KeepAlive,
  Static,
  Suspense,
  Teleport,
  Text,
  assertNumber,
  callWithAsyncErrorHandling,
  callWithErrorHandling,
  cloneVNode,
  compatUtils,
  computed,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createElementVNode: createBaseVNode,
  createHydrationRenderer,
  createPropsRestProxy,
  createRenderer,
  createSlots,
  createStaticVNode,
  createTextVNode,
  createVNode,
  defineAsyncComponent,
  defineComponent,
  defineEmits,
  defineExpose,
  defineProps,
  get devtools() {
    return devtools;
  },
  getCurrentInstance,
  getTransitionRawChildren,
  guardReactiveProps,
  h: h$1,
  handleError,
  initCustomFormatter,
  inject,
  isMemoSame,
  isRuntimeOnly,
  isVNode,
  mergeDefaults,
  mergeProps,
  nextTick,
  onActivated,
  onBeforeMount,
  onBeforeUnmount,
  onBeforeUpdate,
  onDeactivated,
  onErrorCaptured,
  onMounted,
  onRenderTracked,
  onRenderTriggered,
  onServerPrefetch,
  onUnmounted,
  onUpdated,
  openBlock,
  popScopeId,
  provide,
  pushScopeId,
  queuePostFlushCb,
  registerRuntimeCompiler,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDirective,
  resolveDynamicComponent,
  resolveFilter,
  resolveTransitionHooks,
  setBlockTracking,
  setDevtoolsHook,
  setTransitionHooks,
  ssrContextKey,
  ssrUtils,
  toHandlers,
  transformVNodeArgs,
  useAttrs,
  useSSRContext,
  useSlots,
  useTransitionState,
  version: version$1,
  warn: warn$1,
  watch,
  watchEffect,
  watchPostEffect,
  watchSyncEffect,
  withAsyncContext,
  withCtx,
  withDefaults,
  withDirectives,
  withMemo,
  withScopeId,
  Transition,
  TransitionGroup,
  VueElement,
  createApp,
  createSSRApp,
  defineCustomElement,
  defineSSRCustomElement,
  hydrate,
  initDirectivesForSSR,
  render: render$1,
  useCssModule,
  useCssVars,
  vModelCheckbox,
  vModelDynamic,
  vModelRadio,
  vModelSelect,
  vModelText,
  vShow,
  withKeys,
  withModifiers
}, Symbol.toStringTag, { value: "Module" }));
const style = "";
const matchName = /^[a-z0-9]+(-[a-z0-9]+)*$/;
const iconDefaults = Object.freeze({
  left: 0,
  top: 0,
  width: 16,
  height: 16,
  rotate: 0,
  vFlip: false,
  hFlip: false
});
function fullIcon(data) {
  return { ...iconDefaults, ...data };
}
const stringToIcon = (value, validate, allowSimpleName, provider = "") => {
  const colonSeparated = value.split(":");
  if (value.slice(0, 1) === "@") {
    if (colonSeparated.length < 2 || colonSeparated.length > 3) {
      return null;
    }
    provider = colonSeparated.shift().slice(1);
  }
  if (colonSeparated.length > 3 || !colonSeparated.length) {
    return null;
  }
  if (colonSeparated.length > 1) {
    const name2 = colonSeparated.pop();
    const prefix = colonSeparated.pop();
    const result = {
      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
      prefix,
      name: name2
    };
    return validate && !validateIcon(result) ? null : result;
  }
  const name = colonSeparated[0];
  const dashSeparated = name.split("-");
  if (dashSeparated.length > 1) {
    const result = {
      provider,
      prefix: dashSeparated.shift(),
      name: dashSeparated.join("-")
    };
    return validate && !validateIcon(result) ? null : result;
  }
  if (allowSimpleName && provider === "") {
    const result = {
      provider,
      prefix: "",
      name
    };
    return validate && !validateIcon(result, allowSimpleName) ? null : result;
  }
  return null;
};
const validateIcon = (icon, allowSimpleName) => {
  if (!icon) {
    return false;
  }
  return !!((icon.provider === "" || icon.provider.match(matchName)) && (allowSimpleName && icon.prefix === "" || icon.prefix.match(matchName)) && icon.name.match(matchName));
};
function mergeIconData(icon, alias) {
  const result = { ...icon };
  for (const key in iconDefaults) {
    const prop = key;
    if (alias[prop] !== void 0) {
      const value = alias[prop];
      if (result[prop] === void 0) {
        result[prop] = value;
        continue;
      }
      switch (prop) {
        case "rotate":
          result[prop] = (result[prop] + value) % 4;
          break;
        case "hFlip":
        case "vFlip":
          result[prop] = value !== result[prop];
          break;
        default:
          result[prop] = value;
      }
    }
  }
  return result;
}
function getIconData$1(data, name, full = false) {
  function getIcon(name2, iteration) {
    if (data.icons[name2] !== void 0) {
      return Object.assign({}, data.icons[name2]);
    }
    if (iteration > 5) {
      return null;
    }
    const aliases = data.aliases;
    if (aliases && aliases[name2] !== void 0) {
      const item = aliases[name2];
      const result2 = getIcon(item.parent, iteration + 1);
      if (result2) {
        return mergeIconData(result2, item);
      }
      return result2;
    }
    const chars = data.chars;
    if (!iteration && chars && chars[name2] !== void 0) {
      return getIcon(chars[name2], iteration + 1);
    }
    return null;
  }
  const result = getIcon(name, 0);
  if (result) {
    for (const key in iconDefaults) {
      if (result[key] === void 0 && data[key] !== void 0) {
        result[key] = data[key];
      }
    }
  }
  return result && full ? fullIcon(result) : result;
}
function isVariation(item) {
  for (const key in iconDefaults) {
    if (item[key] !== void 0) {
      return true;
    }
  }
  return false;
}
function parseIconSet(data, callback, options) {
  options = options || {};
  const names = [];
  if (typeof data !== "object" || typeof data.icons !== "object") {
    return names;
  }
  if (data.not_found instanceof Array) {
    data.not_found.forEach((name) => {
      callback(name, null);
      names.push(name);
    });
  }
  const icons = data.icons;
  Object.keys(icons).forEach((name) => {
    const iconData = getIconData$1(data, name, true);
    if (iconData) {
      callback(name, iconData);
      names.push(name);
    }
  });
  const parseAliases = options.aliases || "all";
  if (parseAliases !== "none" && typeof data.aliases === "object") {
    const aliases = data.aliases;
    Object.keys(aliases).forEach((name) => {
      if (parseAliases === "variations" && isVariation(aliases[name])) {
        return;
      }
      const iconData = getIconData$1(data, name, true);
      if (iconData) {
        callback(name, iconData);
        names.push(name);
      }
    });
  }
  return names;
}
const optionalProperties = {
  provider: "string",
  aliases: "object",
  not_found: "object"
};
for (const prop in iconDefaults) {
  optionalProperties[prop] = typeof iconDefaults[prop];
}
function quicklyValidateIconSet(obj) {
  if (typeof obj !== "object" || obj === null) {
    return null;
  }
  const data = obj;
  if (typeof data.prefix !== "string" || !obj.icons || typeof obj.icons !== "object") {
    return null;
  }
  for (const prop in optionalProperties) {
    if (obj[prop] !== void 0 && typeof obj[prop] !== optionalProperties[prop]) {
      return null;
    }
  }
  const icons = data.icons;
  for (const name in icons) {
    const icon = icons[name];
    if (!name.match(matchName) || typeof icon.body !== "string") {
      return null;
    }
    for (const prop in iconDefaults) {
      if (icon[prop] !== void 0 && typeof icon[prop] !== typeof iconDefaults[prop]) {
        return null;
      }
    }
  }
  const aliases = data.aliases;
  if (aliases) {
    for (const name in aliases) {
      const icon = aliases[name];
      const parent = icon.parent;
      if (!name.match(matchName) || typeof parent !== "string" || !icons[parent] && !aliases[parent]) {
        return null;
      }
      for (const prop in iconDefaults) {
        if (icon[prop] !== void 0 && typeof icon[prop] !== typeof iconDefaults[prop]) {
          return null;
        }
      }
    }
  }
  return data;
}
const storageVersion = 1;
let storage$1 = /* @__PURE__ */ Object.create(null);
try {
  const w = window || self;
  if (w && w._iconifyStorage.version === storageVersion) {
    storage$1 = w._iconifyStorage.storage;
  }
} catch (err) {
}
function newStorage(provider, prefix) {
  return {
    provider,
    prefix,
    icons: /* @__PURE__ */ Object.create(null),
    missing: /* @__PURE__ */ Object.create(null)
  };
}
function getStorage(provider, prefix) {
  if (storage$1[provider] === void 0) {
    storage$1[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerStorage = storage$1[provider];
  if (providerStorage[prefix] === void 0) {
    providerStorage[prefix] = newStorage(provider, prefix);
  }
  return providerStorage[prefix];
}
function addIconSet(storage2, data) {
  if (!quicklyValidateIconSet(data)) {
    return [];
  }
  const t2 = Date.now();
  return parseIconSet(data, (name, icon) => {
    if (icon) {
      storage2.icons[name] = icon;
    } else {
      storage2.missing[name] = t2;
    }
  });
}
function addIconToStorage(storage2, name, icon) {
  try {
    if (typeof icon.body === "string") {
      storage2.icons[name] = Object.freeze(fullIcon(icon));
      return true;
    }
  } catch (err) {
  }
  return false;
}
function getIconFromStorage(storage2, name) {
  const value = storage2.icons[name];
  return value === void 0 ? null : value;
}
let simpleNames = false;
function allowSimpleNames(allow) {
  if (typeof allow === "boolean") {
    simpleNames = allow;
  }
  return simpleNames;
}
function getIconData(name) {
  const icon = typeof name === "string" ? stringToIcon(name, true, simpleNames) : name;
  return icon ? getIconFromStorage(getStorage(icon.provider, icon.prefix), icon.name) : null;
}
function addIcon(name, data) {
  const icon = stringToIcon(name, true, simpleNames);
  if (!icon) {
    return false;
  }
  const storage2 = getStorage(icon.provider, icon.prefix);
  return addIconToStorage(storage2, icon.name, data);
}
function addCollection(data, provider) {
  if (typeof data !== "object") {
    return false;
  }
  if (typeof provider !== "string") {
    provider = typeof data.provider === "string" ? data.provider : "";
  }
  if (simpleNames && provider === "" && (typeof data.prefix !== "string" || data.prefix === "")) {
    let added = false;
    if (quicklyValidateIconSet(data)) {
      data.prefix = "";
      parseIconSet(data, (name, icon) => {
        if (icon && addIcon(name, icon)) {
          added = true;
        }
      });
    }
    return added;
  }
  if (typeof data.prefix !== "string" || !validateIcon({
    provider,
    prefix: data.prefix,
    name: "a"
  })) {
    return false;
  }
  const storage2 = getStorage(provider, data.prefix);
  return !!addIconSet(storage2, data);
}
const defaults = Object.freeze({
  inline: false,
  width: null,
  height: null,
  hAlign: "center",
  vAlign: "middle",
  slice: false,
  hFlip: false,
  vFlip: false,
  rotate: 0
});
function mergeCustomisations(defaults2, item) {
  const result = {};
  for (const key in defaults2) {
    const attr = key;
    result[attr] = defaults2[attr];
    if (item[attr] === void 0) {
      continue;
    }
    const value = item[attr];
    switch (attr) {
      case "inline":
      case "slice":
        if (typeof value === "boolean") {
          result[attr] = value;
        }
        break;
      case "hFlip":
      case "vFlip":
        if (value === true) {
          result[attr] = !result[attr];
        }
        break;
      case "hAlign":
      case "vAlign":
        if (typeof value === "string" && value !== "") {
          result[attr] = value;
        }
        break;
      case "width":
      case "height":
        if (typeof value === "string" && value !== "" || typeof value === "number" && value || value === null) {
          result[attr] = value;
        }
        break;
      case "rotate":
        if (typeof value === "number") {
          result[attr] += value;
        }
        break;
    }
  }
  return result;
}
const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
const unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function calculateSize(size2, ratio, precision) {
  if (ratio === 1) {
    return size2;
  }
  precision = precision === void 0 ? 100 : precision;
  if (typeof size2 === "number") {
    return Math.ceil(size2 * ratio * precision) / precision;
  }
  if (typeof size2 !== "string") {
    return size2;
  }
  const oldParts = size2.split(unitsSplit);
  if (oldParts === null || !oldParts.length) {
    return size2;
  }
  const newParts = [];
  let code = oldParts.shift();
  let isNumber = unitsTest.test(code);
  while (true) {
    if (isNumber) {
      const num = parseFloat(code);
      if (isNaN(num)) {
        newParts.push(code);
      } else {
        newParts.push(Math.ceil(num * ratio * precision) / precision);
      }
    } else {
      newParts.push(code);
    }
    code = oldParts.shift();
    if (code === void 0) {
      return newParts.join("");
    }
    isNumber = !isNumber;
  }
}
function preserveAspectRatio(props) {
  let result = "";
  switch (props.hAlign) {
    case "left":
      result += "xMin";
      break;
    case "right":
      result += "xMax";
      break;
    default:
      result += "xMid";
  }
  switch (props.vAlign) {
    case "top":
      result += "YMin";
      break;
    case "bottom":
      result += "YMax";
      break;
    default:
      result += "YMid";
  }
  result += props.slice ? " slice" : " meet";
  return result;
}
function iconToSVG(icon, customisations) {
  const box = {
    left: icon.left,
    top: icon.top,
    width: icon.width,
    height: icon.height
  };
  let body = icon.body;
  [icon, customisations].forEach((props) => {
    const transformations = [];
    const hFlip = props.hFlip;
    const vFlip = props.vFlip;
    let rotation = props.rotate;
    if (hFlip) {
      if (vFlip) {
        rotation += 2;
      } else {
        transformations.push("translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")");
        transformations.push("scale(-1 1)");
        box.top = box.left = 0;
      }
    } else if (vFlip) {
      transformations.push("translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")");
      transformations.push("scale(1 -1)");
      box.top = box.left = 0;
    }
    let tempValue;
    if (rotation < 0) {
      rotation -= Math.floor(rotation / 4) * 4;
    }
    rotation = rotation % 4;
    switch (rotation) {
      case 1:
        tempValue = box.height / 2 + box.top;
        transformations.unshift("rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")");
        break;
      case 2:
        transformations.unshift("rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")");
        break;
      case 3:
        tempValue = box.width / 2 + box.left;
        transformations.unshift("rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")");
        break;
    }
    if (rotation % 2 === 1) {
      if (box.left !== 0 || box.top !== 0) {
        tempValue = box.left;
        box.left = box.top;
        box.top = tempValue;
      }
      if (box.width !== box.height) {
        tempValue = box.width;
        box.width = box.height;
        box.height = tempValue;
      }
    }
    if (transformations.length) {
      body = '<g transform="' + transformations.join(" ") + '">' + body + "</g>";
    }
  });
  let width, height;
  if (customisations.width === null && customisations.height === null) {
    height = "1em";
    width = calculateSize(height, box.width / box.height);
  } else if (customisations.width !== null && customisations.height !== null) {
    width = customisations.width;
    height = customisations.height;
  } else if (customisations.height !== null) {
    height = customisations.height;
    width = calculateSize(height, box.width / box.height);
  } else {
    width = customisations.width;
    height = calculateSize(width, box.height / box.width);
  }
  if (width === "auto") {
    width = box.width;
  }
  if (height === "auto") {
    height = box.height;
  }
  width = typeof width === "string" ? width : width.toString() + "";
  height = typeof height === "string" ? height : height.toString() + "";
  const result = {
    attributes: {
      width,
      height,
      preserveAspectRatio: preserveAspectRatio(customisations),
      viewBox: box.left.toString() + " " + box.top.toString() + " " + box.width.toString() + " " + box.height.toString()
    },
    body
  };
  if (customisations.inline) {
    result.inline = true;
  }
  return result;
}
const regex = /\sid="(\S+)"/g;
const randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);
let counter = 0;
function replaceIDs(body, prefix = randomPrefix) {
  const ids = [];
  let match;
  while (match = regex.exec(body)) {
    ids.push(match[1]);
  }
  if (!ids.length) {
    return body;
  }
  ids.forEach((id2) => {
    const newID = typeof prefix === "function" ? prefix(id2) : prefix + (counter++).toString();
    const escapedID = id2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    body = body.replace(new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"), "$1" + newID + "$3");
  });
  return body;
}
const storage = /* @__PURE__ */ Object.create(null);
function setAPIModule(provider, item) {
  storage[provider] = item;
}
function getAPIModule(provider) {
  return storage[provider] || storage[""];
}
function createAPIConfig(source) {
  let resources;
  if (typeof source.resources === "string") {
    resources = [source.resources];
  } else {
    resources = source.resources;
    if (!(resources instanceof Array) || !resources.length) {
      return null;
    }
  }
  const result = {
    resources,
    path: source.path === void 0 ? "/" : source.path,
    maxURL: source.maxURL ? source.maxURL : 500,
    rotate: source.rotate ? source.rotate : 750,
    timeout: source.timeout ? source.timeout : 5e3,
    random: source.random === true,
    index: source.index ? source.index : 0,
    dataAfterTimeout: source.dataAfterTimeout !== false
  };
  return result;
}
const configStorage = /* @__PURE__ */ Object.create(null);
const fallBackAPISources = [
  "https://api.simplesvg.com",
  "https://api.unisvg.com"
];
const fallBackAPI = [];
while (fallBackAPISources.length > 0) {
  if (fallBackAPISources.length === 1) {
    fallBackAPI.push(fallBackAPISources.shift());
  } else {
    if (Math.random() > 0.5) {
      fallBackAPI.push(fallBackAPISources.shift());
    } else {
      fallBackAPI.push(fallBackAPISources.pop());
    }
  }
}
configStorage[""] = createAPIConfig({
  resources: ["https://api.iconify.design"].concat(fallBackAPI)
});
function addAPIProvider(provider, customConfig) {
  const config2 = createAPIConfig(customConfig);
  if (config2 === null) {
    return false;
  }
  configStorage[provider] = config2;
  return true;
}
function getAPIConfig(provider) {
  return configStorage[provider];
}
const mergeParams = (base, params) => {
  let result = base, hasParams = result.indexOf("?") !== -1;
  function paramToString(value) {
    switch (typeof value) {
      case "boolean":
        return value ? "true" : "false";
      case "number":
        return encodeURIComponent(value);
      case "string":
        return encodeURIComponent(value);
      default:
        throw new Error("Invalid parameter");
    }
  }
  Object.keys(params).forEach((key) => {
    let value;
    try {
      value = paramToString(params[key]);
    } catch (err) {
      return;
    }
    result += (hasParams ? "&" : "?") + encodeURIComponent(key) + "=" + value;
    hasParams = true;
  });
  return result;
};
const maxLengthCache = {};
const pathCache = {};
const detectFetch = () => {
  let callback;
  try {
    callback = fetch;
    if (typeof callback === "function") {
      return callback;
    }
  } catch (err) {
  }
  return null;
};
let fetchModule = detectFetch();
function calculateMaxLength(provider, prefix) {
  const config2 = getAPIConfig(provider);
  if (!config2) {
    return 0;
  }
  let result;
  if (!config2.maxURL) {
    result = 0;
  } else {
    let maxHostLength = 0;
    config2.resources.forEach((item) => {
      const host = item;
      maxHostLength = Math.max(maxHostLength, host.length);
    });
    const url = mergeParams(prefix + ".json", {
      icons: ""
    });
    result = config2.maxURL - maxHostLength - config2.path.length - url.length;
  }
  const cacheKey = provider + ":" + prefix;
  pathCache[provider] = config2.path;
  maxLengthCache[cacheKey] = result;
  return result;
}
function shouldAbort(status) {
  return status === 404;
}
const prepare = (provider, prefix, icons) => {
  const results = [];
  let maxLength = maxLengthCache[prefix];
  if (maxLength === void 0) {
    maxLength = calculateMaxLength(provider, prefix);
  }
  const type = "icons";
  let item = {
    type,
    provider,
    prefix,
    icons: []
  };
  let length = 0;
  icons.forEach((name, index) => {
    length += name.length + 1;
    if (length >= maxLength && index > 0) {
      results.push(item);
      item = {
        type,
        provider,
        prefix,
        icons: []
      };
      length = name.length;
    }
    item.icons.push(name);
  });
  results.push(item);
  return results;
};
function getPath(provider) {
  if (typeof provider === "string") {
    if (pathCache[provider] === void 0) {
      const config2 = getAPIConfig(provider);
      if (!config2) {
        return "/";
      }
      pathCache[provider] = config2.path;
    }
    return pathCache[provider];
  }
  return "/";
}
const send = (host, params, callback) => {
  if (!fetchModule) {
    callback("abort", 424);
    return;
  }
  let path = getPath(params.provider);
  switch (params.type) {
    case "icons": {
      const prefix = params.prefix;
      const icons = params.icons;
      const iconsList = icons.join(",");
      path += mergeParams(prefix + ".json", {
        icons: iconsList
      });
      break;
    }
    case "custom": {
      const uri = params.uri;
      path += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;
      break;
    }
    default:
      callback("abort", 400);
      return;
  }
  let defaultError = 503;
  fetchModule(host + path).then((response) => {
    const status = response.status;
    if (status !== 200) {
      setTimeout(() => {
        callback(shouldAbort(status) ? "abort" : "next", status);
      });
      return;
    }
    defaultError = 501;
    return response.json();
  }).then((data) => {
    if (typeof data !== "object" || data === null) {
      setTimeout(() => {
        callback("next", defaultError);
      });
      return;
    }
    setTimeout(() => {
      callback("success", data);
    });
  }).catch(() => {
    callback("next", defaultError);
  });
};
const fetchAPIModule = {
  prepare,
  send
};
function sortIcons(icons) {
  const result = {
    loaded: [],
    missing: [],
    pending: []
  };
  const storage2 = /* @__PURE__ */ Object.create(null);
  icons.sort((a2, b2) => {
    if (a2.provider !== b2.provider) {
      return a2.provider.localeCompare(b2.provider);
    }
    if (a2.prefix !== b2.prefix) {
      return a2.prefix.localeCompare(b2.prefix);
    }
    return a2.name.localeCompare(b2.name);
  });
  let lastIcon = {
    provider: "",
    prefix: "",
    name: ""
  };
  icons.forEach((icon) => {
    if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {
      return;
    }
    lastIcon = icon;
    const provider = icon.provider;
    const prefix = icon.prefix;
    const name = icon.name;
    if (storage2[provider] === void 0) {
      storage2[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerStorage = storage2[provider];
    if (providerStorage[prefix] === void 0) {
      providerStorage[prefix] = getStorage(provider, prefix);
    }
    const localStorage2 = providerStorage[prefix];
    let list;
    if (localStorage2.icons[name] !== void 0) {
      list = result.loaded;
    } else if (prefix === "" || localStorage2.missing[name] !== void 0) {
      list = result.missing;
    } else {
      list = result.pending;
    }
    const item = {
      provider,
      prefix,
      name
    };
    list.push(item);
  });
  return result;
}
const callbacks = /* @__PURE__ */ Object.create(null);
const pendingUpdates = /* @__PURE__ */ Object.create(null);
function removeCallback(sources, id2) {
  sources.forEach((source) => {
    const provider = source.provider;
    if (callbacks[provider] === void 0) {
      return;
    }
    const providerCallbacks = callbacks[provider];
    const prefix = source.prefix;
    const items = providerCallbacks[prefix];
    if (items) {
      providerCallbacks[prefix] = items.filter((row) => row.id !== id2);
    }
  });
}
function updateCallbacks(provider, prefix) {
  if (pendingUpdates[provider] === void 0) {
    pendingUpdates[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerPendingUpdates = pendingUpdates[provider];
  if (!providerPendingUpdates[prefix]) {
    providerPendingUpdates[prefix] = true;
    setTimeout(() => {
      providerPendingUpdates[prefix] = false;
      if (callbacks[provider] === void 0 || callbacks[provider][prefix] === void 0) {
        return;
      }
      const items = callbacks[provider][prefix].slice(0);
      if (!items.length) {
        return;
      }
      const storage2 = getStorage(provider, prefix);
      let hasPending = false;
      items.forEach((item) => {
        const icons = item.icons;
        const oldLength = icons.pending.length;
        icons.pending = icons.pending.filter((icon) => {
          if (icon.prefix !== prefix) {
            return true;
          }
          const name = icon.name;
          if (storage2.icons[name] !== void 0) {
            icons.loaded.push({
              provider,
              prefix,
              name
            });
          } else if (storage2.missing[name] !== void 0) {
            icons.missing.push({
              provider,
              prefix,
              name
            });
          } else {
            hasPending = true;
            return true;
          }
          return false;
        });
        if (icons.pending.length !== oldLength) {
          if (!hasPending) {
            removeCallback([
              {
                provider,
                prefix
              }
            ], item.id);
          }
          item.callback(icons.loaded.slice(0), icons.missing.slice(0), icons.pending.slice(0), item.abort);
        }
      });
    });
  }
}
let idCounter = 0;
function storeCallback(callback, icons, pendingSources) {
  const id2 = idCounter++;
  const abort = removeCallback.bind(null, pendingSources, id2);
  if (!icons.pending.length) {
    return abort;
  }
  const item = {
    id: id2,
    icons,
    callback,
    abort
  };
  pendingSources.forEach((source) => {
    const provider = source.provider;
    const prefix = source.prefix;
    if (callbacks[provider] === void 0) {
      callbacks[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerCallbacks = callbacks[provider];
    if (providerCallbacks[prefix] === void 0) {
      providerCallbacks[prefix] = [];
    }
    providerCallbacks[prefix].push(item);
  });
  return abort;
}
function listToIcons(list, validate = true, simpleNames2 = false) {
  const result = [];
  list.forEach((item) => {
    const icon = typeof item === "string" ? stringToIcon(item, false, simpleNames2) : item;
    if (!validate || validateIcon(icon, simpleNames2)) {
      result.push({
        provider: icon.provider,
        prefix: icon.prefix,
        name: icon.name
      });
    }
  });
  return result;
}
var defaultConfig = {
  resources: [],
  index: 0,
  timeout: 2e3,
  rotate: 750,
  random: false,
  dataAfterTimeout: false
};
function sendQuery(config2, payload, query, done) {
  const resourcesCount = config2.resources.length;
  const startIndex = config2.random ? Math.floor(Math.random() * resourcesCount) : config2.index;
  let resources;
  if (config2.random) {
    let list = config2.resources.slice(0);
    resources = [];
    while (list.length > 1) {
      const nextIndex = Math.floor(Math.random() * list.length);
      resources.push(list[nextIndex]);
      list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));
    }
    resources = resources.concat(list);
  } else {
    resources = config2.resources.slice(startIndex).concat(config2.resources.slice(0, startIndex));
  }
  const startTime = Date.now();
  let status = "pending";
  let queriesSent = 0;
  let lastError;
  let timer = null;
  let queue2 = [];
  let doneCallbacks = [];
  if (typeof done === "function") {
    doneCallbacks.push(done);
  }
  function resetTimer() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  }
  function abort() {
    if (status === "pending") {
      status = "aborted";
    }
    resetTimer();
    queue2.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue2 = [];
  }
  function subscribe(callback, overwrite) {
    if (overwrite) {
      doneCallbacks = [];
    }
    if (typeof callback === "function") {
      doneCallbacks.push(callback);
    }
  }
  function getQueryStatus() {
    return {
      startTime,
      payload,
      status,
      queriesSent,
      queriesPending: queue2.length,
      subscribe,
      abort
    };
  }
  function failQuery() {
    status = "failed";
    doneCallbacks.forEach((callback) => {
      callback(void 0, lastError);
    });
  }
  function clearQueue() {
    queue2.forEach((item) => {
      if (item.status === "pending") {
        item.status = "aborted";
      }
    });
    queue2 = [];
  }
  function moduleResponse(item, response, data) {
    const isError = response !== "success";
    queue2 = queue2.filter((queued) => queued !== item);
    switch (status) {
      case "pending":
        break;
      case "failed":
        if (isError || !config2.dataAfterTimeout) {
          return;
        }
        break;
      default:
        return;
    }
    if (response === "abort") {
      lastError = data;
      failQuery();
      return;
    }
    if (isError) {
      lastError = data;
      if (!queue2.length) {
        if (!resources.length) {
          failQuery();
        } else {
          execNext();
        }
      }
      return;
    }
    resetTimer();
    clearQueue();
    if (!config2.random) {
      const index = config2.resources.indexOf(item.resource);
      if (index !== -1 && index !== config2.index) {
        config2.index = index;
      }
    }
    status = "completed";
    doneCallbacks.forEach((callback) => {
      callback(data);
    });
  }
  function execNext() {
    if (status !== "pending") {
      return;
    }
    resetTimer();
    const resource = resources.shift();
    if (resource === void 0) {
      if (queue2.length) {
        timer = setTimeout(() => {
          resetTimer();
          if (status === "pending") {
            clearQueue();
            failQuery();
          }
        }, config2.timeout);
        return;
      }
      failQuery();
      return;
    }
    const item = {
      status: "pending",
      resource,
      callback: (status2, data) => {
        moduleResponse(item, status2, data);
      }
    };
    queue2.push(item);
    queriesSent++;
    timer = setTimeout(execNext, config2.rotate);
    query(resource, payload, item.callback);
  }
  setTimeout(execNext);
  return getQueryStatus;
}
function setConfig(config2) {
  if (typeof config2 !== "object" || typeof config2.resources !== "object" || !(config2.resources instanceof Array) || !config2.resources.length) {
    throw new Error("Invalid Reduncancy configuration");
  }
  const newConfig = /* @__PURE__ */ Object.create(null);
  let key;
  for (key in defaultConfig) {
    if (config2[key] !== void 0) {
      newConfig[key] = config2[key];
    } else {
      newConfig[key] = defaultConfig[key];
    }
  }
  return newConfig;
}
function initRedundancy(cfg) {
  const config2 = setConfig(cfg);
  let queries = [];
  function cleanup() {
    queries = queries.filter((item) => item().status === "pending");
  }
  function query(payload, queryCallback, doneCallback) {
    const query2 = sendQuery(config2, payload, queryCallback, (data, error) => {
      cleanup();
      if (doneCallback) {
        doneCallback(data, error);
      }
    });
    queries.push(query2);
    return query2;
  }
  function find(callback) {
    const result = queries.find((value) => {
      return callback(value);
    });
    return result !== void 0 ? result : null;
  }
  const instance = {
    query,
    find,
    setIndex: (index) => {
      config2.index = index;
    },
    getIndex: () => config2.index,
    cleanup
  };
  return instance;
}
function emptyCallback$1() {
}
const redundancyCache = /* @__PURE__ */ Object.create(null);
function getRedundancyCache(provider) {
  if (redundancyCache[provider] === void 0) {
    const config2 = getAPIConfig(provider);
    if (!config2) {
      return;
    }
    const redundancy = initRedundancy(config2);
    const cachedReundancy = {
      config: config2,
      redundancy
    };
    redundancyCache[provider] = cachedReundancy;
  }
  return redundancyCache[provider];
}
function sendAPIQuery(target, query, callback) {
  let redundancy;
  let send2;
  if (typeof target === "string") {
    const api = getAPIModule(target);
    if (!api) {
      callback(void 0, 424);
      return emptyCallback$1;
    }
    send2 = api.send;
    const cached = getRedundancyCache(target);
    if (cached) {
      redundancy = cached.redundancy;
    }
  } else {
    const config2 = createAPIConfig(target);
    if (config2) {
      redundancy = initRedundancy(config2);
      const moduleKey = target.resources ? target.resources[0] : "";
      const api = getAPIModule(moduleKey);
      if (api) {
        send2 = api.send;
      }
    }
  }
  if (!redundancy || !send2) {
    callback(void 0, 424);
    return emptyCallback$1;
  }
  return redundancy.query(query, send2, callback)().abort;
}
const cache = {};
function emptyCallback() {
}
const pendingIcons = /* @__PURE__ */ Object.create(null);
const iconsToLoad = /* @__PURE__ */ Object.create(null);
const loaderFlags = /* @__PURE__ */ Object.create(null);
const queueFlags = /* @__PURE__ */ Object.create(null);
function loadedNewIcons(provider, prefix) {
  if (loaderFlags[provider] === void 0) {
    loaderFlags[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerLoaderFlags = loaderFlags[provider];
  if (!providerLoaderFlags[prefix]) {
    providerLoaderFlags[prefix] = true;
    setTimeout(() => {
      providerLoaderFlags[prefix] = false;
      updateCallbacks(provider, prefix);
    });
  }
}
const errorsCache = /* @__PURE__ */ Object.create(null);
function loadNewIcons(provider, prefix, icons) {
  function err() {
    const key = (provider === "" ? "" : "@" + provider + ":") + prefix;
    const time = Math.floor(Date.now() / 6e4);
    if (errorsCache[key] < time) {
      errorsCache[key] = time;
      console.error('Unable to retrieve icons for "' + key + '" because API is not configured properly.');
    }
  }
  if (iconsToLoad[provider] === void 0) {
    iconsToLoad[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerIconsToLoad = iconsToLoad[provider];
  if (queueFlags[provider] === void 0) {
    queueFlags[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerQueueFlags = queueFlags[provider];
  if (pendingIcons[provider] === void 0) {
    pendingIcons[provider] = /* @__PURE__ */ Object.create(null);
  }
  const providerPendingIcons = pendingIcons[provider];
  if (providerIconsToLoad[prefix] === void 0) {
    providerIconsToLoad[prefix] = icons;
  } else {
    providerIconsToLoad[prefix] = providerIconsToLoad[prefix].concat(icons).sort();
  }
  if (!providerQueueFlags[prefix]) {
    providerQueueFlags[prefix] = true;
    setTimeout(() => {
      providerQueueFlags[prefix] = false;
      const icons2 = providerIconsToLoad[prefix];
      delete providerIconsToLoad[prefix];
      const api = getAPIModule(provider);
      if (!api) {
        err();
        return;
      }
      const params = api.prepare(provider, prefix, icons2);
      params.forEach((item) => {
        sendAPIQuery(provider, item, (data, error) => {
          const storage2 = getStorage(provider, prefix);
          if (typeof data !== "object") {
            if (error !== 404) {
              return;
            }
            const t2 = Date.now();
            item.icons.forEach((name) => {
              storage2.missing[name] = t2;
            });
          } else {
            try {
              const parsed = addIconSet(storage2, data);
              if (!parsed.length) {
                return;
              }
              const pending = providerPendingIcons[prefix];
              parsed.forEach((name) => {
                delete pending[name];
              });
              if (cache.store) {
                cache.store(provider, data);
              }
            } catch (err2) {
              console.error(err2);
            }
          }
          loadedNewIcons(provider, prefix);
        });
      });
    });
  }
}
const loadIcons = (icons, callback) => {
  const cleanedIcons = listToIcons(icons, true, allowSimpleNames());
  const sortedIcons = sortIcons(cleanedIcons);
  if (!sortedIcons.pending.length) {
    let callCallback = true;
    if (callback) {
      setTimeout(() => {
        if (callCallback) {
          callback(sortedIcons.loaded, sortedIcons.missing, sortedIcons.pending, emptyCallback);
        }
      });
    }
    return () => {
      callCallback = false;
    };
  }
  const newIcons = /* @__PURE__ */ Object.create(null);
  const sources = [];
  let lastProvider, lastPrefix;
  sortedIcons.pending.forEach((icon) => {
    const provider = icon.provider;
    const prefix = icon.prefix;
    if (prefix === lastPrefix && provider === lastProvider) {
      return;
    }
    lastProvider = provider;
    lastPrefix = prefix;
    sources.push({
      provider,
      prefix
    });
    if (pendingIcons[provider] === void 0) {
      pendingIcons[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerPendingIcons = pendingIcons[provider];
    if (providerPendingIcons[prefix] === void 0) {
      providerPendingIcons[prefix] = /* @__PURE__ */ Object.create(null);
    }
    if (newIcons[provider] === void 0) {
      newIcons[provider] = /* @__PURE__ */ Object.create(null);
    }
    const providerNewIcons = newIcons[provider];
    if (providerNewIcons[prefix] === void 0) {
      providerNewIcons[prefix] = [];
    }
  });
  const time = Date.now();
  sortedIcons.pending.forEach((icon) => {
    const provider = icon.provider;
    const prefix = icon.prefix;
    const name = icon.name;
    const pendingQueue = pendingIcons[provider][prefix];
    if (pendingQueue[name] === void 0) {
      pendingQueue[name] = time;
      newIcons[provider][prefix].push(name);
    }
  });
  sources.forEach((source) => {
    const provider = source.provider;
    const prefix = source.prefix;
    if (newIcons[provider][prefix].length) {
      loadNewIcons(provider, prefix, newIcons[provider][prefix]);
    }
  });
  return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;
};
const cacheVersion = "iconify2";
const cachePrefix = "iconify";
const countKey = cachePrefix + "-count";
const versionKey = cachePrefix + "-version";
const hour = 36e5;
const cacheExpiration = 168;
const config$1 = {
  local: true,
  session: true
};
let loaded = false;
const count = {
  local: 0,
  session: 0
};
const emptyList = {
  local: [],
  session: []
};
let _window = typeof window === "undefined" ? {} : window;
function getGlobal(key) {
  const attr = key + "Storage";
  try {
    if (_window && _window[attr] && typeof _window[attr].length === "number") {
      return _window[attr];
    }
  } catch (err) {
  }
  config$1[key] = false;
  return null;
}
function setCount(storage2, key, value) {
  try {
    storage2.setItem(countKey, value.toString());
    count[key] = value;
    return true;
  } catch (err) {
    return false;
  }
}
function getCount(storage2) {
  const count2 = storage2.getItem(countKey);
  if (count2) {
    const total = parseInt(count2);
    return total ? total : 0;
  }
  return 0;
}
function initCache(storage2, key) {
  try {
    storage2.setItem(versionKey, cacheVersion);
  } catch (err) {
  }
  setCount(storage2, key, 0);
}
function destroyCache(storage2) {
  try {
    const total = getCount(storage2);
    for (let i2 = 0; i2 < total; i2++) {
      storage2.removeItem(cachePrefix + i2.toString());
    }
  } catch (err) {
  }
}
const loadCache = () => {
  if (loaded) {
    return;
  }
  loaded = true;
  const minTime = Math.floor(Date.now() / hour) - cacheExpiration;
  function load(key) {
    const func = getGlobal(key);
    if (!func) {
      return;
    }
    const getItem = (index) => {
      const name = cachePrefix + index.toString();
      const item = func.getItem(name);
      if (typeof item !== "string") {
        return false;
      }
      let valid = true;
      try {
        const data = JSON.parse(item);
        if (typeof data !== "object" || typeof data.cached !== "number" || data.cached < minTime || typeof data.provider !== "string" || typeof data.data !== "object" || typeof data.data.prefix !== "string") {
          valid = false;
        } else {
          const provider = data.provider;
          const prefix = data.data.prefix;
          const storage2 = getStorage(provider, prefix);
          valid = addIconSet(storage2, data.data).length > 0;
        }
      } catch (err) {
        valid = false;
      }
      if (!valid) {
        func.removeItem(name);
      }
      return valid;
    };
    try {
      const version2 = func.getItem(versionKey);
      if (version2 !== cacheVersion) {
        if (version2) {
          destroyCache(func);
        }
        initCache(func, key);
        return;
      }
      let total = getCount(func);
      for (let i2 = total - 1; i2 >= 0; i2--) {
        if (!getItem(i2)) {
          if (i2 === total - 1) {
            total--;
          } else {
            emptyList[key].push(i2);
          }
        }
      }
      setCount(func, key, total);
    } catch (err) {
    }
  }
  for (const key in config$1) {
    load(key);
  }
};
const storeCache = (provider, data) => {
  if (!loaded) {
    loadCache();
  }
  function store(key) {
    if (!config$1[key]) {
      return false;
    }
    const func = getGlobal(key);
    if (!func) {
      return false;
    }
    let index = emptyList[key].shift();
    if (index === void 0) {
      index = count[key];
      if (!setCount(func, key, index + 1)) {
        return false;
      }
    }
    try {
      const item = {
        cached: Math.floor(Date.now() / hour),
        provider,
        data
      };
      func.setItem(cachePrefix + index.toString(), JSON.stringify(item));
    } catch (err) {
      return false;
    }
    return true;
  }
  if (!Object.keys(data.icons).length) {
    return;
  }
  if (data.not_found) {
    data = Object.assign({}, data);
    delete data.not_found;
  }
  if (!store("local")) {
    store("session");
  }
};
const separator = /[\s,]+/;
function flipFromString(custom, flip2) {
  flip2.split(separator).forEach((str) => {
    const value = str.trim();
    switch (value) {
      case "horizontal":
        custom.hFlip = true;
        break;
      case "vertical":
        custom.vFlip = true;
        break;
    }
  });
}
function alignmentFromString(custom, align) {
  align.split(separator).forEach((str) => {
    const value = str.trim();
    switch (value) {
      case "left":
      case "center":
      case "right":
        custom.hAlign = value;
        break;
      case "top":
      case "middle":
      case "bottom":
        custom.vAlign = value;
        break;
      case "slice":
      case "crop":
        custom.slice = true;
        break;
      case "meet":
        custom.slice = false;
    }
  });
}
function rotateFromString(value, defaultValue = 0) {
  const units = value.replace(/^-?[0-9.]*/, "");
  function cleanup(value2) {
    while (value2 < 0) {
      value2 += 4;
    }
    return value2 % 4;
  }
  if (units === "") {
    const num = parseInt(value);
    return isNaN(num) ? 0 : cleanup(num);
  } else if (units !== value) {
    let split = 0;
    switch (units) {
      case "%":
        split = 25;
        break;
      case "deg":
        split = 90;
    }
    if (split) {
      let num = parseFloat(value.slice(0, value.length - units.length));
      if (isNaN(num)) {
        return 0;
      }
      num = num / split;
      return num % 1 === 0 ? cleanup(num) : 0;
    }
  }
  return defaultValue;
}
const svgDefaults = {
  "xmlns": "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  "aria-hidden": true,
  "role": "img"
};
let customisationAliases = {};
["horizontal", "vertical"].forEach((prefix) => {
  ["Align", "Flip"].forEach((suffix) => {
    const attr = prefix.slice(0, 1) + suffix;
    const value = {
      attr,
      boolean: suffix === "Flip"
    };
    customisationAliases[prefix + "-" + suffix.toLowerCase()] = value;
    customisationAliases[prefix.slice(0, 1) + "-" + suffix.toLowerCase()] = value;
    customisationAliases[prefix + suffix] = value;
  });
});
const render = (icon, props) => {
  const customisations = mergeCustomisations(defaults, props);
  const componentProps = { ...svgDefaults };
  let style2 = typeof props.style === "object" && !(props.style instanceof Array) ? { ...props.style } : {};
  for (let key in props) {
    const value = props[key];
    if (value === void 0) {
      continue;
    }
    switch (key) {
      case "icon":
      case "style":
      case "onLoad":
        break;
      case "inline":
      case "hFlip":
      case "vFlip":
        customisations[key] = value === true || value === "true" || value === 1;
        break;
      case "flip":
        if (typeof value === "string") {
          flipFromString(customisations, value);
        }
        break;
      case "align":
        if (typeof value === "string") {
          alignmentFromString(customisations, value);
        }
        break;
      case "color":
        style2.color = value;
        break;
      case "rotate":
        if (typeof value === "string") {
          customisations[key] = rotateFromString(value);
        } else if (typeof value === "number") {
          customisations[key] = value;
        }
        break;
      case "ariaHidden":
      case "aria-hidden":
        if (value !== true && value !== "true") {
          delete componentProps["aria-hidden"];
        }
        break;
      default:
        if (customisationAliases[key] !== void 0) {
          if (customisationAliases[key].boolean && (value === true || value === "true" || value === 1)) {
            customisations[customisationAliases[key].attr] = true;
          } else if (!customisationAliases[key].boolean && typeof value === "string" && value !== "") {
            customisations[customisationAliases[key].attr] = value;
          }
        } else if (defaults[key] === void 0) {
          componentProps[key] = value;
        }
    }
  }
  const item = iconToSVG(icon, customisations);
  for (let key in item.attributes) {
    componentProps[key] = item.attributes[key];
  }
  if (item.inline && style2.verticalAlign === void 0 && style2["vertical-align"] === void 0) {
    style2.verticalAlign = "-0.125em";
  }
  let localCounter = 0;
  let id2 = props.id;
  if (typeof id2 === "string") {
    id2 = id2.replace(/-/g, "_");
  }
  componentProps["innerHTML"] = replaceIDs(item.body, id2 ? () => id2 + "ID" + localCounter++ : "iconifyVue");
  if (Object.keys(style2).length > 0) {
    componentProps["style"] = style2;
  }
  return h$2("svg", componentProps);
};
allowSimpleNames(true);
setAPIModule("", fetchAPIModule);
if (typeof document !== "undefined" && typeof window !== "undefined") {
  cache.store = storeCache;
  loadCache();
  const _window2 = window;
  if (_window2.IconifyPreload !== void 0) {
    const preload = _window2.IconifyPreload;
    const err = "Invalid IconifyPreload syntax.";
    if (typeof preload === "object" && preload !== null) {
      (preload instanceof Array ? preload : [preload]).forEach((item) => {
        try {
          if (typeof item !== "object" || item === null || item instanceof Array || typeof item.icons !== "object" || typeof item.prefix !== "string" || !addCollection(item)) {
            console.error(err);
          }
        } catch (e2) {
          console.error(err);
        }
      });
    }
  }
  if (_window2.IconifyProviders !== void 0) {
    const providers = _window2.IconifyProviders;
    if (typeof providers === "object" && providers !== null) {
      for (let key in providers) {
        const err = "IconifyProviders[" + key + "] is invalid.";
        try {
          const value = providers[key];
          if (typeof value !== "object" || !value || value.resources === void 0) {
            continue;
          }
          if (!addAPIProvider(key, value)) {
            console.error(err);
          }
        } catch (e2) {
          console.error(err);
        }
      }
    }
  }
}
const emptyIcon = fullIcon({
  body: ""
});
const Icon = defineComponent$1({
  inheritAttrs: false,
  data() {
    return {
      iconMounted: false,
      counter: 0
    };
  },
  mounted() {
    this._name = "";
    this._loadingIcon = null;
    this.iconMounted = true;
  },
  unmounted() {
    this.abortLoading();
  },
  methods: {
    abortLoading() {
      if (this._loadingIcon) {
        this._loadingIcon.abort();
        this._loadingIcon = null;
      }
    },
    getIcon(icon, onload) {
      if (typeof icon === "object" && icon !== null && typeof icon.body === "string") {
        this._name = "";
        this.abortLoading();
        return {
          data: fullIcon(icon)
        };
      }
      let iconName;
      if (typeof icon !== "string" || (iconName = stringToIcon(icon, false, true)) === null) {
        this.abortLoading();
        return null;
      }
      const data = getIconData(iconName);
      if (data === null) {
        if (!this._loadingIcon || this._loadingIcon.name !== icon) {
          this.abortLoading();
          this._name = "";
          this._loadingIcon = {
            name: icon,
            abort: loadIcons([iconName], () => {
              this.counter++;
            })
          };
        }
        return null;
      }
      this.abortLoading();
      if (this._name !== icon) {
        this._name = icon;
        if (onload) {
          onload(icon);
        }
      }
      const classes = ["iconify"];
      if (iconName.prefix !== "") {
        classes.push("iconify--" + iconName.prefix);
      }
      if (iconName.provider !== "") {
        classes.push("iconify--" + iconName.provider);
      }
      return { data, classes };
    }
  },
  render() {
    this.counter;
    const props = this.$attrs;
    const icon = this.iconMounted ? this.getIcon(props.icon, props.onLoad) : null;
    if (!icon) {
      return render(emptyIcon, props);
    }
    let newProps = props;
    if (icon.classes) {
      newProps = {
        ...props,
        class: (typeof props["class"] === "string" ? props["class"] + " " : "") + icon.classes.join(" ")
      };
    }
    return render(icon.data, newProps);
  }
});
var _a$1;
const isClient = typeof window !== "undefined";
const isDef = (val) => typeof val !== "undefined";
const isFunction = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const noop$1 = () => {
};
isClient && ((_a$1 = window == null ? void 0 : window.navigator) == null ? void 0 : _a$1.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
function resolveUnref(r2) {
  return typeof r2 === "function" ? r2() : unref$1(r2);
}
function createFilterWrapper(filter, fn2) {
  function wrapper(...args) {
    return new Promise((resolve2, reject) => {
      Promise.resolve(filter(() => fn2.apply(this, args), { fn: fn2, thisArg: this, args })).then(resolve2).catch(reject);
    });
  }
  return wrapper;
}
const bypassFilter = (invoke) => {
  return invoke();
};
function debounceFilter(ms2, options = {}) {
  let timer;
  let maxTimer;
  let lastRejector = noop$1;
  const _clearTimeout = (timer2) => {
    clearTimeout(timer2);
    lastRejector();
    lastRejector = noop$1;
  };
  const filter = (invoke) => {
    const duration = resolveUnref(ms2);
    const maxDuration = resolveUnref(options.maxWait);
    if (timer)
      _clearTimeout(timer);
    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
      if (maxTimer) {
        _clearTimeout(maxTimer);
        maxTimer = null;
      }
      return Promise.resolve(invoke());
    }
    return new Promise((resolve2, reject) => {
      lastRejector = options.rejectOnCancel ? reject : resolve2;
      if (maxDuration && !maxTimer) {
        maxTimer = setTimeout(() => {
          if (timer)
            _clearTimeout(timer);
          maxTimer = null;
          resolve2(invoke());
        }, maxDuration);
      }
      timer = setTimeout(() => {
        if (maxTimer)
          _clearTimeout(maxTimer);
        maxTimer = null;
        resolve2(invoke());
      }, duration);
    });
  };
  return filter;
}
function pausableFilter(extendFilter = bypassFilter) {
  const isActive = ref$1(true);
  function pause() {
    isActive.value = false;
  }
  function resume() {
    isActive.value = true;
  }
  const eventFilter = (...args) => {
    if (isActive.value)
      extendFilter(...args);
  };
  return { isActive: readonly$1(isActive), pause, resume, eventFilter };
}
function identity(arg) {
  return arg;
}
function computedWithControl(source, fn2) {
  let v2 = void 0;
  let track2;
  let trigger2;
  const dirty = ref$1(true);
  const update = () => {
    dirty.value = true;
    trigger2();
  };
  watch$1(source, update, { flush: "sync" });
  const get2 = isFunction(fn2) ? fn2 : fn2.get;
  const set2 = isFunction(fn2) ? void 0 : fn2.set;
  const result = customRef$1((_track, _trigger) => {
    track2 = _track;
    trigger2 = _trigger;
    return {
      get() {
        if (dirty.value) {
          v2 = get2();
          dirty.value = false;
        }
        track2();
        return v2;
      },
      set(v22) {
        set2 == null ? void 0 : set2(v22);
      }
    };
  });
  if (Object.isExtensible(result))
    result.trigger = update;
  return result;
}
function tryOnScopeDispose(fn2) {
  if (getCurrentScope$1()) {
    onScopeDispose$1(fn2);
    return true;
  }
  return false;
}
function useDebounceFn(fn2, ms2 = 200, options = {}) {
  return createFilterWrapper(debounceFilter(ms2, options), fn2);
}
function refDebounced(value, ms2 = 200, options = {}) {
  const debounced = ref$1(value.value);
  const updater = useDebounceFn(() => {
    debounced.value = value.value;
  }, ms2, options);
  watch$1(value, () => updater());
  return debounced;
}
function resolveRef(r2) {
  return typeof r2 === "function" ? computed$2(r2) : ref$1(r2);
}
function tryOnMounted(fn2, sync = true) {
  if (getCurrentInstance$1())
    onMounted$1(fn2);
  else if (sync)
    fn2();
  else
    nextTick$1(fn2);
}
function useTimeoutFn(cb, interval, options = {}) {
  const {
    immediate = true
  } = options;
  const isPending = ref$1(false);
  let timer = null;
  function clear2() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  }
  function stop2() {
    isPending.value = false;
    clear2();
  }
  function start(...args) {
    clear2();
    isPending.value = true;
    timer = setTimeout(() => {
      isPending.value = false;
      timer = null;
      cb(...args);
    }, resolveUnref(interval));
  }
  if (immediate) {
    isPending.value = true;
    if (isClient)
      start();
  }
  tryOnScopeDispose(stop2);
  return {
    isPending: readonly$1(isPending),
    start,
    stop: stop2
  };
}
function useToggle(initialValue = false, options = {}) {
  const {
    truthyValue = true,
    falsyValue = false
  } = options;
  const valueIsRef = isRef$1(initialValue);
  const _value = ref$1(initialValue);
  function toggle(value) {
    if (arguments.length) {
      _value.value = value;
      return _value.value;
    } else {
      const truthy = resolveUnref(truthyValue);
      _value.value = _value.value === truthy ? resolveUnref(falsyValue) : truthy;
      return _value.value;
    }
  }
  if (valueIsRef)
    return toggle;
  else
    return [_value, toggle];
}
var __getOwnPropSymbols$6$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$6$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$6$1 = Object.prototype.propertyIsEnumerable;
var __objRest$5 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$6$1.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$6$1)
    for (var prop of __getOwnPropSymbols$6$1(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$6$1.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function watchWithFilter(source, cb, options = {}) {
  const _a2 = options, {
    eventFilter = bypassFilter
  } = _a2, watchOptions = __objRest$5(_a2, [
    "eventFilter"
  ]);
  return watch$1(source, createFilterWrapper(eventFilter, cb), watchOptions);
}
var __defProp$2$1 = Object.defineProperty;
var __defProps$2$1 = Object.defineProperties;
var __getOwnPropDescs$2$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$2$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$2$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$2$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2$1 = (obj, key, value) => key in obj ? __defProp$2$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$2$1 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp$2$1.call(b2, prop))
      __defNormalProp$2$1(a2, prop, b2[prop]);
  if (__getOwnPropSymbols$2$1)
    for (var prop of __getOwnPropSymbols$2$1(b2)) {
      if (__propIsEnum$2$1.call(b2, prop))
        __defNormalProp$2$1(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps$2$1 = (a2, b2) => __defProps$2$1(a2, __getOwnPropDescs$2$1(b2));
var __objRest$1$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$2$1.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$2$1)
    for (var prop of __getOwnPropSymbols$2$1(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$2$1.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function watchPausable(source, cb, options = {}) {
  const _a2 = options, {
    eventFilter: filter
  } = _a2, watchOptions = __objRest$1$1(_a2, [
    "eventFilter"
  ]);
  const { eventFilter, pause, resume, isActive } = pausableFilter(filter);
  const stop2 = watchWithFilter(source, cb, __spreadProps$2$1(__spreadValues$2$1({}, watchOptions), {
    eventFilter
  }));
  return { stop: stop2, pause, resume, isActive };
}
function unrefElement(elRef) {
  var _a2;
  const plain = resolveUnref(elRef);
  return (_a2 = plain == null ? void 0 : plain.$el) != null ? _a2 : plain;
}
const defaultWindow = isClient ? window : void 0;
const defaultDocument = isClient ? window.document : void 0;
const defaultNavigator = isClient ? window.navigator : void 0;
function useEventListener(...args) {
  let target;
  let events;
  let listeners;
  let options;
  if (isString(args[0]) || Array.isArray(args[0])) {
    [events, listeners, options] = args;
    target = defaultWindow;
  } else {
    [target, events, listeners, options] = args;
  }
  if (!target)
    return noop$1;
  if (!Array.isArray(events))
    events = [events];
  if (!Array.isArray(listeners))
    listeners = [listeners];
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn2) => fn2());
    cleanups.length = 0;
  };
  const register = (el2, event, listener) => {
    el2.addEventListener(event, listener, options);
    return () => el2.removeEventListener(event, listener, options);
  };
  const stopWatch = watch$1(() => unrefElement(target), (el2) => {
    cleanup();
    if (!el2)
      return;
    cleanups.push(...events.flatMap((event) => {
      return listeners.map((listener) => register(el2, event, listener));
    }));
  }, { immediate: true, flush: "post" });
  const stop2 = () => {
    stopWatch();
    cleanup();
  };
  tryOnScopeDispose(stop2);
  return stop2;
}
function onClickOutside(target, handler, options = {}) {
  const { window: window2 = defaultWindow, ignore = [], capture = true, detectIframe = false } = options;
  if (!window2)
    return;
  let shouldListen = true;
  let fallback;
  const shouldIgnore = (event) => {
    return ignore.some((target2) => {
      if (typeof target2 === "string") {
        return Array.from(window2.document.querySelectorAll(target2)).some((el2) => el2 === event.target || event.composedPath().includes(el2));
      } else {
        const el2 = unrefElement(target2);
        return el2 && (event.target === el2 || event.composedPath().includes(el2));
      }
    });
  };
  const listener = (event) => {
    window2.clearTimeout(fallback);
    const el2 = unrefElement(target);
    if (!el2 || el2 === event.target || event.composedPath().includes(el2))
      return;
    if (event.detail === 0)
      shouldListen = !shouldIgnore(event);
    if (!shouldListen) {
      shouldListen = true;
      return;
    }
    handler(event);
  };
  const cleanup = [
    useEventListener(window2, "click", listener, { passive: true, capture }),
    useEventListener(window2, "pointerdown", (e2) => {
      const el2 = unrefElement(target);
      if (el2)
        shouldListen = !e2.composedPath().includes(el2) && !shouldIgnore(e2);
    }, { passive: true }),
    useEventListener(window2, "pointerup", (e2) => {
      if (e2.button === 0) {
        const path = e2.composedPath();
        e2.composedPath = () => path;
        fallback = window2.setTimeout(() => listener(e2), 50);
      }
    }, { passive: true }),
    detectIframe && useEventListener(window2, "blur", (event) => {
      var _a2;
      const el2 = unrefElement(target);
      if (((_a2 = window2.document.activeElement) == null ? void 0 : _a2.tagName) === "IFRAME" && !(el2 == null ? void 0 : el2.contains(window2.document.activeElement)))
        handler(event);
    })
  ].filter(Boolean);
  const stop2 = () => cleanup.forEach((fn2) => fn2());
  return stop2;
}
function useActiveElement(options = {}) {
  var _a2;
  const { window: window2 = defaultWindow } = options;
  const document2 = (_a2 = options.document) != null ? _a2 : window2 == null ? void 0 : window2.document;
  const activeElement = computedWithControl(() => null, () => document2 == null ? void 0 : document2.activeElement);
  if (window2) {
    useEventListener(window2, "blur", (event) => {
      if (event.relatedTarget !== null)
        return;
      activeElement.trigger();
    }, true);
    useEventListener(window2, "focus", activeElement.trigger, true);
  }
  return activeElement;
}
function useSupported(callback, sync = false) {
  const isSupported2 = ref$1();
  const update = () => isSupported2.value = Boolean(callback());
  update();
  tryOnMounted(update, sync);
  return isSupported2;
}
function useMediaQuery(query, options = {}) {
  const { window: window2 = defaultWindow } = options;
  const isSupported2 = useSupported(() => window2 && "matchMedia" in window2 && typeof window2.matchMedia === "function");
  let mediaQuery;
  const matches2 = ref$1(false);
  const cleanup = () => {
    if (!mediaQuery)
      return;
    if ("removeEventListener" in mediaQuery)
      mediaQuery.removeEventListener("change", update);
    else
      mediaQuery.removeListener(update);
  };
  const update = () => {
    if (!isSupported2.value)
      return;
    cleanup();
    mediaQuery = window2.matchMedia(resolveRef(query).value);
    matches2.value = mediaQuery.matches;
    if ("addEventListener" in mediaQuery)
      mediaQuery.addEventListener("change", update);
    else
      mediaQuery.addListener(update);
  };
  watchEffect$1(update);
  tryOnScopeDispose(() => cleanup());
  return matches2;
}
function useClipboard(options = {}) {
  const {
    navigator: navigator2 = defaultNavigator,
    read: read2 = false,
    source,
    copiedDuring = 1500,
    legacy = false
  } = options;
  const events = ["copy", "cut"];
  const isClipboardApiSupported = useSupported(() => navigator2 && "clipboard" in navigator2);
  const isSupported2 = computed$2(() => isClipboardApiSupported.value || legacy);
  const text = ref$1("");
  const copied = ref$1(false);
  const timeout = useTimeoutFn(() => copied.value = false, copiedDuring);
  function updateText() {
    if (isClipboardApiSupported.value) {
      navigator2.clipboard.readText().then((value) => {
        text.value = value;
      });
    } else {
      text.value = legacyRead();
    }
  }
  if (isSupported2.value && read2) {
    for (const event of events)
      useEventListener(event, updateText);
  }
  async function copy(value = resolveUnref(source)) {
    if (isSupported2.value && value != null) {
      if (isClipboardApiSupported.value)
        await navigator2.clipboard.writeText(value);
      else
        legacyCopy(value);
      text.value = value;
      copied.value = true;
      timeout.start();
    }
  }
  function legacyCopy(value) {
    const ta2 = document.createElement("textarea");
    ta2.value = value != null ? value : "";
    ta2.style.position = "absolute";
    ta2.style.opacity = "0";
    document.body.appendChild(ta2);
    ta2.select();
    document.execCommand("copy");
    ta2.remove();
  }
  function legacyRead() {
    var _a2, _b, _c2;
    return (_c2 = (_b = (_a2 = document == null ? void 0 : document.getSelection) == null ? void 0 : _a2.call(document)) == null ? void 0 : _b.toString()) != null ? _c2 : "";
  }
  return {
    isSupported: isSupported2,
    text,
    copied,
    copy
  };
}
const _global = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
const globalKey = "__vueuse_ssr_handlers__";
_global[globalKey] = _global[globalKey] || {};
const handlers = _global[globalKey];
function getSSRHandler(key, fallback) {
  return handlers[key] || fallback;
}
function guessSerializerType(rawInit) {
  return rawInit == null ? "any" : rawInit instanceof Set ? "set" : rawInit instanceof Map ? "map" : rawInit instanceof Date ? "date" : typeof rawInit === "boolean" ? "boolean" : typeof rawInit === "string" ? "string" : typeof rawInit === "object" ? "object" : !Number.isNaN(rawInit) ? "number" : "any";
}
var __defProp$j = Object.defineProperty;
var __getOwnPropSymbols$l = Object.getOwnPropertySymbols;
var __hasOwnProp$l = Object.prototype.hasOwnProperty;
var __propIsEnum$l = Object.prototype.propertyIsEnumerable;
var __defNormalProp$j = (obj, key, value) => key in obj ? __defProp$j(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$j = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp$l.call(b2, prop))
      __defNormalProp$j(a2, prop, b2[prop]);
  if (__getOwnPropSymbols$l)
    for (var prop of __getOwnPropSymbols$l(b2)) {
      if (__propIsEnum$l.call(b2, prop))
        __defNormalProp$j(a2, prop, b2[prop]);
    }
  return a2;
};
const StorageSerializers = {
  boolean: {
    read: (v2) => v2 === "true",
    write: (v2) => String(v2)
  },
  object: {
    read: (v2) => JSON.parse(v2),
    write: (v2) => JSON.stringify(v2)
  },
  number: {
    read: (v2) => Number.parseFloat(v2),
    write: (v2) => String(v2)
  },
  any: {
    read: (v2) => v2,
    write: (v2) => String(v2)
  },
  string: {
    read: (v2) => v2,
    write: (v2) => String(v2)
  },
  map: {
    read: (v2) => new Map(JSON.parse(v2)),
    write: (v2) => JSON.stringify(Array.from(v2.entries()))
  },
  set: {
    read: (v2) => new Set(JSON.parse(v2)),
    write: (v2) => JSON.stringify(Array.from(v2))
  },
  date: {
    read: (v2) => new Date(v2),
    write: (v2) => v2.toISOString()
  }
};
function useStorage(key, defaults2, storage2, options = {}) {
  var _a2;
  const {
    flush = "pre",
    deep = true,
    listenToStorageChanges = true,
    writeDefaults = true,
    mergeDefaults: mergeDefaults2 = false,
    shallow,
    window: window2 = defaultWindow,
    eventFilter,
    onError = (e2) => {
      console.error(e2);
    }
  } = options;
  const data = (shallow ? shallowRef$1 : ref$1)(defaults2);
  if (!storage2) {
    try {
      storage2 = getSSRHandler("getDefaultStorage", () => {
        var _a22;
        return (_a22 = defaultWindow) == null ? void 0 : _a22.localStorage;
      })();
    } catch (e2) {
      onError(e2);
    }
  }
  if (!storage2)
    return data;
  const rawInit = resolveUnref(defaults2);
  const type = guessSerializerType(rawInit);
  const serializer = (_a2 = options.serializer) != null ? _a2 : StorageSerializers[type];
  const { pause: pauseWatch, resume: resumeWatch } = watchPausable(data, () => write(data.value), { flush, deep, eventFilter });
  if (window2 && listenToStorageChanges)
    useEventListener(window2, "storage", update);
  update();
  return data;
  function write(v2) {
    try {
      if (v2 == null) {
        storage2.removeItem(key);
      } else {
        const serialized = serializer.write(v2);
        const oldValue = storage2.getItem(key);
        if (oldValue !== serialized) {
          storage2.setItem(key, serialized);
          if (window2) {
            window2 == null ? void 0 : window2.dispatchEvent(new StorageEvent("storage", {
              key,
              oldValue,
              newValue: serialized,
              storageArea: storage2
            }));
          }
        }
      }
    } catch (e2) {
      onError(e2);
    }
  }
  function read2(event) {
    const rawValue = event ? event.newValue : storage2.getItem(key);
    if (rawValue == null) {
      if (writeDefaults && rawInit !== null)
        storage2.setItem(key, serializer.write(rawInit));
      return rawInit;
    } else if (!event && mergeDefaults2) {
      const value = serializer.read(rawValue);
      if (isFunction(mergeDefaults2))
        return mergeDefaults2(value, rawInit);
      else if (type === "object" && !Array.isArray(value))
        return __spreadValues$j(__spreadValues$j({}, rawInit), value);
      return value;
    } else if (typeof rawValue !== "string") {
      return rawValue;
    } else {
      return serializer.read(rawValue);
    }
  }
  function update(event) {
    if (event && event.storageArea !== storage2)
      return;
    if (event && event.key == null) {
      data.value = rawInit;
      return;
    }
    if (event && event.key !== key)
      return;
    pauseWatch();
    try {
      data.value = read2(event);
    } catch (e2) {
      onError(e2);
    } finally {
      if (event)
        nextTick$1(resumeWatch);
      else
        resumeWatch();
    }
  }
}
function usePreferredDark(options) {
  return useMediaQuery("(prefers-color-scheme: dark)", options);
}
var __defProp$i = Object.defineProperty;
var __getOwnPropSymbols$k = Object.getOwnPropertySymbols;
var __hasOwnProp$k = Object.prototype.hasOwnProperty;
var __propIsEnum$k = Object.prototype.propertyIsEnumerable;
var __defNormalProp$i = (obj, key, value) => key in obj ? __defProp$i(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$i = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp$k.call(b2, prop))
      __defNormalProp$i(a2, prop, b2[prop]);
  if (__getOwnPropSymbols$k)
    for (var prop of __getOwnPropSymbols$k(b2)) {
      if (__propIsEnum$k.call(b2, prop))
        __defNormalProp$i(a2, prop, b2[prop]);
    }
  return a2;
};
function useColorMode(options = {}) {
  const {
    selector = "html",
    attribute = "class",
    initialValue = "auto",
    window: window2 = defaultWindow,
    storage: storage2,
    storageKey = "vueuse-color-scheme",
    listenToStorageChanges = true,
    storageRef,
    emitAuto
  } = options;
  const modes = __spreadValues$i({
    auto: "",
    light: "light",
    dark: "dark"
  }, options.modes || {});
  const preferredDark = usePreferredDark({ window: window2 });
  const preferredMode = computed$2(() => preferredDark.value ? "dark" : "light");
  const store = storageRef || (storageKey == null ? ref$1(initialValue) : useStorage(storageKey, initialValue, storage2, { window: window2, listenToStorageChanges }));
  const state = computed$2({
    get() {
      return store.value === "auto" && !emitAuto ? preferredMode.value : store.value;
    },
    set(v2) {
      store.value = v2;
    }
  });
  const updateHTMLAttrs = getSSRHandler("updateHTMLAttrs", (selector2, attribute2, value) => {
    const el2 = window2 == null ? void 0 : window2.document.querySelector(selector2);
    if (!el2)
      return;
    if (attribute2 === "class") {
      const current = value.split(/\s/g);
      Object.values(modes).flatMap((i2) => (i2 || "").split(/\s/g)).filter(Boolean).forEach((v2) => {
        if (current.includes(v2))
          el2.classList.add(v2);
        else
          el2.classList.remove(v2);
      });
    } else {
      el2.setAttribute(attribute2, value);
    }
  });
  function defaultOnChanged(mode) {
    var _a2;
    const resolvedMode = mode === "auto" ? preferredMode.value : mode;
    updateHTMLAttrs(selector, attribute, (_a2 = modes[resolvedMode]) != null ? _a2 : resolvedMode);
  }
  function onChanged(mode) {
    if (options.onChanged)
      options.onChanged(mode, defaultOnChanged);
    else
      defaultOnChanged(mode);
  }
  watch$1(state, onChanged, { flush: "post", immediate: true });
  if (emitAuto)
    watch$1(preferredMode, () => onChanged(state.value), { flush: "post" });
  tryOnMounted(() => onChanged(state.value));
  return state;
}
var __defProp$h = Object.defineProperty;
var __defProps$7 = Object.defineProperties;
var __getOwnPropDescs$7 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$j = Object.getOwnPropertySymbols;
var __hasOwnProp$j = Object.prototype.hasOwnProperty;
var __propIsEnum$j = Object.prototype.propertyIsEnumerable;
var __defNormalProp$h = (obj, key, value) => key in obj ? __defProp$h(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$h = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp$j.call(b2, prop))
      __defNormalProp$h(a2, prop, b2[prop]);
  if (__getOwnPropSymbols$j)
    for (var prop of __getOwnPropSymbols$j(b2)) {
      if (__propIsEnum$j.call(b2, prop))
        __defNormalProp$h(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps$7 = (a2, b2) => __defProps$7(a2, __getOwnPropDescs$7(b2));
function useDark(options = {}) {
  const {
    valueDark = "dark",
    valueLight = "",
    window: window2 = defaultWindow
  } = options;
  const mode = useColorMode(__spreadProps$7(__spreadValues$h({}, options), {
    onChanged: (mode2, defaultHandler) => {
      var _a2;
      if (options.onChanged)
        (_a2 = options.onChanged) == null ? void 0 : _a2.call(options, mode2 === "dark");
      else
        defaultHandler(mode2);
    },
    modes: {
      dark: valueDark,
      light: valueLight
    }
  }));
  const preferredDark = usePreferredDark({ window: window2 });
  const isDark = computed$2({
    get() {
      return mode.value === "dark";
    },
    set(v2) {
      if (v2 === preferredDark.value)
        mode.value = "auto";
      else
        mode.value = v2 ? "dark" : "light";
    }
  });
  return isDark;
}
var __getOwnPropSymbols$f = Object.getOwnPropertySymbols;
var __hasOwnProp$f = Object.prototype.hasOwnProperty;
var __propIsEnum$f = Object.prototype.propertyIsEnumerable;
var __objRest$2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$f.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$f)
    for (var prop of __getOwnPropSymbols$f(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$f.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useResizeObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow } = _a2, observerOptions = __objRest$2(_a2, ["window"]);
  let observer;
  const isSupported2 = useSupported(() => window2 && "ResizeObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch$1(() => unrefElement(target), (el2) => {
    cleanup();
    if (isSupported2.value && window2 && el2) {
      observer = new ResizeObserver(callback);
      observer.observe(el2, observerOptions);
    }
  }, { immediate: true, flush: "post" });
  const stop2 = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose(stop2);
  return {
    isSupported: isSupported2,
    stop: stop2
  };
}
function useFocus(target, options = {}) {
  const { initialValue = false } = options;
  const activeElement = useActiveElement(options);
  const targetElement = computed$2(() => unrefElement(target));
  const focused = computed$2({
    get() {
      return isDef(activeElement.value) && isDef(targetElement.value) && activeElement.value === targetElement.value;
    },
    set(value) {
      var _a2, _b;
      if (!value && focused.value)
        (_a2 = targetElement.value) == null ? void 0 : _a2.blur();
      if (value && !focused.value)
        (_b = targetElement.value) == null ? void 0 : _b.focus();
    }
  });
  watch$1(targetElement, () => {
    focused.value = initialValue;
  }, { immediate: true, flush: "post" });
  return { focused };
}
var __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;
var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
var __propIsEnum$7 = Object.prototype.propertyIsEnumerable;
var __objRest$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$7.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$7)
    for (var prop of __getOwnPropSymbols$7(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$7.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useMutationObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow } = _a2, mutationOptions = __objRest$1(_a2, ["window"]);
  let observer;
  const isSupported2 = useSupported(() => window2 && "MutationObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch$1(() => unrefElement(target), (el2) => {
    cleanup();
    if (isSupported2.value && window2 && el2) {
      observer = new MutationObserver(callback);
      observer.observe(el2, mutationOptions);
    }
  }, { immediate: true });
  const stop2 = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose(stop2);
  return {
    isSupported: isSupported2,
    stop: stop2
  };
}
var SwipeDirection;
(function(SwipeDirection2) {
  SwipeDirection2["UP"] = "UP";
  SwipeDirection2["RIGHT"] = "RIGHT";
  SwipeDirection2["DOWN"] = "DOWN";
  SwipeDirection2["LEFT"] = "LEFT";
  SwipeDirection2["NONE"] = "NONE";
})(SwipeDirection || (SwipeDirection = {}));
function useTitle(newTitle = null, options = {}) {
  var _a2, _b;
  const {
    document: document2 = defaultDocument
  } = options;
  const title = resolveRef((_a2 = newTitle != null ? newTitle : document2 == null ? void 0 : document2.title) != null ? _a2 : null);
  const isReadonly2 = newTitle && isFunction(newTitle);
  function format(t2) {
    if (!("titleTemplate" in options))
      return t2;
    const template = options.titleTemplate || "%s";
    return isFunction(template) ? template(t2) : unref$1(template).replace(/%s/g, t2);
  }
  watch$1(title, (t2, o2) => {
    if (t2 !== o2 && document2)
      document2.title = format(isString(t2) ? t2 : "");
  }, { immediate: true });
  if (options.observe && !options.titleTemplate && document2 && !isReadonly2) {
    useMutationObserver((_b = document2.head) == null ? void 0 : _b.querySelector("title"), () => {
      if (document2 && document2.title !== title.value)
        title.value = format(document2.title);
    }, { childList: true });
  }
  return title;
}
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
const _TransitionPresets = {
  easeInSine: [0.12, 0, 0.39, 0],
  easeOutSine: [0.61, 1, 0.88, 1],
  easeInOutSine: [0.37, 0, 0.63, 1],
  easeInQuad: [0.11, 0, 0.5, 0],
  easeOutQuad: [0.5, 1, 0.89, 1],
  easeInOutQuad: [0.45, 0, 0.55, 1],
  easeInCubic: [0.32, 0, 0.67, 0],
  easeOutCubic: [0.33, 1, 0.68, 1],
  easeInOutCubic: [0.65, 0, 0.35, 1],
  easeInQuart: [0.5, 0, 0.75, 0],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeInQuint: [0.64, 0, 0.78, 0],
  easeOutQuint: [0.22, 1, 0.36, 1],
  easeInOutQuint: [0.83, 0, 0.17, 1],
  easeInExpo: [0.7, 0, 0.84, 0],
  easeOutExpo: [0.16, 1, 0.3, 1],
  easeInOutExpo: [0.87, 0, 0.13, 1],
  easeInCirc: [0.55, 0, 1, 0.45],
  easeOutCirc: [0, 0.55, 0.45, 1],
  easeInOutCirc: [0.85, 0, 0.15, 1],
  easeInBack: [0.36, 0, 0.66, -0.56],
  easeOutBack: [0.34, 1.56, 0.64, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6]
};
__spreadValues({
  linear: identity
}, _TransitionPresets);
const pa = {
  name: "HstButton"
}, Uo = /* @__PURE__ */ defineComponent$1({
  ...pa,
  props: {
    color: null
  },
  setup(s) {
    const t2 = {
      default: "htw-bg-gray-200 dark:htw-bg-gray-750 htw-text-gray-900 dark:htw-text-gray-100 hover:htw-bg-primary-200 dark:hover:htw-bg-primary-900",
      primary: "htw-bg-primary-500 hover:htw-bg-primary-600 htw-text-white dark:htw-text-black",
      flat: "htw-bg-transparent hover:htw-bg-gray-500/20 htw-text-gray-900 dark:htw-text-gray-100"
    };
    return (e2, i2) => {
      var _a2;
      return openBlock$1(), createElementBlock$1("button", {
        class: normalizeClass$1(["histoire-button htw-cursor-pointer htw-rounded-sm", t2[(_a2 = s.color) != null ? _a2 : "default"]])
      }, [
        renderSlot$1(e2.$slots, "default")
      ], 2);
    };
  }
}), ga = { class: "htw-w-28 htw-whitespace-nowrap htw-text-ellipsis htw-overflow-hidden htw-shrink-0" }, ma = { class: "htw-grow htw-max-w-full htw-flex htw-items-center htw-gap-1" }, wa = { class: "htw-block htw-grow htw-max-w-full" }, ya = {
  name: "HstWrapper"
}, qt = /* @__PURE__ */ defineComponent$1({
  ...ya,
  props: {
    title: { default: void 0 },
    tag: { default: "label" }
  },
  setup(s) {
    return (t2, e2) => (openBlock$1(), createBlock$1(resolveDynamicComponent$1(s.tag), { class: "histoire-wrapper htw-p-2 hover:htw-bg-primary-100 dark:hover:htw-bg-primary-800 htw-flex htw-gap-2 htw-flex-wrap" }, {
      default: withCtx$1(() => [
        withDirectives$1((openBlock$1(), createElementBlock$1("span", ga, [
          createTextVNode$1(toDisplayString$1(s.title), 1)
        ])), [
          [unref$1(VTooltip), {
            content: s.title,
            placement: "left",
            distance: 12
          }]
        ]),
        createBaseVNode$1("span", ma, [
          createBaseVNode$1("span", wa, [
            renderSlot$1(t2.$slots, "default")
          ]),
          renderSlot$1(t2.$slots, "actions")
        ])
      ]),
      _: 3
    }));
  }
}), ba = { class: "htw-flex htw-gap-px htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 htw-rounded-sm htw-p-px" }, ka = {
  name: "HstButtonGroup"
}, xa = /* @__PURE__ */ defineComponent$1({
  ...ka,
  props: {
    title: null,
    modelValue: null,
    options: null
  },
  emits: ["update:modelValue"],
  setup(s, { emit: t2 }) {
    const e2 = s, i2 = computed$2(() => Array.isArray(e2.options) ? e2.options.map((r2) => typeof r2 == "string" || typeof r2 == "number" ? { value: r2, label: String(r2) } : r2) : Object.keys(e2.options).map((r2) => ({
      value: r2,
      label: e2.options[r2]
    })));
    function n2(r2) {
      t2("update:modelValue", r2);
    }
    return (r2, o2) => (openBlock$1(), createBlock$1(qt, {
      tag: "div",
      role: "group",
      title: s.title,
      class: "histoire-button-group htw-flex-nowrap htw-items-center"
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(r2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", ba, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(i2), ({ label: l2, value: h2 }) => (openBlock$1(), createBlock$1(Uo, {
            key: h2,
            class: "htw-px-1 htw-h-[22px] htw-flex-1 !htw-rounded-[3px]",
            color: h2 === s.modelValue ? "primary" : "flat",
            rounded: false,
            onClick: (a2) => n2(h2)
          }, {
            default: withCtx$1(() => [
              createTextVNode$1(toDisplayString$1(l2), 1)
            ]),
            _: 2
          }, 1032, ["color", "onClick"]))), 128))
        ])
      ]),
      _: 3
    }, 8, ["title"]));
  }
}), va = {
  width: "16",
  height: "16",
  viewBox: "0 0 24 24",
  class: "htw-relative htw-z-10"
}, Sa = ["stroke-dasharray", "stroke-dashoffset"], Ca = {
  name: "HstSimpleCheckbox"
}, Qo = /* @__PURE__ */ defineComponent$1({
  ...Ca,
  props: {
    modelValue: { type: Boolean },
    withToggle: { type: Boolean }
  },
  emits: {
    "update:modelValue": (s) => true
  },
  setup(s, { emit: t2 }) {
    const e2 = s;
    function i2() {
      e2.withToggle && t2("update:modelValue", !e2.modelValue);
    }
    watch$1(() => e2.modelValue, () => {
      h2.value = true;
    });
    const n2 = ref$1(), r2 = ref$1(0), o2 = computed$2(() => e2.modelValue ? 1 : 0), l2 = computed$2(() => (1 - o2.value) * r2.value), h2 = ref$1(false);
    return watch$1(n2, () => {
      var _a2;
      var a2, c2;
      r2.value = (_a2 = (c2 = (a2 = n2.value).getTotalLength) == null ? void 0 : c2.call(a2)) != null ? _a2 : 21.21;
    }), (a2, c2) => (openBlock$1(), createElementBlock$1("div", {
      class: normalizeClass$1(["histoire-simple-checkbox htw-group htw-text-white htw-w-[16px] htw-h-[16px] htw-relative", { "htw-cursor-pointer": s.withToggle }]),
      onClick: i2
    }, [
      createBaseVNode$1("div", {
        class: normalizeClass$1(["htw-border htw-border-solid group-active:htw-bg-gray-500/20 htw-rounded-sm htw-box-border htw-absolute htw-inset-0 htw-transition-border htw-duration-150 htw-ease-out group-hover:htw-border-primary-500 group-hover:dark:htw-border-primary-500", [
          s.modelValue ? "htw-border-primary-500 htw-border-8" : "htw-border-black/25 dark:htw-border-white/25 htw-delay-150"
        ]])
      }, null, 2),
      (openBlock$1(), createElementBlock$1("svg", va, [
        createBaseVNode$1("path", {
          ref_key: "path",
          ref: n2,
          d: "m 4 12 l 5 5 l 10 -10",
          fill: "none",
          class: normalizeClass$1(["htw-stroke-white htw-stroke-2 htw-duration-200 htw-ease-in-out", [
            h2.value ? "htw-transition-all" : "htw-transition-none",
            {
              "htw-delay-150": s.modelValue
            }
          ]]),
          "stroke-dasharray": r2.value,
          "stroke-dashoffset": unref$1(l2)
        }, null, 10, Sa)
      ]))
    ], 2));
  }
}), Aa = {
  name: "HstCheckbox"
}, Oa = /* @__PURE__ */ defineComponent$1({
  ...Aa,
  props: {
    modelValue: { type: Boolean },
    title: null
  },
  emits: {
    "update:modelValue": (s) => true
  },
  setup(s, { emit: t2 }) {
    const e2 = s;
    function i2() {
      t2("update:modelValue", !e2.modelValue);
    }
    return (n2, r2) => (openBlock$1(), createBlock$1(qt, {
      role: "checkbox",
      tabindex: "0",
      class: "histoire-checkbox htw-cursor-pointer htw-items-center",
      title: s.title,
      onClick: r2[0] || (r2[0] = (o2) => i2()),
      onKeydown: [
        r2[1] || (r2[1] = withKeys$1(withModifiers$1((o2) => i2(), ["prevent"]), ["enter"])),
        r2[2] || (r2[2] = withKeys$1(withModifiers$1((o2) => i2(), ["prevent"]), ["space"]))
      ]
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(n2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createVNode$1(Qo, { "model-value": s.modelValue }, null, 8, ["model-value"])
      ]),
      _: 3
    }, 8, ["title"]));
  }
}), Ma = { class: "-htw-my-1" }, Da = ["for", "onKeydown", "onClick"], Ta = {
  name: "HstCheckboxList"
}, Pa = /* @__PURE__ */ defineComponent$1({
  ...Ta,
  props: {
    title: null,
    modelValue: null,
    options: null
  },
  emits: ["update:modelValue"],
  setup(s, { emit: t2 }) {
    const e2 = s, i2 = computed$2(() => Array.isArray(e2.options) ? Object.fromEntries(e2.options.map((r2) => typeof r2 == "string" ? [r2, r2] : [r2.value, r2.label])) : e2.options);
    function n2(r2) {
      e2.modelValue.includes(r2) ? t2("update:modelValue", e2.modelValue.filter((o2) => o2 !== r2)) : t2("update:modelValue", [...e2.modelValue, r2]);
    }
    return (r2, o2) => (openBlock$1(), createBlock$1(qt, {
      role: "group",
      title: s.title,
      class: normalizeClass$1(["histoire-checkbox-list htw-cursor-text", r2.$attrs.class]),
      style: normalizeStyle$1(r2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(r2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", Ma, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(i2), (l2, h2) => (openBlock$1(), createElementBlock$1("label", {
            key: h2,
            tabindex: "0",
            for: `${h2}-radio`,
            class: "htw-cursor-pointer htw-flex htw-items-center htw-relative htw-py-1 htw-group",
            onKeydown: [
              withKeys$1(withModifiers$1((a2) => n2(h2), ["prevent"]), ["enter"]),
              withKeys$1(withModifiers$1((a2) => n2(h2), ["prevent"]), ["space"])
            ],
            onClick: (a2) => n2(h2)
          }, [
            createVNode$1(Qo, {
              "model-value": s.modelValue.includes(h2),
              class: "htw-mr-2"
            }, null, 8, ["model-value"]),
            createTextVNode$1(" " + toDisplayString$1(l2), 1)
          ], 40, Da))), 128))
        ])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Ba = ["value"], Ra = {
  name: "HstText"
}, La = /* @__PURE__ */ defineComponent$1({
  ...Ra,
  props: {
    title: null,
    modelValue: null
  },
  emits: {
    "update:modelValue": (s) => true
  },
  setup(s, { emit: t2 }) {
    const e2 = ref$1();
    return (i2, n2) => (openBlock$1(), createBlock$1(qt, {
      title: s.title,
      class: normalizeClass$1(["histoire-text htw-cursor-text htw-items-center", i2.$attrs.class]),
      style: normalizeStyle$1(i2.$attrs.style),
      onClick: n2[1] || (n2[1] = (r2) => e2.value.focus())
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(i2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("input", mergeProps$1({
          ref_key: "input",
          ref: e2
        }, { ...i2.$attrs, class: null, style: null }, {
          type: "text",
          value: s.modelValue,
          class: "htw-text-inherit htw-bg-transparent htw-w-full htw-outline-none htw-px-2 htw-py-1 -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus:htw-border-primary-500 dark:focus:htw-border-primary-500 htw-rounded-sm",
          onInput: n2[0] || (n2[0] = (r2) => t2("update:modelValue", r2.target.value))
        }), null, 16, Ba)
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Ea = {
  name: "HstNumber",
  inheritAttrs: false
}, Na = /* @__PURE__ */ defineComponent$1({
  ...Ea,
  props: {
    title: null,
    modelValue: null
  },
  emits: {
    "update:modelValue": (s) => true
  },
  setup(s, { emit: t2 }) {
    const e2 = s, i2 = computed$2({
      get: () => e2.modelValue,
      set: (u2) => {
        t2("update:modelValue", u2);
      }
    }), n2 = ref$1();
    function r2() {
      n2.value.focus(), n2.value.select();
    }
    const o2 = ref$1(false);
    let l2, h2;
    function a2(u2) {
      o2.value = true, l2 = u2.clientX, h2 = i2.value, window.addEventListener("mousemove", c2), window.addEventListener("mouseup", f2);
    }
    function c2(u2) {
      let d2 = parseFloat(n2.value.step);
      isNaN(d2) && (d2 = 1), i2.value = h2 + Math.round((u2.clientX - l2) / 10 / d2) * d2;
    }
    function f2() {
      o2.value = false, window.removeEventListener("mousemove", c2), window.removeEventListener("mouseup", f2);
    }
    return onUnmounted$1(() => {
      f2();
    }), (u2, d2) => (openBlock$1(), createBlock$1(qt, {
      class: normalizeClass$1(["histoire-number htw-cursor-ew-resize htw-items-center", [
        u2.$attrs.class,
        { "htw-select-none": o2.value }
      ]]),
      title: s.title,
      style: normalizeStyle$1(u2.$attrs.style),
      onClick: r2,
      onMousedown: a2
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(u2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        withDirectives$1(createBaseVNode$1("input", mergeProps$1({
          ref_key: "input",
          ref: n2
        }, { ...u2.$attrs, class: null, style: null }, {
          "onUpdate:modelValue": d2[0] || (d2[0] = (p2) => isRef$1(i2) ? i2.value = p2 : null),
          type: "number",
          class: [{
            "htw-select-none": o2.value
          }, "htw-text-inherit htw-bg-transparent htw-w-full htw-outline-none htw-pl-2 htw-py-1 -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus:htw-border-primary-500 dark:focus:htw-border-primary-500 htw-rounded-sm htw-cursor-ew-resize htw-box-border"]
        }), null, 16), [
          [
            vModelText$1,
            unref$1(i2),
            void 0,
            { number: true }
          ]
        ])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Va = { class: "htw-relative htw-w-full htw-flex htw-items-center" }, Ia = /* @__PURE__ */ createBaseVNode$1("div", { class: "htw-absolute htw-inset-0 htw-flex htw-items-center" }, [
  /* @__PURE__ */ createBaseVNode$1("div", { class: "htw-border htw-border-black/25 dark:htw-border-white/25 htw-h-1 htw-w-full htw-rounded-full" })
], -1), Ha = {
  name: "HstSlider",
  inheritAttrs: false
}, $a = /* @__PURE__ */ defineComponent$1({
  ...Ha,
  props: {
    title: null,
    modelValue: null,
    min: null,
    max: null
  },
  emits: {
    "update:modelValue": (s) => true
  },
  setup(s, { emit: t2 }) {
    const e2 = s, i2 = ref$1(false), n2 = ref$1(null), r2 = computed$2({
      get: () => e2.modelValue,
      set: (h2) => {
        t2("update:modelValue", h2);
      }
    }), o2 = computed$2(() => (e2.modelValue - e2.min) / (e2.max - e2.min)), l2 = computed$2(() => n2.value ? {
      left: 8 + (n2.value.clientWidth - 16) * o2.value + "px"
    } : {});
    return (h2, a2) => (openBlock$1(), createBlock$1(qt, {
      class: normalizeClass$1(["histoire-slider htw-items-center", h2.$attrs.class]),
      title: s.title,
      style: normalizeStyle$1(h2.$attrs.style)
    }, {
      default: withCtx$1(() => [
        createBaseVNode$1("div", Va, [
          Ia,
          withDirectives$1(createBaseVNode$1("input", mergeProps$1({
            ref_key: "input",
            ref: n2,
            "onUpdate:modelValue": a2[0] || (a2[0] = (c2) => isRef$1(r2) ? r2.value = c2 : null),
            class: "htw-range-input htw-appearance-none htw-border-0 htw-bg-transparent htw-cursor-pointer htw-relative htw-w-full htw-m-0 htw-text-gray-700",
            type: "range"
          }, { ...h2.$attrs, class: null, style: null, min: s.min, max: s.max }, {
            onMouseover: a2[1] || (a2[1] = (c2) => i2.value = true),
            onMouseleave: a2[2] || (a2[2] = (c2) => i2.value = false)
          }), null, 16), [
            [
              vModelText$1,
              unref$1(r2),
              void 0,
              { number: true }
            ]
          ]),
          i2.value ? withDirectives$1((openBlock$1(), createElementBlock$1("div", {
            key: 0,
            class: "htw-absolute",
            style: normalizeStyle$1(unref$1(l2))
          }, null, 4)), [
            [unref$1(VTooltip), { content: s.modelValue.toString(), shown: true, distance: 16, delay: 0 }]
          ]) : createCommentVNode$1("", true)
        ])
      ]),
      _: 1
    }, 8, ["title", "class", "style"]));
  }
});
const Fa = ["value"], za = {
  name: "HstTextarea",
  inheritAttrs: false
}, _a = /* @__PURE__ */ defineComponent$1({
  ...za,
  props: {
    title: null,
    modelValue: null
  },
  emits: {
    "update:modelValue": (s) => true
  },
  setup(s, { emit: t2 }) {
    const e2 = ref$1();
    return (i2, n2) => (openBlock$1(), createBlock$1(qt, {
      title: s.title,
      class: normalizeClass$1(["histoire-textarea htw-cursor-text", i2.$attrs.class]),
      style: normalizeStyle$1(i2.$attrs.style),
      onClick: n2[1] || (n2[1] = (r2) => e2.value.focus())
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(i2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("textarea", mergeProps$1({
          ref_key: "input",
          ref: e2
        }, { ...i2.$attrs, class: null, style: null }, {
          value: s.modelValue,
          class: "htw-text-inherit htw-bg-transparent htw-w-full htw-outline-none htw-px-2 htw-py-1 -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus:htw-border-primary-500 dark:focus:htw-border-primary-500 htw-rounded-sm htw-box-border htw-resize-y htw-min-h-[26px]",
          onInput: n2[0] || (n2[0] = (r2) => t2("update:modelValue", r2.target.value))
        }), null, 16, Fa)
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Wa = { class: "htw-cursor-pointer htw-w-full htw-outline-none htw-px-2 htw-h-[27px] -htw-my-1 htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 hover:htw-border-primary-500 dark:hover:htw-border-primary-500 htw-rounded-sm htw-flex htw-gap-2 htw-items-center htw-leading-normal" }, ja = { class: "htw-flex-1 htw-truncate" }, qa = { class: "htw-flex htw-flex-col htw-bg-gray-50 dark:htw-bg-gray-700" }, Ka = ["onClick"], Ga = {
  name: "CustomSelect"
}, Ua = /* @__PURE__ */ defineComponent$1({
  ...Ga,
  props: {
    modelValue: null,
    options: null
  },
  emits: ["update:modelValue"],
  setup(s, { emit: t2 }) {
    const e2 = s, i2 = computed$2(() => Array.isArray(e2.options) ? e2.options.map((o2) => typeof o2 == "string" || typeof o2 == "number" ? [o2, String(o2)] : [o2.value, o2.label]) : Object.entries(e2.options)), n2 = computed$2(() => {
      var o2;
      return (o2 = i2.value.find(([l2]) => l2 === e2.modelValue)) == null ? void 0 : o2[1];
    });
    function r2(o2, l2) {
      t2("update:modelValue", o2), l2();
    }
    return (o2, l2) => (openBlock$1(), createBlock$1(unref$1(Dropdown), {
      "auto-size": "",
      "auto-boundary-max-size": ""
    }, {
      popper: withCtx$1(({ hide: h2 }) => [
        createBaseVNode$1("div", qa, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(i2), ([a2, c2]) => (openBlock$1(), createElementBlock$1("div", mergeProps$1({ ...o2.$attrs, class: null, style: null }, {
            key: c2,
            class: ["htw-px-2 htw-py-1 htw-cursor-pointer hover:htw-bg-primary-100 dark:hover:htw-bg-primary-700", {
              "htw-bg-primary-200 dark:htw-bg-primary-800": e2.modelValue === a2
            }],
            onClick: (f2) => r2(a2, h2)
          }), toDisplayString$1(c2), 17, Ka))), 128))
        ])
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", Wa, [
          createBaseVNode$1("div", ja, [
            renderSlot$1(o2.$slots, "default", { label: unref$1(n2) }, () => [
              createTextVNode$1(toDisplayString$1(unref$1(n2)), 1)
            ])
          ]),
          createVNode$1(unref$1(Icon), {
            icon: "carbon:chevron-sort",
            class: "htw-w-4 htw-h-4 htw-flex-none htw-ml-auto"
          })
        ])
      ]),
      _: 3
    }));
  }
});
const Qa = {
  name: "HstSelect"
}, Ja = /* @__PURE__ */ defineComponent$1({
  ...Qa,
  props: {
    title: null,
    modelValue: null,
    options: null
  },
  emits: ["update:modelValue"],
  setup(s, { emit: t2 }) {
    return (e2, i2) => (openBlock$1(), createBlock$1(qt, {
      title: s.title,
      class: normalizeClass$1(["histoire-select htw-cursor-text htw-items-center", e2.$attrs.class]),
      style: normalizeStyle$1(e2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(e2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createVNode$1(Ua, {
          options: s.options,
          "model-value": s.modelValue,
          "onUpdate:modelValue": i2[0] || (i2[0] = (n2) => t2("update:modelValue", n2))
        }, null, 8, ["options", "model-value"])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
}), Xa = {
  name: "HstCopyIcon"
}, Me = /* @__PURE__ */ defineComponent$1({
  ...Xa,
  props: {
    content: null
  },
  setup(s) {
    const t2 = s, { copy: e2, copied: i2 } = useClipboard(), n2 = () => e2(t2.content);
    return (r2, o2) => withDirectives$1((openBlock$1(), createBlock$1(unref$1(Icon), {
      icon: "carbon:copy-file",
      class: "htw-w-4 htw-h-4 htw-opacity-50 hover:htw-opacity-100 hover:htw-text-primary-500 htw-cursor-pointer",
      onClick: o2[0] || (o2[0] = (l2) => n2())
    }, null, 512)), [
      [unref$1(VTooltip), {
        content: "Copied!",
        triggers: [],
        shown: unref$1(i2),
        distance: 12,
        delay: 0
      }]
    ]);
  }
}), Ya = {
  key: 0,
  class: "histoire-color-shades htw-grid htw-gap-4 htw-grid-cols-[repeat(auto-fill,minmax(200px,1fr))] htw-m-4"
}, Za = ["onMouseenter"], tc = { class: "htw-flex htw-gap-1" }, ec = { class: "htw-my-0 htw-truncate htw-shrink" }, ic = { class: "htw-flex htw-gap-1" }, nc = { class: "htw-my-0 htw-opacity-50 htw-truncate htw-shrink" }, sc = {
  name: "HstColorShades"
}, rc = /* @__PURE__ */ defineComponent$1({
  ...sc,
  props: {
    shades: null,
    getName: { type: Function },
    search: null
  },
  setup(s) {
    const t2 = s, e2 = (o2, l2 = "") => Object.entries(o2).reduce((h2, [a2, c2]) => {
      const f2 = l2 ? a2 === "DEFAULT" ? l2 : `${l2}-${a2}` : a2, u2 = typeof c2 == "object" ? e2(c2, f2) : { [f2]: c2 };
      return { ...h2, ...u2 };
    }, {}), i2 = computed$2(() => {
      const o2 = t2.shades, l2 = t2.getName, h2 = e2(o2);
      return Object.entries(h2).map(([a2, c2]) => {
        const f2 = l2 ? l2(a2, c2) : a2;
        return {
          key: a2,
          color: c2,
          name: f2
        };
      });
    }), n2 = computed$2(() => {
      let o2 = i2.value;
      if (t2.search) {
        const l2 = new RegExp(t2.search, "i");
        o2 = o2.filter(({ name: h2 }) => l2.test(h2));
      }
      return o2;
    }), r2 = ref$1(null);
    return (o2, l2) => unref$1(n2).length ? (openBlock$1(), createElementBlock$1("div", Ya, [
      (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(n2), (h2) => (openBlock$1(), createElementBlock$1("div", {
        key: h2.key,
        class: "htw-flex htw-flex-col htw-gap-2",
        onMouseenter: (a2) => r2.value = h2.key,
        onMouseleave: l2[0] || (l2[0] = (a2) => r2.value = null)
      }, [
        renderSlot$1(o2.$slots, "default", {
          color: h2.color
        }, () => [
          createBaseVNode$1("div", {
            class: "htw-rounded-full htw-w-16 htw-h-16",
            style: normalizeStyle$1({
              backgroundColor: h2.color
            })
          }, null, 4)
        ]),
        createBaseVNode$1("div", null, [
          createBaseVNode$1("div", tc, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", ec, [
              createTextVNode$1(toDisplayString$1(h2.name), 1)
            ])), [
              [unref$1(VTooltip), h2.name.length > 23 ? h2.name : ""]
            ]),
            r2.value === h2.key ? (openBlock$1(), createBlock$1(Me, {
              key: 0,
              content: h2.name,
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ]),
          createBaseVNode$1("div", ic, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", nc, [
              createTextVNode$1(toDisplayString$1(h2.color), 1)
            ])), [
              [unref$1(VTooltip), h2.color.length > 23 ? h2.color : ""]
            ]),
            r2.value === h2.key ? (openBlock$1(), createBlock$1(Me, {
              key: 0,
              content: h2.color,
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ])
        ])
      ], 40, Za))), 128))
    ])) : createCommentVNode$1("", true);
  }
}), oc = ["onMouseenter"], lc = { class: "htw-mx-4" }, hc = { class: "htw-flex htw-gap-1" }, ac = { class: "htw-my-0 htw-truncate htw-shrink" }, cc = { class: "htw-flex htw-gap-1" }, fc = { class: "htw-my-0 htw-opacity-50 htw-truncate htw-shrink" }, uc = {
  name: "HstTokenList"
}, dc = /* @__PURE__ */ defineComponent$1({
  ...uc,
  props: {
    tokens: null,
    getName: { type: Function }
  },
  setup(s) {
    const t2 = s, e2 = computed$2(() => {
      const n2 = t2.tokens, r2 = t2.getName;
      return Object.entries(n2).map(([o2, l2]) => {
        const h2 = r2 ? r2(o2, l2) : o2;
        return {
          key: o2,
          name: h2,
          value: typeof l2 == "number" ? l2.toString() : l2
        };
      });
    }), i2 = ref$1(null);
    return (n2, r2) => (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(e2), (o2) => (openBlock$1(), createElementBlock$1("div", {
      key: o2.key,
      class: "histoire-token-list htw-flex htw-flex-col htw-gap-2 htw-my-8",
      onMouseenter: (l2) => i2.value = o2.key,
      onMouseleave: r2[0] || (r2[0] = (l2) => i2.value = null)
    }, [
      renderSlot$1(n2.$slots, "default", { token: o2 }),
      createBaseVNode$1("div", lc, [
        createBaseVNode$1("div", hc, [
          createBaseVNode$1("pre", ac, toDisplayString$1(o2.name), 1),
          i2.value === o2.key ? (openBlock$1(), createBlock$1(Me, {
            key: 0,
            content: o2.name,
            class: "htw-flex-none"
          }, null, 8, ["content"])) : createCommentVNode$1("", true)
        ]),
        createBaseVNode$1("div", cc, [
          createBaseVNode$1("pre", fc, toDisplayString$1(o2.value), 1),
          i2.value === o2.key ? (openBlock$1(), createBlock$1(Me, {
            key: 0,
            content: typeof o2.value == "string" ? o2.value : JSON.stringify(o2.value),
            class: "htw-flex-none"
          }, null, 8, ["content"])) : createCommentVNode$1("", true)
        ])
      ])
    ], 40, oc))), 128));
  }
}), pc = ["onMouseenter"], gc = { class: "htw-flex htw-gap-1" }, mc = { class: "htw-my-0 htw-truncate htw-shrink" }, wc = { class: "htw-flex htw-gap-1" }, yc = { class: "htw-my-0 htw-opacity-50 htw-truncate htw-shrink" }, bc = {
  name: "HstTokenGrid"
}, kc = /* @__PURE__ */ defineComponent$1({
  ...bc,
  props: {
    tokens: null,
    colSize: { default: 180 },
    getName: { type: Function, default: null }
  },
  setup(s) {
    const t2 = s, e2 = computed$2(() => {
      const r2 = t2.tokens, o2 = t2.getName;
      return Object.entries(r2).map(([l2, h2]) => {
        const a2 = o2 ? o2(l2, h2) : l2;
        return {
          key: l2,
          name: a2,
          value: typeof h2 == "number" ? h2.toString() : h2
        };
      });
    }), i2 = computed$2(() => `${t2.colSize}px`), n2 = ref$1(null);
    return (r2, o2) => (openBlock$1(), createElementBlock$1("div", {
      class: "histoire-token-grid htw-bind-col-size htw-grid htw-gap-4 htw-m-4",
      style: normalizeStyle$1({
        "--histoire-col-size": unref$1(i2)
      })
    }, [
      (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(e2), (l2) => (openBlock$1(), createElementBlock$1("div", {
        key: l2.key,
        class: "htw-flex htw-flex-col htw-gap-2",
        onMouseenter: (h2) => n2.value = l2.key,
        onMouseleave: o2[0] || (o2[0] = (h2) => n2.value = null)
      }, [
        renderSlot$1(r2.$slots, "default", { token: l2 }),
        createBaseVNode$1("div", null, [
          createBaseVNode$1("div", gc, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", mc, [
              createTextVNode$1(toDisplayString$1(l2.name), 1)
            ])), [
              [unref$1(VTooltip), l2.name.length > s.colSize / 8 ? l2.name : ""]
            ]),
            n2.value === l2.key ? (openBlock$1(), createBlock$1(Me, {
              key: 0,
              content: l2.name,
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ]),
          createBaseVNode$1("div", wc, [
            withDirectives$1((openBlock$1(), createElementBlock$1("pre", yc, [
              createTextVNode$1(toDisplayString$1(l2.value), 1)
            ])), [
              [unref$1(VTooltip), l2.value.length > s.colSize / 8 ? l2.value : ""]
            ]),
            n2.value === l2.key ? (openBlock$1(), createBlock$1(Me, {
              key: 0,
              content: typeof l2.value == "string" ? l2.value : JSON.stringify(l2.value),
              class: "htw-flex-none"
            }, null, 8, ["content"])) : createCommentVNode$1("", true)
          ])
        ])
      ], 40, pc))), 128))
    ], 4));
  }
});
const xc = { class: "-htw-my-1" }, vc = ["id", "name", "value", "checked", "onChange"], Sc = ["for", "onKeydown"], Cc = {
  name: "HstRadio"
}, Ac = /* @__PURE__ */ defineComponent$1({
  ...Cc,
  props: {
    title: null,
    modelValue: null,
    options: null
  },
  emits: ["update:modelValue"],
  setup(s, { emit: t2 }) {
    const e2 = s, i2 = computed$2(() => Array.isArray(e2.options) ? Object.fromEntries(e2.options.map((o2) => typeof o2 == "string" ? [o2, o2] : [o2.value, o2.label])) : e2.options);
    function n2(o2) {
      t2("update:modelValue", o2), r2.value = true;
    }
    const r2 = ref$1(false);
    return (o2, l2) => (openBlock$1(), createBlock$1(qt, {
      role: "group",
      title: s.title,
      class: normalizeClass$1(["histoire-radio htw-cursor-text", o2.$attrs.class]),
      style: normalizeStyle$1(o2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        renderSlot$1(o2.$slots, "actions")
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", xc, [
          (openBlock$1(true), createElementBlock$1(Fragment$1, null, renderList$1(unref$1(i2), (h2, a2) => (openBlock$1(), createElementBlock$1(Fragment$1, { key: a2 }, [
            createBaseVNode$1("input", {
              id: `${a2}-radio`,
              type: "radio",
              name: `${a2}-radio`,
              value: a2,
              checked: a2 === s.modelValue,
              class: "htw-hidden",
              onChange: (c2) => n2(a2)
            }, null, 40, vc),
            createBaseVNode$1("label", {
              tabindex: "0",
              for: `${a2}-radio`,
              class: "htw-cursor-pointer htw-flex htw-items-center htw-relative htw-py-1 htw-group",
              onKeydown: [
                withKeys$1(withModifiers$1((c2) => n2(a2), ["prevent"]), ["enter"]),
                withKeys$1(withModifiers$1((c2) => n2(a2), ["prevent"]), ["space"])
              ]
            }, [
              (openBlock$1(), createElementBlock$1("svg", {
                width: "16",
                height: "16",
                viewBox: "-12 -12 24 24",
                class: normalizeClass$1(["htw-relative htw-z-10 htw-border htw-border-solid htw-text-inherit htw-rounded-full htw-box-border htw-inset-0 htw-transition-border htw-duration-150 htw-ease-out htw-mr-2 group-hover:htw-border-primary-500", [
                  s.modelValue === a2 ? "htw-border-primary-500" : "htw-border-black/25 dark:htw-border-white/25"
                ]])
              }, [
                createBaseVNode$1("circle", {
                  r: "7",
                  class: normalizeClass$1(["htw-will-change-transform", [
                    r2.value ? "htw-transition-all" : "htw-transition-none",
                    {
                      "htw-delay-150": s.modelValue === a2
                    },
                    s.modelValue === a2 ? "htw-fill-primary-500" : "htw-fill-transparent htw-scale-0"
                  ]])
                }, null, 2)
              ], 2)),
              createTextVNode$1(" " + toDisplayString$1(h2), 1)
            ], 40, Sc)
          ], 64))), 128))
        ])
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
});
class E {
  constructor() {
  }
  lineAt(t2) {
    if (t2 < 0 || t2 > this.length)
      throw new RangeError(`Invalid position ${t2} in document of length ${this.length}`);
    return this.lineInner(t2, false, 1, 0);
  }
  line(t2) {
    if (t2 < 1 || t2 > this.lines)
      throw new RangeError(`Invalid line number ${t2} in ${this.lines}-line document`);
    return this.lineInner(t2, true, 1, 0);
  }
  replace(t2, e2, i2) {
    let n2 = [];
    return this.decompose(
      0,
      t2,
      n2,
      2
    ), i2.length && i2.decompose(
      0,
      i2.length,
      n2,
      3
    ), this.decompose(
      e2,
      this.length,
      n2,
      1
    ), Ht.from(n2, this.length - (e2 - t2) + i2.length);
  }
  append(t2) {
    return this.replace(this.length, this.length, t2);
  }
  slice(t2, e2 = this.length) {
    let i2 = [];
    return this.decompose(t2, e2, i2, 0), Ht.from(i2, e2 - t2);
  }
  eq(t2) {
    if (t2 == this)
      return true;
    if (t2.length != this.length || t2.lines != this.lines)
      return false;
    let e2 = this.scanIdentical(t2, 1), i2 = this.length - this.scanIdentical(t2, -1), n2 = new li(this), r2 = new li(t2);
    for (let o2 = e2, l2 = e2; ; ) {
      if (n2.next(o2), r2.next(o2), o2 = 0, n2.lineBreak != r2.lineBreak || n2.done != r2.done || n2.value != r2.value)
        return false;
      if (l2 += n2.value.length, n2.done || l2 >= i2)
        return true;
    }
  }
  iter(t2 = 1) {
    return new li(this, t2);
  }
  iterRange(t2, e2 = this.length) {
    return new Jo(this, t2, e2);
  }
  iterLines(t2, e2) {
    let i2;
    if (t2 == null)
      i2 = this.iter();
    else {
      e2 == null && (e2 = this.lines + 1);
      let n2 = this.line(t2).from;
      i2 = this.iterRange(n2, Math.max(n2, e2 == this.lines + 1 ? this.length : e2 <= 1 ? 0 : this.line(e2 - 1).to));
    }
    return new Xo(i2);
  }
  toString() {
    return this.sliceString(0);
  }
  toJSON() {
    let t2 = [];
    return this.flatten(t2), t2;
  }
  static of(t2) {
    if (t2.length == 0)
      throw new RangeError("A document must have at least one line");
    return t2.length == 1 && !t2[0] ? E.empty : t2.length <= 32 ? new G(t2) : Ht.from(G.split(t2, []));
  }
}
class G extends E {
  constructor(t2, e2 = Oc(t2)) {
    super(), this.text = t2, this.length = e2;
  }
  get lines() {
    return this.text.length;
  }
  get children() {
    return null;
  }
  lineInner(t2, e2, i2, n2) {
    for (let r2 = 0; ; r2++) {
      let o2 = this.text[r2], l2 = n2 + o2.length;
      if ((e2 ? i2 : l2) >= t2)
        return new Mc(n2, l2, i2, o2);
      n2 = l2 + 1, i2++;
    }
  }
  decompose(t2, e2, i2, n2) {
    let r2 = t2 <= 0 && e2 >= this.length ? this : new G(dr(this.text, t2, e2), Math.min(e2, this.length) - Math.max(0, t2));
    if (n2 & 1) {
      let o2 = i2.pop(), l2 = _i(r2.text, o2.text.slice(), 0, r2.length);
      if (l2.length <= 32)
        i2.push(new G(l2, o2.length + r2.length));
      else {
        let h2 = l2.length >> 1;
        i2.push(new G(l2.slice(0, h2)), new G(l2.slice(h2)));
      }
    } else
      i2.push(r2);
  }
  replace(t2, e2, i2) {
    if (!(i2 instanceof G))
      return super.replace(t2, e2, i2);
    let n2 = _i(this.text, _i(i2.text, dr(this.text, 0, t2)), e2), r2 = this.length + i2.length - (e2 - t2);
    return n2.length <= 32 ? new G(n2, r2) : Ht.from(G.split(n2, []), r2);
  }
  sliceString(t2, e2 = this.length, i2 = `
`) {
    let n2 = "";
    for (let r2 = 0, o2 = 0; r2 <= e2 && o2 < this.text.length; o2++) {
      let l2 = this.text[o2], h2 = r2 + l2.length;
      r2 > t2 && o2 && (n2 += i2), t2 < h2 && e2 > r2 && (n2 += l2.slice(Math.max(0, t2 - r2), e2 - r2)), r2 = h2 + 1;
    }
    return n2;
  }
  flatten(t2) {
    for (let e2 of this.text)
      t2.push(e2);
  }
  scanIdentical() {
    return 0;
  }
  static split(t2, e2) {
    let i2 = [], n2 = -1;
    for (let r2 of t2)
      i2.push(r2), n2 += r2.length + 1, i2.length == 32 && (e2.push(new G(i2, n2)), i2 = [], n2 = -1);
    return n2 > -1 && e2.push(new G(i2, n2)), e2;
  }
}
class Ht extends E {
  constructor(t2, e2) {
    super(), this.children = t2, this.length = e2, this.lines = 0;
    for (let i2 of t2)
      this.lines += i2.lines;
  }
  lineInner(t2, e2, i2, n2) {
    for (let r2 = 0; ; r2++) {
      let o2 = this.children[r2], l2 = n2 + o2.length, h2 = i2 + o2.lines - 1;
      if ((e2 ? h2 : l2) >= t2)
        return o2.lineInner(t2, e2, i2, n2);
      n2 = l2 + 1, i2 = h2 + 1;
    }
  }
  decompose(t2, e2, i2, n2) {
    for (let r2 = 0, o2 = 0; o2 <= e2 && r2 < this.children.length; r2++) {
      let l2 = this.children[r2], h2 = o2 + l2.length;
      if (t2 <= h2 && e2 >= o2) {
        let a2 = n2 & ((o2 <= t2 ? 1 : 0) | (h2 >= e2 ? 2 : 0));
        o2 >= t2 && h2 <= e2 && !a2 ? i2.push(l2) : l2.decompose(t2 - o2, e2 - o2, i2, a2);
      }
      o2 = h2 + 1;
    }
  }
  replace(t2, e2, i2) {
    if (i2.lines < this.lines)
      for (let n2 = 0, r2 = 0; n2 < this.children.length; n2++) {
        let o2 = this.children[n2], l2 = r2 + o2.length;
        if (t2 >= r2 && e2 <= l2) {
          let h2 = o2.replace(t2 - r2, e2 - r2, i2), a2 = this.lines - o2.lines + h2.lines;
          if (h2.lines < a2 >> 5 - 1 && h2.lines > a2 >> 5 + 1) {
            let c2 = this.children.slice();
            return c2[n2] = h2, new Ht(c2, this.length - (e2 - t2) + i2.length);
          }
          return super.replace(r2, l2, h2);
        }
        r2 = l2 + 1;
      }
    return super.replace(t2, e2, i2);
  }
  sliceString(t2, e2 = this.length, i2 = `
`) {
    let n2 = "";
    for (let r2 = 0, o2 = 0; r2 < this.children.length && o2 <= e2; r2++) {
      let l2 = this.children[r2], h2 = o2 + l2.length;
      o2 > t2 && r2 && (n2 += i2), t2 < h2 && e2 > o2 && (n2 += l2.sliceString(t2 - o2, e2 - o2, i2)), o2 = h2 + 1;
    }
    return n2;
  }
  flatten(t2) {
    for (let e2 of this.children)
      e2.flatten(t2);
  }
  scanIdentical(t2, e2) {
    if (!(t2 instanceof Ht))
      return 0;
    let i2 = 0, [n2, r2, o2, l2] = e2 > 0 ? [0, 0, this.children.length, t2.children.length] : [this.children.length - 1, t2.children.length - 1, -1, -1];
    for (; ; n2 += e2, r2 += e2) {
      if (n2 == o2 || r2 == l2)
        return i2;
      let h2 = this.children[n2], a2 = t2.children[r2];
      if (h2 != a2)
        return i2 + h2.scanIdentical(a2, e2);
      i2 += h2.length + 1;
    }
  }
  static from(t2, e2 = t2.reduce((i2, n2) => i2 + n2.length + 1, -1)) {
    let i2 = 0;
    for (let d2 of t2)
      i2 += d2.lines;
    if (i2 < 32) {
      let d2 = [];
      for (let p2 of t2)
        p2.flatten(d2);
      return new G(d2, e2);
    }
    let n2 = Math.max(
      32,
      i2 >> 5
    ), r2 = n2 << 1, o2 = n2 >> 1, l2 = [], h2 = 0, a2 = -1, c2 = [];
    function f2(d2) {
      let p2;
      if (d2.lines > r2 && d2 instanceof Ht)
        for (let w of d2.children)
          f2(w);
      else
        d2.lines > o2 && (h2 > o2 || !h2) ? (u2(), l2.push(d2)) : d2 instanceof G && h2 && (p2 = c2[c2.length - 1]) instanceof G && d2.lines + p2.lines <= 32 ? (h2 += d2.lines, a2 += d2.length + 1, c2[c2.length - 1] = new G(p2.text.concat(d2.text), p2.length + 1 + d2.length)) : (h2 + d2.lines > n2 && u2(), h2 += d2.lines, a2 += d2.length + 1, c2.push(d2));
    }
    function u2() {
      h2 != 0 && (l2.push(c2.length == 1 ? c2[0] : Ht.from(c2, a2)), a2 = -1, h2 = c2.length = 0);
    }
    for (let d2 of t2)
      f2(d2);
    return u2(), l2.length == 1 ? l2[0] : new Ht(l2, e2);
  }
}
E.empty = /* @__PURE__ */ new G([""], 0);
function Oc(s) {
  let t2 = -1;
  for (let e2 of s)
    t2 += e2.length + 1;
  return t2;
}
function _i(s, t2, e2 = 0, i2 = 1e9) {
  for (let n2 = 0, r2 = 0, o2 = true; r2 < s.length && n2 <= i2; r2++) {
    let l2 = s[r2], h2 = n2 + l2.length;
    h2 >= e2 && (h2 > i2 && (l2 = l2.slice(0, i2 - n2)), n2 < e2 && (l2 = l2.slice(e2 - n2)), o2 ? (t2[t2.length - 1] += l2, o2 = false) : t2.push(l2)), n2 = h2 + 1;
  }
  return t2;
}
function dr(s, t2, e2) {
  return _i(s, [""], t2, e2);
}
class li {
  constructor(t2, e2 = 1) {
    this.dir = e2, this.done = false, this.lineBreak = false, this.value = "", this.nodes = [t2], this.offsets = [e2 > 0 ? 1 : (t2 instanceof G ? t2.text.length : t2.children.length) << 1];
  }
  nextInner(t2, e2) {
    for (this.done = this.lineBreak = false; ; ) {
      let i2 = this.nodes.length - 1, n2 = this.nodes[i2], r2 = this.offsets[i2], o2 = r2 >> 1, l2 = n2 instanceof G ? n2.text.length : n2.children.length;
      if (o2 == (e2 > 0 ? l2 : 0)) {
        if (i2 == 0)
          return this.done = true, this.value = "", this;
        e2 > 0 && this.offsets[i2 - 1]++, this.nodes.pop(), this.offsets.pop();
      } else if ((r2 & 1) == (e2 > 0 ? 0 : 1)) {
        if (this.offsets[i2] += e2, t2 == 0)
          return this.lineBreak = true, this.value = `
`, this;
        t2--;
      } else if (n2 instanceof G) {
        let h2 = n2.text[o2 + (e2 < 0 ? -1 : 0)];
        if (this.offsets[i2] += e2, h2.length > Math.max(0, t2))
          return this.value = t2 == 0 ? h2 : e2 > 0 ? h2.slice(t2) : h2.slice(0, h2.length - t2), this;
        t2 -= h2.length;
      } else {
        let h2 = n2.children[o2 + (e2 < 0 ? -1 : 0)];
        t2 > h2.length ? (t2 -= h2.length, this.offsets[i2] += e2) : (e2 < 0 && this.offsets[i2]--, this.nodes.push(h2), this.offsets.push(e2 > 0 ? 1 : (h2 instanceof G ? h2.text.length : h2.children.length) << 1));
      }
    }
  }
  next(t2 = 0) {
    return t2 < 0 && (this.nextInner(-t2, -this.dir), t2 = this.value.length), this.nextInner(t2, this.dir);
  }
}
class Jo {
  constructor(t2, e2, i2) {
    this.value = "", this.done = false, this.cursor = new li(t2, e2 > i2 ? -1 : 1), this.pos = e2 > i2 ? t2.length : 0, this.from = Math.min(e2, i2), this.to = Math.max(e2, i2);
  }
  nextInner(t2, e2) {
    if (e2 < 0 ? this.pos <= this.from : this.pos >= this.to)
      return this.value = "", this.done = true, this;
    t2 += Math.max(0, e2 < 0 ? this.pos - this.to : this.from - this.pos);
    let i2 = e2 < 0 ? this.pos - this.from : this.to - this.pos;
    t2 > i2 && (t2 = i2), i2 -= t2;
    let { value: n2 } = this.cursor.next(t2);
    return this.pos += (n2.length + t2) * e2, this.value = n2.length <= i2 ? n2 : e2 < 0 ? n2.slice(n2.length - i2) : n2.slice(0, i2), this.done = !this.value, this;
  }
  next(t2 = 0) {
    return t2 < 0 ? t2 = Math.max(t2, this.from - this.pos) : t2 > 0 && (t2 = Math.min(t2, this.to - this.pos)), this.nextInner(t2, this.cursor.dir);
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != "";
  }
}
class Xo {
  constructor(t2) {
    this.inner = t2, this.afterBreak = true, this.value = "", this.done = false;
  }
  next(t2 = 0) {
    let { done: e2, lineBreak: i2, value: n2 } = this.inner.next(t2);
    return e2 ? (this.done = true, this.value = "") : i2 ? this.afterBreak ? this.value = "" : (this.afterBreak = true, this.next()) : (this.value = n2, this.afterBreak = false), this;
  }
  get lineBreak() {
    return false;
  }
}
typeof Symbol < "u" && (E.prototype[Symbol.iterator] = function() {
  return this.iter();
}, li.prototype[Symbol.iterator] = Jo.prototype[Symbol.iterator] = Xo.prototype[Symbol.iterator] = function() {
  return this;
});
class Mc {
  constructor(t2, e2, i2, n2) {
    this.from = t2, this.to = e2, this.number = i2, this.text = n2;
  }
  get length() {
    return this.to - this.from;
  }
}
let Ie = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s) => s ? parseInt(s, 36) : 1);
for (let s = 1; s < Ie.length; s++)
  Ie[s] += Ie[s - 1];
function Dc(s) {
  for (let t2 = 1; t2 < Ie.length; t2 += 2)
    if (Ie[t2] > s)
      return Ie[t2 - 1] <= s;
  return false;
}
function pr(s) {
  return s >= 127462 && s <= 127487;
}
const gr = 8205;
function xt(s, t2, e2 = true, i2 = true) {
  return (e2 ? Yo : Tc)(s, t2, i2);
}
function Yo(s, t2, e2) {
  if (t2 == s.length)
    return t2;
  t2 && Zo(s.charCodeAt(t2)) && tl(s.charCodeAt(t2 - 1)) && t2--;
  let i2 = hi(s, t2);
  for (t2 += es(i2); t2 < s.length; ) {
    let n2 = hi(s, t2);
    if (i2 == gr || n2 == gr || e2 && Dc(n2))
      t2 += es(n2), i2 = n2;
    else if (pr(n2)) {
      let r2 = 0, o2 = t2 - 2;
      for (; o2 >= 0 && pr(hi(s, o2)); )
        r2++, o2 -= 2;
      if (r2 % 2 == 0)
        break;
      t2 += 2;
    } else
      break;
  }
  return t2;
}
function Tc(s, t2, e2) {
  for (; t2 > 0; ) {
    let i2 = Yo(s, t2 - 2, e2);
    if (i2 < t2)
      return i2;
    t2--;
  }
  return 0;
}
function Zo(s) {
  return s >= 56320 && s < 57344;
}
function tl(s) {
  return s >= 55296 && s < 56320;
}
function hi(s, t2) {
  let e2 = s.charCodeAt(t2);
  if (!tl(e2) || t2 + 1 == s.length)
    return e2;
  let i2 = s.charCodeAt(t2 + 1);
  return Zo(i2) ? (e2 - 55296 << 10) + (i2 - 56320) + 65536 : e2;
}
function es(s) {
  return s < 65536 ? 1 : 2;
}
const is = /\r\n?|\n/;
var gt = /* @__PURE__ */ function(s) {
  return s[s.Simple = 0] = "Simple", s[s.TrackDel = 1] = "TrackDel", s[s.TrackBefore = 2] = "TrackBefore", s[s.TrackAfter = 3] = "TrackAfter", s;
}(gt || (gt = {}));
class Yt {
  constructor(t2) {
    this.sections = t2;
  }
  get length() {
    let t2 = 0;
    for (let e2 = 0; e2 < this.sections.length; e2 += 2)
      t2 += this.sections[e2];
    return t2;
  }
  get newLength() {
    let t2 = 0;
    for (let e2 = 0; e2 < this.sections.length; e2 += 2) {
      let i2 = this.sections[e2 + 1];
      t2 += i2 < 0 ? this.sections[e2] : i2;
    }
    return t2;
  }
  get empty() {
    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
  }
  iterGaps(t2) {
    for (let e2 = 0, i2 = 0, n2 = 0; e2 < this.sections.length; ) {
      let r2 = this.sections[e2++], o2 = this.sections[e2++];
      o2 < 0 ? (t2(i2, n2, r2), n2 += r2) : n2 += o2, i2 += r2;
    }
  }
  iterChangedRanges(t2, e2 = false) {
    ns(this, t2, e2);
  }
  get invertedDesc() {
    let t2 = [];
    for (let e2 = 0; e2 < this.sections.length; ) {
      let i2 = this.sections[e2++], n2 = this.sections[e2++];
      n2 < 0 ? t2.push(i2, n2) : t2.push(n2, i2);
    }
    return new Yt(t2);
  }
  composeDesc(t2) {
    return this.empty ? t2 : t2.empty ? this : el(this, t2);
  }
  mapDesc(t2, e2 = false) {
    return t2.empty ? this : ss(this, t2, e2);
  }
  mapPos(t2, e2 = -1, i2 = gt.Simple) {
    let n2 = 0, r2 = 0;
    for (let o2 = 0; o2 < this.sections.length; ) {
      let l2 = this.sections[o2++], h2 = this.sections[o2++], a2 = n2 + l2;
      if (h2 < 0) {
        if (a2 > t2)
          return r2 + (t2 - n2);
        r2 += l2;
      } else {
        if (i2 != gt.Simple && a2 >= t2 && (i2 == gt.TrackDel && n2 < t2 && a2 > t2 || i2 == gt.TrackBefore && n2 < t2 || i2 == gt.TrackAfter && a2 > t2))
          return null;
        if (a2 > t2 || a2 == t2 && e2 < 0 && !l2)
          return t2 == n2 || e2 < 0 ? r2 : r2 + h2;
        r2 += h2;
      }
      n2 = a2;
    }
    if (t2 > n2)
      throw new RangeError(`Position ${t2} is out of range for changeset of length ${n2}`);
    return r2;
  }
  touchesRange(t2, e2 = t2) {
    for (let i2 = 0, n2 = 0; i2 < this.sections.length && n2 <= e2; ) {
      let r2 = this.sections[i2++], o2 = this.sections[i2++], l2 = n2 + r2;
      if (o2 >= 0 && n2 <= e2 && l2 >= t2)
        return n2 < t2 && l2 > e2 ? "cover" : true;
      n2 = l2;
    }
    return false;
  }
  toString() {
    let t2 = "";
    for (let e2 = 0; e2 < this.sections.length; ) {
      let i2 = this.sections[e2++], n2 = this.sections[e2++];
      t2 += (t2 ? " " : "") + i2 + (n2 >= 0 ? ":" + n2 : "");
    }
    return t2;
  }
  toJSON() {
    return this.sections;
  }
  static fromJSON(t2) {
    if (!Array.isArray(t2) || t2.length % 2 || t2.some((e2) => typeof e2 != "number"))
      throw new RangeError("Invalid JSON representation of ChangeDesc");
    return new Yt(t2);
  }
  static create(t2) {
    return new Yt(t2);
  }
}
class Z$1 extends Yt {
  constructor(t2, e2) {
    super(t2), this.inserted = e2;
  }
  apply(t2) {
    if (this.length != t2.length)
      throw new RangeError("Applying change set to a document with the wrong length");
    return ns(this, (e2, i2, n2, r2, o2) => t2 = t2.replace(n2, n2 + (i2 - e2), o2), false), t2;
  }
  mapDesc(t2, e2 = false) {
    return ss(this, t2, e2, true);
  }
  invert(t2) {
    let e2 = this.sections.slice(), i2 = [];
    for (let n2 = 0, r2 = 0; n2 < e2.length; n2 += 2) {
      let o2 = e2[n2], l2 = e2[n2 + 1];
      if (l2 >= 0) {
        e2[n2] = l2, e2[n2 + 1] = o2;
        let h2 = n2 >> 1;
        for (; i2.length < h2; )
          i2.push(E.empty);
        i2.push(o2 ? t2.slice(r2, r2 + o2) : E.empty);
      }
      r2 += o2;
    }
    return new Z$1(e2, i2);
  }
  compose(t2) {
    return this.empty ? t2 : t2.empty ? this : el(this, t2, true);
  }
  map(t2, e2 = false) {
    return t2.empty ? this : ss(this, t2, e2, true);
  }
  iterChanges(t2, e2 = false) {
    ns(this, t2, e2);
  }
  get desc() {
    return Yt.create(this.sections);
  }
  filter(t2) {
    let e2 = [], i2 = [], n2 = [], r2 = new ci(this);
    t:
      for (let o2 = 0, l2 = 0; ; ) {
        let h2 = o2 == t2.length ? 1e9 : t2[o2++];
        for (; l2 < h2 || l2 == h2 && r2.len == 0; ) {
          if (r2.done)
            break t;
          let c2 = Math.min(r2.len, h2 - l2);
          ot(n2, c2, -1);
          let f2 = r2.ins == -1 ? -1 : r2.off == 0 ? r2.ins : 0;
          ot(e2, c2, f2), f2 > 0 && oe(i2, e2, r2.text), r2.forward(c2), l2 += c2;
        }
        let a2 = t2[o2++];
        for (; l2 < a2; ) {
          if (r2.done)
            break t;
          let c2 = Math.min(r2.len, a2 - l2);
          ot(e2, c2, -1), ot(n2, c2, r2.ins == -1 ? -1 : r2.off == 0 ? r2.ins : 0), r2.forward(c2), l2 += c2;
        }
      }
    return {
      changes: new Z$1(e2, i2),
      filtered: Yt.create(n2)
    };
  }
  toJSON() {
    let t2 = [];
    for (let e2 = 0; e2 < this.sections.length; e2 += 2) {
      let i2 = this.sections[e2], n2 = this.sections[e2 + 1];
      n2 < 0 ? t2.push(i2) : n2 == 0 ? t2.push([i2]) : t2.push([i2].concat(this.inserted[e2 >> 1].toJSON()));
    }
    return t2;
  }
  static of(t2, e2, i2) {
    let n2 = [], r2 = [], o2 = 0, l2 = null;
    function h2(c2 = false) {
      if (!c2 && !n2.length)
        return;
      o2 < e2 && ot(n2, e2 - o2, -1);
      let f2 = new Z$1(n2, r2);
      l2 = l2 ? l2.compose(f2.map(l2)) : f2, n2 = [], r2 = [], o2 = 0;
    }
    function a2(c2) {
      if (Array.isArray(c2))
        for (let f2 of c2)
          a2(f2);
      else if (c2 instanceof Z$1) {
        if (c2.length != e2)
          throw new RangeError(`Mismatched change set length (got ${c2.length}, expected ${e2})`);
        h2(), l2 = l2 ? l2.compose(c2.map(l2)) : c2;
      } else {
        let { from: f2, to: u2 = f2, insert: d2 } = c2;
        if (f2 > u2 || f2 < 0 || u2 > e2)
          throw new RangeError(`Invalid change range ${f2} to ${u2} (in doc of length ${e2})`);
        let p2 = d2 ? typeof d2 == "string" ? E.of(d2.split(i2 || is)) : d2 : E.empty, w = p2.length;
        if (f2 == u2 && w == 0)
          return;
        f2 < o2 && h2(), f2 > o2 && ot(n2, f2 - o2, -1), ot(n2, u2 - f2, w), oe(r2, n2, p2), o2 = u2;
      }
    }
    return a2(t2), h2(!l2), l2;
  }
  static empty(t2) {
    return new Z$1(t2 ? [t2, -1] : [], []);
  }
  static fromJSON(t2) {
    if (!Array.isArray(t2))
      throw new RangeError("Invalid JSON representation of ChangeSet");
    let e2 = [], i2 = [];
    for (let n2 = 0; n2 < t2.length; n2++) {
      let r2 = t2[n2];
      if (typeof r2 == "number")
        e2.push(r2, -1);
      else {
        if (!Array.isArray(r2) || typeof r2[0] != "number" || r2.some((o2, l2) => l2 && typeof o2 != "string"))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        if (r2.length == 1)
          e2.push(r2[0], 0);
        else {
          for (; i2.length < n2; )
            i2.push(E.empty);
          i2[n2] = E.of(r2.slice(1)), e2.push(r2[0], i2[n2].length);
        }
      }
    }
    return new Z$1(e2, i2);
  }
  static createSet(t2, e2) {
    return new Z$1(t2, e2);
  }
}
function ot(s, t2, e2, i2 = false) {
  if (t2 == 0 && e2 <= 0)
    return;
  let n2 = s.length - 2;
  n2 >= 0 && e2 <= 0 && e2 == s[n2 + 1] ? s[n2] += t2 : t2 == 0 && s[n2] == 0 ? s[n2 + 1] += e2 : i2 ? (s[n2] += t2, s[n2 + 1] += e2) : s.push(t2, e2);
}
function oe(s, t2, e2) {
  if (e2.length == 0)
    return;
  let i2 = t2.length - 2 >> 1;
  if (i2 < s.length)
    s[s.length - 1] = s[s.length - 1].append(e2);
  else {
    for (; s.length < i2; )
      s.push(E.empty);
    s.push(e2);
  }
}
function ns(s, t2, e2) {
  let i2 = s.inserted;
  for (let n2 = 0, r2 = 0, o2 = 0; o2 < s.sections.length; ) {
    let l2 = s.sections[o2++], h2 = s.sections[o2++];
    if (h2 < 0)
      n2 += l2, r2 += l2;
    else {
      let a2 = n2, c2 = r2, f2 = E.empty;
      for (; a2 += l2, c2 += h2, h2 && i2 && (f2 = f2.append(i2[o2 - 2 >> 1])), !(e2 || o2 == s.sections.length || s.sections[o2 + 1] < 0); )
        l2 = s.sections[o2++], h2 = s.sections[o2++];
      t2(n2, a2, r2, c2, f2), n2 = a2, r2 = c2;
    }
  }
}
function ss(s, t2, e2, i2 = false) {
  let n2 = [], r2 = i2 ? [] : null, o2 = new ci(s), l2 = new ci(t2);
  for (let h2 = -1; ; )
    if (o2.ins == -1 && l2.ins == -1) {
      let a2 = Math.min(o2.len, l2.len);
      ot(n2, a2, -1), o2.forward(a2), l2.forward(a2);
    } else if (l2.ins >= 0 && (o2.ins < 0 || h2 == o2.i || o2.off == 0 && (l2.len < o2.len || l2.len == o2.len && !e2))) {
      let a2 = l2.len;
      for (ot(n2, l2.ins, -1); a2; ) {
        let c2 = Math.min(o2.len, a2);
        o2.ins >= 0 && h2 < o2.i && o2.len <= c2 && (ot(n2, 0, o2.ins), r2 && oe(r2, n2, o2.text), h2 = o2.i), o2.forward(c2), a2 -= c2;
      }
      l2.next();
    } else if (o2.ins >= 0) {
      let a2 = 0, c2 = o2.len;
      for (; c2; )
        if (l2.ins == -1) {
          let f2 = Math.min(c2, l2.len);
          a2 += f2, c2 -= f2, l2.forward(f2);
        } else if (l2.ins == 0 && l2.len < c2)
          c2 -= l2.len, l2.next();
        else
          break;
      ot(n2, a2, h2 < o2.i ? o2.ins : 0), r2 && h2 < o2.i && oe(r2, n2, o2.text), h2 = o2.i, o2.forward(o2.len - c2);
    } else {
      if (o2.done && l2.done)
        return r2 ? Z$1.createSet(n2, r2) : Yt.create(n2);
      throw new Error("Mismatched change set lengths");
    }
}
function el(s, t2, e2 = false) {
  let i2 = [], n2 = e2 ? [] : null, r2 = new ci(s), o2 = new ci(t2);
  for (let l2 = false; ; ) {
    if (r2.done && o2.done)
      return n2 ? Z$1.createSet(i2, n2) : Yt.create(i2);
    if (r2.ins == 0)
      ot(i2, r2.len, 0, l2), r2.next();
    else if (o2.len == 0 && !o2.done)
      ot(i2, 0, o2.ins, l2), n2 && oe(n2, i2, o2.text), o2.next();
    else {
      if (r2.done || o2.done)
        throw new Error("Mismatched change set lengths");
      {
        let h2 = Math.min(r2.len2, o2.len), a2 = i2.length;
        if (r2.ins == -1) {
          let c2 = o2.ins == -1 ? -1 : o2.off ? 0 : o2.ins;
          ot(i2, h2, c2, l2), n2 && c2 && oe(n2, i2, o2.text);
        } else
          o2.ins == -1 ? (ot(i2, r2.off ? 0 : r2.len, h2, l2), n2 && oe(n2, i2, r2.textBit(h2))) : (ot(i2, r2.off ? 0 : r2.len, o2.off ? 0 : o2.ins, l2), n2 && !o2.off && oe(n2, i2, o2.text));
        l2 = (r2.ins > h2 || o2.ins >= 0 && o2.len > h2) && (l2 || i2.length > a2), r2.forward2(h2), o2.forward(h2);
      }
    }
  }
}
class ci {
  constructor(t2) {
    this.set = t2, this.i = 0, this.next();
  }
  next() {
    let { sections: t2 } = this.set;
    this.i < t2.length ? (this.len = t2[this.i++], this.ins = t2[this.i++]) : (this.len = 0, this.ins = -2), this.off = 0;
  }
  get done() {
    return this.ins == -2;
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins;
  }
  get text() {
    let { inserted: t2 } = this.set, e2 = this.i - 2 >> 1;
    return e2 >= t2.length ? E.empty : t2[e2];
  }
  textBit(t2) {
    let { inserted: e2 } = this.set, i2 = this.i - 2 >> 1;
    return i2 >= e2.length && !t2 ? E.empty : e2[i2].slice(this.off, t2 == null ? void 0 : this.off + t2);
  }
  forward(t2) {
    t2 == this.len ? this.next() : (this.len -= t2, this.off += t2);
  }
  forward2(t2) {
    this.ins == -1 ? this.forward(t2) : t2 == this.ins ? this.next() : (this.ins -= t2, this.off += t2);
  }
}
class Ce {
  constructor(t2, e2, i2) {
    this.from = t2, this.to = e2, this.flags = i2;
  }
  get anchor() {
    return this.flags & 16 ? this.to : this.from;
  }
  get head() {
    return this.flags & 16 ? this.from : this.to;
  }
  get empty() {
    return this.from == this.to;
  }
  get assoc() {
    return this.flags & 4 ? -1 : this.flags & 8 ? 1 : 0;
  }
  get bidiLevel() {
    let t2 = this.flags & 3;
    return t2 == 3 ? null : t2;
  }
  get goalColumn() {
    let t2 = this.flags >> 5;
    return t2 == 33554431 ? void 0 : t2;
  }
  map(t2, e2 = -1) {
    let i2, n2;
    return this.empty ? i2 = n2 = t2.mapPos(this.from, e2) : (i2 = t2.mapPos(this.from, 1), n2 = t2.mapPos(this.to, -1)), i2 == this.from && n2 == this.to ? this : new Ce(i2, n2, this.flags);
  }
  extend(t2, e2 = t2) {
    if (t2 <= this.anchor && e2 >= this.anchor)
      return b.range(t2, e2);
    let i2 = Math.abs(t2 - this.anchor) > Math.abs(e2 - this.anchor) ? t2 : e2;
    return b.range(this.anchor, i2);
  }
  eq(t2) {
    return this.anchor == t2.anchor && this.head == t2.head;
  }
  toJSON() {
    return { anchor: this.anchor, head: this.head };
  }
  static fromJSON(t2) {
    if (!t2 || typeof t2.anchor != "number" || typeof t2.head != "number")
      throw new RangeError("Invalid JSON representation for SelectionRange");
    return b.range(t2.anchor, t2.head);
  }
  static create(t2, e2, i2) {
    return new Ce(t2, e2, i2);
  }
}
class b {
  constructor(t2, e2) {
    this.ranges = t2, this.mainIndex = e2;
  }
  map(t2, e2 = -1) {
    return t2.empty ? this : b.create(this.ranges.map((i2) => i2.map(t2, e2)), this.mainIndex);
  }
  eq(t2) {
    if (this.ranges.length != t2.ranges.length || this.mainIndex != t2.mainIndex)
      return false;
    for (let e2 = 0; e2 < this.ranges.length; e2++)
      if (!this.ranges[e2].eq(t2.ranges[e2]))
        return false;
    return true;
  }
  get main() {
    return this.ranges[this.mainIndex];
  }
  asSingle() {
    return this.ranges.length == 1 ? this : new b([this.main], 0);
  }
  addRange(t2, e2 = true) {
    return b.create([t2].concat(this.ranges), e2 ? 0 : this.mainIndex + 1);
  }
  replaceRange(t2, e2 = this.mainIndex) {
    let i2 = this.ranges.slice();
    return i2[e2] = t2, b.create(i2, this.mainIndex);
  }
  toJSON() {
    return { ranges: this.ranges.map((t2) => t2.toJSON()), main: this.mainIndex };
  }
  static fromJSON(t2) {
    if (!t2 || !Array.isArray(t2.ranges) || typeof t2.main != "number" || t2.main >= t2.ranges.length)
      throw new RangeError("Invalid JSON representation for EditorSelection");
    return new b(t2.ranges.map((e2) => Ce.fromJSON(e2)), t2.main);
  }
  static single(t2, e2 = t2) {
    return new b([b.range(t2, e2)], 0);
  }
  static create(t2, e2 = 0) {
    if (t2.length == 0)
      throw new RangeError("A selection needs at least one range");
    for (let i2 = 0, n2 = 0; n2 < t2.length; n2++) {
      let r2 = t2[n2];
      if (r2.empty ? r2.from <= i2 : r2.from < i2)
        return b.normalized(t2.slice(), e2);
      i2 = r2.to;
    }
    return new b(t2, e2);
  }
  static cursor(t2, e2 = 0, i2, n2) {
    return Ce.create(t2, t2, (e2 == 0 ? 0 : e2 < 0 ? 4 : 8) | (i2 == null ? 3 : Math.min(2, i2)) | (n2 != null ? n2 : 33554431) << 5);
  }
  static range(t2, e2, i2, n2) {
    let r2 = (i2 != null ? i2 : 33554431) << 5 | (n2 == null ? 3 : Math.min(2, n2));
    return e2 < t2 ? Ce.create(e2, t2, 24 | r2) : Ce.create(t2, e2, (e2 > t2 ? 4 : 0) | r2);
  }
  static normalized(t2, e2 = 0) {
    let i2 = t2[e2];
    t2.sort((n2, r2) => n2.from - r2.from), e2 = t2.indexOf(i2);
    for (let n2 = 1; n2 < t2.length; n2++) {
      let r2 = t2[n2], o2 = t2[n2 - 1];
      if (r2.empty ? r2.from <= o2.to : r2.from < o2.to) {
        let l2 = o2.from, h2 = Math.max(r2.to, o2.to);
        n2 <= e2 && e2--, t2.splice(--n2, 2, r2.anchor > r2.head ? b.range(h2, l2) : b.range(l2, h2));
      }
    }
    return new b(t2, e2);
  }
}
function il(s, t2) {
  for (let e2 of s.ranges)
    if (e2.to > t2)
      throw new RangeError("Selection points outside of document");
}
let _s = 0;
class v$2 {
  constructor(t2, e2, i2, n2, r2) {
    this.combine = t2, this.compareInput = e2, this.compare = i2, this.isStatic = n2, this.id = _s++, this.default = t2([]), this.extensions = typeof r2 == "function" ? r2(this) : r2;
  }
  static define(t2 = {}) {
    return new v$2(t2.combine || ((e2) => e2), t2.compareInput || ((e2, i2) => e2 === i2), t2.compare || (t2.combine ? (e2, i2) => e2 === i2 : Ws), !!t2.static, t2.enables);
  }
  of(t2) {
    return new Wi([], this, 0, t2);
  }
  compute(t2, e2) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Wi(t2, this, 1, e2);
  }
  computeN(t2, e2) {
    if (this.isStatic)
      throw new Error("Can't compute a static facet");
    return new Wi(t2, this, 2, e2);
  }
  from(t2, e2) {
    return e2 || (e2 = (i2) => i2), this.compute([t2], (i2) => e2(i2.field(t2)));
  }
}
function Ws(s, t2) {
  return s == t2 || s.length == t2.length && s.every((e2, i2) => e2 === t2[i2]);
}
class Wi {
  constructor(t2, e2, i2, n2) {
    this.dependencies = t2, this.facet = e2, this.type = i2, this.value = n2, this.id = _s++;
  }
  dynamicSlot(t2) {
    var e2;
    let i2 = this.value, n2 = this.facet.compareInput, r2 = this.id, o2 = t2[r2] >> 1, l2 = this.type == 2, h2 = false, a2 = false, c2 = [];
    for (let f2 of this.dependencies)
      f2 == "doc" ? h2 = true : f2 == "selection" ? a2 = true : ((e2 = t2[f2.id]) !== null && e2 !== void 0 ? e2 : 1) & 1 || c2.push(t2[f2.id]);
    return {
      create(f2) {
        return f2.values[o2] = i2(f2), 1;
      },
      update(f2, u2) {
        if (h2 && u2.docChanged || a2 && (u2.docChanged || u2.selection) || rs(f2, c2)) {
          let d2 = i2(f2);
          if (l2 ? !mr(d2, f2.values[o2], n2) : !n2(d2, f2.values[o2]))
            return f2.values[o2] = d2, 1;
        }
        return 0;
      },
      reconfigure: (f2, u2) => {
        let d2, p2 = u2.config.address[r2];
        if (p2 != null) {
          let w = tn(u2, p2);
          if (this.dependencies.every((g2) => g2 instanceof v$2 ? u2.facet(g2) === f2.facet(g2) : g2 instanceof Bt ? u2.field(g2, false) == f2.field(g2, false) : true) || (l2 ? mr(d2 = i2(f2), w, n2) : n2(d2 = i2(f2), w)))
            return f2.values[o2] = w, 0;
        } else
          d2 = i2(f2);
        return f2.values[o2] = d2, 1;
      }
    };
  }
}
function mr(s, t2, e2) {
  if (s.length != t2.length)
    return false;
  for (let i2 = 0; i2 < s.length; i2++)
    if (!e2(s[i2], t2[i2]))
      return false;
  return true;
}
function rs(s, t2) {
  let e2 = false;
  for (let i2 of t2)
    ai(s, i2) & 1 && (e2 = true);
  return e2;
}
function Pc(s, t2, e2) {
  let i2 = e2.map((h2) => s[h2.id]), n2 = e2.map((h2) => h2.type), r2 = i2.filter((h2) => !(h2 & 1)), o2 = s[t2.id] >> 1;
  function l2(h2) {
    let a2 = [];
    for (let c2 = 0; c2 < i2.length; c2++) {
      let f2 = tn(h2, i2[c2]);
      if (n2[c2] == 2)
        for (let u2 of f2)
          a2.push(u2);
      else
        a2.push(f2);
    }
    return t2.combine(a2);
  }
  return {
    create(h2) {
      for (let a2 of i2)
        ai(h2, a2);
      return h2.values[o2] = l2(h2), 1;
    },
    update(h2, a2) {
      if (!rs(h2, r2))
        return 0;
      let c2 = l2(h2);
      return t2.compare(c2, h2.values[o2]) ? 0 : (h2.values[o2] = c2, 1);
    },
    reconfigure(h2, a2) {
      let c2 = rs(h2, i2), f2 = a2.config.facets[t2.id], u2 = a2.facet(t2);
      if (f2 && !c2 && Ws(e2, f2))
        return h2.values[o2] = u2, 0;
      let d2 = l2(h2);
      return t2.compare(d2, u2) ? (h2.values[o2] = u2, 0) : (h2.values[o2] = d2, 1);
    }
  };
}
const wr = /* @__PURE__ */ v$2.define({ static: true });
class Bt {
  constructor(t2, e2, i2, n2, r2) {
    this.id = t2, this.createF = e2, this.updateF = i2, this.compareF = n2, this.spec = r2, this.provides = void 0;
  }
  static define(t2) {
    let e2 = new Bt(_s++, t2.create, t2.update, t2.compare || ((i2, n2) => i2 === n2), t2);
    return t2.provide && (e2.provides = t2.provide(e2)), e2;
  }
  create(t2) {
    let e2 = t2.facet(wr).find((i2) => i2.field == this);
    return ((e2 == null ? void 0 : e2.create) || this.createF)(t2);
  }
  slot(t2) {
    let e2 = t2[this.id] >> 1;
    return {
      create: (i2) => (i2.values[e2] = this.create(i2), 1),
      update: (i2, n2) => {
        let r2 = i2.values[e2], o2 = this.updateF(r2, n2);
        return this.compareF(r2, o2) ? 0 : (i2.values[e2] = o2, 1);
      },
      reconfigure: (i2, n2) => n2.config.address[this.id] != null ? (i2.values[e2] = n2.field(this), 0) : (i2.values[e2] = this.create(i2), 1)
    };
  }
  init(t2) {
    return [this, wr.of({ field: this, create: t2 })];
  }
  get extension() {
    return this;
  }
}
const ve = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
function Ze(s) {
  return (t2) => new nl(t2, s);
}
const js = {
  highest: /* @__PURE__ */ Ze(ve.highest),
  high: /* @__PURE__ */ Ze(ve.high),
  default: /* @__PURE__ */ Ze(ve.default),
  low: /* @__PURE__ */ Ze(ve.low),
  lowest: /* @__PURE__ */ Ze(ve.lowest)
};
class nl {
  constructor(t2, e2) {
    this.inner = t2, this.prec = e2;
  }
}
class yi {
  of(t2) {
    return new os(this, t2);
  }
  reconfigure(t2) {
    return yi.reconfigure.of({ compartment: this, extension: t2 });
  }
  get(t2) {
    return t2.config.compartments.get(this);
  }
}
class os {
  constructor(t2, e2) {
    this.compartment = t2, this.inner = e2;
  }
}
class Zi {
  constructor(t2, e2, i2, n2, r2, o2) {
    for (this.base = t2, this.compartments = e2, this.dynamicSlots = i2, this.address = n2, this.staticValues = r2, this.facets = o2, this.statusTemplate = []; this.statusTemplate.length < i2.length; )
      this.statusTemplate.push(
        0
      );
  }
  staticFacet(t2) {
    let e2 = this.address[t2.id];
    return e2 == null ? t2.default : this.staticValues[e2 >> 1];
  }
  static resolve(t2, e2, i2) {
    let n2 = [], r2 = /* @__PURE__ */ Object.create(null), o2 = /* @__PURE__ */ new Map();
    for (let u2 of Bc(t2, e2, o2))
      u2 instanceof Bt ? n2.push(u2) : (r2[u2.facet.id] || (r2[u2.facet.id] = [])).push(u2);
    let l2 = /* @__PURE__ */ Object.create(null), h2 = [], a2 = [];
    for (let u2 of n2)
      l2[u2.id] = a2.length << 1, a2.push((d2) => u2.slot(d2));
    let c2 = i2 == null ? void 0 : i2.config.facets;
    for (let u2 in r2) {
      let d2 = r2[u2], p2 = d2[0].facet, w = c2 && c2[u2] || [];
      if (d2.every(
        (g2) => g2.type == 0
      ))
        if (l2[p2.id] = h2.length << 1 | 1, Ws(w, d2))
          h2.push(i2.facet(p2));
        else {
          let g2 = p2.combine(d2.map((y) => y.value));
          h2.push(i2 && p2.compare(g2, i2.facet(p2)) ? i2.facet(p2) : g2);
        }
      else {
        for (let g2 of d2)
          g2.type == 0 ? (l2[g2.id] = h2.length << 1 | 1, h2.push(g2.value)) : (l2[g2.id] = a2.length << 1, a2.push((y) => g2.dynamicSlot(y)));
        l2[p2.id] = a2.length << 1, a2.push((g2) => Pc(g2, p2, d2));
      }
    }
    let f2 = a2.map((u2) => u2(l2));
    return new Zi(t2, o2, f2, l2, h2, r2);
  }
}
function Bc(s, t2, e2) {
  let i2 = [[], [], [], [], []], n2 = /* @__PURE__ */ new Map();
  function r2(o2, l2) {
    let h2 = n2.get(o2);
    if (h2 != null) {
      if (h2 <= l2)
        return;
      let a2 = i2[h2].indexOf(o2);
      a2 > -1 && i2[h2].splice(a2, 1), o2 instanceof os && e2.delete(o2.compartment);
    }
    if (n2.set(o2, l2), Array.isArray(o2))
      for (let a2 of o2)
        r2(a2, l2);
    else if (o2 instanceof os) {
      if (e2.has(o2.compartment))
        throw new RangeError("Duplicate use of compartment in extensions");
      let a2 = t2.get(o2.compartment) || o2.inner;
      e2.set(o2.compartment, a2), r2(a2, l2);
    } else if (o2 instanceof nl)
      r2(o2.inner, o2.prec);
    else if (o2 instanceof Bt)
      i2[l2].push(o2), o2.provides && r2(o2.provides, l2);
    else if (o2 instanceof Wi)
      i2[l2].push(o2), o2.facet.extensions && r2(o2.facet.extensions, ve.default);
    else {
      let a2 = o2.extension;
      if (!a2)
        throw new Error(`Unrecognized extension value in extension set (${o2}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      r2(a2, l2);
    }
  }
  return r2(s, ve.default), i2.reduce((o2, l2) => o2.concat(l2));
}
function ai(s, t2) {
  if (t2 & 1)
    return 2;
  let e2 = t2 >> 1, i2 = s.status[e2];
  if (i2 == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (i2 & 2)
    return i2;
  s.status[e2] = 4;
  let n2 = s.computeSlot(s, s.config.dynamicSlots[e2]);
  return s.status[e2] = 2 | n2;
}
function tn(s, t2) {
  return t2 & 1 ? s.config.staticValues[t2 >> 1] : s.values[t2 >> 1];
}
const sl = /* @__PURE__ */ v$2.define(), rl = /* @__PURE__ */ v$2.define({
  combine: (s) => s.some((t2) => t2),
  static: true
}), ol = /* @__PURE__ */ v$2.define({
  combine: (s) => s.length ? s[0] : void 0,
  static: true
}), ll = /* @__PURE__ */ v$2.define(), hl = /* @__PURE__ */ v$2.define(), al = /* @__PURE__ */ v$2.define(), cl = /* @__PURE__ */ v$2.define({
  combine: (s) => s.length ? s[0] : false
});
class bi {
  constructor(t2, e2) {
    this.type = t2, this.value = e2;
  }
  static define() {
    return new Rc();
  }
}
class Rc {
  of(t2) {
    return new bi(this, t2);
  }
}
class Lc {
  constructor(t2) {
    this.map = t2;
  }
  of(t2) {
    return new F(this, t2);
  }
}
class F {
  constructor(t2, e2) {
    this.type = t2, this.value = e2;
  }
  map(t2) {
    let e2 = this.type.map(this.value, t2);
    return e2 === void 0 ? void 0 : e2 == this.value ? this : new F(this.type, e2);
  }
  is(t2) {
    return this.type == t2;
  }
  static define(t2 = {}) {
    return new Lc(t2.map || ((e2) => e2));
  }
  static mapEffects(t2, e2) {
    if (!t2.length)
      return t2;
    let i2 = [];
    for (let n2 of t2) {
      let r2 = n2.map(e2);
      r2 && i2.push(r2);
    }
    return i2;
  }
}
F.reconfigure = /* @__PURE__ */ F.define();
F.appendConfig = /* @__PURE__ */ F.define();
class lt {
  constructor(t2, e2, i2, n2, r2, o2) {
    this.startState = t2, this.changes = e2, this.selection = i2, this.effects = n2, this.annotations = r2, this.scrollIntoView = o2, this._doc = null, this._state = null, i2 && il(i2, e2.newLength), r2.some((l2) => l2.type == lt.time) || (this.annotations = r2.concat(lt.time.of(Date.now())));
  }
  static create(t2, e2, i2, n2, r2, o2) {
    return new lt(t2, e2, i2, n2, r2, o2);
  }
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc));
  }
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes);
  }
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state;
  }
  annotation(t2) {
    for (let e2 of this.annotations)
      if (e2.type == t2)
        return e2.value;
  }
  get docChanged() {
    return !this.changes.empty;
  }
  get reconfigured() {
    return this.startState.config != this.state.config;
  }
  isUserEvent(t2) {
    let e2 = this.annotation(lt.userEvent);
    return !!(e2 && (e2 == t2 || e2.length > t2.length && e2.slice(0, t2.length) == t2 && e2[t2.length] == "."));
  }
}
lt.time = /* @__PURE__ */ bi.define();
lt.userEvent = /* @__PURE__ */ bi.define();
lt.addToHistory = /* @__PURE__ */ bi.define();
lt.remote = /* @__PURE__ */ bi.define();
function Ec(s, t2) {
  let e2 = [];
  for (let i2 = 0, n2 = 0; ; ) {
    let r2, o2;
    if (i2 < s.length && (n2 == t2.length || t2[n2] >= s[i2]))
      r2 = s[i2++], o2 = s[i2++];
    else if (n2 < t2.length)
      r2 = t2[n2++], o2 = t2[n2++];
    else
      return e2;
    !e2.length || e2[e2.length - 1] < r2 ? e2.push(r2, o2) : e2[e2.length - 1] < o2 && (e2[e2.length - 1] = o2);
  }
}
function fl(s, t2, e2) {
  var i2;
  let n2, r2, o2;
  return e2 ? (n2 = t2.changes, r2 = Z$1.empty(t2.changes.length), o2 = s.changes.compose(t2.changes)) : (n2 = t2.changes.map(s.changes), r2 = s.changes.mapDesc(t2.changes, true), o2 = s.changes.compose(n2)), {
    changes: o2,
    selection: t2.selection ? t2.selection.map(r2) : (i2 = s.selection) === null || i2 === void 0 ? void 0 : i2.map(n2),
    effects: F.mapEffects(s.effects, n2).concat(F.mapEffects(t2.effects, r2)),
    annotations: s.annotations.length ? s.annotations.concat(t2.annotations) : t2.annotations,
    scrollIntoView: s.scrollIntoView || t2.scrollIntoView
  };
}
function ls(s, t2, e2) {
  let i2 = t2.selection, n2 = He(t2.annotations);
  return t2.userEvent && (n2 = n2.concat(lt.userEvent.of(t2.userEvent))), {
    changes: t2.changes instanceof Z$1 ? t2.changes : Z$1.of(t2.changes || [], e2, s.facet(ol)),
    selection: i2 && (i2 instanceof b ? i2 : b.single(i2.anchor, i2.head)),
    effects: He(t2.effects),
    annotations: n2,
    scrollIntoView: !!t2.scrollIntoView
  };
}
function ul(s, t2, e2) {
  let i2 = ls(s, t2.length ? t2[0] : {}, s.doc.length);
  t2.length && t2[0].filter === false && (e2 = false);
  for (let r2 = 1; r2 < t2.length; r2++) {
    t2[r2].filter === false && (e2 = false);
    let o2 = !!t2[r2].sequential;
    i2 = fl(i2, ls(s, t2[r2], o2 ? i2.changes.newLength : s.doc.length), o2);
  }
  let n2 = lt.create(s, i2.changes, i2.selection, i2.effects, i2.annotations, i2.scrollIntoView);
  return Vc(e2 ? Nc(n2) : n2);
}
function Nc(s) {
  let t2 = s.startState, e2 = true;
  for (let n2 of t2.facet(ll)) {
    let r2 = n2(s);
    if (r2 === false) {
      e2 = false;
      break;
    }
    Array.isArray(r2) && (e2 = e2 === true ? r2 : Ec(e2, r2));
  }
  if (e2 !== true) {
    let n2, r2;
    if (e2 === false)
      r2 = s.changes.invertedDesc, n2 = Z$1.empty(t2.doc.length);
    else {
      let o2 = s.changes.filter(e2);
      n2 = o2.changes, r2 = o2.filtered.mapDesc(o2.changes).invertedDesc;
    }
    s = lt.create(t2, n2, s.selection && s.selection.map(r2), F.mapEffects(s.effects, r2), s.annotations, s.scrollIntoView);
  }
  let i2 = t2.facet(hl);
  for (let n2 = i2.length - 1; n2 >= 0; n2--) {
    let r2 = i2[n2](s);
    r2 instanceof lt ? s = r2 : Array.isArray(r2) && r2.length == 1 && r2[0] instanceof lt ? s = r2[0] : s = ul(t2, He(r2), false);
  }
  return s;
}
function Vc(s) {
  let t2 = s.startState, e2 = t2.facet(al), i2 = s;
  for (let n2 = e2.length - 1; n2 >= 0; n2--) {
    let r2 = e2[n2](s);
    r2 && Object.keys(r2).length && (i2 = fl(i2, ls(t2, r2, s.changes.newLength), true));
  }
  return i2 == s ? s : lt.create(t2, s.changes, s.selection, i2.effects, i2.annotations, i2.scrollIntoView);
}
const Ic = [];
function He(s) {
  return s == null ? Ic : Array.isArray(s) ? s : [s];
}
var Jt = /* @__PURE__ */ function(s) {
  return s[s.Word = 0] = "Word", s[s.Space = 1] = "Space", s[s.Other = 2] = "Other", s;
}(Jt || (Jt = {}));
const Hc = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
let hs;
try {
  hs = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch {
}
function $c(s) {
  if (hs)
    return hs.test(s);
  for (let t2 = 0; t2 < s.length; t2++) {
    let e2 = s[t2];
    if (/\w/.test(e2) || e2 > "\x80" && (e2.toUpperCase() != e2.toLowerCase() || Hc.test(e2)))
      return true;
  }
  return false;
}
function Fc(s) {
  return (t2) => {
    if (!/\S/.test(t2))
      return Jt.Space;
    if ($c(t2))
      return Jt.Word;
    for (let e2 = 0; e2 < s.length; e2++)
      if (t2.indexOf(s[e2]) > -1)
        return Jt.Word;
    return Jt.Other;
  };
}
class N$1 {
  constructor(t2, e2, i2, n2, r2, o2) {
    this.config = t2, this.doc = e2, this.selection = i2, this.values = n2, this.status = t2.statusTemplate.slice(), this.computeSlot = r2, o2 && (o2._state = this);
    for (let l2 = 0; l2 < this.config.dynamicSlots.length; l2++)
      ai(this, l2 << 1);
    this.computeSlot = null;
  }
  field(t2, e2 = true) {
    let i2 = this.config.address[t2.id];
    if (i2 == null) {
      if (e2)
        throw new RangeError("Field is not present in this state");
      return;
    }
    return ai(this, i2), tn(this, i2);
  }
  update(...t2) {
    return ul(this, t2, true);
  }
  applyTransaction(t2) {
    let e2 = this.config, { base: i2, compartments: n2 } = e2;
    for (let o2 of t2.effects)
      o2.is(yi.reconfigure) ? (e2 && (n2 = /* @__PURE__ */ new Map(), e2.compartments.forEach((l2, h2) => n2.set(h2, l2)), e2 = null), n2.set(o2.value.compartment, o2.value.extension)) : o2.is(F.reconfigure) ? (e2 = null, i2 = o2.value) : o2.is(F.appendConfig) && (e2 = null, i2 = He(i2).concat(o2.value));
    let r2;
    e2 ? r2 = t2.startState.values.slice() : (e2 = Zi.resolve(i2, n2, this), r2 = new N$1(e2, this.doc, this.selection, e2.dynamicSlots.map(() => null), (l2, h2) => h2.reconfigure(l2, this), null).values), new N$1(e2, t2.newDoc, t2.newSelection, r2, (o2, l2) => l2.update(o2, t2), t2);
  }
  replaceSelection(t2) {
    return typeof t2 == "string" && (t2 = this.toText(t2)), this.changeByRange((e2) => ({
      changes: { from: e2.from, to: e2.to, insert: t2 },
      range: b.cursor(e2.from + t2.length)
    }));
  }
  changeByRange(t2) {
    let e2 = this.selection, i2 = t2(e2.ranges[0]), n2 = this.changes(i2.changes), r2 = [i2.range], o2 = He(i2.effects);
    for (let l2 = 1; l2 < e2.ranges.length; l2++) {
      let h2 = t2(e2.ranges[l2]), a2 = this.changes(h2.changes), c2 = a2.map(n2);
      for (let u2 = 0; u2 < l2; u2++)
        r2[u2] = r2[u2].map(c2);
      let f2 = n2.mapDesc(a2, true);
      r2.push(h2.range.map(f2)), n2 = n2.compose(c2), o2 = F.mapEffects(o2, c2).concat(F.mapEffects(He(h2.effects), f2));
    }
    return {
      changes: n2,
      selection: b.create(r2, e2.mainIndex),
      effects: o2
    };
  }
  changes(t2 = []) {
    return t2 instanceof Z$1 ? t2 : Z$1.of(t2, this.doc.length, this.facet(N$1.lineSeparator));
  }
  toText(t2) {
    return E.of(t2.split(this.facet(N$1.lineSeparator) || is));
  }
  sliceDoc(t2 = 0, e2 = this.doc.length) {
    return this.doc.sliceString(t2, e2, this.lineBreak);
  }
  facet(t2) {
    let e2 = this.config.address[t2.id];
    return e2 == null ? t2.default : (ai(this, e2), tn(this, e2));
  }
  toJSON(t2) {
    let e2 = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    };
    if (t2)
      for (let i2 in t2) {
        let n2 = t2[i2];
        n2 instanceof Bt && this.config.address[n2.id] != null && (e2[i2] = n2.spec.toJSON(this.field(t2[i2]), this));
      }
    return e2;
  }
  static fromJSON(t2, e2 = {}, i2) {
    if (!t2 || typeof t2.doc != "string")
      throw new RangeError("Invalid JSON representation for EditorState");
    let n2 = [];
    if (i2) {
      for (let r2 in i2)
        if (Object.prototype.hasOwnProperty.call(t2, r2)) {
          let o2 = i2[r2], l2 = t2[r2];
          n2.push(o2.init((h2) => o2.spec.fromJSON(l2, h2)));
        }
    }
    return N$1.create({
      doc: t2.doc,
      selection: b.fromJSON(t2.selection),
      extensions: e2.extensions ? n2.concat([e2.extensions]) : n2
    });
  }
  static create(t2 = {}) {
    let e2 = Zi.resolve(t2.extensions || [], /* @__PURE__ */ new Map()), i2 = t2.doc instanceof E ? t2.doc : E.of((t2.doc || "").split(e2.staticFacet(N$1.lineSeparator) || is)), n2 = t2.selection ? t2.selection instanceof b ? t2.selection : b.single(t2.selection.anchor, t2.selection.head) : b.single(0);
    return il(n2, i2.length), e2.staticFacet(rl) || (n2 = n2.asSingle()), new N$1(e2, i2, n2, e2.dynamicSlots.map(() => null), (r2, o2) => o2.create(r2), null);
  }
  get tabSize() {
    return this.facet(N$1.tabSize);
  }
  get lineBreak() {
    return this.facet(N$1.lineSeparator) || `
`;
  }
  get readOnly() {
    return this.facet(cl);
  }
  phrase(t2, ...e2) {
    for (let i2 of this.facet(N$1.phrases))
      if (Object.prototype.hasOwnProperty.call(i2, t2)) {
        t2 = i2[t2];
        break;
      }
    return e2.length && (t2 = t2.replace(/\$(\$|\d*)/g, (i2, n2) => {
      if (n2 == "$")
        return "$";
      let r2 = +(n2 || 1);
      return !r2 || r2 > e2.length ? i2 : e2[r2 - 1];
    })), t2;
  }
  languageDataAt(t2, e2, i2 = -1) {
    let n2 = [];
    for (let r2 of this.facet(sl))
      for (let o2 of r2(this, e2, i2))
        Object.prototype.hasOwnProperty.call(o2, t2) && n2.push(o2[t2]);
    return n2;
  }
  charCategorizer(t2) {
    return Fc(this.languageDataAt("wordChars", t2).join(""));
  }
  wordAt(t2) {
    let { text: e2, from: i2, length: n2 } = this.doc.lineAt(t2), r2 = this.charCategorizer(t2), o2 = t2 - i2, l2 = t2 - i2;
    for (; o2 > 0; ) {
      let h2 = xt(e2, o2, false);
      if (r2(e2.slice(h2, o2)) != Jt.Word)
        break;
      o2 = h2;
    }
    for (; l2 < n2; ) {
      let h2 = xt(e2, l2);
      if (r2(e2.slice(l2, h2)) != Jt.Word)
        break;
      l2 = h2;
    }
    return o2 == l2 ? null : b.range(o2 + i2, l2 + i2);
  }
}
N$1.allowMultipleSelections = rl;
N$1.tabSize = /* @__PURE__ */ v$2.define({
  combine: (s) => s.length ? s[0] : 4
});
N$1.lineSeparator = ol;
N$1.readOnly = cl;
N$1.phrases = /* @__PURE__ */ v$2.define({
  compare(s, t2) {
    let e2 = Object.keys(s), i2 = Object.keys(t2);
    return e2.length == i2.length && e2.every((n2) => s[n2] == t2[n2]);
  }
});
N$1.languageData = sl;
N$1.changeFilter = ll;
N$1.transactionFilter = hl;
N$1.transactionExtender = al;
yi.reconfigure = /* @__PURE__ */ F.define();
function Sn(s, t2, e2 = {}) {
  let i2 = {};
  for (let n2 of s)
    for (let r2 of Object.keys(n2)) {
      let o2 = n2[r2], l2 = i2[r2];
      if (l2 === void 0)
        i2[r2] = o2;
      else if (!(l2 === o2 || o2 === void 0))
        if (Object.hasOwnProperty.call(e2, r2))
          i2[r2] = e2[r2](l2, o2);
        else
          throw new Error("Config merge conflict for field " + r2);
    }
  for (let n2 in t2)
    i2[n2] === void 0 && (i2[n2] = t2[n2]);
  return i2;
}
class je {
  eq(t2) {
    return this == t2;
  }
  range(t2, e2 = t2) {
    return as.create(t2, e2, this);
  }
}
je.prototype.startSide = je.prototype.endSide = 0;
je.prototype.point = false;
je.prototype.mapMode = gt.TrackDel;
let as = class dl {
  constructor(t2, e2, i2) {
    this.from = t2, this.to = e2, this.value = i2;
  }
  static create(t2, e2, i2) {
    return new dl(t2, e2, i2);
  }
};
function cs(s, t2) {
  return s.from - t2.from || s.value.startSide - t2.value.startSide;
}
class qs {
  constructor(t2, e2, i2, n2) {
    this.from = t2, this.to = e2, this.value = i2, this.maxPoint = n2;
  }
  get length() {
    return this.to[this.to.length - 1];
  }
  findIndex(t2, e2, i2, n2 = 0) {
    let r2 = i2 ? this.to : this.from;
    for (let o2 = n2, l2 = r2.length; ; ) {
      if (o2 == l2)
        return o2;
      let h2 = o2 + l2 >> 1, a2 = r2[h2] - t2 || (i2 ? this.value[h2].endSide : this.value[h2].startSide) - e2;
      if (h2 == o2)
        return a2 >= 0 ? o2 : l2;
      a2 >= 0 ? l2 = h2 : o2 = h2 + 1;
    }
  }
  between(t2, e2, i2, n2) {
    for (let r2 = this.findIndex(e2, -1e9, true), o2 = this.findIndex(i2, 1e9, false, r2); r2 < o2; r2++)
      if (n2(this.from[r2] + t2, this.to[r2] + t2, this.value[r2]) === false)
        return false;
  }
  map(t2, e2) {
    let i2 = [], n2 = [], r2 = [], o2 = -1, l2 = -1;
    for (let h2 = 0; h2 < this.value.length; h2++) {
      let a2 = this.value[h2], c2 = this.from[h2] + t2, f2 = this.to[h2] + t2, u2, d2;
      if (c2 == f2) {
        let p2 = e2.mapPos(c2, a2.startSide, a2.mapMode);
        if (p2 == null || (u2 = d2 = p2, a2.startSide != a2.endSide && (d2 = e2.mapPos(c2, a2.endSide), d2 < u2)))
          continue;
      } else if (u2 = e2.mapPos(c2, a2.startSide), d2 = e2.mapPos(f2, a2.endSide), u2 > d2 || u2 == d2 && a2.startSide > 0 && a2.endSide <= 0)
        continue;
      (d2 - u2 || a2.endSide - a2.startSide) < 0 || (o2 < 0 && (o2 = u2), a2.point && (l2 = Math.max(l2, d2 - u2)), i2.push(a2), n2.push(u2 - o2), r2.push(d2 - o2));
    }
    return { mapped: i2.length ? new qs(n2, r2, i2, l2) : null, pos: o2 };
  }
}
class $ {
  constructor(t2, e2, i2, n2) {
    this.chunkPos = t2, this.chunk = e2, this.nextLayer = i2, this.maxPoint = n2;
  }
  static create(t2, e2, i2, n2) {
    return new $(t2, e2, i2, n2);
  }
  get length() {
    let t2 = this.chunk.length - 1;
    return t2 < 0 ? 0 : Math.max(this.chunkEnd(t2), this.nextLayer.length);
  }
  get size() {
    if (this.isEmpty)
      return 0;
    let t2 = this.nextLayer.size;
    for (let e2 of this.chunk)
      t2 += e2.value.length;
    return t2;
  }
  chunkEnd(t2) {
    return this.chunkPos[t2] + this.chunk[t2].length;
  }
  update(t2) {
    let { add: e2 = [], sort: i2 = false, filterFrom: n2 = 0, filterTo: r2 = this.length } = t2, o2 = t2.filter;
    if (e2.length == 0 && !o2)
      return this;
    if (i2 && (e2 = e2.slice().sort(cs)), this.isEmpty)
      return e2.length ? $.of(e2) : this;
    let l2 = new pl(this, null, -1).goto(0), h2 = 0, a2 = [], c2 = new De();
    for (; l2.value || h2 < e2.length; )
      if (h2 < e2.length && (l2.from - e2[h2].from || l2.startSide - e2[h2].value.startSide) >= 0) {
        let f2 = e2[h2++];
        c2.addInner(f2.from, f2.to, f2.value) || a2.push(f2);
      } else
        l2.rangeIndex == 1 && l2.chunkIndex < this.chunk.length && (h2 == e2.length || this.chunkEnd(l2.chunkIndex) < e2[h2].from) && (!o2 || n2 > this.chunkEnd(l2.chunkIndex) || r2 < this.chunkPos[l2.chunkIndex]) && c2.addChunk(this.chunkPos[l2.chunkIndex], this.chunk[l2.chunkIndex]) ? l2.nextChunk() : ((!o2 || n2 > l2.to || r2 < l2.from || o2(l2.from, l2.to, l2.value)) && (c2.addInner(l2.from, l2.to, l2.value) || a2.push(as.create(l2.from, l2.to, l2.value))), l2.next());
    return c2.finishInner(this.nextLayer.isEmpty && !a2.length ? $.empty : this.nextLayer.update({ add: a2, filter: o2, filterFrom: n2, filterTo: r2 }));
  }
  map(t2) {
    if (t2.empty || this.isEmpty)
      return this;
    let e2 = [], i2 = [], n2 = -1;
    for (let o2 = 0; o2 < this.chunk.length; o2++) {
      let l2 = this.chunkPos[o2], h2 = this.chunk[o2], a2 = t2.touchesRange(l2, l2 + h2.length);
      if (a2 === false)
        n2 = Math.max(n2, h2.maxPoint), e2.push(h2), i2.push(t2.mapPos(l2));
      else if (a2 === true) {
        let { mapped: c2, pos: f2 } = h2.map(l2, t2);
        c2 && (n2 = Math.max(n2, c2.maxPoint), e2.push(c2), i2.push(f2));
      }
    }
    let r2 = this.nextLayer.map(t2);
    return e2.length == 0 ? r2 : new $(i2, e2, r2 || $.empty, n2);
  }
  between(t2, e2, i2) {
    if (!this.isEmpty) {
      for (let n2 = 0; n2 < this.chunk.length; n2++) {
        let r2 = this.chunkPos[n2], o2 = this.chunk[n2];
        if (e2 >= r2 && t2 <= r2 + o2.length && o2.between(r2, t2 - r2, e2 - r2, i2) === false)
          return;
      }
      this.nextLayer.between(t2, e2, i2);
    }
  }
  iter(t2 = 0) {
    return fi.from([this]).goto(t2);
  }
  get isEmpty() {
    return this.nextLayer == this;
  }
  static iter(t2, e2 = 0) {
    return fi.from(t2).goto(e2);
  }
  static compare(t2, e2, i2, n2, r2 = -1) {
    let o2 = t2.filter((f2) => f2.maxPoint > 0 || !f2.isEmpty && f2.maxPoint >= r2), l2 = e2.filter((f2) => f2.maxPoint > 0 || !f2.isEmpty && f2.maxPoint >= r2), h2 = yr(o2, l2, i2), a2 = new ti(o2, h2, r2), c2 = new ti(l2, h2, r2);
    i2.iterGaps((f2, u2, d2) => br(a2, f2, c2, u2, d2, n2)), i2.empty && i2.length == 0 && br(a2, 0, c2, 0, 0, n2);
  }
  static eq(t2, e2, i2 = 0, n2) {
    n2 == null && (n2 = 1e9 - 1);
    let r2 = t2.filter((c2) => !c2.isEmpty && e2.indexOf(c2) < 0), o2 = e2.filter((c2) => !c2.isEmpty && t2.indexOf(c2) < 0);
    if (r2.length != o2.length)
      return false;
    if (!r2.length)
      return true;
    let l2 = yr(r2, o2), h2 = new ti(r2, l2, 0).goto(i2), a2 = new ti(o2, l2, 0).goto(i2);
    for (; ; ) {
      if (h2.to != a2.to || !fs(h2.active, a2.active) || h2.point && (!a2.point || !h2.point.eq(a2.point)))
        return false;
      if (h2.to > n2)
        return true;
      h2.next(), a2.next();
    }
  }
  static spans(t2, e2, i2, n2, r2 = -1) {
    let o2 = new ti(t2, null, r2).goto(e2), l2 = e2, h2 = o2.openStart;
    for (; ; ) {
      let a2 = Math.min(o2.to, i2);
      if (o2.point) {
        let c2 = o2.activeForPoint(o2.to), f2 = o2.pointFrom < e2 ? c2.length + 1 : Math.min(c2.length, h2);
        n2.point(l2, a2, o2.point, c2, f2, o2.pointRank), h2 = Math.min(o2.openEnd(a2), c2.length);
      } else
        a2 > l2 && (n2.span(l2, a2, o2.active, h2), h2 = o2.openEnd(a2));
      if (o2.to > i2)
        return h2 + (o2.point && o2.to > i2 ? 1 : 0);
      l2 = o2.to, o2.next();
    }
  }
  static of(t2, e2 = false) {
    let i2 = new De();
    for (let n2 of t2 instanceof as ? [t2] : e2 ? zc(t2) : t2)
      i2.add(n2.from, n2.to, n2.value);
    return i2.finish();
  }
}
$.empty = /* @__PURE__ */ new $([], [], null, -1);
function zc(s) {
  if (s.length > 1)
    for (let t2 = s[0], e2 = 1; e2 < s.length; e2++) {
      let i2 = s[e2];
      if (cs(t2, i2) > 0)
        return s.slice().sort(cs);
      t2 = i2;
    }
  return s;
}
$.empty.nextLayer = $.empty;
class De {
  constructor() {
    this.chunks = [], this.chunkPos = [], this.chunkStart = -1, this.last = null, this.lastFrom = -1e9, this.lastTo = -1e9, this.from = [], this.to = [], this.value = [], this.maxPoint = -1, this.setMaxPoint = -1, this.nextLayer = null;
  }
  finishChunk(t2) {
    this.chunks.push(new qs(this.from, this.to, this.value, this.maxPoint)), this.chunkPos.push(this.chunkStart), this.chunkStart = -1, this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint), this.maxPoint = -1, t2 && (this.from = [], this.to = [], this.value = []);
  }
  add(t2, e2, i2) {
    this.addInner(t2, e2, i2) || (this.nextLayer || (this.nextLayer = new De())).add(t2, e2, i2);
  }
  addInner(t2, e2, i2) {
    let n2 = t2 - this.lastTo || i2.startSide - this.last.endSide;
    if (n2 <= 0 && (t2 - this.lastFrom || i2.startSide - this.last.startSide) < 0)
      throw new Error("Ranges must be added sorted by `from` position and `startSide`");
    return n2 < 0 ? false : (this.from.length == 250 && this.finishChunk(true), this.chunkStart < 0 && (this.chunkStart = t2), this.from.push(t2 - this.chunkStart), this.to.push(e2 - this.chunkStart), this.last = i2, this.lastFrom = t2, this.lastTo = e2, this.value.push(i2), i2.point && (this.maxPoint = Math.max(this.maxPoint, e2 - t2)), true);
  }
  addChunk(t2, e2) {
    if ((t2 - this.lastTo || e2.value[0].startSide - this.last.endSide) < 0)
      return false;
    this.from.length && this.finishChunk(true), this.setMaxPoint = Math.max(this.setMaxPoint, e2.maxPoint), this.chunks.push(e2), this.chunkPos.push(t2);
    let i2 = e2.value.length - 1;
    return this.last = e2.value[i2], this.lastFrom = e2.from[i2] + t2, this.lastTo = e2.to[i2] + t2, true;
  }
  finish() {
    return this.finishInner($.empty);
  }
  finishInner(t2) {
    if (this.from.length && this.finishChunk(false), this.chunks.length == 0)
      return t2;
    let e2 = $.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(t2) : t2, this.setMaxPoint);
    return this.from = null, e2;
  }
}
function yr(s, t2, e2) {
  let i2 = /* @__PURE__ */ new Map();
  for (let r2 of s)
    for (let o2 = 0; o2 < r2.chunk.length; o2++)
      r2.chunk[o2].maxPoint <= 0 && i2.set(r2.chunk[o2], r2.chunkPos[o2]);
  let n2 = /* @__PURE__ */ new Set();
  for (let r2 of t2)
    for (let o2 = 0; o2 < r2.chunk.length; o2++) {
      let l2 = i2.get(r2.chunk[o2]);
      l2 != null && (e2 ? e2.mapPos(l2) : l2) == r2.chunkPos[o2] && !(e2 != null && e2.touchesRange(l2, l2 + r2.chunk[o2].length)) && n2.add(r2.chunk[o2]);
    }
  return n2;
}
class pl {
  constructor(t2, e2, i2, n2 = 0) {
    this.layer = t2, this.skip = e2, this.minPoint = i2, this.rank = n2;
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  get endSide() {
    return this.value ? this.value.endSide : 0;
  }
  goto(t2, e2 = -1e9) {
    return this.chunkIndex = this.rangeIndex = 0, this.gotoInner(t2, e2, false), this;
  }
  gotoInner(t2, e2, i2) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let n2 = this.layer.chunk[this.chunkIndex];
      if (!(this.skip && this.skip.has(n2) || this.layer.chunkEnd(this.chunkIndex) < t2 || n2.maxPoint < this.minPoint))
        break;
      this.chunkIndex++, i2 = false;
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let n2 = this.layer.chunk[this.chunkIndex].findIndex(t2 - this.layer.chunkPos[this.chunkIndex], e2, true);
      (!i2 || this.rangeIndex < n2) && this.setRangeIndex(n2);
    }
    this.next();
  }
  forward(t2, e2) {
    (this.to - t2 || this.endSide - e2) < 0 && this.gotoInner(t2, e2, true);
  }
  next() {
    for (; ; )
      if (this.chunkIndex == this.layer.chunk.length) {
        this.from = this.to = 1e9, this.value = null;
        break;
      } else {
        let t2 = this.layer.chunkPos[this.chunkIndex], e2 = this.layer.chunk[this.chunkIndex], i2 = t2 + e2.from[this.rangeIndex];
        if (this.from = i2, this.to = t2 + e2.to[this.rangeIndex], this.value = e2.value[this.rangeIndex], this.setRangeIndex(this.rangeIndex + 1), this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
          break;
      }
  }
  setRangeIndex(t2) {
    if (t2 == this.layer.chunk[this.chunkIndex].value.length) {
      if (this.chunkIndex++, this.skip)
        for (; this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]); )
          this.chunkIndex++;
      this.rangeIndex = 0;
    } else
      this.rangeIndex = t2;
  }
  nextChunk() {
    this.chunkIndex++, this.rangeIndex = 0, this.next();
  }
  compare(t2) {
    return this.from - t2.from || this.startSide - t2.startSide || this.rank - t2.rank || this.to - t2.to || this.endSide - t2.endSide;
  }
}
class fi {
  constructor(t2) {
    this.heap = t2;
  }
  static from(t2, e2 = null, i2 = -1) {
    let n2 = [];
    for (let r2 = 0; r2 < t2.length; r2++)
      for (let o2 = t2[r2]; !o2.isEmpty; o2 = o2.nextLayer)
        o2.maxPoint >= i2 && n2.push(new pl(o2, e2, i2, r2));
    return n2.length == 1 ? n2[0] : new fi(n2);
  }
  get startSide() {
    return this.value ? this.value.startSide : 0;
  }
  goto(t2, e2 = -1e9) {
    for (let i2 of this.heap)
      i2.goto(t2, e2);
    for (let i2 = this.heap.length >> 1; i2 >= 0; i2--)
      Nn(this.heap, i2);
    return this.next(), this;
  }
  forward(t2, e2) {
    for (let i2 of this.heap)
      i2.forward(t2, e2);
    for (let i2 = this.heap.length >> 1; i2 >= 0; i2--)
      Nn(this.heap, i2);
    (this.to - t2 || this.value.endSide - e2) < 0 && this.next();
  }
  next() {
    if (this.heap.length == 0)
      this.from = this.to = 1e9, this.value = null, this.rank = -1;
    else {
      let t2 = this.heap[0];
      this.from = t2.from, this.to = t2.to, this.value = t2.value, this.rank = t2.rank, t2.value && t2.next(), Nn(this.heap, 0);
    }
  }
}
function Nn(s, t2) {
  for (let e2 = s[t2]; ; ) {
    let i2 = (t2 << 1) + 1;
    if (i2 >= s.length)
      break;
    let n2 = s[i2];
    if (i2 + 1 < s.length && n2.compare(s[i2 + 1]) >= 0 && (n2 = s[i2 + 1], i2++), e2.compare(n2) < 0)
      break;
    s[i2] = e2, s[t2] = n2, t2 = i2;
  }
}
class ti {
  constructor(t2, e2, i2) {
    this.minPoint = i2, this.active = [], this.activeTo = [], this.activeRank = [], this.minActive = -1, this.point = null, this.pointFrom = 0, this.pointRank = 0, this.to = -1e9, this.endSide = 0, this.openStart = -1, this.cursor = fi.from(t2, e2, i2);
  }
  goto(t2, e2 = -1e9) {
    return this.cursor.goto(t2, e2), this.active.length = this.activeTo.length = this.activeRank.length = 0, this.minActive = -1, this.to = t2, this.endSide = e2, this.openStart = -1, this.next(), this;
  }
  forward(t2, e2) {
    for (; this.minActive > -1 && (this.activeTo[this.minActive] - t2 || this.active[this.minActive].endSide - e2) < 0; )
      this.removeActive(this.minActive);
    this.cursor.forward(t2, e2);
  }
  removeActive(t2) {
    Ci(this.active, t2), Ci(this.activeTo, t2), Ci(this.activeRank, t2), this.minActive = kr(this.active, this.activeTo);
  }
  addActive(t2) {
    let e2 = 0, { value: i2, to: n2, rank: r2 } = this.cursor;
    for (; e2 < this.activeRank.length && this.activeRank[e2] <= r2; )
      e2++;
    Ai(this.active, e2, i2), Ai(this.activeTo, e2, n2), Ai(this.activeRank, e2, r2), t2 && Ai(t2, e2, this.cursor.from), this.minActive = kr(this.active, this.activeTo);
  }
  next() {
    let t2 = this.to, e2 = this.point;
    this.point = null;
    let i2 = this.openStart < 0 ? [] : null;
    for (; ; ) {
      let n2 = this.minActive;
      if (n2 > -1 && (this.activeTo[n2] - this.cursor.from || this.active[n2].endSide - this.cursor.startSide) < 0) {
        if (this.activeTo[n2] > t2) {
          this.to = this.activeTo[n2], this.endSide = this.active[n2].endSide;
          break;
        }
        this.removeActive(n2), i2 && Ci(i2, n2);
      } else if (this.cursor.value)
        if (this.cursor.from > t2) {
          this.to = this.cursor.from, this.endSide = this.cursor.startSide;
          break;
        } else {
          let r2 = this.cursor.value;
          if (!r2.point)
            this.addActive(i2), this.cursor.next();
          else if (e2 && this.cursor.to == this.to && this.cursor.from < this.cursor.to)
            this.cursor.next();
          else {
            this.point = r2, this.pointFrom = this.cursor.from, this.pointRank = this.cursor.rank, this.to = this.cursor.to, this.endSide = r2.endSide, this.cursor.next(), this.forward(this.to, this.endSide);
            break;
          }
        }
      else {
        this.to = this.endSide = 1e9;
        break;
      }
    }
    if (i2) {
      this.openStart = 0;
      for (let n2 = i2.length - 1; n2 >= 0 && i2[n2] < t2; n2--)
        this.openStart++;
    }
  }
  activeForPoint(t2) {
    if (!this.active.length)
      return this.active;
    let e2 = [];
    for (let i2 = this.active.length - 1; i2 >= 0 && !(this.activeRank[i2] < this.pointRank); i2--)
      (this.activeTo[i2] > t2 || this.activeTo[i2] == t2 && this.active[i2].endSide >= this.point.endSide) && e2.push(this.active[i2]);
    return e2.reverse();
  }
  openEnd(t2) {
    let e2 = 0;
    for (let i2 = this.activeTo.length - 1; i2 >= 0 && this.activeTo[i2] > t2; i2--)
      e2++;
    return e2;
  }
}
function br(s, t2, e2, i2, n2, r2) {
  s.goto(t2), e2.goto(i2);
  let o2 = i2 + n2, l2 = i2, h2 = i2 - t2;
  for (; ; ) {
    let a2 = s.to + h2 - e2.to || s.endSide - e2.endSide, c2 = a2 < 0 ? s.to + h2 : e2.to, f2 = Math.min(c2, o2);
    if (s.point || e2.point ? s.point && e2.point && (s.point == e2.point || s.point.eq(e2.point)) && fs(s.activeForPoint(s.to + h2), e2.activeForPoint(e2.to)) || r2.comparePoint(l2, f2, s.point, e2.point) : f2 > l2 && !fs(s.active, e2.active) && r2.compareRange(l2, f2, s.active, e2.active), c2 > o2)
      break;
    l2 = c2, a2 <= 0 && s.next(), a2 >= 0 && e2.next();
  }
}
function fs(s, t2) {
  if (s.length != t2.length)
    return false;
  for (let e2 = 0; e2 < s.length; e2++)
    if (s[e2] != t2[e2] && !s[e2].eq(t2[e2]))
      return false;
  return true;
}
function Ci(s, t2) {
  for (let e2 = t2, i2 = s.length - 1; e2 < i2; e2++)
    s[e2] = s[e2 + 1];
  s.pop();
}
function Ai(s, t2, e2) {
  for (let i2 = s.length - 1; i2 >= t2; i2--)
    s[i2 + 1] = s[i2];
  s[t2] = e2;
}
function kr(s, t2) {
  let e2 = -1, i2 = 1e9;
  for (let n2 = 0; n2 < t2.length; n2++)
    (t2[n2] - i2 || s[n2].endSide - s[e2].endSide) < 0 && (e2 = n2, i2 = t2[n2]);
  return e2;
}
function Cn(s, t2, e2 = s.length) {
  let i2 = 0;
  for (let n2 = 0; n2 < e2; )
    s.charCodeAt(n2) == 9 ? (i2 += t2 - i2 % t2, n2++) : (i2++, n2 = xt(s, n2));
  return i2;
}
function _c(s, t2, e2, i2) {
  for (let n2 = 0, r2 = 0; ; ) {
    if (r2 >= t2)
      return n2;
    if (n2 == s.length)
      break;
    r2 += s.charCodeAt(n2) == 9 ? e2 - r2 % e2 : 1, n2 = xt(s, n2);
  }
  return i2 === true ? -1 : s.length;
}
const us = "\u037C", xr = typeof Symbol > "u" ? "__" + us : Symbol.for(us), ds = typeof Symbol > "u" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet"), vr = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : {};
class de {
  constructor(t2, e2) {
    this.rules = [];
    let { finish: i2 } = e2 || {};
    function n2(o2) {
      return /^@/.test(o2) ? [o2] : o2.split(/,\s*/);
    }
    function r2(o2, l2, h2, a2) {
      let c2 = [], f2 = /^@(\w+)\b/.exec(o2[0]), u2 = f2 && f2[1] == "keyframes";
      if (f2 && l2 == null)
        return h2.push(o2[0] + ";");
      for (let d2 in l2) {
        let p2 = l2[d2];
        if (/&/.test(d2))
          r2(
            d2.split(/,\s*/).map((w) => o2.map((g2) => w.replace(/&/, g2))).reduce((w, g2) => w.concat(g2)),
            p2,
            h2
          );
        else if (p2 && typeof p2 == "object") {
          if (!f2)
            throw new RangeError("The value of a property (" + d2 + ") should be a primitive value.");
          r2(n2(d2), p2, c2, u2);
        } else
          p2 != null && c2.push(d2.replace(/_.*/, "").replace(/[A-Z]/g, (w) => "-" + w.toLowerCase()) + ": " + p2 + ";");
      }
      (c2.length || u2) && h2.push((i2 && !f2 && !a2 ? o2.map(i2) : o2).join(", ") + " {" + c2.join(" ") + "}");
    }
    for (let o2 in t2)
      r2(n2(o2), t2[o2], this.rules);
  }
  getRules() {
    return this.rules.join(`
`);
  }
  static newName() {
    let t2 = vr[xr] || 1;
    return vr[xr] = t2 + 1, us + t2.toString(36);
  }
  static mount(t2, e2) {
    (t2[ds] || new Wc(t2)).mount(Array.isArray(e2) ? e2 : [e2]);
  }
}
let Oi = null;
class Wc {
  constructor(t2) {
    if (!t2.head && t2.adoptedStyleSheets && typeof CSSStyleSheet < "u") {
      if (Oi)
        return t2.adoptedStyleSheets = [Oi.sheet].concat(t2.adoptedStyleSheets), t2[ds] = Oi;
      this.sheet = new CSSStyleSheet(), t2.adoptedStyleSheets = [this.sheet].concat(t2.adoptedStyleSheets), Oi = this;
    } else {
      this.styleTag = (t2.ownerDocument || t2).createElement("style");
      let e2 = t2.head || t2;
      e2.insertBefore(this.styleTag, e2.firstChild);
    }
    this.modules = [], t2[ds] = this;
  }
  mount(t2) {
    let e2 = this.sheet, i2 = 0, n2 = 0;
    for (let r2 = 0; r2 < t2.length; r2++) {
      let o2 = t2[r2], l2 = this.modules.indexOf(o2);
      if (l2 < n2 && l2 > -1 && (this.modules.splice(l2, 1), n2--, l2 = -1), l2 == -1) {
        if (this.modules.splice(n2++, 0, o2), e2)
          for (let h2 = 0; h2 < o2.rules.length; h2++)
            e2.insertRule(o2.rules[h2], i2++);
      } else {
        for (; n2 < l2; )
          i2 += this.modules[n2++].rules.length;
        i2 += o2.rules.length, n2++;
      }
    }
    if (!e2) {
      let r2 = "";
      for (let o2 = 0; o2 < this.modules.length; o2++)
        r2 += this.modules[o2].getRules() + `
`;
      this.styleTag.textContent = r2;
    }
  }
}
var pe = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, ui = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, Sr = typeof navigator < "u" && /Chrome\/(\d+)/.exec(navigator.userAgent), jc = typeof navigator < "u" && /Mac/.test(navigator.platform), qc = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent), Kc = jc || Sr && +Sr[1] < 57;
for (var nt = 0; nt < 10; nt++)
  pe[48 + nt] = pe[96 + nt] = String(nt);
for (var nt = 1; nt <= 24; nt++)
  pe[nt + 111] = "F" + nt;
for (var nt = 65; nt <= 90; nt++)
  pe[nt] = String.fromCharCode(nt + 32), ui[nt] = String.fromCharCode(nt);
for (var Vn in pe)
  ui.hasOwnProperty(Vn) || (ui[Vn] = pe[Vn]);
function Gc(s) {
  var t2 = Kc && (s.ctrlKey || s.altKey || s.metaKey) || qc && s.shiftKey && s.key && s.key.length == 1 || s.key == "Unidentified", e2 = !t2 && s.key || (s.shiftKey ? ui : pe)[s.keyCode] || s.key || "Unidentified";
  return e2 == "Esc" && (e2 = "Escape"), e2 == "Del" && (e2 = "Delete"), e2 == "Left" && (e2 = "ArrowLeft"), e2 == "Up" && (e2 = "ArrowUp"), e2 == "Right" && (e2 = "ArrowRight"), e2 == "Down" && (e2 = "ArrowDown"), e2;
}
function en(s) {
  let t2;
  return s.nodeType == 11 ? t2 = s.getSelection ? s : s.ownerDocument : t2 = s, t2.getSelection();
}
function qe(s, t2) {
  return t2 ? s == t2 || s.contains(t2.nodeType != 1 ? t2.parentNode : t2) : false;
}
function Uc(s) {
  let t2 = s.activeElement;
  for (; t2 && t2.shadowRoot; )
    t2 = t2.shadowRoot.activeElement;
  return t2;
}
function ji(s, t2) {
  if (!t2.anchorNode)
    return false;
  try {
    return qe(s, t2.anchorNode);
  } catch {
    return false;
  }
}
function di(s) {
  return s.nodeType == 3 ? Ke(s, 0, s.nodeValue.length).getClientRects() : s.nodeType == 1 ? s.getClientRects() : [];
}
function nn(s, t2, e2, i2) {
  return e2 ? Cr(s, t2, e2, i2, -1) || Cr(s, t2, e2, i2, 1) : false;
}
function sn(s) {
  for (var t2 = 0; ; t2++)
    if (s = s.previousSibling, !s)
      return t2;
}
function Cr(s, t2, e2, i2, n2) {
  for (; ; ) {
    if (s == e2 && t2 == i2)
      return true;
    if (t2 == (n2 < 0 ? 0 : pi(s))) {
      if (s.nodeName == "DIV")
        return false;
      let r2 = s.parentNode;
      if (!r2 || r2.nodeType != 1)
        return false;
      t2 = sn(s) + (n2 < 0 ? 0 : 1), s = r2;
    } else if (s.nodeType == 1) {
      if (s = s.childNodes[t2 + (n2 < 0 ? -1 : 0)], s.nodeType == 1 && s.contentEditable == "false")
        return false;
      t2 = n2 < 0 ? pi(s) : 0;
    } else
      return false;
  }
}
function pi(s) {
  return s.nodeType == 3 ? s.nodeValue.length : s.childNodes.length;
}
const gl = { left: 0, right: 0, top: 0, bottom: 0 };
function Ks(s, t2) {
  let e2 = t2 ? s.left : s.right;
  return { left: e2, right: e2, top: s.top, bottom: s.bottom };
}
function Qc(s) {
  return {
    left: 0,
    right: s.innerWidth,
    top: 0,
    bottom: s.innerHeight
  };
}
function Jc(s, t2, e2, i2, n2, r2, o2, l2) {
  let h2 = s.ownerDocument, a2 = h2.defaultView || window;
  for (let c2 = s; c2; )
    if (c2.nodeType == 1) {
      let f2, u2 = c2 == h2.body;
      if (u2)
        f2 = Qc(a2);
      else {
        if (c2.scrollHeight <= c2.clientHeight && c2.scrollWidth <= c2.clientWidth) {
          c2 = c2.assignedSlot || c2.parentNode;
          continue;
        }
        let w = c2.getBoundingClientRect();
        f2 = {
          left: w.left,
          right: w.left + c2.clientWidth,
          top: w.top,
          bottom: w.top + c2.clientHeight
        };
      }
      let d2 = 0, p2 = 0;
      if (n2 == "nearest")
        t2.top < f2.top ? (p2 = -(f2.top - t2.top + o2), e2 > 0 && t2.bottom > f2.bottom + p2 && (p2 = t2.bottom - f2.bottom + p2 + o2)) : t2.bottom > f2.bottom && (p2 = t2.bottom - f2.bottom + o2, e2 < 0 && t2.top - p2 < f2.top && (p2 = -(f2.top + p2 - t2.top + o2)));
      else {
        let w = t2.bottom - t2.top, g2 = f2.bottom - f2.top;
        p2 = (n2 == "center" && w <= g2 ? t2.top + w / 2 - g2 / 2 : n2 == "start" || n2 == "center" && e2 < 0 ? t2.top - o2 : t2.bottom - g2 + o2) - f2.top;
      }
      if (i2 == "nearest" ? t2.left < f2.left ? (d2 = -(f2.left - t2.left + r2), e2 > 0 && t2.right > f2.right + d2 && (d2 = t2.right - f2.right + d2 + r2)) : t2.right > f2.right && (d2 = t2.right - f2.right + r2, e2 < 0 && t2.left < f2.left + d2 && (d2 = -(f2.left + d2 - t2.left + r2))) : d2 = (i2 == "center" ? t2.left + (t2.right - t2.left) / 2 - (f2.right - f2.left) / 2 : i2 == "start" == l2 ? t2.left - r2 : t2.right - (f2.right - f2.left) + r2) - f2.left, d2 || p2)
        if (u2)
          a2.scrollBy(d2, p2);
        else {
          let w = 0, g2 = 0;
          if (p2) {
            let y = c2.scrollTop;
            c2.scrollTop += p2, g2 = c2.scrollTop - y;
          }
          if (d2) {
            let y = c2.scrollLeft;
            c2.scrollLeft += d2, w = c2.scrollLeft - y;
          }
          t2 = {
            left: t2.left - w,
            top: t2.top - g2,
            right: t2.right - w,
            bottom: t2.bottom - g2
          }, w && Math.abs(w - d2) < 1 && (i2 = "nearest"), g2 && Math.abs(g2 - p2) < 1 && (n2 = "nearest");
        }
      if (u2)
        break;
      c2 = c2.assignedSlot || c2.parentNode;
    } else if (c2.nodeType == 11)
      c2 = c2.host;
    else
      break;
}
function Xc(s) {
  let t2 = s.ownerDocument;
  for (let e2 = s.parentNode; e2 && e2 != t2.body; )
    if (e2.nodeType == 1) {
      if (e2.scrollHeight > e2.clientHeight || e2.scrollWidth > e2.clientWidth)
        return e2;
      e2 = e2.assignedSlot || e2.parentNode;
    } else if (e2.nodeType == 11)
      e2 = e2.host;
    else
      break;
  return null;
}
class Yc {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  eq(t2) {
    return this.anchorNode == t2.anchorNode && this.anchorOffset == t2.anchorOffset && this.focusNode == t2.focusNode && this.focusOffset == t2.focusOffset;
  }
  setRange(t2) {
    this.set(t2.anchorNode, t2.anchorOffset, t2.focusNode, t2.focusOffset);
  }
  set(t2, e2, i2, n2) {
    this.anchorNode = t2, this.anchorOffset = e2, this.focusNode = i2, this.focusOffset = n2;
  }
}
let Ne = null;
function ml(s) {
  if (s.setActive)
    return s.setActive();
  if (Ne)
    return s.focus(Ne);
  let t2 = [];
  for (let e2 = s; e2 && (t2.push(e2, e2.scrollTop, e2.scrollLeft), e2 != e2.ownerDocument); e2 = e2.parentNode)
    ;
  if (s.focus(Ne == null ? {
    get preventScroll() {
      return Ne = { preventScroll: true }, true;
    }
  } : void 0), !Ne) {
    Ne = false;
    for (let e2 = 0; e2 < t2.length; ) {
      let i2 = t2[e2++], n2 = t2[e2++], r2 = t2[e2++];
      i2.scrollTop != n2 && (i2.scrollTop = n2), i2.scrollLeft != r2 && (i2.scrollLeft = r2);
    }
  }
}
let Ar;
function Ke(s, t2, e2 = t2) {
  let i2 = Ar || (Ar = document.createRange());
  return i2.setEnd(s, e2), i2.setStart(s, t2), i2;
}
function $e(s, t2, e2) {
  let i2 = { key: t2, code: t2, keyCode: e2, which: e2, cancelable: true }, n2 = new KeyboardEvent("keydown", i2);
  n2.synthetic = true, s.dispatchEvent(n2);
  let r2 = new KeyboardEvent("keyup", i2);
  return r2.synthetic = true, s.dispatchEvent(r2), n2.defaultPrevented || r2.defaultPrevented;
}
function Zc(s) {
  for (; s; ) {
    if (s && (s.nodeType == 9 || s.nodeType == 11 && s.host))
      return s;
    s = s.assignedSlot || s.parentNode;
  }
  return null;
}
function wl(s) {
  for (; s.attributes.length; )
    s.removeAttributeNode(s.attributes[0]);
}
function tf(s, t2) {
  let e2 = t2.focusNode, i2 = t2.focusOffset;
  if (!e2 || t2.anchorNode != e2 || t2.anchorOffset != i2)
    return false;
  for (; ; )
    if (i2) {
      if (e2.nodeType != 1)
        return false;
      let n2 = e2.childNodes[i2 - 1];
      n2.contentEditable == "false" ? i2-- : (e2 = n2, i2 = pi(e2));
    } else {
      if (e2 == s)
        return true;
      i2 = sn(e2), e2 = e2.parentNode;
    }
}
class ht {
  constructor(t2, e2, i2 = true) {
    this.node = t2, this.offset = e2, this.precise = i2;
  }
  static before(t2, e2) {
    return new ht(t2.parentNode, sn(t2), e2);
  }
  static after(t2, e2) {
    return new ht(t2.parentNode, sn(t2) + 1, e2);
  }
}
const Gs = [];
class W {
  constructor() {
    this.parent = null, this.dom = null, this.dirty = 2;
  }
  get editorView() {
    if (!this.parent)
      throw new Error("Accessing view in orphan content view");
    return this.parent.editorView;
  }
  get overrideDOMText() {
    return null;
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0;
  }
  get posAtEnd() {
    return this.posAtStart + this.length;
  }
  posBefore(t2) {
    let e2 = this.posAtStart;
    for (let i2 of this.children) {
      if (i2 == t2)
        return e2;
      e2 += i2.length + i2.breakAfter;
    }
    throw new RangeError("Invalid child in posBefore");
  }
  posAfter(t2) {
    return this.posBefore(t2) + t2.length;
  }
  coordsAt(t2, e2) {
    return null;
  }
  sync(t2) {
    if (this.dirty & 2) {
      let e2 = this.dom, i2 = null, n2;
      for (let r2 of this.children) {
        if (r2.dirty) {
          if (!r2.dom && (n2 = i2 ? i2.nextSibling : e2.firstChild)) {
            let o2 = W.get(n2);
            (!o2 || !o2.parent && o2.canReuseDOM(r2)) && r2.reuseDOM(n2);
          }
          r2.sync(t2), r2.dirty = 0;
        }
        if (n2 = i2 ? i2.nextSibling : e2.firstChild, t2 && !t2.written && t2.node == e2 && n2 != r2.dom && (t2.written = true), r2.dom.parentNode == e2)
          for (; n2 && n2 != r2.dom; )
            n2 = Or(n2);
        else
          e2.insertBefore(r2.dom, n2);
        i2 = r2.dom;
      }
      for (n2 = i2 ? i2.nextSibling : e2.firstChild, n2 && t2 && t2.node == e2 && (t2.written = true); n2; )
        n2 = Or(n2);
    } else if (this.dirty & 1)
      for (let e2 of this.children)
        e2.dirty && (e2.sync(t2), e2.dirty = 0);
  }
  reuseDOM(t2) {
  }
  localPosFromDOM(t2, e2) {
    let i2;
    if (t2 == this.dom)
      i2 = this.dom.childNodes[e2];
    else {
      let n2 = pi(t2) == 0 ? 0 : e2 == 0 ? -1 : 1;
      for (; ; ) {
        let r2 = t2.parentNode;
        if (r2 == this.dom)
          break;
        n2 == 0 && r2.firstChild != r2.lastChild && (t2 == r2.firstChild ? n2 = -1 : n2 = 1), t2 = r2;
      }
      n2 < 0 ? i2 = t2 : i2 = t2.nextSibling;
    }
    if (i2 == this.dom.firstChild)
      return 0;
    for (; i2 && !W.get(i2); )
      i2 = i2.nextSibling;
    if (!i2)
      return this.length;
    for (let n2 = 0, r2 = 0; ; n2++) {
      let o2 = this.children[n2];
      if (o2.dom == i2)
        return r2;
      r2 += o2.length + o2.breakAfter;
    }
  }
  domBoundsAround(t2, e2, i2 = 0) {
    let n2 = -1, r2 = -1, o2 = -1, l2 = -1;
    for (let h2 = 0, a2 = i2, c2 = i2; h2 < this.children.length; h2++) {
      let f2 = this.children[h2], u2 = a2 + f2.length;
      if (a2 < t2 && u2 > e2)
        return f2.domBoundsAround(t2, e2, a2);
      if (u2 >= t2 && n2 == -1 && (n2 = h2, r2 = a2), a2 > e2 && f2.dom.parentNode == this.dom) {
        o2 = h2, l2 = c2;
        break;
      }
      c2 = u2, a2 = u2 + f2.breakAfter;
    }
    return {
      from: r2,
      to: l2 < 0 ? i2 + this.length : l2,
      startDOM: (n2 ? this.children[n2 - 1].dom.nextSibling : null) || this.dom.firstChild,
      endDOM: o2 < this.children.length && o2 >= 0 ? this.children[o2].dom : null
    };
  }
  markDirty(t2 = false) {
    this.dirty |= 2, this.markParentsDirty(t2);
  }
  markParentsDirty(t2) {
    for (let e2 = this.parent; e2; e2 = e2.parent) {
      if (t2 && (e2.dirty |= 2), e2.dirty & 1)
        return;
      e2.dirty |= 1, t2 = false;
    }
  }
  setParent(t2) {
    this.parent != t2 && (this.parent = t2, this.dirty && this.markParentsDirty(true));
  }
  setDOM(t2) {
    this.dom && (this.dom.cmView = null), this.dom = t2, t2.cmView = this;
  }
  get rootView() {
    for (let t2 = this; ; ) {
      let e2 = t2.parent;
      if (!e2)
        return t2;
      t2 = e2;
    }
  }
  replaceChildren(t2, e2, i2 = Gs) {
    this.markDirty();
    for (let n2 = t2; n2 < e2; n2++) {
      let r2 = this.children[n2];
      r2.parent == this && r2.destroy();
    }
    this.children.splice(t2, e2 - t2, ...i2);
    for (let n2 = 0; n2 < i2.length; n2++)
      i2[n2].setParent(this);
  }
  ignoreMutation(t2) {
    return false;
  }
  ignoreEvent(t2) {
    return false;
  }
  childCursor(t2 = this.length) {
    return new yl(this.children, t2, this.children.length);
  }
  childPos(t2, e2 = 1) {
    return this.childCursor().findPos(t2, e2);
  }
  toString() {
    let t2 = this.constructor.name.replace("View", "");
    return t2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (t2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
  }
  static get(t2) {
    return t2.cmView;
  }
  get isEditable() {
    return true;
  }
  merge(t2, e2, i2, n2, r2, o2) {
    return false;
  }
  become(t2) {
    return false;
  }
  canReuseDOM(t2) {
    return t2.constructor == this.constructor;
  }
  getSide() {
    return 0;
  }
  destroy() {
    this.parent = null;
  }
}
W.prototype.breakAfter = 0;
function Or(s) {
  let t2 = s.nextSibling;
  return s.parentNode.removeChild(s), t2;
}
class yl {
  constructor(t2, e2, i2) {
    this.children = t2, this.pos = e2, this.i = i2, this.off = 0;
  }
  findPos(t2, e2 = 1) {
    for (; ; ) {
      if (t2 > this.pos || t2 == this.pos && (e2 > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
        return this.off = t2 - this.pos, this;
      let i2 = this.children[--this.i];
      this.pos -= i2.length + i2.breakAfter;
    }
  }
}
function bl(s, t2, e2, i2, n2, r2, o2, l2, h2) {
  let { children: a2 } = s, c2 = a2.length ? a2[t2] : null, f2 = r2.length ? r2[r2.length - 1] : null, u2 = f2 ? f2.breakAfter : o2;
  if (!(t2 == i2 && c2 && !o2 && !u2 && r2.length < 2 && c2.merge(e2, n2, r2.length ? f2 : null, e2 == 0, l2, h2))) {
    if (i2 < a2.length) {
      let d2 = a2[i2];
      d2 && n2 < d2.length ? (t2 == i2 && (d2 = d2.split(n2), n2 = 0), !u2 && f2 && d2.merge(0, n2, f2, true, 0, h2) ? r2[r2.length - 1] = d2 : (n2 && d2.merge(0, n2, null, false, 0, h2), r2.push(d2))) : d2 != null && d2.breakAfter && (f2 ? f2.breakAfter = 1 : o2 = 1), i2++;
    }
    for (c2 && (c2.breakAfter = o2, e2 > 0 && (!o2 && r2.length && c2.merge(e2, c2.length, r2[0], false, l2, 0) ? c2.breakAfter = r2.shift().breakAfter : (e2 < c2.length || c2.children.length && c2.children[c2.children.length - 1].length == 0) && c2.merge(e2, c2.length, null, false, l2, 0), t2++)); t2 < i2 && r2.length; )
      if (a2[i2 - 1].become(r2[r2.length - 1]))
        i2--, r2.pop(), h2 = r2.length ? 0 : l2;
      else if (a2[t2].become(r2[0]))
        t2++, r2.shift(), l2 = r2.length ? 0 : h2;
      else
        break;
    !r2.length && t2 && i2 < a2.length && !a2[t2 - 1].breakAfter && a2[i2].merge(0, 0, a2[t2 - 1], false, l2, h2) && t2--, (t2 < i2 || r2.length) && s.replaceChildren(t2, i2, r2);
  }
}
function kl(s, t2, e2, i2, n2, r2) {
  let o2 = s.childCursor(), { i: l2, off: h2 } = o2.findPos(e2, 1), { i: a2, off: c2 } = o2.findPos(t2, -1), f2 = t2 - e2;
  for (let u2 of i2)
    f2 += u2.length;
  s.length += f2, bl(s, a2, c2, l2, h2, i2, 0, n2, r2);
}
let kt = typeof navigator < "u" ? navigator : { userAgent: "", vendor: "", platform: "" }, ps = typeof document < "u" ? document : { documentElement: { style: {} } };
const gs = /* @__PURE__ */ /Edge\/(\d+)/.exec(kt.userAgent), xl = /* @__PURE__ */ /MSIE \d/.test(kt.userAgent), ms = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(kt.userAgent), An = !!(xl || ms || gs), Mr = !An && /* @__PURE__ */ /gecko\/(\d+)/i.test(kt.userAgent), In = !An && /* @__PURE__ */ /Chrome\/(\d+)/.exec(kt.userAgent), Dr = "webkitFontSmoothing" in ps.documentElement.style, vl = !An && /* @__PURE__ */ /Apple Computer/.test(kt.vendor), Tr = vl && (/* @__PURE__ */ /Mobile\/\w+/.test(kt.userAgent) || kt.maxTouchPoints > 2);
var x = {
  mac: Tr || /* @__PURE__ */ /Mac/.test(kt.platform),
  windows: /* @__PURE__ */ /Win/.test(kt.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(kt.platform),
  ie: An,
  ie_version: xl ? ps.documentMode || 6 : ms ? +ms[1] : gs ? +gs[1] : 0,
  gecko: Mr,
  gecko_version: Mr ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(kt.userAgent) || [0, 0])[1] : 0,
  chrome: !!In,
  chrome_version: In ? +In[1] : 0,
  ios: Tr,
  android: /* @__PURE__ */ /Android\b/.test(kt.userAgent),
  webkit: Dr,
  safari: vl,
  webkit_version: Dr ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: ps.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
const ef = 256;
class ge extends W {
  constructor(t2) {
    super(), this.text = t2;
  }
  get length() {
    return this.text.length;
  }
  createDOM(t2) {
    this.setDOM(t2 || document.createTextNode(this.text));
  }
  sync(t2) {
    this.dom || this.createDOM(), this.dom.nodeValue != this.text && (t2 && t2.node == this.dom && (t2.written = true), this.dom.nodeValue = this.text);
  }
  reuseDOM(t2) {
    t2.nodeType == 3 && this.createDOM(t2);
  }
  merge(t2, e2, i2) {
    return i2 && (!(i2 instanceof ge) || this.length - (e2 - t2) + i2.length > ef) ? false : (this.text = this.text.slice(0, t2) + (i2 ? i2.text : "") + this.text.slice(e2), this.markDirty(), true);
  }
  split(t2) {
    let e2 = new ge(this.text.slice(t2));
    return this.text = this.text.slice(0, t2), this.markDirty(), e2;
  }
  localPosFromDOM(t2, e2) {
    return t2 == this.dom ? e2 : e2 ? this.text.length : 0;
  }
  domAtPos(t2) {
    return new ht(this.dom, t2);
  }
  domBoundsAround(t2, e2, i2) {
    return { from: i2, to: i2 + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
  }
  coordsAt(t2, e2) {
    return ws(this.dom, t2, e2);
  }
}
class jt extends W {
  constructor(t2, e2 = [], i2 = 0) {
    super(), this.mark = t2, this.children = e2, this.length = i2;
    for (let n2 of e2)
      n2.setParent(this);
  }
  setAttrs(t2) {
    if (wl(t2), this.mark.class && (t2.className = this.mark.class), this.mark.attrs)
      for (let e2 in this.mark.attrs)
        t2.setAttribute(e2, this.mark.attrs[e2]);
    return t2;
  }
  reuseDOM(t2) {
    t2.nodeName == this.mark.tagName.toUpperCase() && (this.setDOM(t2), this.dirty |= 6);
  }
  sync(t2) {
    this.dom ? this.dirty & 4 && this.setAttrs(this.dom) : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))), super.sync(t2);
  }
  merge(t2, e2, i2, n2, r2, o2) {
    return i2 && (!(i2 instanceof jt && i2.mark.eq(this.mark)) || t2 && r2 <= 0 || e2 < this.length && o2 <= 0) ? false : (kl(this, t2, e2, i2 ? i2.children : [], r2 - 1, o2 - 1), this.markDirty(), true);
  }
  split(t2) {
    let e2 = [], i2 = 0, n2 = -1, r2 = 0;
    for (let l2 of this.children) {
      let h2 = i2 + l2.length;
      h2 > t2 && e2.push(i2 < t2 ? l2.split(t2 - i2) : l2), n2 < 0 && i2 >= t2 && (n2 = r2), i2 = h2, r2++;
    }
    let o2 = this.length - t2;
    return this.length = t2, n2 > -1 && (this.children.length = n2, this.markDirty()), new jt(this.mark, e2, o2);
  }
  domAtPos(t2) {
    return Al(this, t2);
  }
  coordsAt(t2, e2) {
    return Ml(this, t2, e2);
  }
}
function ws(s, t2, e2) {
  let i2 = s.nodeValue.length;
  t2 > i2 && (t2 = i2);
  let n2 = t2, r2 = t2, o2 = 0;
  t2 == 0 && e2 < 0 || t2 == i2 && e2 >= 0 ? x.chrome || x.gecko || (t2 ? (n2--, o2 = 1) : r2 < i2 && (r2++, o2 = -1)) : e2 < 0 ? n2-- : r2 < i2 && r2++;
  let l2 = Ke(s, n2, r2).getClientRects();
  if (!l2.length)
    return gl;
  let h2 = l2[(o2 ? o2 < 0 : e2 >= 0) ? 0 : l2.length - 1];
  return x.safari && !o2 && h2.width == 0 && (h2 = Array.prototype.find.call(l2, (a2) => a2.width) || h2), o2 ? Ks(h2, o2 < 0) : h2 || null;
}
class le extends W {
  constructor(t2, e2, i2) {
    super(), this.widget = t2, this.length = e2, this.side = i2, this.prevWidget = null;
  }
  static create(t2, e2, i2) {
    return new (t2.customView || le)(t2, e2, i2);
  }
  split(t2) {
    let e2 = le.create(this.widget, this.length - t2, this.side);
    return this.length -= t2, e2;
  }
  sync() {
    (!this.dom || !this.widget.updateDOM(this.dom)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(this.editorView)), this.dom.contentEditable = "false");
  }
  getSide() {
    return this.side;
  }
  merge(t2, e2, i2, n2, r2, o2) {
    return i2 && (!(i2 instanceof le) || !this.widget.compare(i2.widget) || t2 > 0 && r2 <= 0 || e2 < this.length && o2 <= 0) ? false : (this.length = t2 + (i2 ? i2.length : 0) + (this.length - e2), true);
  }
  become(t2) {
    return t2.length == this.length && t2 instanceof le && t2.side == this.side && this.widget.constructor == t2.widget.constructor ? (this.widget.eq(t2.widget) || this.markDirty(true), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t2.widget, true) : false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(t2) {
    return this.widget.ignoreEvent(t2);
  }
  get overrideDOMText() {
    if (this.length == 0)
      return E.empty;
    let t2 = this;
    for (; t2.parent; )
      t2 = t2.parent;
    let e2 = t2.editorView, i2 = e2 && e2.state.doc, n2 = this.posAtStart;
    return i2 ? i2.slice(n2, n2 + this.length) : E.empty;
  }
  domAtPos(t2) {
    return t2 == 0 ? ht.before(this.dom) : ht.after(this.dom, t2 == this.length);
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(t2, e2) {
    let i2 = this.dom.getClientRects(), n2 = null;
    if (!i2.length)
      return gl;
    for (let r2 = t2 > 0 ? i2.length - 1 : 0; n2 = i2[r2], !(t2 > 0 ? r2 == 0 : r2 == i2.length - 1 || n2.top < n2.bottom); r2 += t2 > 0 ? -1 : 1)
      ;
    return this.length ? n2 : Ks(n2, this.side > 0);
  }
  get isEditable() {
    return false;
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class Sl extends le {
  domAtPos(t2) {
    let { topView: e2, text: i2 } = this.widget;
    return e2 ? ys(t2, 0, e2, i2, (n2, r2) => n2.domAtPos(r2), (n2) => new ht(i2, Math.min(n2, i2.nodeValue.length))) : new ht(i2, Math.min(t2, i2.nodeValue.length));
  }
  sync() {
    this.setDOM(this.widget.toDOM());
  }
  localPosFromDOM(t2, e2) {
    let { topView: i2, text: n2 } = this.widget;
    return i2 ? Cl(t2, e2, i2, n2) : Math.min(e2, this.length);
  }
  ignoreMutation() {
    return false;
  }
  get overrideDOMText() {
    return null;
  }
  coordsAt(t2, e2) {
    let { topView: i2, text: n2 } = this.widget;
    return i2 ? ys(t2, e2, i2, n2, (r2, o2, l2) => r2.coordsAt(o2, l2), (r2, o2) => ws(n2, r2, o2)) : ws(n2, t2, e2);
  }
  destroy() {
    var t2;
    super.destroy(), (t2 = this.widget.topView) === null || t2 === void 0 || t2.destroy();
  }
  get isEditable() {
    return true;
  }
  canReuseDOM() {
    return true;
  }
}
function ys(s, t2, e2, i2, n2, r2) {
  if (e2 instanceof jt) {
    for (let o2 = e2.dom.firstChild; o2; o2 = o2.nextSibling) {
      let l2 = W.get(o2);
      if (!l2)
        return r2(s, t2);
      let h2 = qe(o2, i2), a2 = l2.length + (h2 ? i2.nodeValue.length : 0);
      if (s < a2 || s == a2 && l2.getSide() <= 0)
        return h2 ? ys(s, t2, l2, i2, n2, r2) : n2(l2, s, t2);
      s -= a2;
    }
    return n2(e2, e2.length, -1);
  } else
    return e2.dom == i2 ? r2(s, t2) : n2(e2, s, t2);
}
function Cl(s, t2, e2, i2) {
  if (e2 instanceof jt)
    for (let n2 of e2.children) {
      let r2 = 0, o2 = qe(n2.dom, i2);
      if (qe(n2.dom, s))
        return r2 + (o2 ? Cl(s, t2, n2, i2) : n2.localPosFromDOM(s, t2));
      r2 += o2 ? i2.nodeValue.length : n2.length;
    }
  else if (e2.dom == i2)
    return Math.min(t2, i2.nodeValue.length);
  return e2.localPosFromDOM(s, t2);
}
class Ge extends W {
  constructor(t2) {
    super(), this.side = t2;
  }
  get length() {
    return 0;
  }
  merge() {
    return false;
  }
  become(t2) {
    return t2 instanceof Ge && t2.side == this.side;
  }
  split() {
    return new Ge(this.side);
  }
  sync() {
    if (!this.dom) {
      let t2 = document.createElement("img");
      t2.className = "cm-widgetBuffer", t2.setAttribute("aria-hidden", "true"), this.setDOM(t2);
    }
  }
  getSide() {
    return this.side;
  }
  domAtPos(t2) {
    return ht.before(this.dom);
  }
  localPosFromDOM() {
    return 0;
  }
  domBoundsAround() {
    return null;
  }
  coordsAt(t2) {
    let e2 = this.dom.getBoundingClientRect(), i2 = nf(this, this.side > 0 ? -1 : 1);
    return i2 && i2.top < e2.bottom && i2.bottom > e2.top ? { left: e2.left, right: e2.right, top: i2.top, bottom: i2.bottom } : e2;
  }
  get overrideDOMText() {
    return E.empty;
  }
}
ge.prototype.children = le.prototype.children = Ge.prototype.children = Gs;
function nf(s, t2) {
  let e2 = s.parent, i2 = e2 ? e2.children.indexOf(s) : -1;
  for (; e2 && i2 >= 0; )
    if (t2 < 0 ? i2 > 0 : i2 < e2.children.length) {
      let n2 = e2.children[i2 + t2];
      if (n2 instanceof ge) {
        let r2 = n2.coordsAt(t2 < 0 ? n2.length : 0, t2);
        if (r2)
          return r2;
      }
      i2 += t2;
    } else if (e2 instanceof jt && e2.parent)
      i2 = e2.parent.children.indexOf(e2) + (t2 < 0 ? 0 : 1), e2 = e2.parent;
    else {
      let n2 = e2.dom.lastChild;
      if (n2 && n2.nodeName == "BR")
        return n2.getClientRects()[0];
      break;
    }
}
function Al(s, t2) {
  let e2 = s.dom, { children: i2 } = s, n2 = 0;
  for (let r2 = 0; n2 < i2.length; n2++) {
    let o2 = i2[n2], l2 = r2 + o2.length;
    if (!(l2 == r2 && o2.getSide() <= 0)) {
      if (t2 > r2 && t2 < l2 && o2.dom.parentNode == e2)
        return o2.domAtPos(t2 - r2);
      if (t2 <= r2)
        break;
      r2 = l2;
    }
  }
  for (let r2 = n2; r2 > 0; r2--) {
    let o2 = i2[r2 - 1];
    if (o2.dom.parentNode == e2)
      return o2.domAtPos(o2.length);
  }
  for (let r2 = n2; r2 < i2.length; r2++) {
    let o2 = i2[r2];
    if (o2.dom.parentNode == e2)
      return o2.domAtPos(0);
  }
  return new ht(e2, 0);
}
function Ol(s, t2, e2) {
  let i2, { children: n2 } = s;
  e2 > 0 && t2 instanceof jt && n2.length && (i2 = n2[n2.length - 1]) instanceof jt && i2.mark.eq(t2.mark) ? Ol(i2, t2.children[0], e2 - 1) : (n2.push(t2), t2.setParent(s)), s.length += t2.length;
}
function Ml(s, t2, e2) {
  let i2 = null, n2 = -1, r2 = null, o2 = -1;
  function l2(a2, c2) {
    for (let f2 = 0, u2 = 0; f2 < a2.children.length && u2 <= c2; f2++) {
      let d2 = a2.children[f2], p2 = u2 + d2.length;
      p2 >= c2 && (d2.children.length ? l2(d2, c2 - u2) : !r2 && (p2 > c2 || u2 == p2 && d2.getSide() > 0) ? (r2 = d2, o2 = c2 - u2) : (u2 < c2 || u2 == p2 && d2.getSide() < 0) && (i2 = d2, n2 = c2 - u2)), u2 = p2;
    }
  }
  l2(s, t2);
  let h2 = (e2 < 0 ? i2 : r2) || i2 || r2;
  return h2 ? h2.coordsAt(Math.max(0, h2 == i2 ? n2 : o2), e2) : sf(s);
}
function sf(s) {
  let t2 = s.dom.lastChild;
  if (!t2)
    return s.dom.getBoundingClientRect();
  let e2 = di(t2);
  return e2[e2.length - 1] || null;
}
function bs(s, t2) {
  for (let e2 in s)
    e2 == "class" && t2.class ? t2.class += " " + s.class : e2 == "style" && t2.style ? t2.style += ";" + s.style : t2[e2] = s[e2];
  return t2;
}
function Us(s, t2) {
  if (s == t2)
    return true;
  if (!s || !t2)
    return false;
  let e2 = Object.keys(s), i2 = Object.keys(t2);
  if (e2.length != i2.length)
    return false;
  for (let n2 of e2)
    if (i2.indexOf(n2) == -1 || s[n2] !== t2[n2])
      return false;
  return true;
}
function ks(s, t2, e2) {
  let i2 = null;
  if (t2)
    for (let n2 in t2)
      e2 && n2 in e2 || s.removeAttribute(i2 = n2);
  if (e2)
    for (let n2 in e2)
      t2 && t2[n2] == e2[n2] || s.setAttribute(i2 = n2, e2[n2]);
  return !!i2;
}
class ye {
  eq(t2) {
    return false;
  }
  updateDOM(t2) {
    return false;
  }
  compare(t2) {
    return this == t2 || this.constructor == t2.constructor && this.eq(t2);
  }
  get estimatedHeight() {
    return -1;
  }
  ignoreEvent(t2) {
    return true;
  }
  get customView() {
    return null;
  }
  destroy(t2) {
  }
}
var U = /* @__PURE__ */ function(s) {
  return s[s.Text = 0] = "Text", s[s.WidgetBefore = 1] = "WidgetBefore", s[s.WidgetAfter = 2] = "WidgetAfter", s[s.WidgetRange = 3] = "WidgetRange", s;
}(U || (U = {}));
class T extends je {
  constructor(t2, e2, i2, n2) {
    super(), this.startSide = t2, this.endSide = e2, this.widget = i2, this.spec = n2;
  }
  get heightRelevant() {
    return false;
  }
  static mark(t2) {
    return new On(t2);
  }
  static widget(t2) {
    let e2 = t2.side || 0, i2 = !!t2.block;
    return e2 += i2 ? e2 > 0 ? 3e8 : -4e8 : e2 > 0 ? 1e8 : -1e8, new Te(t2, e2, e2, i2, t2.widget || null, false);
  }
  static replace(t2) {
    let e2 = !!t2.block, i2, n2;
    if (t2.isBlockGap)
      i2 = -5e8, n2 = 4e8;
    else {
      let { start: r2, end: o2 } = Dl(t2, e2);
      i2 = (r2 ? e2 ? -3e8 : -1 : 5e8) - 1, n2 = (o2 ? e2 ? 2e8 : 1 : -6e8) + 1;
    }
    return new Te(t2, i2, n2, e2, t2.widget || null, true);
  }
  static line(t2) {
    return new ki(t2);
  }
  static set(t2, e2 = false) {
    return $.of(t2, e2);
  }
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : false;
  }
}
T.none = $.empty;
class On extends T {
  constructor(t2) {
    let { start: e2, end: i2 } = Dl(t2);
    super(e2 ? -1 : 5e8, i2 ? 1 : -6e8, null, t2), this.tagName = t2.tagName || "span", this.class = t2.class || "", this.attrs = t2.attributes || null;
  }
  eq(t2) {
    return this == t2 || t2 instanceof On && this.tagName == t2.tagName && this.class == t2.class && Us(this.attrs, t2.attrs);
  }
  range(t2, e2 = t2) {
    if (t2 >= e2)
      throw new RangeError("Mark decorations may not be empty");
    return super.range(t2, e2);
  }
}
On.prototype.point = false;
class ki extends T {
  constructor(t2) {
    super(-2e8, -2e8, null, t2);
  }
  eq(t2) {
    return t2 instanceof ki && this.spec.class == t2.spec.class && Us(this.spec.attributes, t2.spec.attributes);
  }
  range(t2, e2 = t2) {
    if (e2 != t2)
      throw new RangeError("Line decoration ranges must be zero-length");
    return super.range(t2, e2);
  }
}
ki.prototype.mapMode = gt.TrackBefore;
ki.prototype.point = true;
class Te extends T {
  constructor(t2, e2, i2, n2, r2, o2) {
    super(e2, i2, r2, t2), this.block = n2, this.isReplace = o2, this.mapMode = n2 ? e2 <= 0 ? gt.TrackBefore : gt.TrackAfter : gt.TrackDel;
  }
  get type() {
    return this.startSide < this.endSide ? U.WidgetRange : this.startSide <= 0 ? U.WidgetBefore : U.WidgetAfter;
  }
  get heightRelevant() {
    return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
  }
  eq(t2) {
    return t2 instanceof Te && rf(this.widget, t2.widget) && this.block == t2.block && this.startSide == t2.startSide && this.endSide == t2.endSide;
  }
  range(t2, e2 = t2) {
    if (this.isReplace && (t2 > e2 || t2 == e2 && this.startSide > 0 && this.endSide <= 0))
      throw new RangeError("Invalid range for replacement decoration");
    if (!this.isReplace && e2 != t2)
      throw new RangeError("Widget decorations can only have zero-length ranges");
    return super.range(t2, e2);
  }
}
Te.prototype.point = true;
function Dl(s, t2 = false) {
  let { inclusiveStart: e2, inclusiveEnd: i2 } = s;
  return e2 == null && (e2 = s.inclusive), i2 == null && (i2 = s.inclusive), { start: e2 != null ? e2 : t2, end: i2 != null ? i2 : t2 };
}
function rf(s, t2) {
  return s == t2 || !!(s && t2 && s.compare(t2));
}
function xs(s, t2, e2, i2 = 0) {
  let n2 = e2.length - 1;
  n2 >= 0 && e2[n2] + i2 >= s ? e2[n2] = Math.max(e2[n2], t2) : e2.push(s, t2);
}
class ut extends W {
  constructor() {
    super(...arguments), this.children = [], this.length = 0, this.prevAttrs = void 0, this.attrs = null, this.breakAfter = 0;
  }
  merge(t2, e2, i2, n2, r2, o2) {
    if (i2) {
      if (!(i2 instanceof ut))
        return false;
      this.dom || i2.transferDOM(this);
    }
    return n2 && this.setDeco(i2 ? i2.attrs : null), kl(this, t2, e2, i2 ? i2.children : [], r2, o2), true;
  }
  split(t2) {
    let e2 = new ut();
    if (e2.breakAfter = this.breakAfter, this.length == 0)
      return e2;
    let { i: i2, off: n2 } = this.childPos(t2);
    n2 && (e2.append(this.children[i2].split(n2), 0), this.children[i2].merge(n2, this.children[i2].length, null, false, 0, 0), i2++);
    for (let r2 = i2; r2 < this.children.length; r2++)
      e2.append(this.children[r2], 0);
    for (; i2 > 0 && this.children[i2 - 1].length == 0; )
      this.children[--i2].destroy();
    return this.children.length = i2, this.markDirty(), this.length = t2, e2;
  }
  transferDOM(t2) {
    this.dom && (this.markDirty(), t2.setDOM(this.dom), t2.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs, this.prevAttrs = void 0, this.dom = null);
  }
  setDeco(t2) {
    Us(this.attrs, t2) || (this.dom && (this.prevAttrs = this.attrs, this.markDirty()), this.attrs = t2);
  }
  append(t2, e2) {
    Ol(this, t2, e2);
  }
  addLineDeco(t2) {
    let e2 = t2.spec.attributes, i2 = t2.spec.class;
    e2 && (this.attrs = bs(e2, this.attrs || {})), i2 && (this.attrs = bs({ class: i2 }, this.attrs || {}));
  }
  domAtPos(t2) {
    return Al(this, t2);
  }
  reuseDOM(t2) {
    t2.nodeName == "DIV" && (this.setDOM(t2), this.dirty |= 6);
  }
  sync(t2) {
    var e2;
    this.dom ? this.dirty & 4 && (wl(this.dom), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0) : (this.setDOM(document.createElement("div")), this.dom.className = "cm-line", this.prevAttrs = this.attrs ? null : void 0), this.prevAttrs !== void 0 && (ks(this.dom, this.prevAttrs, this.attrs), this.dom.classList.add("cm-line"), this.prevAttrs = void 0), super.sync(t2);
    let i2 = this.dom.lastChild;
    for (; i2 && W.get(i2) instanceof jt; )
      i2 = i2.lastChild;
    if (!i2 || !this.length || i2.nodeName != "BR" && ((e2 = W.get(i2)) === null || e2 === void 0 ? void 0 : e2.isEditable) == false && (!x.ios || !this.children.some((n2) => n2 instanceof ge))) {
      let n2 = document.createElement("BR");
      n2.cmIgnore = true, this.dom.appendChild(n2);
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20)
      return null;
    let t2 = 0;
    for (let e2 of this.children) {
      if (!(e2 instanceof ge) || /[^ -~]/.test(e2.text))
        return null;
      let i2 = di(e2.dom);
      if (i2.length != 1)
        return null;
      t2 += i2[0].width;
    }
    return t2 ? {
      lineHeight: this.dom.getBoundingClientRect().height,
      charWidth: t2 / this.length
    } : null;
  }
  coordsAt(t2, e2) {
    return Ml(this, t2, e2);
  }
  become(t2) {
    return false;
  }
  get type() {
    return U.Text;
  }
  static find(t2, e2) {
    for (let i2 = 0, n2 = 0; i2 < t2.children.length; i2++) {
      let r2 = t2.children[i2], o2 = n2 + r2.length;
      if (o2 >= e2) {
        if (r2 instanceof ut)
          return r2;
        if (o2 > e2)
          break;
      }
      n2 = o2 + r2.breakAfter;
    }
    return null;
  }
}
class Ae extends W {
  constructor(t2, e2, i2) {
    super(), this.widget = t2, this.length = e2, this.type = i2, this.breakAfter = 0, this.prevWidget = null;
  }
  merge(t2, e2, i2, n2, r2, o2) {
    return i2 && (!(i2 instanceof Ae) || !this.widget.compare(i2.widget) || t2 > 0 && r2 <= 0 || e2 < this.length && o2 <= 0) ? false : (this.length = t2 + (i2 ? i2.length : 0) + (this.length - e2), true);
  }
  domAtPos(t2) {
    return t2 == 0 ? ht.before(this.dom) : ht.after(this.dom, t2 == this.length);
  }
  split(t2) {
    let e2 = this.length - t2;
    this.length = t2;
    let i2 = new Ae(this.widget, e2, this.type);
    return i2.breakAfter = this.breakAfter, i2;
  }
  get children() {
    return Gs;
  }
  sync() {
    (!this.dom || !this.widget.updateDOM(this.dom)) && (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom), this.prevWidget = null, this.setDOM(this.widget.toDOM(this.editorView)), this.dom.contentEditable = "false");
  }
  get overrideDOMText() {
    return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : E.empty;
  }
  domBoundsAround() {
    return null;
  }
  become(t2) {
    return t2 instanceof Ae && t2.type == this.type && t2.widget.constructor == this.widget.constructor ? (t2.widget.eq(this.widget) || this.markDirty(true), this.dom && !this.prevWidget && (this.prevWidget = this.widget), this.widget = t2.widget, this.length = t2.length, this.breakAfter = t2.breakAfter, true) : false;
  }
  ignoreMutation() {
    return true;
  }
  ignoreEvent(t2) {
    return this.widget.ignoreEvent(t2);
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom);
  }
}
class Qs {
  constructor(t2, e2, i2, n2) {
    this.doc = t2, this.pos = e2, this.end = i2, this.disallowBlockEffectsFor = n2, this.content = [], this.curLine = null, this.breakAtStart = 0, this.pendingBuffer = 0, this.bufferMarks = [], this.atCursorPos = true, this.openStart = -1, this.openEnd = -1, this.text = "", this.textOff = 0, this.cursor = t2.iter(), this.skip = e2;
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
    let t2 = this.content[this.content.length - 1];
    return !t2.breakAfter && !(t2 instanceof Ae && t2.type == U.WidgetBefore);
  }
  getLine() {
    return this.curLine || (this.content.push(this.curLine = new ut()), this.atCursorPos = true), this.curLine;
  }
  flushBuffer(t2 = this.bufferMarks) {
    this.pendingBuffer && (this.curLine.append(Mi(new Ge(-1), t2), t2.length), this.pendingBuffer = 0);
  }
  addBlockWidget(t2) {
    this.flushBuffer(), this.curLine = null, this.content.push(t2);
  }
  finish(t2) {
    this.pendingBuffer && t2 <= this.bufferMarks.length ? this.flushBuffer() : this.pendingBuffer = 0, this.posCovered() || this.getLine();
  }
  buildText(t2, e2, i2) {
    for (; t2 > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: r2, lineBreak: o2, done: l2 } = this.cursor.next(this.skip);
        if (this.skip = 0, l2)
          throw new Error("Ran out of text content when drawing inline views");
        if (o2) {
          this.posCovered() || this.getLine(), this.content.length ? this.content[this.content.length - 1].breakAfter = 1 : this.breakAtStart = 1, this.flushBuffer(), this.curLine = null, this.atCursorPos = true, t2--;
          continue;
        } else
          this.text = r2, this.textOff = 0;
      }
      let n2 = Math.min(
        this.text.length - this.textOff,
        t2,
        512
      );
      this.flushBuffer(e2.slice(e2.length - i2)), this.getLine().append(Mi(new ge(this.text.slice(this.textOff, this.textOff + n2)), e2), i2), this.atCursorPos = true, this.textOff += n2, t2 -= n2, i2 = 0;
    }
  }
  span(t2, e2, i2, n2) {
    this.buildText(e2 - t2, i2, n2), this.pos = e2, this.openStart < 0 && (this.openStart = n2);
  }
  point(t2, e2, i2, n2, r2, o2) {
    if (this.disallowBlockEffectsFor[o2] && i2 instanceof Te) {
      if (i2.block)
        throw new RangeError("Block decorations may not be specified via plugins");
      if (e2 > this.doc.lineAt(this.pos).to)
        throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
    }
    let l2 = e2 - t2;
    if (i2 instanceof Te)
      if (i2.block) {
        let { type: h2 } = i2;
        h2 == U.WidgetAfter && !this.posCovered() && this.getLine(), this.addBlockWidget(new Ae(i2.widget || new Pr("div"), l2, h2));
      } else {
        let h2 = le.create(i2.widget || new Pr("span"), l2, l2 ? 0 : i2.startSide), a2 = this.atCursorPos && !h2.isEditable && r2 <= n2.length && (t2 < e2 || i2.startSide > 0), c2 = !h2.isEditable && (t2 < e2 || r2 > n2.length || i2.startSide <= 0), f2 = this.getLine();
        this.pendingBuffer == 2 && !a2 && (this.pendingBuffer = 0), this.flushBuffer(n2), a2 && (f2.append(Mi(new Ge(1), n2), r2), r2 = n2.length + Math.max(0, r2 - n2.length)), f2.append(Mi(h2, n2), r2), this.atCursorPos = c2, this.pendingBuffer = c2 ? t2 < e2 || r2 > n2.length ? 1 : 2 : 0, this.pendingBuffer && (this.bufferMarks = n2.slice());
      }
    else
      this.doc.lineAt(this.pos).from == this.pos && this.getLine().addLineDeco(i2);
    l2 && (this.textOff + l2 <= this.text.length ? this.textOff += l2 : (this.skip += l2 - (this.text.length - this.textOff), this.text = "", this.textOff = 0), this.pos = e2), this.openStart < 0 && (this.openStart = r2);
  }
  static build(t2, e2, i2, n2, r2) {
    let o2 = new Qs(t2, e2, i2, r2);
    return o2.openEnd = $.spans(n2, e2, i2, o2), o2.openStart < 0 && (o2.openStart = o2.openEnd), o2.finish(o2.openEnd), o2;
  }
}
function Mi(s, t2) {
  for (let e2 of t2)
    s = new jt(e2, [s], s.length);
  return s;
}
class Pr extends ye {
  constructor(t2) {
    super(), this.tag = t2;
  }
  eq(t2) {
    return t2.tag == this.tag;
  }
  toDOM() {
    return document.createElement(this.tag);
  }
  updateDOM(t2) {
    return t2.nodeName.toLowerCase() == this.tag;
  }
}
const Tl = /* @__PURE__ */ v$2.define(), Pl = /* @__PURE__ */ v$2.define(), Bl = /* @__PURE__ */ v$2.define(), Rl = /* @__PURE__ */ v$2.define(), vs = /* @__PURE__ */ v$2.define(), Ll = /* @__PURE__ */ v$2.define(), El = /* @__PURE__ */ v$2.define({
  combine: (s) => s.some((t2) => t2)
}), of = /* @__PURE__ */ v$2.define({
  combine: (s) => s.some((t2) => t2)
});
class rn {
  constructor(t2, e2 = "nearest", i2 = "nearest", n2 = 5, r2 = 5) {
    this.range = t2, this.y = e2, this.x = i2, this.yMargin = n2, this.xMargin = r2;
  }
  map(t2) {
    return t2.empty ? this : new rn(this.range.map(t2), this.y, this.x, this.yMargin, this.xMargin);
  }
}
const Br = /* @__PURE__ */ F.define({ map: (s, t2) => s.map(t2) });
function zt(s, t2, e2) {
  let i2 = s.facet(Rl);
  i2.length ? i2[0](t2) : window.onerror ? window.onerror(String(t2), e2, void 0, void 0, t2) : e2 ? console.error(e2 + ":", t2) : console.error(t2);
}
const Mn = /* @__PURE__ */ v$2.define({ combine: (s) => s.length ? s[0] : true });
let lf = 0;
const si = /* @__PURE__ */ v$2.define();
class wt {
  constructor(t2, e2, i2, n2) {
    this.id = t2, this.create = e2, this.domEventHandlers = i2, this.extension = n2(this);
  }
  static define(t2, e2) {
    const { eventHandlers: i2, provide: n2, decorations: r2 } = e2 || {};
    return new wt(lf++, t2, i2, (o2) => {
      let l2 = [si.of(o2)];
      return r2 && l2.push(gi.of((h2) => {
        let a2 = h2.plugin(o2);
        return a2 ? r2(a2) : T.none;
      })), n2 && l2.push(n2(o2)), l2;
    });
  }
  static fromClass(t2, e2) {
    return wt.define((i2) => new t2(i2), e2);
  }
}
class Hn {
  constructor(t2) {
    this.spec = t2, this.mustUpdate = null, this.value = null;
  }
  update(t2) {
    if (this.value) {
      if (this.mustUpdate) {
        let e2 = this.mustUpdate;
        if (this.mustUpdate = null, this.value.update)
          try {
            this.value.update(e2);
          } catch (i2) {
            if (zt(e2.state, i2, "CodeMirror plugin crashed"), this.value.destroy)
              try {
                this.value.destroy();
              } catch {
              }
            this.deactivate();
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.create(t2);
      } catch (e2) {
        zt(t2.state, e2, "CodeMirror plugin crashed"), this.deactivate();
      }
    return this;
  }
  destroy(t2) {
    var e2;
    if (!((e2 = this.value) === null || e2 === void 0) && e2.destroy)
      try {
        this.value.destroy();
      } catch (i2) {
        zt(t2.state, i2, "CodeMirror plugin crashed");
      }
  }
  deactivate() {
    this.spec = this.value = null;
  }
}
const Nl = /* @__PURE__ */ v$2.define(), Js = /* @__PURE__ */ v$2.define(), gi = /* @__PURE__ */ v$2.define(), Vl = /* @__PURE__ */ v$2.define(), Il = /* @__PURE__ */ v$2.define(), ri = /* @__PURE__ */ v$2.define();
class _t {
  constructor(t2, e2, i2, n2) {
    this.fromA = t2, this.toA = e2, this.fromB = i2, this.toB = n2;
  }
  join(t2) {
    return new _t(Math.min(this.fromA, t2.fromA), Math.max(this.toA, t2.toA), Math.min(this.fromB, t2.fromB), Math.max(this.toB, t2.toB));
  }
  addToSet(t2) {
    let e2 = t2.length, i2 = this;
    for (; e2 > 0; e2--) {
      let n2 = t2[e2 - 1];
      if (!(n2.fromA > i2.toA)) {
        if (n2.toA < i2.fromA)
          break;
        i2 = i2.join(n2), t2.splice(e2 - 1, 1);
      }
    }
    return t2.splice(e2, 0, i2), t2;
  }
  static extendWithRanges(t2, e2) {
    if (e2.length == 0)
      return t2;
    let i2 = [];
    for (let n2 = 0, r2 = 0, o2 = 0, l2 = 0; ; n2++) {
      let h2 = n2 == t2.length ? null : t2[n2], a2 = o2 - l2, c2 = h2 ? h2.fromB : 1e9;
      for (; r2 < e2.length && e2[r2] < c2; ) {
        let f2 = e2[r2], u2 = e2[r2 + 1], d2 = Math.max(l2, f2), p2 = Math.min(c2, u2);
        if (d2 <= p2 && new _t(d2 + a2, p2 + a2, d2, p2).addToSet(i2), u2 > c2)
          break;
        r2 += 2;
      }
      if (!h2)
        return i2;
      new _t(h2.fromA, h2.toA, h2.fromB, h2.toB).addToSet(i2), o2 = h2.toA, l2 = h2.toB;
    }
  }
}
class on {
  constructor(t2, e2, i2) {
    this.view = t2, this.state = e2, this.transactions = i2, this.flags = 0, this.startState = t2.state, this.changes = Z$1.empty(this.startState.doc.length);
    for (let o2 of i2)
      this.changes = this.changes.compose(o2.changes);
    let n2 = [];
    this.changes.iterChangedRanges((o2, l2, h2, a2) => n2.push(new _t(o2, l2, h2, a2))), this.changedRanges = n2;
    let r2 = t2.hasFocus;
    r2 != t2.inputState.notifiedFocused && (t2.inputState.notifiedFocused = r2, this.flags |= 1);
  }
  static create(t2, e2, i2) {
    return new on(t2, e2, i2);
  }
  get viewportChanged() {
    return (this.flags & 4) > 0;
  }
  get heightChanged() {
    return (this.flags & 2) > 0;
  }
  get geometryChanged() {
    return this.docChanged || (this.flags & 10) > 0;
  }
  get focusChanged() {
    return (this.flags & 1) > 0;
  }
  get docChanged() {
    return !this.changes.empty;
  }
  get selectionSet() {
    return this.transactions.some((t2) => t2.selection);
  }
  get empty() {
    return this.flags == 0 && this.transactions.length == 0;
  }
}
var X = /* @__PURE__ */ function(s) {
  return s[s.LTR = 0] = "LTR", s[s.RTL = 1] = "RTL", s;
}(X || (X = {}));
const Ss = X.LTR, hf = X.RTL;
function Hl(s) {
  let t2 = [];
  for (let e2 = 0; e2 < s.length; e2++)
    t2.push(1 << +s[e2]);
  return t2;
}
const af = /* @__PURE__ */ Hl("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"), cf = /* @__PURE__ */ Hl("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"), Cs = /* @__PURE__ */ Object.create(null), Lt = [];
for (let s of ["()", "[]", "{}"]) {
  let t2 = /* @__PURE__ */ s.charCodeAt(0), e2 = /* @__PURE__ */ s.charCodeAt(1);
  Cs[t2] = e2, Cs[e2] = -t2;
}
function ff(s) {
  return s <= 247 ? af[s] : 1424 <= s && s <= 1524 ? 2 : 1536 <= s && s <= 1785 ? cf[s - 1536] : 1774 <= s && s <= 2220 ? 4 : 8192 <= s && s <= 8203 ? 256 : 64336 <= s && s <= 65023 ? 4 : s == 8204 ? 256 : 1;
}
const uf = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
class Fe {
  constructor(t2, e2, i2) {
    this.from = t2, this.to = e2, this.level = i2;
  }
  get dir() {
    return this.level % 2 ? hf : Ss;
  }
  side(t2, e2) {
    return this.dir == e2 == t2 ? this.to : this.from;
  }
  static find(t2, e2, i2, n2) {
    let r2 = -1;
    for (let o2 = 0; o2 < t2.length; o2++) {
      let l2 = t2[o2];
      if (l2.from <= e2 && l2.to >= e2) {
        if (l2.level == i2)
          return o2;
        (r2 < 0 || (n2 != 0 ? n2 < 0 ? l2.from < e2 : l2.to > e2 : t2[r2].level > l2.level)) && (r2 = o2);
      }
    }
    if (r2 < 0)
      throw new RangeError("Index out of range");
    return r2;
  }
}
const j = [];
function df(s, t2) {
  let e2 = s.length, i2 = t2 == Ss ? 1 : 2, n2 = t2 == Ss ? 2 : 1;
  if (!s || i2 == 1 && !uf.test(s))
    return $l(e2);
  for (let o2 = 0, l2 = i2, h2 = i2; o2 < e2; o2++) {
    let a2 = ff(s.charCodeAt(o2));
    a2 == 512 ? a2 = l2 : a2 == 8 && h2 == 4 && (a2 = 16), j[o2] = a2 == 4 ? 2 : a2, a2 & 7 && (h2 = a2), l2 = a2;
  }
  for (let o2 = 0, l2 = i2, h2 = i2; o2 < e2; o2++) {
    let a2 = j[o2];
    if (a2 == 128)
      o2 < e2 - 1 && l2 == j[o2 + 1] && l2 & 24 ? a2 = j[o2] = l2 : j[o2] = 256;
    else if (a2 == 64) {
      let c2 = o2 + 1;
      for (; c2 < e2 && j[c2] == 64; )
        c2++;
      let f2 = o2 && l2 == 8 || c2 < e2 && j[c2] == 8 ? h2 == 1 ? 1 : 8 : 256;
      for (let u2 = o2; u2 < c2; u2++)
        j[u2] = f2;
      o2 = c2 - 1;
    } else
      a2 == 8 && h2 == 1 && (j[o2] = 1);
    l2 = a2, a2 & 7 && (h2 = a2);
  }
  for (let o2 = 0, l2 = 0, h2 = 0, a2, c2, f2; o2 < e2; o2++)
    if (c2 = Cs[a2 = s.charCodeAt(o2)])
      if (c2 < 0) {
        for (let u2 = l2 - 3; u2 >= 0; u2 -= 3)
          if (Lt[u2 + 1] == -c2) {
            let d2 = Lt[u2 + 2], p2 = d2 & 2 ? i2 : d2 & 4 ? d2 & 1 ? n2 : i2 : 0;
            p2 && (j[o2] = j[Lt[u2]] = p2), l2 = u2;
            break;
          }
      } else {
        if (Lt.length == 189)
          break;
        Lt[l2++] = o2, Lt[l2++] = a2, Lt[l2++] = h2;
      }
    else if ((f2 = j[o2]) == 2 || f2 == 1) {
      let u2 = f2 == i2;
      h2 = u2 ? 0 : 1;
      for (let d2 = l2 - 3; d2 >= 0; d2 -= 3) {
        let p2 = Lt[d2 + 2];
        if (p2 & 2)
          break;
        if (u2)
          Lt[d2 + 2] |= 2;
        else {
          if (p2 & 4)
            break;
          Lt[d2 + 2] |= 4;
        }
      }
    }
  for (let o2 = 0; o2 < e2; o2++)
    if (j[o2] == 256) {
      let l2 = o2 + 1;
      for (; l2 < e2 && j[l2] == 256; )
        l2++;
      let h2 = (o2 ? j[o2 - 1] : i2) == 1, a2 = (l2 < e2 ? j[l2] : i2) == 1, c2 = h2 == a2 ? h2 ? 1 : 2 : i2;
      for (let f2 = o2; f2 < l2; f2++)
        j[f2] = c2;
      o2 = l2 - 1;
    }
  let r2 = [];
  if (i2 == 1)
    for (let o2 = 0; o2 < e2; ) {
      let l2 = o2, h2 = j[o2++] != 1;
      for (; o2 < e2 && h2 == (j[o2] != 1); )
        o2++;
      if (h2)
        for (let a2 = o2; a2 > l2; ) {
          let c2 = a2, f2 = j[--a2] != 2;
          for (; a2 > l2 && f2 == (j[a2 - 1] != 2); )
            a2--;
          r2.push(new Fe(a2, c2, f2 ? 2 : 1));
        }
      else
        r2.push(new Fe(l2, o2, 0));
    }
  else
    for (let o2 = 0; o2 < e2; ) {
      let l2 = o2, h2 = j[o2++] == 2;
      for (; o2 < e2 && h2 == (j[o2] == 2); )
        o2++;
      r2.push(new Fe(l2, o2, h2 ? 1 : 2));
    }
  return r2;
}
function $l(s) {
  return [new Fe(0, s, 0)];
}
let Fl = "";
function pf(s, t2, e2, i2, n2) {
  var r2;
  let o2 = i2.head - s.from, l2 = -1;
  if (o2 == 0) {
    if (!n2 || !s.length)
      return null;
    t2[0].level != e2 && (o2 = t2[0].side(false, e2), l2 = 0);
  } else if (o2 == s.length) {
    if (n2)
      return null;
    let u2 = t2[t2.length - 1];
    u2.level != e2 && (o2 = u2.side(true, e2), l2 = t2.length - 1);
  }
  l2 < 0 && (l2 = Fe.find(t2, o2, (r2 = i2.bidiLevel) !== null && r2 !== void 0 ? r2 : -1, i2.assoc));
  let h2 = t2[l2];
  o2 == h2.side(n2, e2) && (h2 = t2[l2 += n2 ? 1 : -1], o2 = h2.side(!n2, e2));
  let a2 = n2 == (h2.dir == e2), c2 = xt(s.text, o2, a2);
  if (Fl = s.text.slice(Math.min(o2, c2), Math.max(o2, c2)), c2 != h2.side(n2, e2))
    return b.cursor(c2 + s.from, a2 ? -1 : 1, h2.level);
  let f2 = l2 == (n2 ? t2.length - 1 : 0) ? null : t2[l2 + (n2 ? 1 : -1)];
  return !f2 && h2.level != e2 ? b.cursor(n2 ? s.to : s.from, n2 ? -1 : 1, e2) : f2 && f2.level < h2.level ? b.cursor(f2.side(!n2, e2) + s.from, n2 ? 1 : -1, f2.level) : b.cursor(c2 + s.from, n2 ? -1 : 1, h2.level);
}
const he = "\uFFFF";
class zl {
  constructor(t2, e2) {
    this.points = t2, this.text = "", this.lineSeparator = e2.facet(N$1.lineSeparator);
  }
  append(t2) {
    this.text += t2;
  }
  lineBreak() {
    this.text += he;
  }
  readRange(t2, e2) {
    if (!t2)
      return this;
    let i2 = t2.parentNode;
    for (let n2 = t2; ; ) {
      this.findPointBefore(i2, n2), this.readNode(n2);
      let r2 = n2.nextSibling;
      if (r2 == e2)
        break;
      let o2 = W.get(n2), l2 = W.get(r2);
      (o2 && l2 ? o2.breakAfter : (o2 ? o2.breakAfter : Rr(n2)) || Rr(r2) && (n2.nodeName != "BR" || n2.cmIgnore)) && this.lineBreak(), n2 = r2;
    }
    return this.findPointBefore(i2, e2), this;
  }
  readTextNode(t2) {
    let e2 = t2.nodeValue;
    for (let i2 of this.points)
      i2.node == t2 && (i2.pos = this.text.length + Math.min(i2.offset, e2.length));
    for (let i2 = 0, n2 = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let r2 = -1, o2 = 1, l2;
      if (this.lineSeparator ? (r2 = e2.indexOf(this.lineSeparator, i2), o2 = this.lineSeparator.length) : (l2 = n2.exec(e2)) && (r2 = l2.index, o2 = l2[0].length), this.append(e2.slice(i2, r2 < 0 ? e2.length : r2)), r2 < 0)
        break;
      if (this.lineBreak(), o2 > 1)
        for (let h2 of this.points)
          h2.node == t2 && h2.pos > this.text.length && (h2.pos -= o2 - 1);
      i2 = r2 + o2;
    }
  }
  readNode(t2) {
    if (t2.cmIgnore)
      return;
    let e2 = W.get(t2), i2 = e2 && e2.overrideDOMText;
    if (i2 != null) {
      this.findPointInside(t2, i2.length);
      for (let n2 = i2.iter(); !n2.next().done; )
        n2.lineBreak ? this.lineBreak() : this.append(n2.value);
    } else
      t2.nodeType == 3 ? this.readTextNode(t2) : t2.nodeName == "BR" ? t2.nextSibling && this.lineBreak() : t2.nodeType == 1 && this.readRange(t2.firstChild, null);
  }
  findPointBefore(t2, e2) {
    for (let i2 of this.points)
      i2.node == t2 && t2.childNodes[i2.offset] == e2 && (i2.pos = this.text.length);
  }
  findPointInside(t2, e2) {
    for (let i2 of this.points)
      (t2.nodeType == 3 ? i2.node == t2 : t2.contains(i2.node)) && (i2.pos = this.text.length + Math.min(e2, i2.offset));
  }
}
function Rr(s) {
  return s.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(s.nodeName);
}
class Lr {
  constructor(t2, e2) {
    this.node = t2, this.offset = e2, this.pos = -1;
  }
}
class Er extends W {
  constructor(t2) {
    super(), this.view = t2, this.compositionDeco = T.none, this.decorations = [], this.dynamicDecorationMap = [], this.minWidth = 0, this.minWidthFrom = 0, this.minWidthTo = 0, this.impreciseAnchor = null, this.impreciseHead = null, this.forceSelection = false, this.lastUpdate = Date.now(), this.setDOM(t2.contentDOM), this.children = [new ut()], this.children[0].setParent(this), this.updateDeco(), this.updateInner([new _t(0, 0, 0, t2.state.doc.length)], 0);
  }
  get editorView() {
    return this.view;
  }
  get length() {
    return this.view.state.doc.length;
  }
  update(t2) {
    let e2 = t2.changedRanges;
    this.minWidth > 0 && e2.length && (e2.every(({ fromA: o2, toA: l2 }) => l2 < this.minWidthFrom || o2 > this.minWidthTo) ? (this.minWidthFrom = t2.changes.mapPos(this.minWidthFrom, 1), this.minWidthTo = t2.changes.mapPos(this.minWidthTo, 1)) : this.minWidth = this.minWidthFrom = this.minWidthTo = 0), this.view.inputState.composing < 0 ? this.compositionDeco = T.none : (t2.transactions.length || this.dirty) && (this.compositionDeco = mf(this.view, t2.changes)), (x.ie || x.chrome) && !this.compositionDeco.size && t2 && t2.state.doc.lines != t2.startState.doc.lines && (this.forceSelection = true);
    let i2 = this.decorations, n2 = this.updateDeco(), r2 = kf(i2, n2, t2.changes);
    return e2 = _t.extendWithRanges(e2, r2), this.dirty == 0 && e2.length == 0 ? false : (this.updateInner(e2, t2.startState.doc.length), t2.transactions.length && (this.lastUpdate = Date.now()), true);
  }
  updateInner(t2, e2) {
    this.view.viewState.mustMeasureContent = true, this.updateChildren(t2, e2);
    let { observer: i2 } = this.view;
    i2.ignore(() => {
      this.dom.style.height = this.view.viewState.contentHeight + "px", this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
      let r2 = x.chrome || x.ios ? { node: i2.selectionRange.focusNode, written: false } : void 0;
      this.sync(r2), this.dirty = 0, r2 && (r2.written || i2.selectionRange.focusNode != r2.node) && (this.forceSelection = true), this.dom.style.height = "";
    });
    let n2 = [];
    if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
      for (let r2 of this.children)
        r2 instanceof Ae && r2.widget instanceof Nr && n2.push(r2.dom);
    i2.updateGaps(n2);
  }
  updateChildren(t2, e2) {
    let i2 = this.childCursor(e2);
    for (let n2 = t2.length - 1; ; n2--) {
      let r2 = n2 >= 0 ? t2[n2] : null;
      if (!r2)
        break;
      let { fromA: o2, toA: l2, fromB: h2, toB: a2 } = r2, { content: c2, breakAtStart: f2, openStart: u2, openEnd: d2 } = Qs.build(this.view.state.doc, h2, a2, this.decorations, this.dynamicDecorationMap), { i: p2, off: w } = i2.findPos(l2, 1), { i: g2, off: y } = i2.findPos(o2, -1);
      bl(this, g2, y, p2, w, c2, f2, u2, d2);
    }
  }
  updateSelection(t2 = false, e2 = false) {
    if ((t2 || !this.view.observer.selectionRange.focusNode) && this.view.observer.readSelectionRange(), !(e2 || this.mayControlSelection()))
      return;
    let i2 = this.forceSelection;
    this.forceSelection = false;
    let n2 = this.view.state.selection.main, r2 = this.domAtPos(n2.anchor), o2 = n2.empty ? r2 : this.domAtPos(n2.head);
    if (x.gecko && n2.empty && gf(r2)) {
      let h2 = document.createTextNode("");
      this.view.observer.ignore(() => r2.node.insertBefore(h2, r2.node.childNodes[r2.offset] || null)), r2 = o2 = new ht(h2, 0), i2 = true;
    }
    let l2 = this.view.observer.selectionRange;
    (i2 || !l2.focusNode || !nn(r2.node, r2.offset, l2.anchorNode, l2.anchorOffset) || !nn(o2.node, o2.offset, l2.focusNode, l2.focusOffset)) && (this.view.observer.ignore(() => {
      x.android && x.chrome && this.dom.contains(l2.focusNode) && xf(l2.focusNode, this.dom) && (this.dom.blur(), this.dom.focus({ preventScroll: true }));
      let h2 = en(this.view.root);
      if (h2)
        if (n2.empty) {
          if (x.gecko) {
            let a2 = yf(r2.node, r2.offset);
            if (a2 && a2 != 3) {
              let c2 = Wl(r2.node, r2.offset, a2 == 1 ? 1 : -1);
              c2 && (r2 = new ht(c2, a2 == 1 ? 0 : c2.nodeValue.length));
            }
          }
          h2.collapse(r2.node, r2.offset), n2.bidiLevel != null && l2.cursorBidiLevel != null && (l2.cursorBidiLevel = n2.bidiLevel);
        } else if (h2.extend) {
          h2.collapse(r2.node, r2.offset);
          try {
            h2.extend(o2.node, o2.offset);
          } catch {
          }
        } else {
          let a2 = document.createRange();
          n2.anchor > n2.head && ([r2, o2] = [o2, r2]), a2.setEnd(o2.node, o2.offset), a2.setStart(r2.node, r2.offset), h2.removeAllRanges(), h2.addRange(a2);
        }
    }), this.view.observer.setSelectionRange(r2, o2)), this.impreciseAnchor = r2.precise ? null : new ht(l2.anchorNode, l2.anchorOffset), this.impreciseHead = o2.precise ? null : new ht(l2.focusNode, l2.focusOffset);
  }
  enforceCursorAssoc() {
    if (this.compositionDeco.size)
      return;
    let { view: t2 } = this, e2 = t2.state.selection.main, i2 = en(t2.root), { anchorNode: n2, anchorOffset: r2 } = t2.observer.selectionRange;
    if (!i2 || !e2.empty || !e2.assoc || !i2.modify)
      return;
    let o2 = ut.find(this, e2.head);
    if (!o2)
      return;
    let l2 = o2.posAtStart;
    if (e2.head == l2 || e2.head == l2 + o2.length)
      return;
    let h2 = this.coordsAt(e2.head, -1), a2 = this.coordsAt(e2.head, 1);
    if (!h2 || !a2 || h2.bottom > a2.top)
      return;
    let c2 = this.domAtPos(e2.head + e2.assoc);
    i2.collapse(c2.node, c2.offset), i2.modify("move", e2.assoc < 0 ? "forward" : "backward", "lineboundary"), t2.observer.readSelectionRange();
    let f2 = t2.observer.selectionRange;
    t2.docView.posFromDOM(f2.anchorNode, f2.anchorOffset) != e2.from && i2.collapse(n2, r2);
  }
  mayControlSelection() {
    let t2 = this.view.root.activeElement;
    return t2 == this.dom || ji(this.dom, this.view.observer.selectionRange) && !(t2 && this.dom.contains(t2));
  }
  nearest(t2) {
    for (let e2 = t2; e2; ) {
      let i2 = W.get(e2);
      if (i2 && i2.rootView == this)
        return i2;
      e2 = e2.parentNode;
    }
    return null;
  }
  posFromDOM(t2, e2) {
    let i2 = this.nearest(t2);
    if (!i2)
      throw new RangeError("Trying to find position for a DOM position outside of the document");
    return i2.localPosFromDOM(t2, e2) + i2.posAtStart;
  }
  domAtPos(t2) {
    let { i: e2, off: i2 } = this.childCursor().findPos(t2, -1);
    for (; e2 < this.children.length - 1; ) {
      let n2 = this.children[e2];
      if (i2 < n2.length || n2 instanceof ut)
        break;
      e2++, i2 = 0;
    }
    return this.children[e2].domAtPos(i2);
  }
  coordsAt(t2, e2) {
    for (let i2 = this.length, n2 = this.children.length - 1; ; n2--) {
      let r2 = this.children[n2], o2 = i2 - r2.breakAfter - r2.length;
      if (t2 > o2 || t2 == o2 && r2.type != U.WidgetBefore && r2.type != U.WidgetAfter && (!n2 || e2 == 2 || this.children[n2 - 1].breakAfter || this.children[n2 - 1].type == U.WidgetBefore && e2 > -2))
        return r2.coordsAt(t2 - o2, e2);
      i2 = o2;
    }
  }
  measureVisibleLineHeights(t2) {
    let e2 = [], { from: i2, to: n2 } = t2, r2 = this.view.contentDOM.clientWidth, o2 = r2 > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1, l2 = -1, h2 = this.view.textDirection == X.LTR;
    for (let a2 = 0, c2 = 0; c2 < this.children.length; c2++) {
      let f2 = this.children[c2], u2 = a2 + f2.length;
      if (u2 > n2)
        break;
      if (a2 >= i2) {
        let d2 = f2.dom.getBoundingClientRect();
        if (e2.push(d2.height), o2) {
          let p2 = f2.dom.lastChild, w = p2 ? di(p2) : [];
          if (w.length) {
            let g2 = w[w.length - 1], y = h2 ? g2.right - d2.left : d2.right - g2.left;
            y > l2 && (l2 = y, this.minWidth = r2, this.minWidthFrom = a2, this.minWidthTo = u2);
          }
        }
      }
      a2 = u2 + f2.breakAfter;
    }
    return e2;
  }
  textDirectionAt(t2) {
    let { i: e2 } = this.childPos(t2, 1);
    return getComputedStyle(this.children[e2].dom).direction == "rtl" ? X.RTL : X.LTR;
  }
  measureTextSize() {
    for (let n2 of this.children)
      if (n2 instanceof ut) {
        let r2 = n2.measureTextSize();
        if (r2)
          return r2;
      }
    let t2 = document.createElement("div"), e2, i2;
    return t2.className = "cm-line", t2.style.width = "99999px", t2.textContent = "abc def ghi jkl mno pqr stu", this.view.observer.ignore(() => {
      this.dom.appendChild(t2);
      let n2 = di(t2.firstChild)[0];
      e2 = t2.getBoundingClientRect().height, i2 = n2 ? n2.width / 27 : 7, t2.remove();
    }), { lineHeight: e2, charWidth: i2 };
  }
  childCursor(t2 = this.length) {
    let e2 = this.children.length;
    return e2 && (t2 -= this.children[--e2].length), new yl(this.children, t2, e2);
  }
  computeBlockGapDeco() {
    let t2 = [], e2 = this.view.viewState;
    for (let i2 = 0, n2 = 0; ; n2++) {
      let r2 = n2 == e2.viewports.length ? null : e2.viewports[n2], o2 = r2 ? r2.from - 1 : this.length;
      if (o2 > i2) {
        let l2 = e2.lineBlockAt(o2).bottom - e2.lineBlockAt(i2).top;
        t2.push(T.replace({
          widget: new Nr(l2),
          block: true,
          inclusive: true,
          isBlockGap: true
        }).range(i2, o2));
      }
      if (!r2)
        break;
      i2 = r2.to + 1;
    }
    return T.set(t2);
  }
  updateDeco() {
    let t2 = this.view.state.facet(gi).map((e2, i2) => (this.dynamicDecorationMap[i2] = typeof e2 == "function") ? e2(this.view) : e2);
    for (let e2 = t2.length; e2 < t2.length + 3; e2++)
      this.dynamicDecorationMap[e2] = false;
    return this.decorations = [
      ...t2,
      this.compositionDeco,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ];
  }
  scrollIntoView(t2) {
    let { range: e2 } = t2, i2 = this.coordsAt(e2.head, e2.empty ? e2.assoc : e2.head > e2.anchor ? -1 : 1), n2;
    if (!i2)
      return;
    !e2.empty && (n2 = this.coordsAt(e2.anchor, e2.anchor > e2.head ? -1 : 1)) && (i2 = {
      left: Math.min(i2.left, n2.left),
      top: Math.min(i2.top, n2.top),
      right: Math.max(i2.right, n2.right),
      bottom: Math.max(i2.bottom, n2.bottom)
    });
    let r2 = 0, o2 = 0, l2 = 0, h2 = 0;
    for (let c2 of this.view.state.facet(Il).map((f2) => f2(this.view)))
      if (c2) {
        let { left: f2, right: u2, top: d2, bottom: p2 } = c2;
        f2 != null && (r2 = Math.max(r2, f2)), u2 != null && (o2 = Math.max(o2, u2)), d2 != null && (l2 = Math.max(l2, d2)), p2 != null && (h2 = Math.max(h2, p2));
      }
    let a2 = {
      left: i2.left - r2,
      top: i2.top - l2,
      right: i2.right + o2,
      bottom: i2.bottom + h2
    };
    Jc(this.view.scrollDOM, a2, e2.head < e2.anchor ? -1 : 1, t2.x, t2.y, t2.xMargin, t2.yMargin, this.view.textDirection == X.LTR);
  }
}
function gf(s) {
  return s.node.nodeType == 1 && s.node.firstChild && (s.offset == 0 || s.node.childNodes[s.offset - 1].contentEditable == "false") && (s.offset == s.node.childNodes.length || s.node.childNodes[s.offset].contentEditable == "false");
}
class Nr extends ye {
  constructor(t2) {
    super(), this.height = t2;
  }
  toDOM() {
    let t2 = document.createElement("div");
    return this.updateDOM(t2), t2;
  }
  eq(t2) {
    return t2.height == this.height;
  }
  updateDOM(t2) {
    return t2.style.height = this.height + "px", true;
  }
  get estimatedHeight() {
    return this.height;
  }
}
function _l(s) {
  let t2 = s.observer.selectionRange, e2 = t2.focusNode && Wl(t2.focusNode, t2.focusOffset, 0);
  if (!e2)
    return null;
  let i2 = s.docView.nearest(e2);
  if (!i2)
    return null;
  if (i2 instanceof ut) {
    let n2 = e2;
    for (; n2.parentNode != i2.dom; )
      n2 = n2.parentNode;
    let r2 = n2.previousSibling;
    for (; r2 && !W.get(r2); )
      r2 = r2.previousSibling;
    let o2 = r2 ? W.get(r2).posAtEnd : i2.posAtStart;
    return { from: o2, to: o2, node: n2, text: e2 };
  } else {
    for (; ; ) {
      let { parent: r2 } = i2;
      if (!r2)
        return null;
      if (r2 instanceof ut)
        break;
      i2 = r2;
    }
    let n2 = i2.posAtStart;
    return { from: n2, to: n2 + i2.length, node: i2.dom, text: e2 };
  }
}
function mf(s, t2) {
  let e2 = _l(s);
  if (!e2)
    return T.none;
  let { from: i2, to: n2, node: r2, text: o2 } = e2, l2 = t2.mapPos(i2, 1), h2 = Math.max(l2, t2.mapPos(n2, -1)), { state: a2 } = s, c2 = r2.nodeType == 3 ? r2.nodeValue : new zl([], a2).readRange(r2.firstChild, null).text;
  if (h2 - l2 < c2.length)
    if (a2.doc.sliceString(l2, Math.min(a2.doc.length, l2 + c2.length), he) == c2)
      h2 = l2 + c2.length;
    else if (a2.doc.sliceString(Math.max(0, h2 - c2.length), h2, he) == c2)
      l2 = h2 - c2.length;
    else
      return T.none;
  else if (a2.doc.sliceString(l2, h2, he) != c2)
    return T.none;
  let f2 = W.get(r2);
  return f2 instanceof Sl ? f2 = f2.widget.topView : f2 && (f2.parent = null), T.set(T.replace({ widget: new wf(r2, o2, f2), inclusive: true }).range(l2, h2));
}
class wf extends ye {
  constructor(t2, e2, i2) {
    super(), this.top = t2, this.text = e2, this.topView = i2;
  }
  eq(t2) {
    return this.top == t2.top && this.text == t2.text;
  }
  toDOM() {
    return this.top;
  }
  ignoreEvent() {
    return false;
  }
  get customView() {
    return Sl;
  }
}
function Wl(s, t2, e2) {
  for (; ; ) {
    if (s.nodeType == 3)
      return s;
    if (s.nodeType == 1 && t2 > 0 && e2 <= 0)
      s = s.childNodes[t2 - 1], t2 = pi(s);
    else if (s.nodeType == 1 && t2 < s.childNodes.length && e2 >= 0)
      s = s.childNodes[t2], t2 = 0;
    else
      return null;
  }
}
function yf(s, t2) {
  return s.nodeType != 1 ? 0 : (t2 && s.childNodes[t2 - 1].contentEditable == "false" ? 1 : 0) | (t2 < s.childNodes.length && s.childNodes[t2].contentEditable == "false" ? 2 : 0);
}
class bf {
  constructor() {
    this.changes = [];
  }
  compareRange(t2, e2) {
    xs(t2, e2, this.changes);
  }
  comparePoint(t2, e2) {
    xs(t2, e2, this.changes);
  }
}
function kf(s, t2, e2) {
  let i2 = new bf();
  return $.compare(s, t2, e2, i2), i2.changes;
}
function xf(s, t2) {
  for (let e2 = s; e2 && e2 != t2; e2 = e2.assignedSlot || e2.parentNode)
    if (e2.nodeType == 1 && e2.contentEditable == "false")
      return true;
  return false;
}
function vf(s, t2, e2 = 1) {
  let i2 = s.charCategorizer(t2), n2 = s.doc.lineAt(t2), r2 = t2 - n2.from;
  if (n2.length == 0)
    return b.cursor(t2);
  r2 == 0 ? e2 = 1 : r2 == n2.length && (e2 = -1);
  let o2 = r2, l2 = r2;
  e2 < 0 ? o2 = xt(n2.text, r2, false) : l2 = xt(n2.text, r2);
  let h2 = i2(n2.text.slice(o2, l2));
  for (; o2 > 0; ) {
    let a2 = xt(n2.text, o2, false);
    if (i2(n2.text.slice(a2, o2)) != h2)
      break;
    o2 = a2;
  }
  for (; l2 < n2.length; ) {
    let a2 = xt(n2.text, l2);
    if (i2(n2.text.slice(l2, a2)) != h2)
      break;
    l2 = a2;
  }
  return b.range(o2 + n2.from, l2 + n2.from);
}
function Sf(s, t2) {
  return t2.left > s ? t2.left - s : Math.max(0, s - t2.right);
}
function Cf(s, t2) {
  return t2.top > s ? t2.top - s : Math.max(0, s - t2.bottom);
}
function $n(s, t2) {
  return s.top < t2.bottom - 1 && s.bottom > t2.top + 1;
}
function Vr(s, t2) {
  return t2 < s.top ? { top: t2, left: s.left, right: s.right, bottom: s.bottom } : s;
}
function Ir(s, t2) {
  return t2 > s.bottom ? { top: s.top, left: s.left, right: s.right, bottom: t2 } : s;
}
function As(s, t2, e2) {
  let i2, n2, r2, o2, l2 = false, h2, a2, c2, f2;
  for (let p2 = s.firstChild; p2; p2 = p2.nextSibling) {
    let w = di(p2);
    for (let g2 = 0; g2 < w.length; g2++) {
      let y = w[g2];
      n2 && $n(n2, y) && (y = Vr(Ir(y, n2.bottom), n2.top));
      let O2 = Sf(t2, y), S2 = Cf(e2, y);
      if (O2 == 0 && S2 == 0)
        return p2.nodeType == 3 ? Hr(p2, t2, e2) : As(p2, t2, e2);
      if (!i2 || o2 > S2 || o2 == S2 && r2 > O2) {
        i2 = p2, n2 = y, r2 = O2, o2 = S2;
        let D2 = S2 ? e2 < y.top ? -1 : 1 : O2 ? t2 < y.left ? -1 : 1 : 0;
        l2 = !D2 || (D2 > 0 ? g2 < w.length - 1 : g2 > 0);
      }
      O2 == 0 ? e2 > y.bottom && (!c2 || c2.bottom < y.bottom) ? (h2 = p2, c2 = y) : e2 < y.top && (!f2 || f2.top > y.top) && (a2 = p2, f2 = y) : c2 && $n(c2, y) ? c2 = Ir(c2, y.bottom) : f2 && $n(f2, y) && (f2 = Vr(f2, y.top));
    }
  }
  if (c2 && c2.bottom >= e2 ? (i2 = h2, n2 = c2) : f2 && f2.top <= e2 && (i2 = a2, n2 = f2), !i2)
    return { node: s, offset: 0 };
  let u2 = Math.max(n2.left, Math.min(n2.right, t2));
  if (i2.nodeType == 3)
    return Hr(i2, u2, e2);
  if (l2 && i2.contentEditable != "false")
    return As(i2, u2, e2);
  let d2 = Array.prototype.indexOf.call(s.childNodes, i2) + (t2 >= (n2.left + n2.right) / 2 ? 1 : 0);
  return { node: s, offset: d2 };
}
function Hr(s, t2, e2) {
  let i2 = s.nodeValue.length, n2 = -1, r2 = 1e9, o2 = 0;
  for (let l2 = 0; l2 < i2; l2++) {
    let h2 = Ke(s, l2, l2 + 1).getClientRects();
    for (let a2 = 0; a2 < h2.length; a2++) {
      let c2 = h2[a2];
      if (c2.top == c2.bottom)
        continue;
      o2 || (o2 = t2 - c2.left);
      let f2 = (c2.top > e2 ? c2.top - e2 : e2 - c2.bottom) - 1;
      if (c2.left - 1 <= t2 && c2.right + 1 >= t2 && f2 < r2) {
        let u2 = t2 >= (c2.left + c2.right) / 2, d2 = u2;
        if ((x.chrome || x.gecko) && Ke(s, l2).getBoundingClientRect().left == c2.right && (d2 = !u2), f2 <= 0)
          return { node: s, offset: l2 + (d2 ? 1 : 0) };
        n2 = l2 + (d2 ? 1 : 0), r2 = f2;
      }
    }
  }
  return { node: s, offset: n2 > -1 ? n2 : o2 > 0 ? s.nodeValue.length : 0 };
}
function jl(s, { x: t2, y: e2 }, i2, n2 = -1) {
  var r2;
  let o2 = s.contentDOM.getBoundingClientRect(), l2 = o2.top + s.viewState.paddingTop, h2, { docHeight: a2 } = s.viewState, c2 = e2 - l2;
  if (c2 < 0)
    return 0;
  if (c2 > a2)
    return s.state.doc.length;
  for (let y = s.defaultLineHeight / 2, O2 = false; h2 = s.elementAtHeight(c2), h2.type != U.Text; )
    for (; c2 = n2 > 0 ? h2.bottom + y : h2.top - y, !(c2 >= 0 && c2 <= a2); ) {
      if (O2)
        return i2 ? null : 0;
      O2 = true, n2 = -n2;
    }
  e2 = l2 + c2;
  let f2 = h2.from;
  if (f2 < s.viewport.from)
    return s.viewport.from == 0 ? 0 : i2 ? null : $r(s, o2, h2, t2, e2);
  if (f2 > s.viewport.to)
    return s.viewport.to == s.state.doc.length ? s.state.doc.length : i2 ? null : $r(s, o2, h2, t2, e2);
  let u2 = s.dom.ownerDocument, d2 = s.root.elementFromPoint ? s.root : u2, p2 = d2.elementFromPoint(t2, e2);
  p2 && !s.contentDOM.contains(p2) && (p2 = null), p2 || (t2 = Math.max(o2.left + 1, Math.min(o2.right - 1, t2)), p2 = d2.elementFromPoint(t2, e2), p2 && !s.contentDOM.contains(p2) && (p2 = null));
  let w, g2 = -1;
  if (p2 && ((r2 = s.docView.nearest(p2)) === null || r2 === void 0 ? void 0 : r2.isEditable) != false) {
    if (u2.caretPositionFromPoint) {
      let y = u2.caretPositionFromPoint(t2, e2);
      y && ({ offsetNode: w, offset: g2 } = y);
    } else if (u2.caretRangeFromPoint) {
      let y = u2.caretRangeFromPoint(t2, e2);
      y && ({ startContainer: w, startOffset: g2 } = y, (!s.contentDOM.contains(w) || x.safari && Af(w, g2, t2) || x.chrome && Of(w, g2, t2)) && (w = void 0));
    }
  }
  if (!w || !s.docView.dom.contains(w)) {
    let y = ut.find(s.docView, f2);
    if (!y)
      return c2 > h2.top + h2.height / 2 ? h2.to : h2.from;
    ({ node: w, offset: g2 } = As(y.dom, t2, e2));
  }
  return s.docView.posFromDOM(w, g2);
}
function $r(s, t2, e2, i2, n2) {
  let r2 = Math.round((i2 - t2.left) * s.defaultCharacterWidth);
  if (s.lineWrapping && e2.height > s.defaultLineHeight * 1.5) {
    let l2 = Math.floor((n2 - e2.top) / s.defaultLineHeight);
    r2 += l2 * s.viewState.heightOracle.lineLength;
  }
  let o2 = s.state.sliceDoc(e2.from, e2.to);
  return e2.from + _c(o2, r2, s.state.tabSize);
}
function Af(s, t2, e2) {
  let i2;
  if (s.nodeType != 3 || t2 != (i2 = s.nodeValue.length))
    return false;
  for (let n2 = s.nextSibling; n2; n2 = n2.nextSibling)
    if (n2.nodeType != 1 || n2.nodeName != "BR")
      return false;
  return Ke(s, i2 - 1, i2).getBoundingClientRect().left > e2;
}
function Of(s, t2, e2) {
  if (t2 != 0)
    return false;
  for (let n2 = s; ; ) {
    let r2 = n2.parentNode;
    if (!r2 || r2.nodeType != 1 || r2.firstChild != n2)
      return false;
    if (r2.classList.contains("cm-line"))
      break;
    n2 = r2;
  }
  let i2 = s.nodeType == 1 ? s.getBoundingClientRect() : Ke(s, 0, Math.max(s.nodeValue.length, 1)).getBoundingClientRect();
  return e2 - i2.left > 5;
}
function Mf(s, t2, e2, i2) {
  let n2 = s.state.doc.lineAt(t2.head), r2 = !i2 || !s.lineWrapping ? null : s.coordsAtPos(t2.assoc < 0 && t2.head > n2.from ? t2.head - 1 : t2.head);
  if (r2) {
    let h2 = s.dom.getBoundingClientRect(), a2 = s.textDirectionAt(n2.from), c2 = s.posAtCoords({
      x: e2 == (a2 == X.LTR) ? h2.right - 1 : h2.left + 1,
      y: (r2.top + r2.bottom) / 2
    });
    if (c2 != null)
      return b.cursor(c2, e2 ? -1 : 1);
  }
  let o2 = ut.find(s.docView, t2.head), l2 = o2 ? e2 ? o2.posAtEnd : o2.posAtStart : e2 ? n2.to : n2.from;
  return b.cursor(l2, e2 ? -1 : 1);
}
function Fr(s, t2, e2, i2) {
  let n2 = s.state.doc.lineAt(t2.head), r2 = s.bidiSpans(n2), o2 = s.textDirectionAt(n2.from);
  for (let l2 = t2, h2 = null; ; ) {
    let a2 = pf(n2, r2, o2, l2, e2), c2 = Fl;
    if (!a2) {
      if (n2.number == (e2 ? s.state.doc.lines : 1))
        return l2;
      c2 = `
`, n2 = s.state.doc.line(n2.number + (e2 ? 1 : -1)), r2 = s.bidiSpans(n2), a2 = b.cursor(e2 ? n2.from : n2.to);
    }
    if (h2) {
      if (!h2(c2))
        return l2;
    } else {
      if (!i2)
        return a2;
      h2 = i2(c2);
    }
    l2 = a2;
  }
}
function Df(s, t2, e2) {
  let i2 = s.state.charCategorizer(t2), n2 = i2(e2);
  return (r2) => {
    let o2 = i2(r2);
    return n2 == Jt.Space && (n2 = o2), n2 == o2;
  };
}
function Tf(s, t2, e2, i2) {
  let n2 = t2.head, r2 = e2 ? 1 : -1;
  if (n2 == (e2 ? s.state.doc.length : 0))
    return b.cursor(n2, t2.assoc);
  let o2 = t2.goalColumn, l2, h2 = s.contentDOM.getBoundingClientRect(), a2 = s.coordsAtPos(n2), c2 = s.documentTop;
  if (a2)
    o2 == null && (o2 = a2.left - h2.left), l2 = r2 < 0 ? a2.top : a2.bottom;
  else {
    let d2 = s.viewState.lineBlockAt(n2);
    o2 == null && (o2 = Math.min(h2.right - h2.left, s.defaultCharacterWidth * (n2 - d2.from))), l2 = (r2 < 0 ? d2.top : d2.bottom) + c2;
  }
  let f2 = h2.left + o2, u2 = i2 != null ? i2 : s.defaultLineHeight >> 1;
  for (let d2 = 0; ; d2 += 10) {
    let p2 = l2 + (u2 + d2) * r2, w = jl(s, { x: f2, y: p2 }, false, r2);
    if (p2 < h2.top || p2 > h2.bottom || (r2 < 0 ? w < n2 : w > n2))
      return b.cursor(w, t2.assoc, void 0, o2);
  }
}
function Fn(s, t2, e2) {
  let i2 = s.state.facet(Vl).map((n2) => n2(s));
  for (; ; ) {
    let n2 = false;
    for (let r2 of i2)
      r2.between(e2.from - 1, e2.from + 1, (o2, l2, h2) => {
        e2.from > o2 && e2.from < l2 && (e2 = t2.head > e2.from ? b.cursor(o2, 1) : b.cursor(l2, -1), n2 = true);
      });
    if (!n2)
      return e2;
  }
}
class Pf {
  constructor(t2) {
    this.lastKeyCode = 0, this.lastKeyTime = 0, this.lastTouchTime = 0, this.lastFocusTime = 0, this.lastScrollTop = 0, this.lastScrollLeft = 0, this.chromeScrollHack = -1, this.pendingIOSKey = void 0, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastEscPress = 0, this.lastContextMenu = 0, this.scrollHandlers = [], this.registeredEvents = [], this.customHandlers = [], this.composing = -1, this.compositionFirstChange = null, this.compositionEndedAt = 0, this.mouseSelection = null;
    let e2 = (i2, n2) => {
      this.ignoreDuringComposition(n2) || n2.type == "keydown" && this.keydown(t2, n2) || (this.mustFlushObserver(n2) && t2.observer.forceFlush(), this.runCustomHandlers(n2.type, t2, n2) ? n2.preventDefault() : i2(t2, n2));
    };
    for (let i2 in Y) {
      let n2 = Y[i2];
      t2.contentDOM.addEventListener(i2, (r2) => {
        zr(t2, r2) && e2(n2, r2);
      }, Os[i2]), this.registeredEvents.push(i2);
    }
    t2.scrollDOM.addEventListener("mousedown", (i2) => {
      i2.target == t2.scrollDOM && e2(Y.mousedown, i2);
    }), x.chrome && x.chrome_version == 102 && t2.scrollDOM.addEventListener("wheel", () => {
      this.chromeScrollHack < 0 ? t2.contentDOM.style.pointerEvents = "none" : window.clearTimeout(this.chromeScrollHack), this.chromeScrollHack = setTimeout(() => {
        this.chromeScrollHack = -1, t2.contentDOM.style.pointerEvents = "";
      }, 100);
    }, { passive: true }), this.notifiedFocused = t2.hasFocus, x.safari && t2.contentDOM.addEventListener("input", () => null);
  }
  setSelectionOrigin(t2) {
    this.lastSelectionOrigin = t2, this.lastSelectionTime = Date.now();
  }
  ensureHandlers(t2, e2) {
    var i2;
    let n2;
    this.customHandlers = [];
    for (let r2 of e2)
      if (n2 = (i2 = r2.update(t2).spec) === null || i2 === void 0 ? void 0 : i2.domEventHandlers) {
        this.customHandlers.push({ plugin: r2.value, handlers: n2 });
        for (let o2 in n2)
          this.registeredEvents.indexOf(o2) < 0 && o2 != "scroll" && (this.registeredEvents.push(o2), t2.contentDOM.addEventListener(o2, (l2) => {
            zr(t2, l2) && this.runCustomHandlers(o2, t2, l2) && l2.preventDefault();
          }));
      }
  }
  runCustomHandlers(t2, e2, i2) {
    for (let n2 of this.customHandlers) {
      let r2 = n2.handlers[t2];
      if (r2)
        try {
          if (r2.call(n2.plugin, i2, e2) || i2.defaultPrevented)
            return true;
        } catch (o2) {
          zt(e2.state, o2);
        }
    }
    return false;
  }
  runScrollHandlers(t2, e2) {
    this.lastScrollTop = t2.scrollDOM.scrollTop, this.lastScrollLeft = t2.scrollDOM.scrollLeft;
    for (let i2 of this.customHandlers) {
      let n2 = i2.handlers.scroll;
      if (n2)
        try {
          n2.call(i2.plugin, e2, t2);
        } catch (r2) {
          zt(t2.state, r2);
        }
    }
  }
  keydown(t2, e2) {
    if (this.lastKeyCode = e2.keyCode, this.lastKeyTime = Date.now(), e2.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
      return true;
    if (x.android && x.chrome && !e2.synthetic && (e2.keyCode == 13 || e2.keyCode == 8))
      return t2.observer.delayAndroidKey(e2.key, e2.keyCode), true;
    let i2;
    return x.ios && !e2.synthetic && !e2.altKey && !e2.metaKey && ((i2 = ql.find((n2) => n2.keyCode == e2.keyCode)) && !e2.ctrlKey || Bf.indexOf(e2.key) > -1 && e2.ctrlKey && !e2.shiftKey) ? (this.pendingIOSKey = i2 || e2, setTimeout(() => this.flushIOSKey(t2), 250), true) : false;
  }
  flushIOSKey(t2) {
    let e2 = this.pendingIOSKey;
    return e2 ? (this.pendingIOSKey = void 0, $e(t2.contentDOM, e2.key, e2.keyCode)) : false;
  }
  ignoreDuringComposition(t2) {
    return /^key/.test(t2.type) ? this.composing > 0 ? true : x.safari && !x.ios && Date.now() - this.compositionEndedAt < 100 ? (this.compositionEndedAt = 0, true) : false : false;
  }
  mustFlushObserver(t2) {
    return t2.type == "keydown" && t2.keyCode != 229;
  }
  startMouseSelection(t2) {
    this.mouseSelection && this.mouseSelection.destroy(), this.mouseSelection = t2;
  }
  update(t2) {
    this.mouseSelection && this.mouseSelection.update(t2), t2.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0);
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy();
  }
}
const ql = [
  { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
  { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
  { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
], Bf = "dthko", Kl = [16, 17, 18, 20, 91, 92, 224, 225];
function Di(s) {
  return s * 0.7 + 8;
}
class Rf {
  constructor(t2, e2, i2, n2) {
    this.view = t2, this.style = i2, this.mustSelect = n2, this.scrollSpeed = { x: 0, y: 0 }, this.scrolling = -1, this.lastEvent = e2, this.scrollParent = Xc(t2.contentDOM);
    let r2 = t2.contentDOM.ownerDocument;
    r2.addEventListener("mousemove", this.move = this.move.bind(this)), r2.addEventListener("mouseup", this.up = this.up.bind(this)), this.extend = e2.shiftKey, this.multiple = t2.state.facet(N$1.allowMultipleSelections) && Lf(t2, e2), this.dragMove = Ef(t2, e2), this.dragging = Nf(t2, e2) && Jl(e2) == 1 ? null : false, this.dragging === false && (e2.preventDefault(), this.select(e2));
  }
  move(t2) {
    var e2;
    if (t2.buttons == 0)
      return this.destroy();
    if (this.dragging !== false)
      return;
    this.select(this.lastEvent = t2);
    let i2 = 0, n2 = 0, r2 = ((e2 = this.scrollParent) === null || e2 === void 0 ? void 0 : e2.getBoundingClientRect()) || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
    t2.clientX <= r2.left ? i2 = -Di(r2.left - t2.clientX) : t2.clientX >= r2.right && (i2 = Di(t2.clientX - r2.right)), t2.clientY <= r2.top ? n2 = -Di(r2.top - t2.clientY) : t2.clientY >= r2.bottom && (n2 = Di(t2.clientY - r2.bottom)), this.setScrollSpeed(i2, n2);
  }
  up(t2) {
    this.dragging == null && this.select(this.lastEvent), this.dragging || t2.preventDefault(), this.destroy();
  }
  destroy() {
    this.setScrollSpeed(0, 0);
    let t2 = this.view.contentDOM.ownerDocument;
    t2.removeEventListener("mousemove", this.move), t2.removeEventListener("mouseup", this.up), this.view.inputState.mouseSelection = null;
  }
  setScrollSpeed(t2, e2) {
    this.scrollSpeed = { x: t2, y: e2 }, t2 || e2 ? this.scrolling < 0 && (this.scrolling = setInterval(() => this.scroll(), 50)) : this.scrolling > -1 && (clearInterval(this.scrolling), this.scrolling = -1);
  }
  scroll() {
    this.scrollParent ? (this.scrollParent.scrollLeft += this.scrollSpeed.x, this.scrollParent.scrollTop += this.scrollSpeed.y) : this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y), this.dragging === false && this.select(this.lastEvent);
  }
  select(t2) {
    let e2 = this.style.get(t2, this.extend, this.multiple);
    (this.mustSelect || !e2.eq(this.view.state.selection) || e2.main.assoc != this.view.state.selection.main.assoc) && this.view.dispatch({
      selection: e2,
      userEvent: "select.pointer"
    }), this.mustSelect = false;
  }
  update(t2) {
    t2.docChanged && this.dragging && (this.dragging = this.dragging.map(t2.changes)), this.style.update(t2) && setTimeout(() => this.select(this.lastEvent), 20);
  }
}
function Lf(s, t2) {
  let e2 = s.state.facet(Tl);
  return e2.length ? e2[0](t2) : x.mac ? t2.metaKey : t2.ctrlKey;
}
function Ef(s, t2) {
  let e2 = s.state.facet(Pl);
  return e2.length ? e2[0](t2) : x.mac ? !t2.altKey : !t2.ctrlKey;
}
function Nf(s, t2) {
  let { main: e2 } = s.state.selection;
  if (e2.empty)
    return false;
  let i2 = en(s.root);
  if (!i2 || i2.rangeCount == 0)
    return true;
  let n2 = i2.getRangeAt(0).getClientRects();
  for (let r2 = 0; r2 < n2.length; r2++) {
    let o2 = n2[r2];
    if (o2.left <= t2.clientX && o2.right >= t2.clientX && o2.top <= t2.clientY && o2.bottom >= t2.clientY)
      return true;
  }
  return false;
}
function zr(s, t2) {
  if (!t2.bubbles)
    return true;
  if (t2.defaultPrevented)
    return false;
  for (let e2 = t2.target, i2; e2 != s.contentDOM; e2 = e2.parentNode)
    if (!e2 || e2.nodeType == 11 || (i2 = W.get(e2)) && i2.ignoreEvent(t2))
      return false;
  return true;
}
const Y = /* @__PURE__ */ Object.create(null), Os = /* @__PURE__ */ Object.create(null), Gl = x.ie && x.ie_version < 15 || x.ios && x.webkit_version < 604;
function Vf(s) {
  let t2 = s.dom.parentNode;
  if (!t2)
    return;
  let e2 = t2.appendChild(document.createElement("textarea"));
  e2.style.cssText = "position: fixed; left: -10000px; top: 10px", e2.focus(), setTimeout(() => {
    s.focus(), e2.remove(), Ul(s, e2.value);
  }, 50);
}
function Ul(s, t2) {
  let { state: e2 } = s, i2, n2 = 1, r2 = e2.toText(t2), o2 = r2.lines == e2.selection.ranges.length;
  if (Ms != null && e2.selection.ranges.every((h2) => h2.empty) && Ms == r2.toString()) {
    let h2 = -1;
    i2 = e2.changeByRange((a2) => {
      let c2 = e2.doc.lineAt(a2.from);
      if (c2.from == h2)
        return { range: a2 };
      h2 = c2.from;
      let f2 = e2.toText((o2 ? r2.line(n2++).text : t2) + e2.lineBreak);
      return {
        changes: { from: c2.from, insert: f2 },
        range: b.cursor(a2.from + f2.length)
      };
    });
  } else
    o2 ? i2 = e2.changeByRange((h2) => {
      let a2 = r2.line(n2++);
      return {
        changes: { from: h2.from, to: h2.to, insert: a2.text },
        range: b.cursor(h2.from + a2.length)
      };
    }) : i2 = e2.replaceSelection(r2);
  s.dispatch(i2, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
Y.keydown = (s, t2) => {
  s.inputState.setSelectionOrigin("select"), t2.keyCode == 27 ? s.inputState.lastEscPress = Date.now() : Kl.indexOf(t2.keyCode) < 0 && (s.inputState.lastEscPress = 0);
};
Y.touchstart = (s, t2) => {
  s.inputState.lastTouchTime = Date.now(), s.inputState.setSelectionOrigin("select.pointer");
};
Y.touchmove = (s) => {
  s.inputState.setSelectionOrigin("select.pointer");
};
Os.touchstart = Os.touchmove = { passive: true };
Y.mousedown = (s, t2) => {
  if (s.observer.flush(), s.inputState.lastTouchTime > Date.now() - 2e3)
    return;
  let e2 = null;
  for (let i2 of s.state.facet(Bl))
    if (e2 = i2(s, t2), e2)
      break;
  if (!e2 && t2.button == 0 && (e2 = $f(s, t2)), e2) {
    let i2 = s.root.activeElement != s.contentDOM;
    i2 && s.observer.ignore(() => ml(s.contentDOM)), s.inputState.startMouseSelection(new Rf(s, t2, e2, i2));
  }
};
function _r(s, t2, e2, i2) {
  if (i2 == 1)
    return b.cursor(t2, e2);
  if (i2 == 2)
    return vf(s.state, t2, e2);
  {
    let n2 = ut.find(s.docView, t2), r2 = s.state.doc.lineAt(n2 ? n2.posAtEnd : t2), o2 = n2 ? n2.posAtStart : r2.from, l2 = n2 ? n2.posAtEnd : r2.to;
    return l2 < s.state.doc.length && l2 == r2.to && l2++, b.range(o2, l2);
  }
}
let Ql = (s, t2) => s >= t2.top && s <= t2.bottom, Wr = (s, t2, e2) => Ql(t2, e2) && s >= e2.left && s <= e2.right;
function If(s, t2, e2, i2) {
  let n2 = ut.find(s.docView, t2);
  if (!n2)
    return 1;
  let r2 = t2 - n2.posAtStart;
  if (r2 == 0)
    return 1;
  if (r2 == n2.length)
    return -1;
  let o2 = n2.coordsAt(r2, -1);
  if (o2 && Wr(e2, i2, o2))
    return -1;
  let l2 = n2.coordsAt(r2, 1);
  return l2 && Wr(e2, i2, l2) ? 1 : o2 && Ql(i2, o2) ? -1 : 1;
}
function jr(s, t2) {
  let e2 = s.posAtCoords({ x: t2.clientX, y: t2.clientY }, false);
  return { pos: e2, bias: If(s, e2, t2.clientX, t2.clientY) };
}
const Hf = x.ie && x.ie_version <= 11;
let qr = null, Kr = 0, Gr = 0;
function Jl(s) {
  if (!Hf)
    return s.detail;
  let t2 = qr, e2 = Gr;
  return qr = s, Gr = Date.now(), Kr = !t2 || e2 > Date.now() - 400 && Math.abs(t2.clientX - s.clientX) < 2 && Math.abs(t2.clientY - s.clientY) < 2 ? (Kr + 1) % 3 : 1;
}
function $f(s, t2) {
  let e2 = jr(s, t2), i2 = Jl(t2), n2 = s.state.selection;
  return {
    update(r2) {
      r2.docChanged && (e2.pos = r2.changes.mapPos(e2.pos), n2 = n2.map(r2.changes));
    },
    get(r2, o2, l2) {
      let h2 = jr(s, r2), a2 = _r(s, h2.pos, h2.bias, i2);
      if (e2.pos != h2.pos && !o2) {
        let c2 = _r(s, e2.pos, e2.bias, i2), f2 = Math.min(c2.from, a2.from), u2 = Math.max(c2.to, a2.to);
        a2 = f2 < a2.from ? b.range(f2, u2) : b.range(u2, f2);
      }
      return o2 ? n2.replaceRange(n2.main.extend(a2.from, a2.to)) : l2 && n2.ranges.length > 1 && n2.ranges.some((c2) => c2.eq(a2)) ? Ff(n2, a2) : l2 ? n2.addRange(a2) : b.create([a2]);
    }
  };
}
function Ff(s, t2) {
  for (let e2 = 0; ; e2++)
    if (s.ranges[e2].eq(t2))
      return b.create(s.ranges.slice(0, e2).concat(s.ranges.slice(e2 + 1)), s.mainIndex == e2 ? 0 : s.mainIndex - (s.mainIndex > e2 ? 1 : 0));
}
Y.dragstart = (s, t2) => {
  let { selection: { main: e2 } } = s.state, { mouseSelection: i2 } = s.inputState;
  i2 && (i2.dragging = e2), t2.dataTransfer && (t2.dataTransfer.setData("Text", s.state.sliceDoc(e2.from, e2.to)), t2.dataTransfer.effectAllowed = "copyMove");
};
function Ur(s, t2, e2, i2) {
  if (!e2)
    return;
  let n2 = s.posAtCoords({ x: t2.clientX, y: t2.clientY }, false);
  t2.preventDefault();
  let { mouseSelection: r2 } = s.inputState, o2 = i2 && r2 && r2.dragging && r2.dragMove ? { from: r2.dragging.from, to: r2.dragging.to } : null, l2 = { from: n2, insert: e2 }, h2 = s.state.changes(o2 ? [o2, l2] : l2);
  s.focus(), s.dispatch({
    changes: h2,
    selection: { anchor: h2.mapPos(n2, -1), head: h2.mapPos(n2, 1) },
    userEvent: o2 ? "move.drop" : "input.drop"
  });
}
Y.drop = (s, t2) => {
  if (!t2.dataTransfer)
    return;
  if (s.state.readOnly)
    return t2.preventDefault();
  let e2 = t2.dataTransfer.files;
  if (e2 && e2.length) {
    t2.preventDefault();
    let i2 = Array(e2.length), n2 = 0, r2 = () => {
      ++n2 == e2.length && Ur(s, t2, i2.filter((o2) => o2 != null).join(s.state.lineBreak), false);
    };
    for (let o2 = 0; o2 < e2.length; o2++) {
      let l2 = new FileReader();
      l2.onerror = r2, l2.onload = () => {
        /[\x00-\x08\x0e-\x1f]{2}/.test(l2.result) || (i2[o2] = l2.result), r2();
      }, l2.readAsText(e2[o2]);
    }
  } else
    Ur(s, t2, t2.dataTransfer.getData("Text"), true);
};
Y.paste = (s, t2) => {
  if (s.state.readOnly)
    return t2.preventDefault();
  s.observer.flush();
  let e2 = Gl ? null : t2.clipboardData;
  e2 ? (Ul(s, e2.getData("text/plain")), t2.preventDefault()) : Vf(s);
};
function zf(s, t2) {
  let e2 = s.dom.parentNode;
  if (!e2)
    return;
  let i2 = e2.appendChild(document.createElement("textarea"));
  i2.style.cssText = "position: fixed; left: -10000px; top: 10px", i2.value = t2, i2.focus(), i2.selectionEnd = t2.length, i2.selectionStart = 0, setTimeout(() => {
    i2.remove(), s.focus();
  }, 50);
}
function _f(s) {
  let t2 = [], e2 = [], i2 = false;
  for (let n2 of s.selection.ranges)
    n2.empty || (t2.push(s.sliceDoc(n2.from, n2.to)), e2.push(n2));
  if (!t2.length) {
    let n2 = -1;
    for (let { from: r2 } of s.selection.ranges) {
      let o2 = s.doc.lineAt(r2);
      o2.number > n2 && (t2.push(o2.text), e2.push({ from: o2.from, to: Math.min(s.doc.length, o2.to + 1) })), n2 = o2.number;
    }
    i2 = true;
  }
  return { text: t2.join(s.lineBreak), ranges: e2, linewise: i2 };
}
let Ms = null;
Y.copy = Y.cut = (s, t2) => {
  let { text: e2, ranges: i2, linewise: n2 } = _f(s.state);
  if (!e2 && !n2)
    return;
  Ms = n2 ? e2 : null;
  let r2 = Gl ? null : t2.clipboardData;
  r2 ? (t2.preventDefault(), r2.clearData(), r2.setData("text/plain", e2)) : zf(s, e2), t2.type == "cut" && !s.state.readOnly && s.dispatch({
    changes: i2,
    scrollIntoView: true,
    userEvent: "delete.cut"
  });
};
function Xl(s) {
  setTimeout(() => {
    s.hasFocus != s.inputState.notifiedFocused && s.update([]);
  }, 10);
}
Y.focus = (s) => {
  s.inputState.lastFocusTime = Date.now(), !s.scrollDOM.scrollTop && (s.inputState.lastScrollTop || s.inputState.lastScrollLeft) && (s.scrollDOM.scrollTop = s.inputState.lastScrollTop, s.scrollDOM.scrollLeft = s.inputState.lastScrollLeft), Xl(s);
};
Y.blur = (s) => {
  s.observer.clearSelectionRange(), Xl(s);
};
Y.compositionstart = Y.compositionupdate = (s) => {
  s.inputState.compositionFirstChange == null && (s.inputState.compositionFirstChange = true), s.inputState.composing < 0 && (s.inputState.composing = 0);
};
Y.compositionend = (s) => {
  s.inputState.composing = -1, s.inputState.compositionEndedAt = Date.now(), s.inputState.compositionFirstChange = null, x.chrome && x.android && s.observer.flushSoon(), setTimeout(() => {
    s.inputState.composing < 0 && s.docView.compositionDeco.size && s.update([]);
  }, 50);
};
Y.contextmenu = (s) => {
  s.inputState.lastContextMenu = Date.now();
};
Y.beforeinput = (s, t2) => {
  var e2;
  let i2;
  if (x.chrome && x.android && (i2 = ql.find((n2) => n2.inputType == t2.inputType)) && (s.observer.delayAndroidKey(i2.key, i2.keyCode), i2.key == "Backspace" || i2.key == "Delete")) {
    let n2 = ((e2 = window.visualViewport) === null || e2 === void 0 ? void 0 : e2.height) || 0;
    setTimeout(() => {
      var r2;
      (((r2 = window.visualViewport) === null || r2 === void 0 ? void 0 : r2.height) || 0) > n2 + 10 && s.hasFocus && (s.contentDOM.blur(), s.focus());
    }, 100);
  }
};
const Qr = ["pre-wrap", "normal", "pre-line", "break-spaces"];
class Wf {
  constructor(t2) {
    this.lineWrapping = t2, this.doc = E.empty, this.heightSamples = {}, this.lineHeight = 14, this.charWidth = 7, this.lineLength = 30, this.heightChanged = false;
  }
  heightForGap(t2, e2) {
    let i2 = this.doc.lineAt(e2).number - this.doc.lineAt(t2).number + 1;
    return this.lineWrapping && (i2 += Math.ceil((e2 - t2 - i2 * this.lineLength * 0.5) / this.lineLength)), this.lineHeight * i2;
  }
  heightForLine(t2) {
    return this.lineWrapping ? (1 + Math.max(0, Math.ceil((t2 - this.lineLength) / (this.lineLength - 5)))) * this.lineHeight : this.lineHeight;
  }
  setDoc(t2) {
    return this.doc = t2, this;
  }
  mustRefreshForWrapping(t2) {
    return Qr.indexOf(t2) > -1 != this.lineWrapping;
  }
  mustRefreshForHeights(t2) {
    let e2 = false;
    for (let i2 = 0; i2 < t2.length; i2++) {
      let n2 = t2[i2];
      n2 < 0 ? i2++ : this.heightSamples[Math.floor(n2 * 10)] || (e2 = true, this.heightSamples[Math.floor(n2 * 10)] = true);
    }
    return e2;
  }
  refresh(t2, e2, i2, n2, r2) {
    let o2 = Qr.indexOf(t2) > -1, l2 = Math.round(e2) != Math.round(this.lineHeight) || this.lineWrapping != o2;
    if (this.lineWrapping = o2, this.lineHeight = e2, this.charWidth = i2, this.lineLength = n2, l2) {
      this.heightSamples = {};
      for (let h2 = 0; h2 < r2.length; h2++) {
        let a2 = r2[h2];
        a2 < 0 ? h2++ : this.heightSamples[Math.floor(a2 * 10)] = true;
      }
    }
    return l2;
  }
}
class jf {
  constructor(t2, e2) {
    this.from = t2, this.heights = e2, this.index = 0;
  }
  get more() {
    return this.index < this.heights.length;
  }
}
class ae {
  constructor(t2, e2, i2, n2, r2) {
    this.from = t2, this.length = e2, this.top = i2, this.height = n2, this.type = r2;
  }
  get to() {
    return this.from + this.length;
  }
  get bottom() {
    return this.top + this.height;
  }
  join(t2) {
    let e2 = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(t2.type) ? t2.type : [t2]);
    return new ae(this.from, this.length + t2.length, this.top, this.height + t2.height, e2);
  }
}
var z$1 = /* @__PURE__ */ function(s) {
  return s[s.ByPos = 0] = "ByPos", s[s.ByHeight = 1] = "ByHeight", s[s.ByPosNoHeight = 2] = "ByPosNoHeight", s;
}(z$1 || (z$1 = {}));
const qi = 1e-3;
class dt {
  constructor(t2, e2, i2 = 2) {
    this.length = t2, this.height = e2, this.flags = i2;
  }
  get outdated() {
    return (this.flags & 2) > 0;
  }
  set outdated(t2) {
    this.flags = (t2 ? 2 : 0) | this.flags & -3;
  }
  setHeight(t2, e2) {
    this.height != e2 && (Math.abs(this.height - e2) > qi && (t2.heightChanged = true), this.height = e2);
  }
  replace(t2, e2, i2) {
    return dt.of(i2);
  }
  decomposeLeft(t2, e2) {
    e2.push(this);
  }
  decomposeRight(t2, e2) {
    e2.push(this);
  }
  applyChanges(t2, e2, i2, n2) {
    let r2 = this;
    for (let o2 = n2.length - 1; o2 >= 0; o2--) {
      let { fromA: l2, toA: h2, fromB: a2, toB: c2 } = n2[o2], f2 = r2.lineAt(l2, z$1.ByPosNoHeight, e2, 0, 0), u2 = f2.to >= h2 ? f2 : r2.lineAt(h2, z$1.ByPosNoHeight, e2, 0, 0);
      for (c2 += u2.to - h2, h2 = u2.to; o2 > 0 && f2.from <= n2[o2 - 1].toA; )
        l2 = n2[o2 - 1].fromA, a2 = n2[o2 - 1].fromB, o2--, l2 < f2.from && (f2 = r2.lineAt(l2, z$1.ByPosNoHeight, e2, 0, 0));
      a2 += f2.from - l2, l2 = f2.from;
      let d2 = Xs.build(i2, t2, a2, c2);
      r2 = r2.replace(l2, h2, d2);
    }
    return r2.updateHeight(i2, 0);
  }
  static empty() {
    return new bt(0, 0);
  }
  static of(t2) {
    if (t2.length == 1)
      return t2[0];
    let e2 = 0, i2 = t2.length, n2 = 0, r2 = 0;
    for (; ; )
      if (e2 == i2)
        if (n2 > r2 * 2) {
          let l2 = t2[e2 - 1];
          l2.break ? t2.splice(--e2, 1, l2.left, null, l2.right) : t2.splice(--e2, 1, l2.left, l2.right), i2 += 1 + l2.break, n2 -= l2.size;
        } else if (r2 > n2 * 2) {
          let l2 = t2[i2];
          l2.break ? t2.splice(i2, 1, l2.left, null, l2.right) : t2.splice(i2, 1, l2.left, l2.right), i2 += 2 + l2.break, r2 -= l2.size;
        } else
          break;
      else if (n2 < r2) {
        let l2 = t2[e2++];
        l2 && (n2 += l2.size);
      } else {
        let l2 = t2[--i2];
        l2 && (r2 += l2.size);
      }
    let o2 = 0;
    return t2[e2 - 1] == null ? (o2 = 1, e2--) : t2[e2] == null && (o2 = 1, i2++), new qf(dt.of(t2.slice(0, e2)), o2, dt.of(t2.slice(i2)));
  }
}
dt.prototype.size = 1;
class Yl extends dt {
  constructor(t2, e2, i2) {
    super(t2, e2), this.type = i2;
  }
  blockAt(t2, e2, i2, n2) {
    return new ae(n2, this.length, i2, this.height, this.type);
  }
  lineAt(t2, e2, i2, n2, r2) {
    return this.blockAt(0, i2, n2, r2);
  }
  forEachLine(t2, e2, i2, n2, r2, o2) {
    t2 <= r2 + this.length && e2 >= r2 && o2(this.blockAt(0, i2, n2, r2));
  }
  updateHeight(t2, e2 = 0, i2 = false, n2) {
    return n2 && n2.from <= e2 && n2.more && this.setHeight(t2, n2.heights[n2.index++]), this.outdated = false, this;
  }
  toString() {
    return `block(${this.length})`;
  }
}
class bt extends Yl {
  constructor(t2, e2) {
    super(t2, e2, U.Text), this.collapsed = 0, this.widgetHeight = 0;
  }
  replace(t2, e2, i2) {
    let n2 = i2[0];
    return i2.length == 1 && (n2 instanceof bt || n2 instanceof it && n2.flags & 4) && Math.abs(this.length - n2.length) < 10 ? (n2 instanceof it ? n2 = new bt(n2.length, this.height) : n2.height = this.height, this.outdated || (n2.outdated = false), n2) : dt.of(i2);
  }
  updateHeight(t2, e2 = 0, i2 = false, n2) {
    return n2 && n2.from <= e2 && n2.more ? this.setHeight(t2, n2.heights[n2.index++]) : (i2 || this.outdated) && this.setHeight(t2, Math.max(this.widgetHeight, t2.heightForLine(this.length - this.collapsed))), this.outdated = false, this;
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
  }
}
class it extends dt {
  constructor(t2) {
    super(t2, 0);
  }
  lines(t2, e2) {
    let i2 = t2.lineAt(e2).number, n2 = t2.lineAt(e2 + this.length).number;
    return { firstLine: i2, lastLine: n2, lineHeight: this.height / (n2 - i2 + 1) };
  }
  blockAt(t2, e2, i2, n2) {
    let { firstLine: r2, lastLine: o2, lineHeight: l2 } = this.lines(e2, n2), h2 = Math.max(0, Math.min(o2 - r2, Math.floor((t2 - i2) / l2))), { from: a2, length: c2 } = e2.line(r2 + h2);
    return new ae(a2, c2, i2 + l2 * h2, l2, U.Text);
  }
  lineAt(t2, e2, i2, n2, r2) {
    if (e2 == z$1.ByHeight)
      return this.blockAt(t2, i2, n2, r2);
    if (e2 == z$1.ByPosNoHeight) {
      let { from: f2, to: u2 } = i2.lineAt(t2);
      return new ae(f2, u2 - f2, 0, 0, U.Text);
    }
    let { firstLine: o2, lineHeight: l2 } = this.lines(i2, r2), { from: h2, length: a2, number: c2 } = i2.lineAt(t2);
    return new ae(h2, a2, n2 + l2 * (c2 - o2), l2, U.Text);
  }
  forEachLine(t2, e2, i2, n2, r2, o2) {
    let { firstLine: l2, lineHeight: h2 } = this.lines(i2, r2);
    for (let a2 = Math.max(t2, r2), c2 = Math.min(r2 + this.length, e2); a2 <= c2; ) {
      let f2 = i2.lineAt(a2);
      a2 == t2 && (n2 += h2 * (f2.number - l2)), o2(new ae(f2.from, f2.length, n2, h2, U.Text)), n2 += h2, a2 = f2.to + 1;
    }
  }
  replace(t2, e2, i2) {
    let n2 = this.length - e2;
    if (n2 > 0) {
      let r2 = i2[i2.length - 1];
      r2 instanceof it ? i2[i2.length - 1] = new it(r2.length + n2) : i2.push(null, new it(n2 - 1));
    }
    if (t2 > 0) {
      let r2 = i2[0];
      r2 instanceof it ? i2[0] = new it(t2 + r2.length) : i2.unshift(new it(t2 - 1), null);
    }
    return dt.of(i2);
  }
  decomposeLeft(t2, e2) {
    e2.push(new it(t2 - 1), null);
  }
  decomposeRight(t2, e2) {
    e2.push(null, new it(this.length - t2 - 1));
  }
  updateHeight(t2, e2 = 0, i2 = false, n2) {
    let r2 = e2 + this.length;
    if (n2 && n2.from <= e2 + this.length && n2.more) {
      let o2 = [], l2 = Math.max(e2, n2.from), h2 = -1, a2 = t2.heightChanged;
      for (n2.from > e2 && o2.push(new it(n2.from - e2 - 1).updateHeight(t2, e2)); l2 <= r2 && n2.more; ) {
        let f2 = t2.doc.lineAt(l2).length;
        o2.length && o2.push(null);
        let u2 = n2.heights[n2.index++];
        h2 == -1 ? h2 = u2 : Math.abs(u2 - h2) >= qi && (h2 = -2);
        let d2 = new bt(f2, u2);
        d2.outdated = false, o2.push(d2), l2 += f2 + 1;
      }
      l2 <= r2 && o2.push(null, new it(r2 - l2).updateHeight(t2, l2));
      let c2 = dt.of(o2);
      return t2.heightChanged = a2 || h2 < 0 || Math.abs(c2.height - this.height) >= qi || Math.abs(h2 - this.lines(t2.doc, e2).lineHeight) >= qi, c2;
    } else
      (i2 || this.outdated) && (this.setHeight(t2, t2.heightForGap(e2, e2 + this.length)), this.outdated = false);
    return this;
  }
  toString() {
    return `gap(${this.length})`;
  }
}
class qf extends dt {
  constructor(t2, e2, i2) {
    super(t2.length + e2 + i2.length, t2.height + i2.height, e2 | (t2.outdated || i2.outdated ? 2 : 0)), this.left = t2, this.right = i2, this.size = t2.size + i2.size;
  }
  get break() {
    return this.flags & 1;
  }
  blockAt(t2, e2, i2, n2) {
    let r2 = i2 + this.left.height;
    return t2 < r2 ? this.left.blockAt(t2, e2, i2, n2) : this.right.blockAt(t2, e2, r2, n2 + this.left.length + this.break);
  }
  lineAt(t2, e2, i2, n2, r2) {
    let o2 = n2 + this.left.height, l2 = r2 + this.left.length + this.break, h2 = e2 == z$1.ByHeight ? t2 < o2 : t2 < l2, a2 = h2 ? this.left.lineAt(t2, e2, i2, n2, r2) : this.right.lineAt(t2, e2, i2, o2, l2);
    if (this.break || (h2 ? a2.to < l2 : a2.from > l2))
      return a2;
    let c2 = e2 == z$1.ByPosNoHeight ? z$1.ByPosNoHeight : z$1.ByPos;
    return h2 ? a2.join(this.right.lineAt(l2, c2, i2, o2, l2)) : this.left.lineAt(l2, c2, i2, n2, r2).join(a2);
  }
  forEachLine(t2, e2, i2, n2, r2, o2) {
    let l2 = n2 + this.left.height, h2 = r2 + this.left.length + this.break;
    if (this.break)
      t2 < h2 && this.left.forEachLine(t2, e2, i2, n2, r2, o2), e2 >= h2 && this.right.forEachLine(t2, e2, i2, l2, h2, o2);
    else {
      let a2 = this.lineAt(h2, z$1.ByPos, i2, n2, r2);
      t2 < a2.from && this.left.forEachLine(t2, a2.from - 1, i2, n2, r2, o2), a2.to >= t2 && a2.from <= e2 && o2(a2), e2 > a2.to && this.right.forEachLine(a2.to + 1, e2, i2, l2, h2, o2);
    }
  }
  replace(t2, e2, i2) {
    let n2 = this.left.length + this.break;
    if (e2 < n2)
      return this.balanced(this.left.replace(t2, e2, i2), this.right);
    if (t2 > this.left.length)
      return this.balanced(this.left, this.right.replace(t2 - n2, e2 - n2, i2));
    let r2 = [];
    t2 > 0 && this.decomposeLeft(t2, r2);
    let o2 = r2.length;
    for (let l2 of i2)
      r2.push(l2);
    if (t2 > 0 && Jr(r2, o2 - 1), e2 < this.length) {
      let l2 = r2.length;
      this.decomposeRight(e2, r2), Jr(r2, l2);
    }
    return dt.of(r2);
  }
  decomposeLeft(t2, e2) {
    let i2 = this.left.length;
    if (t2 <= i2)
      return this.left.decomposeLeft(t2, e2);
    e2.push(this.left), this.break && (i2++, t2 >= i2 && e2.push(null)), t2 > i2 && this.right.decomposeLeft(t2 - i2, e2);
  }
  decomposeRight(t2, e2) {
    let i2 = this.left.length, n2 = i2 + this.break;
    if (t2 >= n2)
      return this.right.decomposeRight(t2 - n2, e2);
    t2 < i2 && this.left.decomposeRight(t2, e2), this.break && t2 < n2 && e2.push(null), e2.push(this.right);
  }
  balanced(t2, e2) {
    return t2.size > 2 * e2.size || e2.size > 2 * t2.size ? dt.of(this.break ? [t2, null, e2] : [t2, e2]) : (this.left = t2, this.right = e2, this.height = t2.height + e2.height, this.outdated = t2.outdated || e2.outdated, this.size = t2.size + e2.size, this.length = t2.length + this.break + e2.length, this);
  }
  updateHeight(t2, e2 = 0, i2 = false, n2) {
    let { left: r2, right: o2 } = this, l2 = e2 + r2.length + this.break, h2 = null;
    return n2 && n2.from <= e2 + r2.length && n2.more ? h2 = r2 = r2.updateHeight(t2, e2, i2, n2) : r2.updateHeight(t2, e2, i2), n2 && n2.from <= l2 + o2.length && n2.more ? h2 = o2 = o2.updateHeight(t2, l2, i2, n2) : o2.updateHeight(t2, l2, i2), h2 ? this.balanced(r2, o2) : (this.height = this.left.height + this.right.height, this.outdated = false, this);
  }
  toString() {
    return this.left + (this.break ? " " : "-") + this.right;
  }
}
function Jr(s, t2) {
  let e2, i2;
  s[t2] == null && (e2 = s[t2 - 1]) instanceof it && (i2 = s[t2 + 1]) instanceof it && s.splice(t2 - 1, 3, new it(e2.length + 1 + i2.length));
}
const Kf = 5;
class Xs {
  constructor(t2, e2) {
    this.pos = t2, this.oracle = e2, this.nodes = [], this.lineStart = -1, this.lineEnd = -1, this.covering = null, this.writtenTo = t2;
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
  }
  span(t2, e2) {
    if (this.lineStart > -1) {
      let i2 = Math.min(e2, this.lineEnd), n2 = this.nodes[this.nodes.length - 1];
      n2 instanceof bt ? n2.length += i2 - this.pos : (i2 > this.pos || !this.isCovered) && this.nodes.push(new bt(i2 - this.pos, -1)), this.writtenTo = i2, e2 > i2 && (this.nodes.push(null), this.writtenTo++, this.lineStart = -1);
    }
    this.pos = e2;
  }
  point(t2, e2, i2) {
    if (t2 < e2 || i2.heightRelevant) {
      let n2 = i2.widget ? i2.widget.estimatedHeight : 0;
      n2 < 0 && (n2 = this.oracle.lineHeight);
      let r2 = e2 - t2;
      i2.block ? this.addBlock(new Yl(r2, n2, i2.type)) : (r2 || n2 >= Kf) && this.addLineDeco(n2, r2);
    } else
      e2 > t2 && this.span(t2, e2);
    this.lineEnd > -1 && this.lineEnd < this.pos && (this.lineEnd = this.oracle.doc.lineAt(this.pos).to);
  }
  enterLine() {
    if (this.lineStart > -1)
      return;
    let { from: t2, to: e2 } = this.oracle.doc.lineAt(this.pos);
    this.lineStart = t2, this.lineEnd = e2, this.writtenTo < t2 && ((this.writtenTo < t2 - 1 || this.nodes[this.nodes.length - 1] == null) && this.nodes.push(this.blankContent(this.writtenTo, t2 - 1)), this.nodes.push(null)), this.pos > t2 && this.nodes.push(new bt(this.pos - t2, -1)), this.writtenTo = this.pos;
  }
  blankContent(t2, e2) {
    let i2 = new it(e2 - t2);
    return this.oracle.doc.lineAt(t2).to == e2 && (i2.flags |= 4), i2;
  }
  ensureLine() {
    this.enterLine();
    let t2 = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
    if (t2 instanceof bt)
      return t2;
    let e2 = new bt(0, -1);
    return this.nodes.push(e2), e2;
  }
  addBlock(t2) {
    this.enterLine(), t2.type == U.WidgetAfter && !this.isCovered && this.ensureLine(), this.nodes.push(t2), this.writtenTo = this.pos = this.pos + t2.length, t2.type != U.WidgetBefore && (this.covering = t2);
  }
  addLineDeco(t2, e2) {
    let i2 = this.ensureLine();
    i2.length += e2, i2.collapsed += e2, i2.widgetHeight = Math.max(i2.widgetHeight, t2), this.writtenTo = this.pos = this.pos + e2;
  }
  finish(t2) {
    let e2 = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
    this.lineStart > -1 && !(e2 instanceof bt) && !this.isCovered ? this.nodes.push(new bt(0, -1)) : (this.writtenTo < this.pos || e2 == null) && this.nodes.push(this.blankContent(this.writtenTo, this.pos));
    let i2 = t2;
    for (let n2 of this.nodes)
      n2 instanceof bt && n2.updateHeight(this.oracle, i2), i2 += n2 ? n2.length : 1;
    return this.nodes;
  }
  static build(t2, e2, i2, n2) {
    let r2 = new Xs(i2, t2);
    return $.spans(e2, i2, n2, r2, 0), r2.finish(i2);
  }
}
function Gf(s, t2, e2) {
  let i2 = new Uf();
  return $.compare(s, t2, e2, i2, 0), i2.changes;
}
class Uf {
  constructor() {
    this.changes = [];
  }
  compareRange() {
  }
  comparePoint(t2, e2, i2, n2) {
    (t2 < e2 || i2 && i2.heightRelevant || n2 && n2.heightRelevant) && xs(t2, e2, this.changes, 5);
  }
}
function Qf(s, t2) {
  let e2 = s.getBoundingClientRect(), i2 = s.ownerDocument, n2 = i2.defaultView || window, r2 = Math.max(0, e2.left), o2 = Math.min(n2.innerWidth, e2.right), l2 = Math.max(0, e2.top), h2 = Math.min(n2.innerHeight, e2.bottom);
  for (let a2 = s.parentNode; a2 && a2 != i2.body; )
    if (a2.nodeType == 1) {
      let c2 = a2, f2 = window.getComputedStyle(c2);
      if ((c2.scrollHeight > c2.clientHeight || c2.scrollWidth > c2.clientWidth) && f2.overflow != "visible") {
        let u2 = c2.getBoundingClientRect();
        r2 = Math.max(r2, u2.left), o2 = Math.min(o2, u2.right), l2 = Math.max(l2, u2.top), h2 = a2 == s.parentNode ? u2.bottom : Math.min(h2, u2.bottom);
      }
      a2 = f2.position == "absolute" || f2.position == "fixed" ? c2.offsetParent : c2.parentNode;
    } else if (a2.nodeType == 11)
      a2 = a2.host;
    else
      break;
  return {
    left: r2 - e2.left,
    right: Math.max(r2, o2) - e2.left,
    top: l2 - (e2.top + t2),
    bottom: Math.max(l2, h2) - (e2.top + t2)
  };
}
function Jf(s, t2) {
  let e2 = s.getBoundingClientRect();
  return {
    left: 0,
    right: e2.right - e2.left,
    top: t2,
    bottom: e2.bottom - (e2.top + t2)
  };
}
class zn {
  constructor(t2, e2, i2) {
    this.from = t2, this.to = e2, this.size = i2;
  }
  static same(t2, e2) {
    if (t2.length != e2.length)
      return false;
    for (let i2 = 0; i2 < t2.length; i2++) {
      let n2 = t2[i2], r2 = e2[i2];
      if (n2.from != r2.from || n2.to != r2.to || n2.size != r2.size)
        return false;
    }
    return true;
  }
  draw(t2) {
    return T.replace({ widget: new Xf(this.size, t2) }).range(this.from, this.to);
  }
}
class Xf extends ye {
  constructor(t2, e2) {
    super(), this.size = t2, this.vertical = e2;
  }
  eq(t2) {
    return t2.size == this.size && t2.vertical == this.vertical;
  }
  toDOM() {
    let t2 = document.createElement("div");
    return this.vertical ? t2.style.height = this.size + "px" : (t2.style.width = this.size + "px", t2.style.height = "2px", t2.style.display = "inline-block"), t2;
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1;
  }
}
class Xr {
  constructor(t2) {
    this.state = t2, this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 }, this.inView = true, this.paddingTop = 0, this.paddingBottom = 0, this.contentDOMWidth = 0, this.contentDOMHeight = 0, this.editorHeight = 0, this.editorWidth = 0, this.scaler = Yr, this.scrollTarget = null, this.printing = false, this.mustMeasureContent = true, this.defaultTextDirection = X.LTR, this.visibleRanges = [], this.mustEnforceCursorAssoc = false;
    let e2 = t2.facet(Js).some((i2) => typeof i2 != "function" && i2.class == "cm-lineWrapping");
    this.heightOracle = new Wf(e2), this.stateDeco = t2.facet(gi).filter((i2) => typeof i2 != "function"), this.heightMap = dt.empty().applyChanges(this.stateDeco, E.empty, this.heightOracle.setDoc(t2.doc), [new _t(0, 0, 0, t2.doc.length)]), this.viewport = this.getViewport(0, null), this.updateViewportLines(), this.updateForViewport(), this.lineGaps = this.ensureLineGaps([]), this.lineGapDeco = T.set(this.lineGaps.map((i2) => i2.draw(false))), this.computeVisibleRanges();
  }
  updateForViewport() {
    let t2 = [this.viewport], { main: e2 } = this.state.selection;
    for (let i2 = 0; i2 <= 1; i2++) {
      let n2 = i2 ? e2.head : e2.anchor;
      if (!t2.some(({ from: r2, to: o2 }) => n2 >= r2 && n2 <= o2)) {
        let { from: r2, to: o2 } = this.lineBlockAt(n2);
        t2.push(new Ti(r2, o2));
      }
    }
    this.viewports = t2.sort((i2, n2) => i2.from - n2.from), this.scaler = this.heightMap.height <= 7e6 ? Yr : new tu(this.heightOracle.doc, this.heightMap, this.viewports);
  }
  updateViewportLines() {
    this.viewportLines = [], this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, (t2) => {
      this.viewportLines.push(this.scaler.scale == 1 ? t2 : oi(t2, this.scaler));
    });
  }
  update(t2, e2 = null) {
    this.state = t2.state;
    let i2 = this.stateDeco;
    this.stateDeco = this.state.facet(gi).filter((a2) => typeof a2 != "function");
    let n2 = t2.changedRanges, r2 = _t.extendWithRanges(n2, Gf(i2, this.stateDeco, t2 ? t2.changes : Z$1.empty(this.state.doc.length))), o2 = this.heightMap.height;
    this.heightMap = this.heightMap.applyChanges(this.stateDeco, t2.startState.doc, this.heightOracle.setDoc(this.state.doc), r2), this.heightMap.height != o2 && (t2.flags |= 2);
    let l2 = r2.length ? this.mapViewport(this.viewport, t2.changes) : this.viewport;
    (e2 && (e2.range.head < l2.from || e2.range.head > l2.to) || !this.viewportIsAppropriate(l2)) && (l2 = this.getViewport(0, e2));
    let h2 = !t2.changes.empty || t2.flags & 2 || l2.from != this.viewport.from || l2.to != this.viewport.to;
    this.viewport = l2, this.updateForViewport(), h2 && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1) && this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, t2.changes))), t2.flags |= this.computeVisibleRanges(), e2 && (this.scrollTarget = e2), !this.mustEnforceCursorAssoc && t2.selectionSet && t2.view.lineWrapping && t2.state.selection.main.empty && t2.state.selection.main.assoc && !t2.state.facet(of) && (this.mustEnforceCursorAssoc = true);
  }
  measure(t2) {
    let e2 = t2.contentDOM, i2 = window.getComputedStyle(e2), n2 = this.heightOracle, r2 = i2.whiteSpace;
    this.defaultTextDirection = i2.direction == "rtl" ? X.RTL : X.LTR;
    let o2 = this.heightOracle.mustRefreshForWrapping(r2), l2 = o2 || this.mustMeasureContent || this.contentDOMHeight != e2.clientHeight;
    this.contentDOMHeight = e2.clientHeight, this.mustMeasureContent = false;
    let h2 = 0, a2 = 0, c2 = parseInt(i2.paddingTop) || 0, f2 = parseInt(i2.paddingBottom) || 0;
    (this.paddingTop != c2 || this.paddingBottom != f2) && (this.paddingTop = c2, this.paddingBottom = f2, h2 |= 10), this.editorWidth != t2.scrollDOM.clientWidth && (n2.lineWrapping && (l2 = true), this.editorWidth = t2.scrollDOM.clientWidth, h2 |= 8);
    let u2 = (this.printing ? Jf : Qf)(e2, this.paddingTop), d2 = u2.top - this.pixelViewport.top, p2 = u2.bottom - this.pixelViewport.bottom;
    this.pixelViewport = u2;
    let w = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
    if (w != this.inView && (this.inView = w, w && (l2 = true)), !this.inView && !this.scrollTarget)
      return 0;
    let g2 = e2.clientWidth;
    if ((this.contentDOMWidth != g2 || this.editorHeight != t2.scrollDOM.clientHeight) && (this.contentDOMWidth = g2, this.editorHeight = t2.scrollDOM.clientHeight, h2 |= 8), l2) {
      let O2 = t2.docView.measureVisibleLineHeights(this.viewport);
      if (n2.mustRefreshForHeights(O2) && (o2 = true), o2 || n2.lineWrapping && Math.abs(g2 - this.contentDOMWidth) > n2.charWidth) {
        let { lineHeight: S2, charWidth: D2 } = t2.docView.measureTextSize();
        o2 = S2 > 0 && n2.refresh(r2, S2, D2, g2 / D2, O2), o2 && (t2.docView.minWidth = 0, h2 |= 8);
      }
      d2 > 0 && p2 > 0 ? a2 = Math.max(d2, p2) : d2 < 0 && p2 < 0 && (a2 = Math.min(d2, p2)), n2.heightChanged = false;
      for (let S2 of this.viewports) {
        let D2 = S2.from == this.viewport.from ? O2 : t2.docView.measureVisibleLineHeights(S2);
        this.heightMap = (o2 ? dt.empty().applyChanges(this.stateDeco, E.empty, this.heightOracle, [new _t(0, 0, 0, t2.state.doc.length)]) : this.heightMap).updateHeight(n2, 0, o2, new jf(S2.from, D2));
      }
      n2.heightChanged && (h2 |= 2);
    }
    let y = !this.viewportIsAppropriate(this.viewport, a2) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
    return y && (this.viewport = this.getViewport(a2, this.scrollTarget)), this.updateForViewport(), (h2 & 2 || y) && this.updateViewportLines(), (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1) && this.updateLineGaps(this.ensureLineGaps(o2 ? [] : this.lineGaps, t2)), h2 |= this.computeVisibleRanges(), this.mustEnforceCursorAssoc && (this.mustEnforceCursorAssoc = false, t2.docView.enforceCursorAssoc()), h2;
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top);
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom);
  }
  getViewport(t2, e2) {
    let i2 = 0.5 - Math.max(-0.5, Math.min(0.5, t2 / 1e3 / 2)), n2 = this.heightMap, r2 = this.state.doc, { visibleTop: o2, visibleBottom: l2 } = this, h2 = new Ti(n2.lineAt(o2 - i2 * 1e3, z$1.ByHeight, r2, 0, 0).from, n2.lineAt(l2 + (1 - i2) * 1e3, z$1.ByHeight, r2, 0, 0).to);
    if (e2) {
      let { head: a2 } = e2.range;
      if (a2 < h2.from || a2 > h2.to) {
        let c2 = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top), f2 = n2.lineAt(a2, z$1.ByPos, r2, 0, 0), u2;
        e2.y == "center" ? u2 = (f2.top + f2.bottom) / 2 - c2 / 2 : e2.y == "start" || e2.y == "nearest" && a2 < h2.from ? u2 = f2.top : u2 = f2.bottom - c2, h2 = new Ti(n2.lineAt(u2 - 1e3 / 2, z$1.ByHeight, r2, 0, 0).from, n2.lineAt(u2 + c2 + 1e3 / 2, z$1.ByHeight, r2, 0, 0).to);
      }
    }
    return h2;
  }
  mapViewport(t2, e2) {
    let i2 = e2.mapPos(t2.from, -1), n2 = e2.mapPos(t2.to, 1);
    return new Ti(this.heightMap.lineAt(i2, z$1.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(n2, z$1.ByPos, this.state.doc, 0, 0).to);
  }
  viewportIsAppropriate({ from: t2, to: e2 }, i2 = 0) {
    if (!this.inView)
      return true;
    let { top: n2 } = this.heightMap.lineAt(t2, z$1.ByPos, this.state.doc, 0, 0), { bottom: r2 } = this.heightMap.lineAt(e2, z$1.ByPos, this.state.doc, 0, 0), { visibleTop: o2, visibleBottom: l2 } = this;
    return (t2 == 0 || n2 <= o2 - Math.max(10, Math.min(
      -i2,
      250
    ))) && (e2 == this.state.doc.length || r2 >= l2 + Math.max(10, Math.min(
      i2,
      250
    ))) && n2 > o2 - 2 * 1e3 && r2 < l2 + 2 * 1e3;
  }
  mapLineGaps(t2, e2) {
    if (!t2.length || e2.empty)
      return t2;
    let i2 = [];
    for (let n2 of t2)
      e2.touchesRange(n2.from, n2.to) || i2.push(new zn(e2.mapPos(n2.from), e2.mapPos(n2.to), n2.size));
    return i2;
  }
  ensureLineGaps(t2, e2) {
    let i2 = this.heightOracle.lineWrapping, n2 = i2 ? 1e4 : 2e3, r2 = n2 >> 1, o2 = n2 << 1;
    if (this.defaultTextDirection != X.LTR && !i2)
      return [];
    let l2 = [], h2 = (a2, c2, f2, u2) => {
      if (c2 - a2 < r2)
        return;
      let d2 = this.state.selection.main, p2 = [d2.from];
      d2.empty || p2.push(d2.to);
      for (let g2 of p2)
        if (g2 > a2 && g2 < c2) {
          h2(a2, g2 - 10, f2, u2), h2(g2 + 10, c2, f2, u2);
          return;
        }
      let w = Zf(t2, (g2) => g2.from >= f2.from && g2.to <= f2.to && Math.abs(g2.from - a2) < r2 && Math.abs(g2.to - c2) < r2 && !p2.some((y) => g2.from < y && g2.to > y));
      if (!w) {
        if (c2 < f2.to && e2 && i2 && e2.visibleRanges.some((g2) => g2.from <= c2 && g2.to >= c2)) {
          let g2 = e2.moveToLineBoundary(b.cursor(c2), false, true).head;
          g2 > a2 && (c2 = g2);
        }
        w = new zn(a2, c2, this.gapSize(f2, a2, c2, u2));
      }
      l2.push(w);
    };
    for (let a2 of this.viewportLines) {
      if (a2.length < o2)
        continue;
      let c2 = Yf(a2.from, a2.to, this.stateDeco);
      if (c2.total < o2)
        continue;
      let f2 = this.scrollTarget ? this.scrollTarget.range.head : null, u2, d2;
      if (i2) {
        let p2 = n2 / this.heightOracle.lineLength * this.heightOracle.lineHeight, w, g2;
        if (f2 != null) {
          let y = Bi(c2, f2), O2 = ((this.visibleBottom - this.visibleTop) / 2 + p2) / a2.height;
          w = y - O2, g2 = y + O2;
        } else
          w = (this.visibleTop - a2.top - p2) / a2.height, g2 = (this.visibleBottom - a2.top + p2) / a2.height;
        u2 = Pi(c2, w), d2 = Pi(c2, g2);
      } else {
        let p2 = c2.total * this.heightOracle.charWidth, w = n2 * this.heightOracle.charWidth, g2, y;
        if (f2 != null) {
          let O2 = Bi(c2, f2), S2 = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + w) / p2;
          g2 = O2 - S2, y = O2 + S2;
        } else
          g2 = (this.pixelViewport.left - w) / p2, y = (this.pixelViewport.right + w) / p2;
        u2 = Pi(c2, g2), d2 = Pi(c2, y);
      }
      u2 > a2.from && h2(a2.from, u2, a2, c2), d2 < a2.to && h2(d2, a2.to, a2, c2);
    }
    return l2;
  }
  gapSize(t2, e2, i2, n2) {
    let r2 = Bi(n2, i2) - Bi(n2, e2);
    return this.heightOracle.lineWrapping ? t2.height * r2 : n2.total * this.heightOracle.charWidth * r2;
  }
  updateLineGaps(t2) {
    zn.same(t2, this.lineGaps) || (this.lineGaps = t2, this.lineGapDeco = T.set(t2.map((e2) => e2.draw(this.heightOracle.lineWrapping))));
  }
  computeVisibleRanges() {
    let t2 = this.stateDeco;
    this.lineGaps.length && (t2 = t2.concat(this.lineGapDeco));
    let e2 = [];
    $.spans(t2, this.viewport.from, this.viewport.to, {
      span(n2, r2) {
        e2.push({ from: n2, to: r2 });
      },
      point() {
      }
    }, 20);
    let i2 = e2.length != this.visibleRanges.length || this.visibleRanges.some((n2, r2) => n2.from != e2[r2].from || n2.to != e2[r2].to);
    return this.visibleRanges = e2, i2 ? 4 : 0;
  }
  lineBlockAt(t2) {
    return t2 >= this.viewport.from && t2 <= this.viewport.to && this.viewportLines.find((e2) => e2.from <= t2 && e2.to >= t2) || oi(this.heightMap.lineAt(t2, z$1.ByPos, this.state.doc, 0, 0), this.scaler);
  }
  lineBlockAtHeight(t2) {
    return oi(this.heightMap.lineAt(this.scaler.fromDOM(t2), z$1.ByHeight, this.state.doc, 0, 0), this.scaler);
  }
  elementAtHeight(t2) {
    return oi(this.heightMap.blockAt(this.scaler.fromDOM(t2), this.state.doc, 0, 0), this.scaler);
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height);
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom;
  }
}
class Ti {
  constructor(t2, e2) {
    this.from = t2, this.to = e2;
  }
}
function Yf(s, t2, e2) {
  let i2 = [], n2 = s, r2 = 0;
  return $.spans(e2, s, t2, {
    span() {
    },
    point(o2, l2) {
      o2 > n2 && (i2.push({ from: n2, to: o2 }), r2 += o2 - n2), n2 = l2;
    }
  }, 20), n2 < t2 && (i2.push({ from: n2, to: t2 }), r2 += t2 - n2), { total: r2, ranges: i2 };
}
function Pi({ total: s, ranges: t2 }, e2) {
  if (e2 <= 0)
    return t2[0].from;
  if (e2 >= 1)
    return t2[t2.length - 1].to;
  let i2 = Math.floor(s * e2);
  for (let n2 = 0; ; n2++) {
    let { from: r2, to: o2 } = t2[n2], l2 = o2 - r2;
    if (i2 <= l2)
      return r2 + i2;
    i2 -= l2;
  }
}
function Bi(s, t2) {
  let e2 = 0;
  for (let { from: i2, to: n2 } of s.ranges) {
    if (t2 <= n2) {
      e2 += t2 - i2;
      break;
    }
    e2 += n2 - i2;
  }
  return e2 / s.total;
}
function Zf(s, t2) {
  for (let e2 of s)
    if (t2(e2))
      return e2;
}
const Yr = {
  toDOM(s) {
    return s;
  },
  fromDOM(s) {
    return s;
  },
  scale: 1
};
class tu {
  constructor(t2, e2, i2) {
    let n2 = 0, r2 = 0, o2 = 0;
    this.viewports = i2.map(({ from: l2, to: h2 }) => {
      let a2 = e2.lineAt(l2, z$1.ByPos, t2, 0, 0).top, c2 = e2.lineAt(h2, z$1.ByPos, t2, 0, 0).bottom;
      return n2 += c2 - a2, { from: l2, to: h2, top: a2, bottom: c2, domTop: 0, domBottom: 0 };
    }), this.scale = (7e6 - n2) / (e2.height - n2);
    for (let l2 of this.viewports)
      l2.domTop = o2 + (l2.top - r2) * this.scale, o2 = l2.domBottom = l2.domTop + (l2.bottom - l2.top), r2 = l2.bottom;
  }
  toDOM(t2) {
    for (let e2 = 0, i2 = 0, n2 = 0; ; e2++) {
      let r2 = e2 < this.viewports.length ? this.viewports[e2] : null;
      if (!r2 || t2 < r2.top)
        return n2 + (t2 - i2) * this.scale;
      if (t2 <= r2.bottom)
        return r2.domTop + (t2 - r2.top);
      i2 = r2.bottom, n2 = r2.domBottom;
    }
  }
  fromDOM(t2) {
    for (let e2 = 0, i2 = 0, n2 = 0; ; e2++) {
      let r2 = e2 < this.viewports.length ? this.viewports[e2] : null;
      if (!r2 || t2 < r2.domTop)
        return i2 + (t2 - n2) / this.scale;
      if (t2 <= r2.domBottom)
        return r2.top + (t2 - r2.domTop);
      i2 = r2.bottom, n2 = r2.domBottom;
    }
  }
}
function oi(s, t2) {
  if (t2.scale == 1)
    return s;
  let e2 = t2.toDOM(s.top), i2 = t2.toDOM(s.bottom);
  return new ae(s.from, s.length, e2, i2 - e2, Array.isArray(s.type) ? s.type.map((n2) => oi(n2, t2)) : s.type);
}
const Ri = /* @__PURE__ */ v$2.define({ combine: (s) => s.join(" ") }), Ds = /* @__PURE__ */ v$2.define({ combine: (s) => s.indexOf(true) > -1 }), Ts = /* @__PURE__ */ de.newName(), Zl = /* @__PURE__ */ de.newName(), th = /* @__PURE__ */ de.newName(), eh = { "&light": "." + Zl, "&dark": "." + th };
function Ps(s, t2, e2) {
  return new de(t2, {
    finish(i2) {
      return /&/.test(i2) ? i2.replace(/&\w*/, (n2) => {
        if (n2 == "&")
          return s;
        if (!e2 || !e2[n2])
          throw new RangeError(`Unsupported selector: ${n2}`);
        return e2[n2];
      }) : s + " " + i2;
    }
  });
}
const eu = /* @__PURE__ */ Ps("." + Ts, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    flexShrink: 0,
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    boxSizing: "border-box",
    padding: "4px 0",
    outline: "none",
    "&[contenteditable=true]": {
      WebkitUserModify: "read-write-plaintext-only"
    }
  },
  ".cm-lineWrapping": {
    whiteSpace_fallback: "pre-wrap",
    whiteSpace: "break-spaces",
    wordBreak: "break-word",
    overflowWrap: "anywhere",
    flexShrink: 1
  },
  "&light .cm-content": { caretColor: "black" },
  "&dark .cm-content": { caretColor: "white" },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 6px"
  },
  ".cm-layer": {
    contain: "size style",
    "& > *": {
      position: "absolute"
    }
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    pointerEvents: "none"
  },
  "&.cm-focused .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
  ".cm-cursor, .cm-dropCursor": {
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none"
  },
  ".cm-cursor": {
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  "&.cm-focused .cm-cursor": {
    display: "block"
  },
  "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
  "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
  "&light .cm-specialChar": { color: "red" },
  "&dark .cm-specialChar": { color: "#f78" },
  ".cm-gutters": {
    flexShrink: 0,
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    left: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#6c6c6c",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    minHeight: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  },
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-widgetBuffer": {
    verticalAlign: "text-top",
    height: "1em",
    width: 0,
    display: "inline"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block",
    verticalAlign: "top"
  },
  ".cm-highlightSpace:before": {
    content: "attr(data-display)",
    position: "absolute",
    pointerEvents: "none",
    color: "#888"
  },
  ".cm-highlightTab": {
    backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
    backgroundSize: "auto 100%",
    backgroundPosition: "right 90%",
    backgroundRepeat: "no-repeat"
  },
  ".cm-trailingSpace": {
    backgroundColor: "#ff332255"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "1px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, eh);
class iu {
  constructor(t2, e2, i2, n2) {
    this.typeOver = n2, this.bounds = null, this.text = "";
    let { impreciseHead: r2, impreciseAnchor: o2 } = t2.docView;
    if (t2.state.readOnly && e2 > -1)
      this.newSel = null;
    else if (e2 > -1 && (this.bounds = t2.docView.domBoundsAround(e2, i2, 0))) {
      let l2 = r2 || o2 ? [] : su(t2), h2 = new zl(l2, t2.state);
      h2.readRange(this.bounds.startDOM, this.bounds.endDOM), this.text = h2.text, this.newSel = ru(l2, this.bounds.from);
    } else {
      let l2 = t2.observer.selectionRange, h2 = r2 && r2.node == l2.focusNode && r2.offset == l2.focusOffset || !qe(t2.contentDOM, l2.focusNode) ? t2.state.selection.main.head : t2.docView.posFromDOM(l2.focusNode, l2.focusOffset), a2 = o2 && o2.node == l2.anchorNode && o2.offset == l2.anchorOffset || !qe(t2.contentDOM, l2.anchorNode) ? t2.state.selection.main.anchor : t2.docView.posFromDOM(l2.anchorNode, l2.anchorOffset);
      this.newSel = b.single(a2, h2);
    }
  }
}
function ih(s, t2) {
  let e2, { newSel: i2 } = t2, n2 = s.state.selection.main;
  if (t2.bounds) {
    let { from: r2, to: o2 } = t2.bounds, l2 = n2.from, h2 = null;
    (s.inputState.lastKeyCode === 8 && s.inputState.lastKeyTime > Date.now() - 100 || x.android && t2.text.length < o2 - r2) && (l2 = n2.to, h2 = "end");
    let a2 = nu(s.state.doc.sliceString(r2, o2, he), t2.text, l2 - r2, h2);
    a2 && (x.chrome && s.inputState.lastKeyCode == 13 && a2.toB == a2.from + 2 && t2.text.slice(a2.from, a2.toB) == he + he && a2.toB--, e2 = {
      from: r2 + a2.from,
      to: r2 + a2.toA,
      insert: E.of(t2.text.slice(a2.from, a2.toB).split(he))
    });
  } else
    i2 && (!s.hasFocus && s.state.facet(Mn) || i2.main.eq(n2)) && (i2 = null);
  if (!e2 && !i2)
    return false;
  if (!e2 && t2.typeOver && !n2.empty && i2 && i2.main.empty ? e2 = { from: n2.from, to: n2.to, insert: s.state.doc.slice(n2.from, n2.to) } : e2 && e2.from >= n2.from && e2.to <= n2.to && (e2.from != n2.from || e2.to != n2.to) && n2.to - n2.from - (e2.to - e2.from) <= 4 ? e2 = {
    from: n2.from,
    to: n2.to,
    insert: s.state.doc.slice(n2.from, e2.from).append(e2.insert).append(s.state.doc.slice(e2.to, n2.to))
  } : (x.mac || x.android) && e2 && e2.from == e2.to && e2.from == n2.head - 1 && /^\. ?$/.test(e2.insert.toString()) ? (i2 && e2.insert.length == 2 && (i2 = b.single(i2.main.anchor - 1, i2.main.head - 1)), e2 = { from: n2.from, to: n2.to, insert: E.of([" "]) }) : x.chrome && e2 && e2.from == e2.to && e2.from == n2.head && e2.insert.toString() == `
 ` && s.lineWrapping && (i2 && (i2 = b.single(i2.main.anchor - 1, i2.main.head - 1)), e2 = { from: n2.from, to: n2.to, insert: E.of([" "]) }), e2) {
    let r2 = s.state;
    if (x.ios && s.inputState.flushIOSKey(s) || x.android && (e2.from == n2.from && e2.to == n2.to && e2.insert.length == 1 && e2.insert.lines == 2 && $e(s.contentDOM, "Enter", 13) || e2.from == n2.from - 1 && e2.to == n2.to && e2.insert.length == 0 && $e(s.contentDOM, "Backspace", 8) || e2.from == n2.from && e2.to == n2.to + 1 && e2.insert.length == 0 && $e(s.contentDOM, "Delete", 46)))
      return true;
    let o2 = e2.insert.toString();
    if (s.state.facet(Ll).some((a2) => a2(s, e2.from, e2.to, o2)))
      return true;
    s.inputState.composing >= 0 && s.inputState.composing++;
    let l2;
    if (e2.from >= n2.from && e2.to <= n2.to && e2.to - e2.from >= (n2.to - n2.from) / 3 && (!i2 || i2.main.empty && i2.main.from == e2.from + e2.insert.length) && s.inputState.composing < 0) {
      let a2 = n2.from < e2.from ? r2.sliceDoc(n2.from, e2.from) : "", c2 = n2.to > e2.to ? r2.sliceDoc(e2.to, n2.to) : "";
      l2 = r2.replaceSelection(s.state.toText(a2 + e2.insert.sliceString(0, void 0, s.state.lineBreak) + c2));
    } else {
      let a2 = r2.changes(e2), c2 = i2 && !r2.selection.main.eq(i2.main) && i2.main.to <= a2.newLength ? i2.main : void 0;
      if (r2.selection.ranges.length > 1 && s.inputState.composing >= 0 && e2.to <= n2.to && e2.to >= n2.to - 10) {
        let f2 = s.state.sliceDoc(e2.from, e2.to), u2 = _l(s) || s.state.doc.lineAt(n2.head), d2 = n2.to - e2.to, p2 = n2.to - n2.from;
        l2 = r2.changeByRange((w) => {
          if (w.from == n2.from && w.to == n2.to)
            return { changes: a2, range: c2 || w.map(a2) };
          let g2 = w.to - d2, y = g2 - f2.length;
          if (w.to - w.from != p2 || s.state.sliceDoc(y, g2) != f2 || u2 && w.to >= u2.from && w.from <= u2.to)
            return { range: w };
          let O2 = r2.changes({ from: y, to: g2, insert: e2.insert }), S2 = w.to - n2.to;
          return {
            changes: O2,
            range: c2 ? b.range(Math.max(0, c2.anchor + S2), Math.max(0, c2.head + S2)) : w.map(O2)
          };
        });
      } else
        l2 = {
          changes: a2,
          selection: c2 && r2.selection.replaceRange(c2)
        };
    }
    let h2 = "input.type";
    return s.composing && (h2 += ".compose", s.inputState.compositionFirstChange && (h2 += ".start", s.inputState.compositionFirstChange = false)), s.dispatch(l2, { scrollIntoView: true, userEvent: h2 }), true;
  } else if (i2 && !i2.main.eq(n2)) {
    let r2 = false, o2 = "select";
    return s.inputState.lastSelectionTime > Date.now() - 50 && (s.inputState.lastSelectionOrigin == "select" && (r2 = true), o2 = s.inputState.lastSelectionOrigin), s.dispatch({ selection: i2, scrollIntoView: r2, userEvent: o2 }), true;
  } else
    return false;
}
function nu(s, t2, e2, i2) {
  let n2 = Math.min(s.length, t2.length), r2 = 0;
  for (; r2 < n2 && s.charCodeAt(r2) == t2.charCodeAt(r2); )
    r2++;
  if (r2 == n2 && s.length == t2.length)
    return null;
  let o2 = s.length, l2 = t2.length;
  for (; o2 > 0 && l2 > 0 && s.charCodeAt(o2 - 1) == t2.charCodeAt(l2 - 1); )
    o2--, l2--;
  if (i2 == "end") {
    let h2 = Math.max(0, r2 - Math.min(o2, l2));
    e2 -= o2 + h2 - r2;
  }
  if (o2 < r2 && s.length < t2.length) {
    let h2 = e2 <= r2 && e2 >= o2 ? r2 - e2 : 0;
    r2 -= h2, l2 = r2 + (l2 - o2), o2 = r2;
  } else if (l2 < r2) {
    let h2 = e2 <= r2 && e2 >= l2 ? r2 - e2 : 0;
    r2 -= h2, o2 = r2 + (o2 - l2), l2 = r2;
  }
  return { from: r2, toA: o2, toB: l2 };
}
function su(s) {
  let t2 = [];
  if (s.root.activeElement != s.contentDOM)
    return t2;
  let { anchorNode: e2, anchorOffset: i2, focusNode: n2, focusOffset: r2 } = s.observer.selectionRange;
  return e2 && (t2.push(new Lr(e2, i2)), (n2 != e2 || r2 != i2) && t2.push(new Lr(n2, r2))), t2;
}
function ru(s, t2) {
  if (s.length == 0)
    return null;
  let e2 = s[0].pos, i2 = s.length == 2 ? s[1].pos : e2;
  return e2 > -1 && i2 > -1 ? b.single(e2 + t2, i2 + t2) : null;
}
const ou = {
  childList: true,
  characterData: true,
  subtree: true,
  attributes: true,
  characterDataOldValue: true
}, _n = x.ie && x.ie_version <= 11;
class lu {
  constructor(t2) {
    this.view = t2, this.active = false, this.selectionRange = new Yc(), this.selectionChanged = false, this.delayedFlush = -1, this.resizeTimeout = -1, this.queue = [], this.delayedAndroidKey = null, this.flushingAndroidKey = -1, this.lastChange = 0, this.scrollTargets = [], this.intersection = null, this.resizeScroll = null, this.resizeContent = null, this.intersecting = false, this.gapIntersection = null, this.gaps = [], this.parentCheck = -1, this.dom = t2.contentDOM, this.observer = new MutationObserver((e2) => {
      for (let i2 of e2)
        this.queue.push(i2);
      (x.ie && x.ie_version <= 11 || x.ios && t2.composing) && e2.some((i2) => i2.type == "childList" && i2.removedNodes.length || i2.type == "characterData" && i2.oldValue.length > i2.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), _n && (this.onCharData = (e2) => {
      this.queue.push({
        target: e2.target,
        type: "characterData",
        oldValue: e2.prevValue
      }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this), this.onResize = this.onResize.bind(this), this.onPrint = this.onPrint.bind(this), this.onScroll = this.onScroll.bind(this), typeof ResizeObserver == "function" && (this.resizeScroll = new ResizeObserver(() => {
      var e2;
      ((e2 = this.view.docView) === null || e2 === void 0 ? void 0 : e2.lastUpdate) < Date.now() - 75 && this.onResize();
    }), this.resizeScroll.observe(t2.scrollDOM), this.resizeContent = new ResizeObserver(() => this.view.requestMeasure()), this.resizeContent.observe(t2.contentDOM)), this.addWindowListeners(this.win = t2.win), this.start(), typeof IntersectionObserver == "function" && (this.intersection = new IntersectionObserver((e2) => {
      this.parentCheck < 0 && (this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3)), e2.length > 0 && e2[e2.length - 1].intersectionRatio > 0 != this.intersecting && (this.intersecting = !this.intersecting, this.intersecting != this.view.inView && this.onScrollChanged(document.createEvent("Event")));
    }, {}), this.intersection.observe(this.dom), this.gapIntersection = new IntersectionObserver((e2) => {
      e2.length > 0 && e2[e2.length - 1].intersectionRatio > 0 && this.onScrollChanged(document.createEvent("Event"));
    }, {})), this.listenForScroll(), this.readSelectionRange();
  }
  onScrollChanged(t2) {
    this.view.inputState.runScrollHandlers(this.view, t2), this.intersecting && this.view.measure();
  }
  onScroll(t2) {
    this.intersecting && this.flush(false), this.onScrollChanged(t2);
  }
  onResize() {
    this.resizeTimeout < 0 && (this.resizeTimeout = setTimeout(() => {
      this.resizeTimeout = -1, this.view.requestMeasure();
    }, 50));
  }
  onPrint() {
    this.view.viewState.printing = true, this.view.measure(), setTimeout(() => {
      this.view.viewState.printing = false, this.view.requestMeasure();
    }, 500);
  }
  updateGaps(t2) {
    if (this.gapIntersection && (t2.length != this.gaps.length || this.gaps.some((e2, i2) => e2 != t2[i2]))) {
      this.gapIntersection.disconnect();
      for (let e2 of t2)
        this.gapIntersection.observe(e2);
      this.gaps = t2;
    }
  }
  onSelectionChange(t2) {
    let e2 = this.selectionChanged;
    if (!this.readSelectionRange() || this.delayedAndroidKey)
      return;
    let { view: i2 } = this, n2 = this.selectionRange;
    if (i2.state.facet(Mn) ? i2.root.activeElement != this.dom : !ji(i2.dom, n2))
      return;
    let r2 = n2.anchorNode && i2.docView.nearest(n2.anchorNode);
    if (r2 && r2.ignoreEvent(t2)) {
      e2 || (this.selectionChanged = false);
      return;
    }
    (x.ie && x.ie_version <= 11 || x.android && x.chrome) && !i2.state.selection.main.empty && n2.focusNode && nn(n2.focusNode, n2.focusOffset, n2.anchorNode, n2.anchorOffset) ? this.flushSoon() : this.flush(false);
  }
  readSelectionRange() {
    let { view: t2 } = this, e2 = x.safari && t2.root.nodeType == 11 && Uc(this.dom.ownerDocument) == this.dom && hu(this.view) || en(t2.root);
    if (!e2 || this.selectionRange.eq(e2))
      return false;
    let i2 = ji(this.dom, e2);
    return i2 && !this.selectionChanged && t2.inputState.lastFocusTime > Date.now() - 200 && t2.inputState.lastTouchTime < Date.now() - 300 && tf(this.dom, e2) ? (this.view.inputState.lastFocusTime = 0, t2.docView.updateSelection(), false) : (this.selectionRange.setRange(e2), i2 && (this.selectionChanged = true), true);
  }
  setSelectionRange(t2, e2) {
    this.selectionRange.set(t2.node, t2.offset, e2.node, e2.offset), this.selectionChanged = false;
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0);
  }
  listenForScroll() {
    this.parentCheck = -1;
    let t2 = 0, e2 = null;
    for (let i2 = this.dom; i2; )
      if (i2.nodeType == 1)
        !e2 && t2 < this.scrollTargets.length && this.scrollTargets[t2] == i2 ? t2++ : e2 || (e2 = this.scrollTargets.slice(0, t2)), e2 && e2.push(i2), i2 = i2.assignedSlot || i2.parentNode;
      else if (i2.nodeType == 11)
        i2 = i2.host;
      else
        break;
    if (t2 < this.scrollTargets.length && !e2 && (e2 = this.scrollTargets.slice(0, t2)), e2) {
      for (let i2 of this.scrollTargets)
        i2.removeEventListener("scroll", this.onScroll);
      for (let i2 of this.scrollTargets = e2)
        i2.addEventListener("scroll", this.onScroll);
    }
  }
  ignore(t2) {
    if (!this.active)
      return t2();
    try {
      return this.stop(), t2();
    } finally {
      this.start(), this.clear();
    }
  }
  start() {
    this.active || (this.observer.observe(this.dom, ou), _n && this.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.active = true);
  }
  stop() {
    this.active && (this.active = false, this.observer.disconnect(), _n && this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData));
  }
  clear() {
    this.processRecords(), this.queue.length = 0, this.selectionChanged = false;
  }
  delayAndroidKey(t2, e2) {
    var i2;
    if (!this.delayedAndroidKey) {
      let n2 = () => {
        let r2 = this.delayedAndroidKey;
        r2 && (this.clearDelayedAndroidKey(), !this.flush() && r2.force && $e(this.dom, r2.key, r2.keyCode));
      };
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(n2);
    }
    (!this.delayedAndroidKey || t2 == "Enter") && (this.delayedAndroidKey = {
      key: t2,
      keyCode: e2,
      force: this.lastChange < Date.now() - 50 || !!(!((i2 = this.delayedAndroidKey) === null || i2 === void 0) && i2.force)
    });
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey), this.delayedAndroidKey = null, this.flushingAndroidKey = -1;
  }
  flushSoon() {
    this.delayedFlush < 0 && (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
      this.delayedFlush = -1, this.flush();
    }));
  }
  forceFlush() {
    this.delayedFlush >= 0 && (this.view.win.cancelAnimationFrame(this.delayedFlush), this.delayedFlush = -1), this.flush();
  }
  processRecords() {
    let t2 = this.queue;
    for (let r2 of this.observer.takeRecords())
      t2.push(r2);
    t2.length && (this.queue = []);
    let e2 = -1, i2 = -1, n2 = false;
    for (let r2 of t2) {
      let o2 = this.readMutation(r2);
      o2 && (o2.typeOver && (n2 = true), e2 == -1 ? { from: e2, to: i2 } = o2 : (e2 = Math.min(o2.from, e2), i2 = Math.max(o2.to, i2)));
    }
    return { from: e2, to: i2, typeOver: n2 };
  }
  readChange() {
    let { from: t2, to: e2, typeOver: i2 } = this.processRecords(), n2 = this.selectionChanged && ji(this.dom, this.selectionRange);
    return t2 < 0 && !n2 ? null : (t2 > -1 && (this.lastChange = Date.now()), this.view.inputState.lastFocusTime = 0, this.selectionChanged = false, new iu(this.view, t2, e2, i2));
  }
  flush(t2 = true) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey)
      return false;
    t2 && this.readSelectionRange();
    let e2 = this.readChange();
    if (!e2)
      return false;
    let i2 = this.view.state, n2 = ih(this.view, e2);
    return this.view.state == i2 && this.view.update([]), n2;
  }
  readMutation(t2) {
    let e2 = this.view.docView.nearest(t2.target);
    if (!e2 || e2.ignoreMutation(t2))
      return null;
    if (e2.markDirty(t2.type == "attributes"), t2.type == "attributes" && (e2.dirty |= 4), t2.type == "childList") {
      let i2 = Zr(e2, t2.previousSibling || t2.target.previousSibling, -1), n2 = Zr(e2, t2.nextSibling || t2.target.nextSibling, 1);
      return {
        from: i2 ? e2.posAfter(i2) : e2.posAtStart,
        to: n2 ? e2.posBefore(n2) : e2.posAtEnd,
        typeOver: false
      };
    } else
      return t2.type == "characterData" ? { from: e2.posAtStart, to: e2.posAtEnd, typeOver: t2.target.nodeValue == t2.oldValue } : null;
  }
  setWindow(t2) {
    t2 != this.win && (this.removeWindowListeners(this.win), this.win = t2, this.addWindowListeners(this.win));
  }
  addWindowListeners(t2) {
    t2.addEventListener("resize", this.onResize), t2.addEventListener("beforeprint", this.onPrint), t2.addEventListener("scroll", this.onScroll), t2.document.addEventListener("selectionchange", this.onSelectionChange);
  }
  removeWindowListeners(t2) {
    t2.removeEventListener("scroll", this.onScroll), t2.removeEventListener("resize", this.onResize), t2.removeEventListener("beforeprint", this.onPrint), t2.document.removeEventListener("selectionchange", this.onSelectionChange);
  }
  destroy() {
    var t2, e2, i2, n2;
    this.stop(), (t2 = this.intersection) === null || t2 === void 0 || t2.disconnect(), (e2 = this.gapIntersection) === null || e2 === void 0 || e2.disconnect(), (i2 = this.resizeScroll) === null || i2 === void 0 || i2.disconnect(), (n2 = this.resizeContent) === null || n2 === void 0 || n2.disconnect();
    for (let r2 of this.scrollTargets)
      r2.removeEventListener("scroll", this.onScroll);
    this.removeWindowListeners(this.win), clearTimeout(this.parentCheck), clearTimeout(this.resizeTimeout), this.win.cancelAnimationFrame(this.delayedFlush), this.win.cancelAnimationFrame(this.flushingAndroidKey);
  }
}
function Zr(s, t2, e2) {
  for (; t2; ) {
    let i2 = W.get(t2);
    if (i2 && i2.parent == s)
      return i2;
    let n2 = t2.parentNode;
    t2 = n2 != s.dom ? n2 : e2 > 0 ? t2.nextSibling : t2.previousSibling;
  }
  return null;
}
function hu(s) {
  let t2 = null;
  function e2(h2) {
    h2.preventDefault(), h2.stopImmediatePropagation(), t2 = h2.getTargetRanges()[0];
  }
  if (s.contentDOM.addEventListener("beforeinput", e2, true), s.dom.ownerDocument.execCommand("indent"), s.contentDOM.removeEventListener("beforeinput", e2, true), !t2)
    return null;
  let i2 = t2.startContainer, n2 = t2.startOffset, r2 = t2.endContainer, o2 = t2.endOffset, l2 = s.docView.domAtPos(s.state.selection.main.anchor);
  return nn(l2.node, l2.offset, r2, o2) && ([i2, n2, r2, o2] = [r2, o2, i2, n2]), { anchorNode: i2, anchorOffset: n2, focusNode: r2, focusOffset: o2 };
}
class A$2 {
  constructor(t2 = {}) {
    this.plugins = [], this.pluginMap = /* @__PURE__ */ new Map(), this.editorAttrs = {}, this.contentAttrs = {}, this.bidiCache = [], this.destroyed = false, this.updateState = 2, this.measureScheduled = -1, this.measureRequests = [], this.contentDOM = document.createElement("div"), this.scrollDOM = document.createElement("div"), this.scrollDOM.tabIndex = -1, this.scrollDOM.className = "cm-scroller", this.scrollDOM.appendChild(this.contentDOM), this.announceDOM = document.createElement("div"), this.announceDOM.style.cssText = "position: fixed; top: -10000px", this.announceDOM.setAttribute("aria-live", "polite"), this.dom = document.createElement("div"), this.dom.appendChild(this.announceDOM), this.dom.appendChild(this.scrollDOM), this._dispatch = t2.dispatch || ((e2) => this.update([e2])), this.dispatch = this.dispatch.bind(this), this._root = t2.root || Zc(t2.parent) || document, this.viewState = new Xr(t2.state || N$1.create(t2)), this.plugins = this.state.facet(si).map((e2) => new Hn(e2));
    for (let e2 of this.plugins)
      e2.update(this);
    this.observer = new lu(this), this.inputState = new Pf(this), this.inputState.ensureHandlers(this, this.plugins), this.docView = new Er(this), this.mountStyles(), this.updateAttrs(), this.updateState = 0, this.requestMeasure(), t2.parent && t2.parent.appendChild(this.dom);
  }
  get state() {
    return this.viewState.state;
  }
  get viewport() {
    return this.viewState.viewport;
  }
  get visibleRanges() {
    return this.viewState.visibleRanges;
  }
  get inView() {
    return this.viewState.inView;
  }
  get composing() {
    return this.inputState.composing > 0;
  }
  get compositionStarted() {
    return this.inputState.composing >= 0;
  }
  get root() {
    return this._root;
  }
  get win() {
    return this.dom.ownerDocument.defaultView || window;
  }
  dispatch(...t2) {
    this._dispatch(t2.length == 1 && t2[0] instanceof lt ? t2[0] : this.state.update(...t2));
  }
  update(t2) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
    let e2 = false, i2 = false, n2, r2 = this.state;
    for (let a2 of t2) {
      if (a2.startState != r2)
        throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
      r2 = a2.state;
    }
    if (this.destroyed) {
      this.viewState.state = r2;
      return;
    }
    let o2 = this.observer.delayedAndroidKey, l2 = null;
    if (o2 ? (this.observer.clearDelayedAndroidKey(), l2 = this.observer.readChange(), (l2 && !this.state.doc.eq(r2.doc) || !this.state.selection.eq(r2.selection)) && (l2 = null)) : this.observer.clear(), r2.facet(N$1.phrases) != this.state.facet(N$1.phrases))
      return this.setState(r2);
    n2 = on.create(this, r2, t2);
    let h2 = this.viewState.scrollTarget;
    try {
      this.updateState = 2;
      for (let a2 of t2) {
        if (h2 && (h2 = h2.map(a2.changes)), a2.scrollIntoView) {
          let { main: c2 } = a2.state.selection;
          h2 = new rn(c2.empty ? c2 : b.cursor(c2.head, c2.head > c2.anchor ? -1 : 1));
        }
        for (let c2 of a2.effects)
          c2.is(Br) && (h2 = c2.value);
      }
      this.viewState.update(n2, h2), this.bidiCache = ln.update(this.bidiCache, n2.changes), n2.empty || (this.updatePlugins(n2), this.inputState.update(n2)), e2 = this.docView.update(n2), this.state.facet(ri) != this.styleModules && this.mountStyles(), i2 = this.updateAttrs(), this.showAnnouncements(t2), this.docView.updateSelection(e2, t2.some((a2) => a2.isUserEvent("select.pointer")));
    } finally {
      this.updateState = 0;
    }
    if (n2.startState.facet(Ri) != n2.state.facet(Ri) && (this.viewState.mustMeasureContent = true), (e2 || i2 || h2 || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent) && this.requestMeasure(), !n2.empty)
      for (let a2 of this.state.facet(vs))
        a2(n2);
    l2 && !ih(this, l2) && o2.force && $e(this.contentDOM, o2.key, o2.keyCode);
  }
  setState(t2) {
    if (this.updateState != 0)
      throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
    if (this.destroyed) {
      this.viewState.state = t2;
      return;
    }
    this.updateState = 2;
    let e2 = this.hasFocus;
    try {
      for (let i2 of this.plugins)
        i2.destroy(this);
      this.viewState = new Xr(t2), this.plugins = t2.facet(si).map((i2) => new Hn(i2)), this.pluginMap.clear();
      for (let i2 of this.plugins)
        i2.update(this);
      this.docView = new Er(this), this.inputState.ensureHandlers(this, this.plugins), this.mountStyles(), this.updateAttrs(), this.bidiCache = [];
    } finally {
      this.updateState = 0;
    }
    e2 && this.focus(), this.requestMeasure();
  }
  updatePlugins(t2) {
    let e2 = t2.startState.facet(si), i2 = t2.state.facet(si);
    if (e2 != i2) {
      let n2 = [];
      for (let r2 of i2) {
        let o2 = e2.indexOf(r2);
        if (o2 < 0)
          n2.push(new Hn(r2));
        else {
          let l2 = this.plugins[o2];
          l2.mustUpdate = t2, n2.push(l2);
        }
      }
      for (let r2 of this.plugins)
        r2.mustUpdate != t2 && r2.destroy(this);
      this.plugins = n2, this.pluginMap.clear(), this.inputState.ensureHandlers(this, this.plugins);
    } else
      for (let n2 of this.plugins)
        n2.mustUpdate = t2;
    for (let n2 = 0; n2 < this.plugins.length; n2++)
      this.plugins[n2].update(this);
  }
  measure(t2 = true) {
    if (this.destroyed)
      return;
    this.measureScheduled > -1 && cancelAnimationFrame(this.measureScheduled), this.measureScheduled = 0, t2 && this.observer.forceFlush();
    let e2 = null, { scrollHeight: i2, scrollTop: n2, clientHeight: r2 } = this.scrollDOM, o2 = n2 > i2 - r2 - 4 ? i2 : n2;
    try {
      for (let l2 = 0; ; l2++) {
        this.updateState = 1;
        let h2 = this.viewport, a2 = this.viewState.lineBlockAtHeight(o2), c2 = this.viewState.measure(this);
        if (!c2 && !this.measureRequests.length && this.viewState.scrollTarget == null)
          break;
        if (l2 > 5) {
          console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
          break;
        }
        let f2 = [];
        c2 & 4 || ([this.measureRequests, f2] = [f2, this.measureRequests]);
        let u2 = f2.map((g2) => {
          try {
            return g2.read(this);
          } catch (y) {
            return zt(this.state, y), to;
          }
        }), d2 = on.create(this, this.state, []), p2 = false, w = false;
        d2.flags |= c2, e2 ? e2.flags |= c2 : e2 = d2, this.updateState = 2, d2.empty || (this.updatePlugins(d2), this.inputState.update(d2), this.updateAttrs(), p2 = this.docView.update(d2));
        for (let g2 = 0; g2 < f2.length; g2++)
          if (u2[g2] != to)
            try {
              let y = f2[g2];
              y.write && y.write(u2[g2], this);
            } catch (y) {
              zt(this.state, y);
            }
        if (this.viewState.editorHeight)
          if (this.viewState.scrollTarget)
            this.docView.scrollIntoView(this.viewState.scrollTarget), this.viewState.scrollTarget = null, w = true;
          else {
            let g2 = this.viewState.lineBlockAt(a2.from).top - a2.top;
            (g2 > 1 || g2 < -1) && (this.scrollDOM.scrollTop += g2, w = true);
          }
        if (p2 && this.docView.updateSelection(true), this.viewport.from == h2.from && this.viewport.to == h2.to && !w && this.measureRequests.length == 0)
          break;
      }
    } finally {
      this.updateState = 0, this.measureScheduled = -1;
    }
    if (e2 && !e2.empty)
      for (let l2 of this.state.facet(vs))
        l2(e2);
  }
  get themeClasses() {
    return Ts + " " + (this.state.facet(Ds) ? th : Zl) + " " + this.state.facet(Ri);
  }
  updateAttrs() {
    let t2 = eo(this, Nl, {
      class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
    }), e2 = {
      spellcheck: "false",
      autocorrect: "off",
      autocapitalize: "off",
      translate: "no",
      contenteditable: this.state.facet(Mn) ? "true" : "false",
      class: "cm-content",
      style: `${x.tabSize}: ${this.state.tabSize}`,
      role: "textbox",
      "aria-multiline": "true"
    };
    this.state.readOnly && (e2["aria-readonly"] = "true"), eo(this, Js, e2);
    let i2 = this.observer.ignore(() => {
      let n2 = ks(this.contentDOM, this.contentAttrs, e2), r2 = ks(this.dom, this.editorAttrs, t2);
      return n2 || r2;
    });
    return this.editorAttrs = t2, this.contentAttrs = e2, i2;
  }
  showAnnouncements(t2) {
    let e2 = true;
    for (let i2 of t2)
      for (let n2 of i2.effects)
        if (n2.is(A$2.announce)) {
          e2 && (this.announceDOM.textContent = ""), e2 = false;
          let r2 = this.announceDOM.appendChild(document.createElement("div"));
          r2.textContent = n2.value;
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(ri), de.mount(this.root, this.styleModules.concat(eu).reverse());
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error("Reading the editor layout isn't allowed during an update");
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(false);
  }
  requestMeasure(t2) {
    if (this.measureScheduled < 0 && (this.measureScheduled = this.win.requestAnimationFrame(() => this.measure())), t2) {
      if (this.measureRequests.indexOf(t2) > -1)
        return;
      if (t2.key != null) {
        for (let e2 = 0; e2 < this.measureRequests.length; e2++)
          if (this.measureRequests[e2].key === t2.key) {
            this.measureRequests[e2] = t2;
            return;
          }
      }
      this.measureRequests.push(t2);
    }
  }
  plugin(t2) {
    let e2 = this.pluginMap.get(t2);
    return (e2 === void 0 || e2 && e2.spec != t2) && this.pluginMap.set(t2, e2 = this.plugins.find((i2) => i2.spec == t2) || null), e2 && e2.update(this).value;
  }
  get documentTop() {
    return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
  }
  get documentPadding() {
    return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
  }
  elementAtHeight(t2) {
    return this.readMeasured(), this.viewState.elementAtHeight(t2);
  }
  lineBlockAtHeight(t2) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(t2);
  }
  get viewportLineBlocks() {
    return this.viewState.viewportLines;
  }
  lineBlockAt(t2) {
    return this.viewState.lineBlockAt(t2);
  }
  get contentHeight() {
    return this.viewState.contentHeight;
  }
  moveByChar(t2, e2, i2) {
    return Fn(this, t2, Fr(this, t2, e2, i2));
  }
  moveByGroup(t2, e2) {
    return Fn(this, t2, Fr(this, t2, e2, (i2) => Df(this, t2.head, i2)));
  }
  moveToLineBoundary(t2, e2, i2 = true) {
    return Mf(this, t2, e2, i2);
  }
  moveVertically(t2, e2, i2) {
    return Fn(this, t2, Tf(this, t2, e2, i2));
  }
  domAtPos(t2) {
    return this.docView.domAtPos(t2);
  }
  posAtDOM(t2, e2 = 0) {
    return this.docView.posFromDOM(t2, e2);
  }
  posAtCoords(t2, e2 = true) {
    return this.readMeasured(), jl(this, t2, e2);
  }
  coordsAtPos(t2, e2 = 1) {
    this.readMeasured();
    let i2 = this.docView.coordsAt(t2, e2);
    if (!i2 || i2.left == i2.right)
      return i2;
    let n2 = this.state.doc.lineAt(t2), r2 = this.bidiSpans(n2), o2 = r2[Fe.find(r2, t2 - n2.from, -1, e2)];
    return Ks(i2, o2.dir == X.LTR == e2 > 0);
  }
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth;
  }
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight;
  }
  get textDirection() {
    return this.viewState.defaultTextDirection;
  }
  textDirectionAt(t2) {
    return !this.state.facet(El) || t2 < this.viewport.from || t2 > this.viewport.to ? this.textDirection : (this.readMeasured(), this.docView.textDirectionAt(t2));
  }
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping;
  }
  bidiSpans(t2) {
    if (t2.length > au)
      return $l(t2.length);
    let e2 = this.textDirectionAt(t2.from);
    for (let n2 of this.bidiCache)
      if (n2.from == t2.from && n2.dir == e2)
        return n2.order;
    let i2 = df(t2.text, e2);
    return this.bidiCache.push(new ln(t2.from, t2.to, e2, i2)), i2;
  }
  get hasFocus() {
    var t2;
    return (this.dom.ownerDocument.hasFocus() || x.safari && ((t2 = this.inputState) === null || t2 === void 0 ? void 0 : t2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
  }
  focus() {
    this.observer.ignore(() => {
      ml(this.contentDOM), this.docView.updateSelection();
    });
  }
  setRoot(t2) {
    this._root != t2 && (this._root = t2, this.observer.setWindow((t2.nodeType == 9 ? t2 : t2.ownerDocument).defaultView || window), this.mountStyles());
  }
  destroy() {
    for (let t2 of this.plugins)
      t2.destroy(this);
    this.plugins = [], this.inputState.destroy(), this.dom.remove(), this.observer.destroy(), this.measureScheduled > -1 && cancelAnimationFrame(this.measureScheduled), this.destroyed = true;
  }
  static scrollIntoView(t2, e2 = {}) {
    return Br.of(new rn(typeof t2 == "number" ? b.cursor(t2) : t2, e2.y, e2.x, e2.yMargin, e2.xMargin));
  }
  static domEventHandlers(t2) {
    return wt.define(() => ({}), { eventHandlers: t2 });
  }
  static theme(t2, e2) {
    let i2 = de.newName(), n2 = [Ri.of(i2), ri.of(Ps(`.${i2}`, t2))];
    return e2 && e2.dark && n2.push(Ds.of(true)), n2;
  }
  static baseTheme(t2) {
    return js.lowest(ri.of(Ps("." + Ts, t2, eh)));
  }
  static findFromDOM(t2) {
    var e2;
    let i2 = t2.querySelector(".cm-content"), n2 = i2 && W.get(i2) || W.get(t2);
    return ((e2 = n2 == null ? void 0 : n2.rootView) === null || e2 === void 0 ? void 0 : e2.view) || null;
  }
}
A$2.styleModule = ri;
A$2.inputHandler = Ll;
A$2.perLineTextDirection = El;
A$2.exceptionSink = Rl;
A$2.updateListener = vs;
A$2.editable = Mn;
A$2.mouseSelectionStyle = Bl;
A$2.dragMovesSelection = Pl;
A$2.clickAddsSelectionRange = Tl;
A$2.decorations = gi;
A$2.atomicRanges = Vl;
A$2.scrollMargins = Il;
A$2.darkTheme = Ds;
A$2.contentAttributes = Js;
A$2.editorAttributes = Nl;
A$2.lineWrapping = /* @__PURE__ */ A$2.contentAttributes.of({ class: "cm-lineWrapping" });
A$2.announce = /* @__PURE__ */ F.define();
const au = 4096, to = {};
class ln {
  constructor(t2, e2, i2, n2) {
    this.from = t2, this.to = e2, this.dir = i2, this.order = n2;
  }
  static update(t2, e2) {
    if (e2.empty)
      return t2;
    let i2 = [], n2 = t2.length ? t2[t2.length - 1].dir : X.LTR;
    for (let r2 = Math.max(0, t2.length - 10); r2 < t2.length; r2++) {
      let o2 = t2[r2];
      o2.dir == n2 && !e2.touchesRange(o2.from, o2.to) && i2.push(new ln(e2.mapPos(o2.from, 1), e2.mapPos(o2.to, -1), o2.dir, o2.order));
    }
    return i2;
  }
}
function eo(s, t2, e2) {
  for (let i2 = s.state.facet(t2), n2 = i2.length - 1; n2 >= 0; n2--) {
    let r2 = i2[n2], o2 = typeof r2 == "function" ? r2(s) : r2;
    o2 && bs(o2, e2);
  }
  return e2;
}
const cu = x.mac ? "mac" : x.windows ? "win" : x.linux ? "linux" : "key";
function fu(s, t2) {
  const e2 = s.split(/-(?!$)/);
  let i2 = e2[e2.length - 1];
  i2 == "Space" && (i2 = " ");
  let n2, r2, o2, l2;
  for (let h2 = 0; h2 < e2.length - 1; ++h2) {
    const a2 = e2[h2];
    if (/^(cmd|meta|m)$/i.test(a2))
      l2 = true;
    else if (/^a(lt)?$/i.test(a2))
      n2 = true;
    else if (/^(c|ctrl|control)$/i.test(a2))
      r2 = true;
    else if (/^s(hift)?$/i.test(a2))
      o2 = true;
    else if (/^mod$/i.test(a2))
      t2 == "mac" ? l2 = true : r2 = true;
    else
      throw new Error("Unrecognized modifier name: " + a2);
  }
  return n2 && (i2 = "Alt-" + i2), r2 && (i2 = "Ctrl-" + i2), l2 && (i2 = "Meta-" + i2), o2 && (i2 = "Shift-" + i2), i2;
}
function Li(s, t2, e2) {
  return t2.altKey && (s = "Alt-" + s), t2.ctrlKey && (s = "Ctrl-" + s), t2.metaKey && (s = "Meta-" + s), e2 !== false && t2.shiftKey && (s = "Shift-" + s), s;
}
const uu = /* @__PURE__ */ js.default(/* @__PURE__ */ A$2.domEventHandlers({
  keydown(s, t2) {
    return mu(du(t2.state), s, t2, "editor");
  }
})), nh = /* @__PURE__ */ v$2.define({ enables: uu }), io = /* @__PURE__ */ new WeakMap();
function du(s) {
  let t2 = s.facet(nh), e2 = io.get(t2);
  return e2 || io.set(t2, e2 = gu(t2.reduce((i2, n2) => i2.concat(n2), []))), e2;
}
let re = null;
const pu = 4e3;
function gu(s, t2 = cu) {
  let e2 = /* @__PURE__ */ Object.create(null), i2 = /* @__PURE__ */ Object.create(null), n2 = (o2, l2) => {
    let h2 = i2[o2];
    if (h2 == null)
      i2[o2] = l2;
    else if (h2 != l2)
      throw new Error("Key binding " + o2 + " is used both as a regular binding and as a multi-stroke prefix");
  }, r2 = (o2, l2, h2, a2) => {
    var c2, f2;
    let u2 = e2[o2] || (e2[o2] = /* @__PURE__ */ Object.create(null)), d2 = l2.split(/ (?!$)/).map((g2) => fu(g2, t2));
    for (let g2 = 1; g2 < d2.length; g2++) {
      let y = d2.slice(0, g2).join(" ");
      n2(y, true), u2[y] || (u2[y] = {
        preventDefault: true,
        run: [(O2) => {
          let S2 = re = { view: O2, prefix: y, scope: o2 };
          return setTimeout(() => {
            re == S2 && (re = null);
          }, pu), true;
        }]
      });
    }
    let p2 = d2.join(" ");
    n2(p2, false);
    let w = u2[p2] || (u2[p2] = { preventDefault: false, run: ((f2 = (c2 = u2._any) === null || c2 === void 0 ? void 0 : c2.run) === null || f2 === void 0 ? void 0 : f2.slice()) || [] });
    h2 && w.run.push(h2), a2 && (w.preventDefault = true);
  };
  for (let o2 of s) {
    let l2 = o2.scope ? o2.scope.split(" ") : ["editor"];
    if (o2.any)
      for (let a2 of l2) {
        let c2 = e2[a2] || (e2[a2] = /* @__PURE__ */ Object.create(null));
        c2._any || (c2._any = { preventDefault: false, run: [] });
        for (let f2 in c2)
          c2[f2].run.push(o2.any);
      }
    let h2 = o2[t2] || o2.key;
    if (h2)
      for (let a2 of l2)
        r2(a2, h2, o2.run, o2.preventDefault), o2.shift && r2(a2, "Shift-" + h2, o2.shift, o2.preventDefault);
  }
  return e2;
}
function mu(s, t2, e2, i2) {
  let n2 = Gc(t2), r2 = hi(n2, 0), o2 = es(r2) == n2.length && n2 != " ", l2 = "", h2 = false;
  re && re.view == e2 && re.scope == i2 && (l2 = re.prefix + " ", (h2 = Kl.indexOf(t2.keyCode) < 0) && (re = null));
  let a2 = /* @__PURE__ */ new Set(), c2 = (p2) => {
    if (p2) {
      for (let w of p2.run)
        if (!a2.has(w) && (a2.add(w), w(e2, t2)))
          return true;
      p2.preventDefault && (h2 = true);
    }
    return false;
  }, f2 = s[i2], u2, d2;
  if (f2) {
    if (c2(f2[l2 + Li(n2, t2, !o2)]))
      return true;
    if (o2 && (t2.altKey || t2.metaKey || t2.ctrlKey) && !(x.windows && t2.ctrlKey && t2.altKey) && (u2 = pe[t2.keyCode]) && u2 != n2) {
      if (c2(f2[l2 + Li(u2, t2, true)]))
        return true;
      if (t2.shiftKey && (d2 = ui[t2.keyCode]) != n2 && d2 != u2 && c2(f2[l2 + Li(d2, t2, false)]))
        return true;
    } else if (o2 && t2.shiftKey && c2(f2[l2 + Li(n2, t2, true)]))
      return true;
    if (c2(f2._any))
      return true;
  }
  return h2;
}
function no(s, t2, e2, i2, n2) {
  t2.lastIndex = 0;
  for (let r2 = s.iterRange(e2, i2), o2 = e2, l2; !r2.next().done; o2 += r2.value.length)
    if (!r2.lineBreak)
      for (; l2 = t2.exec(r2.value); )
        n2(o2 + l2.index, l2);
}
function bu(s, t2) {
  let e2 = s.visibleRanges;
  if (e2.length == 1 && e2[0].from == s.viewport.from && e2[0].to == s.viewport.to)
    return e2;
  let i2 = [];
  for (let { from: n2, to: r2 } of e2)
    n2 = Math.max(s.state.doc.lineAt(n2).from, n2 - t2), r2 = Math.min(s.state.doc.lineAt(r2).to, r2 + t2), i2.length && i2[i2.length - 1].to >= n2 ? i2[i2.length - 1].to = r2 : i2.push({ from: n2, to: r2 });
  return i2;
}
class ku {
  constructor(t2) {
    const { regexp: e2, decoration: i2, decorate: n2, boundary: r2, maxLength: o2 = 1e3 } = t2;
    if (!e2.global)
      throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    if (this.regexp = e2, n2)
      this.addMatch = (l2, h2, a2, c2) => n2(c2, a2, a2 + l2[0].length, l2, h2);
    else if (typeof i2 == "function")
      this.addMatch = (l2, h2, a2, c2) => {
        let f2 = i2(l2, h2, a2);
        f2 && c2(a2, a2 + l2[0].length, f2);
      };
    else if (i2)
      this.addMatch = (l2, h2, a2, c2) => c2(a2, a2 + l2[0].length, i2);
    else
      throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
    this.boundary = r2, this.maxLength = o2;
  }
  createDeco(t2) {
    let e2 = new De(), i2 = e2.add.bind(e2);
    for (let { from: n2, to: r2 } of bu(t2, this.maxLength))
      no(t2.state.doc, this.regexp, n2, r2, (o2, l2) => this.addMatch(l2, t2, o2, i2));
    return e2.finish();
  }
  updateDeco(t2, e2) {
    let i2 = 1e9, n2 = -1;
    return t2.docChanged && t2.changes.iterChanges((r2, o2, l2, h2) => {
      h2 > t2.view.viewport.from && l2 < t2.view.viewport.to && (i2 = Math.min(l2, i2), n2 = Math.max(h2, n2));
    }), t2.viewportChanged || n2 - i2 > 1e3 ? this.createDeco(t2.view) : n2 > -1 ? this.updateRange(t2.view, e2.map(t2.changes), i2, n2) : e2;
  }
  updateRange(t2, e2, i2, n2) {
    for (let r2 of t2.visibleRanges) {
      let o2 = Math.max(r2.from, i2), l2 = Math.min(r2.to, n2);
      if (l2 > o2) {
        let h2 = t2.state.doc.lineAt(o2), a2 = h2.to < l2 ? t2.state.doc.lineAt(l2) : h2, c2 = Math.max(r2.from, h2.from), f2 = Math.min(r2.to, a2.to);
        if (this.boundary) {
          for (; o2 > h2.from; o2--)
            if (this.boundary.test(h2.text[o2 - 1 - h2.from])) {
              c2 = o2;
              break;
            }
          for (; l2 < a2.to; l2++)
            if (this.boundary.test(a2.text[l2 - a2.from])) {
              f2 = l2;
              break;
            }
        }
        let u2 = [], d2, p2 = (w, g2, y) => u2.push(y.range(w, g2));
        if (h2 == a2)
          for (this.regexp.lastIndex = c2 - h2.from; (d2 = this.regexp.exec(h2.text)) && d2.index < f2 - h2.from; )
            this.addMatch(d2, t2, d2.index + h2.from, p2);
        else
          no(t2.state.doc, this.regexp, c2, f2, (w, g2) => this.addMatch(g2, t2, w, p2));
        e2 = e2.update({ filterFrom: c2, filterTo: f2, filter: (w, g2) => w < c2 || g2 > f2, add: u2 });
      }
    }
    return e2;
  }
}
const Bs = /x/.unicode != null ? "gu" : "g", xu = /* @__PURE__ */ new RegExp(`[\0-\b
-\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\u2066\u2067\u2069\uFEFF\uFFF9-\uFFFC]`, Bs), vu = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8237: "left-to-right override",
  8238: "right-to-left override",
  8294: "left-to-right isolate",
  8295: "right-to-left isolate",
  8297: "pop directional isolate",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
let Wn = null;
function Su() {
  var s;
  if (Wn == null && typeof document < "u" && document.body) {
    let t2 = document.body.style;
    Wn = ((s = t2.tabSize) !== null && s !== void 0 ? s : t2.MozTabSize) != null;
  }
  return Wn || false;
}
const Ki = /* @__PURE__ */ v$2.define({
  combine(s) {
    let t2 = Sn(s, {
      render: null,
      specialChars: xu,
      addSpecialChars: null
    });
    return (t2.replaceTabs = !Su()) && (t2.specialChars = new RegExp("	|" + t2.specialChars.source, Bs)), t2.addSpecialChars && (t2.specialChars = new RegExp(t2.specialChars.source + "|" + t2.addSpecialChars.source, Bs)), t2;
  }
});
function Cu(s = {}) {
  return [Ki.of(s), Au()];
}
let so = null;
function Au() {
  return so || (so = wt.fromClass(class {
    constructor(s) {
      this.view = s, this.decorations = T.none, this.decorationCache = /* @__PURE__ */ Object.create(null), this.decorator = this.makeDecorator(s.state.facet(Ki)), this.decorations = this.decorator.createDeco(s);
    }
    makeDecorator(s) {
      return new ku({
        regexp: s.specialChars,
        decoration: (t2, e2, i2) => {
          let { doc: n2 } = e2.state, r2 = hi(t2[0], 0);
          if (r2 == 9) {
            let o2 = n2.lineAt(i2), l2 = e2.state.tabSize, h2 = Cn(o2.text, l2, i2 - o2.from);
            return T.replace({ widget: new Tu((l2 - h2 % l2) * this.view.defaultCharacterWidth) });
          }
          return this.decorationCache[r2] || (this.decorationCache[r2] = T.replace({ widget: new Du(s, r2) }));
        },
        boundary: s.replaceTabs ? void 0 : /[^]/
      });
    }
    update(s) {
      let t2 = s.state.facet(Ki);
      s.startState.facet(Ki) != t2 ? (this.decorator = this.makeDecorator(t2), this.decorations = this.decorator.createDeco(s.view)) : this.decorations = this.decorator.updateDeco(s, this.decorations);
    }
  }, {
    decorations: (s) => s.decorations
  }));
}
const Ou = "\u2022";
function Mu(s) {
  return s >= 32 ? Ou : s == 10 ? "\u2424" : String.fromCharCode(9216 + s);
}
class Du extends ye {
  constructor(t2, e2) {
    super(), this.options = t2, this.code = e2;
  }
  eq(t2) {
    return t2.code == this.code;
  }
  toDOM(t2) {
    let e2 = Mu(this.code), i2 = t2.state.phrase("Control character") + " " + (vu[this.code] || "0x" + this.code.toString(16)), n2 = this.options.render && this.options.render(this.code, i2, e2);
    if (n2)
      return n2;
    let r2 = document.createElement("span");
    return r2.textContent = e2, r2.title = i2, r2.setAttribute("aria-label", i2), r2.className = "cm-specialChar", r2;
  }
  ignoreEvent() {
    return false;
  }
}
class Tu extends ye {
  constructor(t2) {
    super(), this.width = t2;
  }
  eq(t2) {
    return t2.width == this.width;
  }
  toDOM() {
    let t2 = document.createElement("span");
    return t2.textContent = "	", t2.className = "cm-tab", t2.style.width = this.width + "px", t2;
  }
  ignoreEvent() {
    return false;
  }
}
function Pu() {
  return Ru;
}
const Bu = /* @__PURE__ */ T.line({ class: "cm-activeLine" }), Ru = /* @__PURE__ */ wt.fromClass(class {
  constructor(s) {
    this.decorations = this.getDeco(s);
  }
  update(s) {
    (s.docChanged || s.selectionSet) && (this.decorations = this.getDeco(s.view));
  }
  getDeco(s) {
    let t2 = -1, e2 = [];
    for (let i2 of s.state.selection.ranges) {
      let n2 = s.lineBlockAt(i2.head);
      n2.from > t2 && (e2.push(Bu.range(n2.from)), t2 = n2.from);
    }
    return T.set(e2);
  }
}, {
  decorations: (s) => s.decorations
}), Ei = "-10000px";
class sh {
  constructor(t2, e2, i2) {
    this.facet = e2, this.createTooltipView = i2, this.input = t2.state.facet(e2), this.tooltips = this.input.filter((n2) => n2), this.tooltipViews = this.tooltips.map(i2);
  }
  update(t2) {
    var e2;
    let i2 = t2.state.facet(this.facet), n2 = i2.filter((o2) => o2);
    if (i2 === this.input) {
      for (let o2 of this.tooltipViews)
        o2.update && o2.update(t2);
      return false;
    }
    let r2 = [];
    for (let o2 = 0; o2 < n2.length; o2++) {
      let l2 = n2[o2], h2 = -1;
      if (l2) {
        for (let a2 = 0; a2 < this.tooltips.length; a2++) {
          let c2 = this.tooltips[a2];
          c2 && c2.create == l2.create && (h2 = a2);
        }
        if (h2 < 0)
          r2[o2] = this.createTooltipView(l2);
        else {
          let a2 = r2[o2] = this.tooltipViews[h2];
          a2.update && a2.update(t2);
        }
      }
    }
    for (let o2 of this.tooltipViews)
      r2.indexOf(o2) < 0 && (o2.dom.remove(), (e2 = o2.destroy) === null || e2 === void 0 || e2.call(o2));
    return this.input = i2, this.tooltips = n2, this.tooltipViews = r2, true;
  }
}
function Lu(s) {
  let { win: t2 } = s;
  return { top: 0, left: 0, bottom: t2.innerHeight, right: t2.innerWidth };
}
const jn = /* @__PURE__ */ v$2.define({
  combine: (s) => {
    var t2, e2, i2;
    return {
      position: x.ios ? "absolute" : ((t2 = s.find((n2) => n2.position)) === null || t2 === void 0 ? void 0 : t2.position) || "fixed",
      parent: ((e2 = s.find((n2) => n2.parent)) === null || e2 === void 0 ? void 0 : e2.parent) || null,
      tooltipSpace: ((i2 = s.find((n2) => n2.tooltipSpace)) === null || i2 === void 0 ? void 0 : i2.tooltipSpace) || Lu
    };
  }
}), Eu = /* @__PURE__ */ wt.fromClass(class {
  constructor(s) {
    this.view = s, this.inView = true, this.lastTransaction = 0, this.measureTimeout = -1;
    let t2 = s.state.facet(jn);
    this.position = t2.position, this.parent = t2.parent, this.classes = s.themeClasses, this.createContainer(), this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this }, this.manager = new sh(s, rh, (e2) => this.createTooltip(e2)), this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((e2) => {
      Date.now() > this.lastTransaction - 50 && e2.length > 0 && e2[e2.length - 1].intersectionRatio < 1 && this.measureSoon();
    }, { threshold: [1] }) : null, this.observeIntersection(), s.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this)), this.maybeMeasure();
  }
  createContainer() {
    this.parent ? (this.container = document.createElement("div"), this.container.style.position = "relative", this.container.className = this.view.themeClasses, this.parent.appendChild(this.container)) : this.container = this.view.dom;
  }
  observeIntersection() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      for (let s of this.manager.tooltipViews)
        this.intersectionObserver.observe(s.dom);
    }
  }
  measureSoon() {
    this.measureTimeout < 0 && (this.measureTimeout = setTimeout(() => {
      this.measureTimeout = -1, this.maybeMeasure();
    }, 50));
  }
  update(s) {
    s.transactions.length && (this.lastTransaction = Date.now());
    let t2 = this.manager.update(s);
    t2 && this.observeIntersection();
    let e2 = t2 || s.geometryChanged, i2 = s.state.facet(jn);
    if (i2.position != this.position) {
      this.position = i2.position;
      for (let n2 of this.manager.tooltipViews)
        n2.dom.style.position = this.position;
      e2 = true;
    }
    if (i2.parent != this.parent) {
      this.parent && this.container.remove(), this.parent = i2.parent, this.createContainer();
      for (let n2 of this.manager.tooltipViews)
        this.container.appendChild(n2.dom);
      e2 = true;
    } else
      this.parent && this.view.themeClasses != this.classes && (this.classes = this.container.className = this.view.themeClasses);
    e2 && this.maybeMeasure();
  }
  createTooltip(s) {
    let t2 = s.create(this.view);
    if (t2.dom.classList.add("cm-tooltip"), s.arrow && !t2.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
      let e2 = document.createElement("div");
      e2.className = "cm-tooltip-arrow", t2.dom.appendChild(e2);
    }
    return t2.dom.style.position = this.position, t2.dom.style.top = Ei, this.container.appendChild(t2.dom), t2.mount && t2.mount(this.view), t2;
  }
  destroy() {
    var s, t2;
    this.view.win.removeEventListener("resize", this.measureSoon);
    for (let e2 of this.manager.tooltipViews)
      e2.dom.remove(), (s = e2.destroy) === null || s === void 0 || s.call(e2);
    (t2 = this.intersectionObserver) === null || t2 === void 0 || t2.disconnect(), clearTimeout(this.measureTimeout);
  }
  readMeasure() {
    let s = this.view.dom.getBoundingClientRect();
    return {
      editor: s,
      parent: this.parent ? this.container.getBoundingClientRect() : s,
      pos: this.manager.tooltips.map((t2, e2) => {
        let i2 = this.manager.tooltipViews[e2];
        return i2.getCoords ? i2.getCoords(t2.pos) : this.view.coordsAtPos(t2.pos);
      }),
      size: this.manager.tooltipViews.map(({ dom: t2 }) => t2.getBoundingClientRect()),
      space: this.view.state.facet(jn).tooltipSpace(this.view)
    };
  }
  writeMeasure(s) {
    let { editor: t2, space: e2 } = s, i2 = [];
    for (let n2 = 0; n2 < this.manager.tooltips.length; n2++) {
      let r2 = this.manager.tooltips[n2], o2 = this.manager.tooltipViews[n2], { dom: l2 } = o2, h2 = s.pos[n2], a2 = s.size[n2];
      if (!h2 || h2.bottom <= Math.max(t2.top, e2.top) || h2.top >= Math.min(t2.bottom, e2.bottom) || h2.right < Math.max(t2.left, e2.left) - 0.1 || h2.left > Math.min(t2.right, e2.right) + 0.1) {
        l2.style.top = Ei;
        continue;
      }
      let c2 = r2.arrow ? o2.dom.querySelector(".cm-tooltip-arrow") : null, f2 = c2 ? 7 : 0, u2 = a2.right - a2.left, d2 = a2.bottom - a2.top, p2 = o2.offset || Vu, w = this.view.textDirection == X.LTR, g2 = a2.width > e2.right - e2.left ? w ? e2.left : e2.right - a2.width : w ? Math.min(h2.left - (c2 ? 14 : 0) + p2.x, e2.right - u2) : Math.max(e2.left, h2.left - u2 + (c2 ? 14 : 0) - p2.x), y = !!r2.above;
      !r2.strictSide && (y ? h2.top - (a2.bottom - a2.top) - p2.y < e2.top : h2.bottom + (a2.bottom - a2.top) + p2.y > e2.bottom) && y == e2.bottom - h2.bottom > h2.top - e2.top && (y = !y);
      let O2 = (y ? h2.top - e2.top : e2.bottom - h2.bottom) - f2;
      if (O2 < d2 && o2.resize !== false) {
        if (O2 < this.view.defaultLineHeight) {
          l2.style.top = Ei;
          continue;
        }
        l2.style.height = (d2 = O2) + "px";
      } else
        l2.style.height && (l2.style.height = "");
      let S2 = y ? h2.top - d2 - f2 - p2.y : h2.bottom + f2 + p2.y, D2 = g2 + u2;
      if (o2.overlap !== true)
        for (let B of i2)
          B.left < D2 && B.right > g2 && B.top < S2 + d2 && B.bottom > S2 && (S2 = y ? B.top - d2 - 2 - f2 : B.bottom + f2 + 2);
      this.position == "absolute" ? (l2.style.top = S2 - s.parent.top + "px", l2.style.left = g2 - s.parent.left + "px") : (l2.style.top = S2 + "px", l2.style.left = g2 + "px"), c2 && (c2.style.left = `${h2.left + (w ? p2.x : -p2.x) - (g2 + 14 - 7)}px`), o2.overlap !== true && i2.push({ left: g2, top: S2, right: D2, bottom: S2 + d2 }), l2.classList.toggle("cm-tooltip-above", y), l2.classList.toggle("cm-tooltip-below", !y), o2.positioned && o2.positioned(s.space);
    }
  }
  maybeMeasure() {
    if (this.manager.tooltips.length && (this.view.inView && this.view.requestMeasure(this.measureReq), this.inView != this.view.inView && (this.inView = this.view.inView, !this.inView)))
      for (let s of this.manager.tooltipViews)
        s.dom.style.top = Ei;
  }
}, {
  eventHandlers: {
    scroll() {
      this.maybeMeasure();
    }
  }
}), Nu = /* @__PURE__ */ A$2.baseTheme({
  ".cm-tooltip": {
    zIndex: 100,
    boxSizing: "border-box"
  },
  "&light .cm-tooltip": {
    border: "1px solid #bbb",
    backgroundColor: "#f5f5f5"
  },
  "&light .cm-tooltip-section:not(:first-child)": {
    borderTop: "1px solid #bbb"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  },
  ".cm-tooltip-arrow": {
    height: `${7}px`,
    width: `${7 * 2}px`,
    position: "absolute",
    zIndex: -1,
    overflow: "hidden",
    "&:before, &:after": {
      content: "''",
      position: "absolute",
      width: 0,
      height: 0,
      borderLeft: `${7}px solid transparent`,
      borderRight: `${7}px solid transparent`
    },
    ".cm-tooltip-above &": {
      bottom: `-${7}px`,
      "&:before": {
        borderTop: `${7}px solid #bbb`
      },
      "&:after": {
        borderTop: `${7}px solid #f5f5f5`,
        bottom: "1px"
      }
    },
    ".cm-tooltip-below &": {
      top: `-${7}px`,
      "&:before": {
        borderBottom: `${7}px solid #bbb`
      },
      "&:after": {
        borderBottom: `${7}px solid #f5f5f5`,
        top: "1px"
      }
    }
  },
  "&dark .cm-tooltip .cm-tooltip-arrow": {
    "&:before": {
      borderTopColor: "#333338",
      borderBottomColor: "#333338"
    },
    "&:after": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    }
  }
}), Vu = { x: 0, y: 0 }, rh = /* @__PURE__ */ v$2.define({
  enables: [Eu, Nu]
}), hn = /* @__PURE__ */ v$2.define();
class Ys {
  constructor(t2) {
    this.view = t2, this.mounted = false, this.dom = document.createElement("div"), this.dom.classList.add("cm-tooltip-hover"), this.manager = new sh(t2, hn, (e2) => this.createHostedView(e2));
  }
  static create(t2) {
    return new Ys(t2);
  }
  createHostedView(t2) {
    let e2 = t2.create(this.view);
    return e2.dom.classList.add("cm-tooltip-section"), this.dom.appendChild(e2.dom), this.mounted && e2.mount && e2.mount(this.view), e2;
  }
  mount(t2) {
    for (let e2 of this.manager.tooltipViews)
      e2.mount && e2.mount(t2);
    this.mounted = true;
  }
  positioned(t2) {
    for (let e2 of this.manager.tooltipViews)
      e2.positioned && e2.positioned(t2);
  }
  update(t2) {
    this.manager.update(t2);
  }
}
const Iu = /* @__PURE__ */ rh.compute([hn], (s) => {
  let t2 = s.facet(hn).filter((e2) => e2);
  return t2.length === 0 ? null : {
    pos: Math.min(...t2.map((e2) => e2.pos)),
    end: Math.max(...t2.filter((e2) => e2.end != null).map((e2) => e2.end)),
    create: Ys.create,
    above: t2[0].above,
    arrow: t2.some((e2) => e2.arrow)
  };
});
class Hu {
  constructor(t2, e2, i2, n2, r2) {
    this.view = t2, this.source = e2, this.field = i2, this.setHover = n2, this.hoverTime = r2, this.hoverTimeout = -1, this.restartTimeout = -1, this.pending = null, this.lastMove = { x: 0, y: 0, target: t2.dom, time: 0 }, this.checkHover = this.checkHover.bind(this), t2.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this)), t2.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  update() {
    this.pending && (this.pending = null, clearTimeout(this.restartTimeout), this.restartTimeout = setTimeout(() => this.startHover(), 20));
  }
  get active() {
    return this.view.state.field(this.field);
  }
  checkHover() {
    if (this.hoverTimeout = -1, this.active)
      return;
    let t2 = Date.now() - this.lastMove.time;
    t2 < this.hoverTime ? this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - t2) : this.startHover();
  }
  startHover() {
    clearTimeout(this.restartTimeout);
    let { lastMove: t2 } = this, e2 = this.view.contentDOM.contains(t2.target) ? this.view.posAtCoords(t2) : null;
    if (e2 == null)
      return;
    let i2 = this.view.coordsAtPos(e2);
    if (i2 == null || t2.y < i2.top || t2.y > i2.bottom || t2.x < i2.left - this.view.defaultCharacterWidth || t2.x > i2.right + this.view.defaultCharacterWidth)
      return;
    let n2 = this.view.bidiSpans(this.view.state.doc.lineAt(e2)).find((l2) => l2.from <= e2 && l2.to >= e2), r2 = n2 && n2.dir == X.RTL ? -1 : 1, o2 = this.source(this.view, e2, t2.x < i2.left ? -r2 : r2);
    if (o2 != null && o2.then) {
      let l2 = this.pending = { pos: e2 };
      o2.then((h2) => {
        this.pending == l2 && (this.pending = null, h2 && this.view.dispatch({ effects: this.setHover.of(h2) }));
      }, (h2) => zt(this.view.state, h2, "hover tooltip"));
    } else
      o2 && this.view.dispatch({ effects: this.setHover.of(o2) });
  }
  mousemove(t2) {
    var e2;
    this.lastMove = { x: t2.clientX, y: t2.clientY, target: t2.target, time: Date.now() }, this.hoverTimeout < 0 && (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime));
    let i2 = this.active;
    if (i2 && !ro(this.lastMove.target) || this.pending) {
      let { pos: n2 } = i2 || this.pending, r2 = (e2 = i2 == null ? void 0 : i2.end) !== null && e2 !== void 0 ? e2 : n2;
      (n2 == r2 ? this.view.posAtCoords(this.lastMove) != n2 : !$u(
        this.view,
        n2,
        r2,
        t2.clientX,
        t2.clientY,
        6
      )) && (this.view.dispatch({ effects: this.setHover.of(null) }), this.pending = null);
    }
  }
  mouseleave(t2) {
    clearTimeout(this.hoverTimeout), this.hoverTimeout = -1, this.active && !ro(t2.relatedTarget) && this.view.dispatch({ effects: this.setHover.of(null) });
  }
  destroy() {
    clearTimeout(this.hoverTimeout), this.view.dom.removeEventListener("mouseleave", this.mouseleave), this.view.dom.removeEventListener("mousemove", this.mousemove);
  }
}
function ro(s) {
  for (let t2 = s; t2; t2 = t2.parentNode)
    if (t2.nodeType == 1 && t2.classList.contains("cm-tooltip"))
      return true;
  return false;
}
function $u(s, t2, e2, i2, n2, r2) {
  let o2 = document.createRange(), l2 = s.domAtPos(t2), h2 = s.domAtPos(e2);
  o2.setEnd(h2.node, h2.offset), o2.setStart(l2.node, l2.offset);
  let a2 = o2.getClientRects();
  o2.detach();
  for (let c2 = 0; c2 < a2.length; c2++) {
    let f2 = a2[c2];
    if (Math.max(f2.top - n2, n2 - f2.bottom, f2.left - i2, i2 - f2.right) <= r2)
      return true;
  }
  return false;
}
function Fu(s, t2 = {}) {
  let e2 = F.define(), i2 = Bt.define({
    create() {
      return null;
    },
    update(n2, r2) {
      if (n2 && (t2.hideOnChange && (r2.docChanged || r2.selection) || t2.hideOn && t2.hideOn(r2, n2)))
        return null;
      if (n2 && r2.docChanged) {
        let o2 = r2.changes.mapPos(n2.pos, -1, gt.TrackDel);
        if (o2 == null)
          return null;
        let l2 = Object.assign(/* @__PURE__ */ Object.create(null), n2);
        l2.pos = o2, n2.end != null && (l2.end = r2.changes.mapPos(n2.end)), n2 = l2;
      }
      for (let o2 of r2.effects)
        o2.is(e2) && (n2 = o2.value), o2.is(zu) && (n2 = null);
      return n2;
    },
    provide: (n2) => hn.from(n2)
  });
  return [
    i2,
    wt.define((n2) => new Hu(
      n2,
      s,
      i2,
      e2,
      t2.hoverTime || 300
    )),
    Iu
  ];
}
const zu = /* @__PURE__ */ F.define(), oo = /* @__PURE__ */ v$2.define({
  combine(s) {
    let t2, e2;
    for (let i2 of s)
      t2 = t2 || i2.topContainer, e2 = e2 || i2.bottomContainer;
    return { topContainer: t2, bottomContainer: e2 };
  }
});
function _u(s, t2) {
  let e2 = s.plugin(oh), i2 = e2 ? e2.specs.indexOf(t2) : -1;
  return i2 > -1 ? e2.panels[i2] : null;
}
const oh = /* @__PURE__ */ wt.fromClass(class {
  constructor(s) {
    this.input = s.state.facet(Rs), this.specs = this.input.filter((e2) => e2), this.panels = this.specs.map((e2) => e2(s));
    let t2 = s.state.facet(oo);
    this.top = new Ni(s, true, t2.topContainer), this.bottom = new Ni(s, false, t2.bottomContainer), this.top.sync(this.panels.filter((e2) => e2.top)), this.bottom.sync(this.panels.filter((e2) => !e2.top));
    for (let e2 of this.panels)
      e2.dom.classList.add("cm-panel"), e2.mount && e2.mount();
  }
  update(s) {
    let t2 = s.state.facet(oo);
    this.top.container != t2.topContainer && (this.top.sync([]), this.top = new Ni(s.view, true, t2.topContainer)), this.bottom.container != t2.bottomContainer && (this.bottom.sync([]), this.bottom = new Ni(s.view, false, t2.bottomContainer)), this.top.syncClasses(), this.bottom.syncClasses();
    let e2 = s.state.facet(Rs);
    if (e2 != this.input) {
      let i2 = e2.filter((h2) => h2), n2 = [], r2 = [], o2 = [], l2 = [];
      for (let h2 of i2) {
        let a2 = this.specs.indexOf(h2), c2;
        a2 < 0 ? (c2 = h2(s.view), l2.push(c2)) : (c2 = this.panels[a2], c2.update && c2.update(s)), n2.push(c2), (c2.top ? r2 : o2).push(c2);
      }
      this.specs = i2, this.panels = n2, this.top.sync(r2), this.bottom.sync(o2);
      for (let h2 of l2)
        h2.dom.classList.add("cm-panel"), h2.mount && h2.mount();
    } else
      for (let i2 of this.panels)
        i2.update && i2.update(s);
  }
  destroy() {
    this.top.sync([]), this.bottom.sync([]);
  }
}, {
  provide: (s) => A$2.scrollMargins.of((t2) => {
    let e2 = t2.plugin(s);
    return e2 && { top: e2.top.scrollMargin(), bottom: e2.bottom.scrollMargin() };
  })
});
class Ni {
  constructor(t2, e2, i2) {
    this.view = t2, this.top = e2, this.container = i2, this.dom = void 0, this.classes = "", this.panels = [], this.syncClasses();
  }
  sync(t2) {
    for (let e2 of this.panels)
      e2.destroy && t2.indexOf(e2) < 0 && e2.destroy();
    this.panels = t2, this.syncDOM();
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), this.dom = void 0);
      return;
    }
    if (!this.dom) {
      this.dom = document.createElement("div"), this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom", this.dom.style[this.top ? "top" : "bottom"] = "0";
      let e2 = this.container || this.view.dom;
      e2.insertBefore(this.dom, this.top ? e2.firstChild : null);
    }
    let t2 = this.dom.firstChild;
    for (let e2 of this.panels)
      if (e2.dom.parentNode == this.dom) {
        for (; t2 != e2.dom; )
          t2 = lo(t2);
        t2 = t2.nextSibling;
      } else
        this.dom.insertBefore(e2.dom, t2);
    for (; t2; )
      t2 = lo(t2);
  }
  scrollMargin() {
    return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let t2 of this.classes.split(" "))
        t2 && this.container.classList.remove(t2);
      for (let t2 of (this.classes = this.view.themeClasses).split(" "))
        t2 && this.container.classList.add(t2);
    }
  }
}
function lo(s) {
  let t2 = s.nextSibling;
  return s.remove(), t2;
}
const Rs = /* @__PURE__ */ v$2.define({
  enables: oh
});
class me extends je {
  compare(t2) {
    return this == t2 || this.constructor == t2.constructor && this.eq(t2);
  }
  eq(t2) {
    return false;
  }
  destroy(t2) {
  }
}
me.prototype.elementClass = "";
me.prototype.toDOM = void 0;
me.prototype.mapMode = gt.TrackBefore;
me.prototype.startSide = me.prototype.endSide = -1;
me.prototype.point = true;
const Gi = /* @__PURE__ */ v$2.define(), Wu = {
  class: "",
  renderEmptyElements: false,
  elementStyle: "",
  markers: () => $.empty,
  lineMarker: () => null,
  lineMarkerChange: null,
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
}, Ui = /* @__PURE__ */ v$2.define();
function ju(s) {
  return [qu(), Ui.of(Object.assign(Object.assign({}, Wu), s))];
}
const Ls = /* @__PURE__ */ v$2.define({
  combine: (s) => s.some((t2) => t2)
});
function qu(s) {
  let t2 = [
    Ku
  ];
  return s && s.fixed === false && t2.push(Ls.of(true)), t2;
}
const Ku = /* @__PURE__ */ wt.fromClass(class {
  constructor(s) {
    this.view = s, this.prevViewport = s.viewport, this.dom = document.createElement("div"), this.dom.className = "cm-gutters", this.dom.setAttribute("aria-hidden", "true"), this.dom.style.minHeight = this.view.contentHeight + "px", this.gutters = s.state.facet(Ui).map((t2) => new ao(s, t2));
    for (let t2 of this.gutters)
      this.dom.appendChild(t2.dom);
    this.fixed = !s.state.facet(Ls), this.fixed && (this.dom.style.position = "sticky"), this.syncGutters(false), s.scrollDOM.insertBefore(this.dom, s.contentDOM);
  }
  update(s) {
    if (this.updateGutters(s)) {
      let t2 = this.prevViewport, e2 = s.view.viewport, i2 = Math.min(t2.to, e2.to) - Math.max(t2.from, e2.from);
      this.syncGutters(i2 < (e2.to - e2.from) * 0.8);
    }
    s.geometryChanged && (this.dom.style.minHeight = this.view.contentHeight + "px"), this.view.state.facet(Ls) != !this.fixed && (this.fixed = !this.fixed, this.dom.style.position = this.fixed ? "sticky" : ""), this.prevViewport = s.view.viewport;
  }
  syncGutters(s) {
    let t2 = this.dom.nextSibling;
    s && this.dom.remove();
    let e2 = $.iter(this.view.state.facet(Gi), this.view.viewport.from), i2 = [], n2 = this.gutters.map((r2) => new Gu(r2, this.view.viewport, -this.view.documentPadding.top));
    for (let r2 of this.view.viewportLineBlocks) {
      let o2;
      if (Array.isArray(r2.type)) {
        for (let l2 of r2.type)
          if (l2.type == U.Text) {
            o2 = l2;
            break;
          }
      } else
        o2 = r2.type == U.Text ? r2 : void 0;
      if (o2) {
        i2.length && (i2 = []), lh(e2, i2, r2.from);
        for (let l2 of n2)
          l2.line(this.view, o2, i2);
      }
    }
    for (let r2 of n2)
      r2.finish();
    s && this.view.scrollDOM.insertBefore(this.dom, t2);
  }
  updateGutters(s) {
    let t2 = s.startState.facet(Ui), e2 = s.state.facet(Ui), i2 = s.docChanged || s.heightChanged || s.viewportChanged || !$.eq(s.startState.facet(Gi), s.state.facet(Gi), s.view.viewport.from, s.view.viewport.to);
    if (t2 == e2)
      for (let n2 of this.gutters)
        n2.update(s) && (i2 = true);
    else {
      i2 = true;
      let n2 = [];
      for (let r2 of e2) {
        let o2 = t2.indexOf(r2);
        o2 < 0 ? n2.push(new ao(this.view, r2)) : (this.gutters[o2].update(s), n2.push(this.gutters[o2]));
      }
      for (let r2 of this.gutters)
        r2.dom.remove(), n2.indexOf(r2) < 0 && r2.destroy();
      for (let r2 of n2)
        this.dom.appendChild(r2.dom);
      this.gutters = n2;
    }
    return i2;
  }
  destroy() {
    for (let s of this.gutters)
      s.destroy();
    this.dom.remove();
  }
}, {
  provide: (s) => A$2.scrollMargins.of((t2) => {
    let e2 = t2.plugin(s);
    return !e2 || e2.gutters.length == 0 || !e2.fixed ? null : t2.textDirection == X.LTR ? { left: e2.dom.offsetWidth } : { right: e2.dom.offsetWidth };
  })
});
function ho(s) {
  return Array.isArray(s) ? s : [s];
}
function lh(s, t2, e2) {
  for (; s.value && s.from <= e2; )
    s.from == e2 && t2.push(s.value), s.next();
}
class Gu {
  constructor(t2, e2, i2) {
    this.gutter = t2, this.height = i2, this.i = 0, this.cursor = $.iter(t2.markers, e2.from);
  }
  line(t2, e2, i2) {
    let n2 = [];
    lh(this.cursor, n2, e2.from), i2.length && (n2 = n2.concat(i2));
    let r2 = this.gutter.config.lineMarker(t2, e2, n2);
    r2 && n2.unshift(r2);
    let o2 = this.gutter;
    if (n2.length == 0 && !o2.config.renderEmptyElements)
      return;
    let l2 = e2.top - this.height;
    if (this.i == o2.elements.length) {
      let h2 = new hh(t2, e2.height, l2, n2);
      o2.elements.push(h2), o2.dom.appendChild(h2.dom);
    } else
      o2.elements[this.i].update(t2, e2.height, l2, n2);
    this.height = e2.bottom, this.i++;
  }
  finish() {
    let t2 = this.gutter;
    for (; t2.elements.length > this.i; ) {
      let e2 = t2.elements.pop();
      t2.dom.removeChild(e2.dom), e2.destroy();
    }
  }
}
class ao {
  constructor(t2, e2) {
    this.view = t2, this.config = e2, this.elements = [], this.spacer = null, this.dom = document.createElement("div"), this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
    for (let i2 in e2.domEventHandlers)
      this.dom.addEventListener(i2, (n2) => {
        let r2 = n2.target, o2;
        if (r2 != this.dom && this.dom.contains(r2)) {
          for (; r2.parentNode != this.dom; )
            r2 = r2.parentNode;
          let h2 = r2.getBoundingClientRect();
          o2 = (h2.top + h2.bottom) / 2;
        } else
          o2 = n2.clientY;
        let l2 = t2.lineBlockAtHeight(o2 - t2.documentTop);
        e2.domEventHandlers[i2](t2, l2, n2) && n2.preventDefault();
      });
    this.markers = ho(e2.markers(t2)), e2.initialSpacer && (this.spacer = new hh(t2, 0, 0, [e2.initialSpacer(t2)]), this.dom.appendChild(this.spacer.dom), this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none");
  }
  update(t2) {
    let e2 = this.markers;
    if (this.markers = ho(this.config.markers(t2.view)), this.spacer && this.config.updateSpacer) {
      let n2 = this.config.updateSpacer(this.spacer.markers[0], t2);
      n2 != this.spacer.markers[0] && this.spacer.update(t2.view, 0, 0, [n2]);
    }
    let i2 = t2.view.viewport;
    return !$.eq(this.markers, e2, i2.from, i2.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(t2) : false);
  }
  destroy() {
    for (let t2 of this.elements)
      t2.destroy();
  }
}
class hh {
  constructor(t2, e2, i2, n2) {
    this.height = -1, this.above = 0, this.markers = [], this.dom = document.createElement("div"), this.dom.className = "cm-gutterElement", this.update(t2, e2, i2, n2);
  }
  update(t2, e2, i2, n2) {
    this.height != e2 && (this.dom.style.height = (this.height = e2) + "px"), this.above != i2 && (this.dom.style.marginTop = (this.above = i2) ? i2 + "px" : ""), Uu(this.markers, n2) || this.setMarkers(t2, n2);
  }
  setMarkers(t2, e2) {
    let i2 = "cm-gutterElement", n2 = this.dom.firstChild;
    for (let r2 = 0, o2 = 0; ; ) {
      let l2 = o2, h2 = r2 < e2.length ? e2[r2++] : null, a2 = false;
      if (h2) {
        let c2 = h2.elementClass;
        c2 && (i2 += " " + c2);
        for (let f2 = o2; f2 < this.markers.length; f2++)
          if (this.markers[f2].compare(h2)) {
            l2 = f2, a2 = true;
            break;
          }
      } else
        l2 = this.markers.length;
      for (; o2 < l2; ) {
        let c2 = this.markers[o2++];
        if (c2.toDOM) {
          c2.destroy(n2);
          let f2 = n2.nextSibling;
          n2.remove(), n2 = f2;
        }
      }
      if (!h2)
        break;
      h2.toDOM && (a2 ? n2 = n2.nextSibling : this.dom.insertBefore(h2.toDOM(t2), n2)), a2 && o2++;
    }
    this.dom.className = i2, this.markers = e2;
  }
  destroy() {
    this.setMarkers(null, []);
  }
}
function Uu(s, t2) {
  if (s.length != t2.length)
    return false;
  for (let e2 = 0; e2 < s.length; e2++)
    if (!s[e2].compare(t2[e2]))
      return false;
  return true;
}
const Qu = /* @__PURE__ */ new class extends me {
  constructor() {
    super(...arguments), this.elementClass = "cm-activeLineGutter";
  }
}(), Ju = /* @__PURE__ */ Gi.compute(["selection"], (s) => {
  let t2 = [], e2 = -1;
  for (let i2 of s.selection.ranges) {
    let n2 = s.doc.lineAt(i2.head).from;
    n2 > e2 && (e2 = n2, t2.push(Qu.range(n2)));
  }
  return $.of(t2);
});
function Xu() {
  return Ju;
}
const ah = 1024;
let Yu = 0;
class qn {
  constructor(t2, e2) {
    this.from = t2, this.to = e2;
  }
}
class P {
  constructor(t2 = {}) {
    this.id = Yu++, this.perNode = !!t2.perNode, this.deserialize = t2.deserialize || (() => {
      throw new Error("This node type doesn't define a deserialize function");
    });
  }
  add(t2) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types");
    return typeof t2 != "function" && (t2 = yt.match(t2)), (e2) => {
      let i2 = t2(e2);
      return i2 === void 0 ? null : [this, i2];
    };
  }
}
P.closedBy = new P({ deserialize: (s) => s.split(" ") });
P.openedBy = new P({ deserialize: (s) => s.split(" ") });
P.group = new P({ deserialize: (s) => s.split(" ") });
P.contextHash = new P({ perNode: true });
P.lookAhead = new P({ perNode: true });
P.mounted = new P({ perNode: true });
const Zu = /* @__PURE__ */ Object.create(null);
class yt {
  constructor(t2, e2, i2, n2 = 0) {
    this.name = t2, this.props = e2, this.id = i2, this.flags = n2;
  }
  static define(t2) {
    let e2 = t2.props && t2.props.length ? /* @__PURE__ */ Object.create(null) : Zu, i2 = (t2.top ? 1 : 0) | (t2.skipped ? 2 : 0) | (t2.error ? 4 : 0) | (t2.name == null ? 8 : 0), n2 = new yt(t2.name || "", e2, t2.id, i2);
    if (t2.props) {
      for (let r2 of t2.props)
        if (Array.isArray(r2) || (r2 = r2(n2)), r2) {
          if (r2[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type");
          e2[r2[0].id] = r2[1];
        }
    }
    return n2;
  }
  prop(t2) {
    return this.props[t2.id];
  }
  get isTop() {
    return (this.flags & 1) > 0;
  }
  get isSkipped() {
    return (this.flags & 2) > 0;
  }
  get isError() {
    return (this.flags & 4) > 0;
  }
  get isAnonymous() {
    return (this.flags & 8) > 0;
  }
  is(t2) {
    if (typeof t2 == "string") {
      if (this.name == t2)
        return true;
      let e2 = this.prop(P.group);
      return e2 ? e2.indexOf(t2) > -1 : false;
    }
    return this.id == t2;
  }
  static match(t2) {
    let e2 = /* @__PURE__ */ Object.create(null);
    for (let i2 in t2)
      for (let n2 of i2.split(" "))
        e2[n2] = t2[i2];
    return (i2) => {
      for (let n2 = i2.prop(P.group), r2 = -1; r2 < (n2 ? n2.length : 0); r2++) {
        let o2 = e2[r2 < 0 ? i2.name : n2[r2]];
        if (o2)
          return o2;
      }
    };
  }
}
yt.none = new yt(
  "",
  /* @__PURE__ */ Object.create(null),
  0,
  8
);
class Zs {
  constructor(t2) {
    this.types = t2;
    for (let e2 = 0; e2 < t2.length; e2++)
      if (t2[e2].id != e2)
        throw new RangeError("Node type ids should correspond to array positions when creating a node set");
  }
  extend(...t2) {
    let e2 = [];
    for (let i2 of this.types) {
      let n2 = null;
      for (let r2 of t2) {
        let o2 = r2(i2);
        o2 && (n2 || (n2 = Object.assign({}, i2.props)), n2[o2[0].id] = o2[1]);
      }
      e2.push(n2 ? new yt(i2.name, n2, i2.id, i2.flags) : i2);
    }
    return new Zs(e2);
  }
}
const Vi = /* @__PURE__ */ new WeakMap(), co = /* @__PURE__ */ new WeakMap();
var st;
(function(s) {
  s[s.ExcludeBuffers = 1] = "ExcludeBuffers", s[s.IncludeAnonymous = 2] = "IncludeAnonymous", s[s.IgnoreMounts = 4] = "IgnoreMounts", s[s.IgnoreOverlays = 8] = "IgnoreOverlays";
})(st || (st = {}));
class J {
  constructor(t2, e2, i2, n2, r2) {
    if (this.type = t2, this.children = e2, this.positions = i2, this.length = n2, this.props = null, r2 && r2.length) {
      this.props = /* @__PURE__ */ Object.create(null);
      for (let [o2, l2] of r2)
        this.props[typeof o2 == "number" ? o2 : o2.id] = l2;
    }
  }
  toString() {
    let t2 = this.prop(P.mounted);
    if (t2 && !t2.overlay)
      return t2.tree.toString();
    let e2 = "";
    for (let i2 of this.children) {
      let n2 = i2.toString();
      n2 && (e2 && (e2 += ","), e2 += n2);
    }
    return this.type.name ? (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (e2.length ? "(" + e2 + ")" : "") : e2;
  }
  cursor(t2 = 0) {
    return new fn(this.topNode, t2);
  }
  cursorAt(t2, e2 = 0, i2 = 0) {
    let n2 = Vi.get(this) || this.topNode, r2 = new fn(n2);
    return r2.moveTo(t2, e2), Vi.set(this, r2._tree), r2;
  }
  get topNode() {
    return new Zt(this, 0, 0, null);
  }
  resolve(t2, e2 = 0) {
    let i2 = Ue(Vi.get(this) || this.topNode, t2, e2, false);
    return Vi.set(this, i2), i2;
  }
  resolveInner(t2, e2 = 0) {
    let i2 = Ue(co.get(this) || this.topNode, t2, e2, true);
    return co.set(this, i2), i2;
  }
  iterate(t2) {
    let { enter: e2, leave: i2, from: n2 = 0, to: r2 = this.length } = t2;
    for (let o2 = this.cursor((t2.mode || 0) | st.IncludeAnonymous); ; ) {
      let l2 = false;
      if (o2.from <= r2 && o2.to >= n2 && (o2.type.isAnonymous || e2(o2) !== false)) {
        if (o2.firstChild())
          continue;
        l2 = true;
      }
      for (; l2 && i2 && !o2.type.isAnonymous && i2(o2), !o2.nextSibling(); ) {
        if (!o2.parent())
          return;
        l2 = true;
      }
    }
  }
  prop(t2) {
    return t2.perNode ? this.props ? this.props[t2.id] : void 0 : this.type.prop(t2);
  }
  get propValues() {
    let t2 = [];
    if (this.props)
      for (let e2 in this.props)
        t2.push([+e2, this.props[e2]]);
    return t2;
  }
  balance(t2 = {}) {
    return this.children.length <= 8 ? this : ir(yt.none, this.children, this.positions, 0, this.children.length, 0, this.length, (e2, i2, n2) => new J(this.type, e2, i2, n2, this.propValues), t2.makeTree || ((e2, i2, n2) => new J(yt.none, e2, i2, n2)));
  }
  static build(t2) {
    return ed(t2);
  }
}
J.empty = new J(yt.none, [], [], 0);
class tr {
  constructor(t2, e2) {
    this.buffer = t2, this.index = e2;
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  get pos() {
    return this.index;
  }
  next() {
    this.index -= 4;
  }
  fork() {
    return new tr(this.buffer, this.index);
  }
}
class Re {
  constructor(t2, e2, i2) {
    this.buffer = t2, this.length = e2, this.set = i2;
  }
  get type() {
    return yt.none;
  }
  toString() {
    let t2 = [];
    for (let e2 = 0; e2 < this.buffer.length; )
      t2.push(this.childString(e2)), e2 = this.buffer[e2 + 3];
    return t2.join(",");
  }
  childString(t2) {
    let e2 = this.buffer[t2], i2 = this.buffer[t2 + 3], n2 = this.set.types[e2], r2 = n2.name;
    if (/\W/.test(r2) && !n2.isError && (r2 = JSON.stringify(r2)), t2 += 4, i2 == t2)
      return r2;
    let o2 = [];
    for (; t2 < i2; )
      o2.push(this.childString(t2)), t2 = this.buffer[t2 + 3];
    return r2 + "(" + o2.join(",") + ")";
  }
  findChild(t2, e2, i2, n2, r2) {
    let { buffer: o2 } = this, l2 = -1;
    for (let h2 = t2; h2 != e2 && !(ch(r2, n2, o2[h2 + 1], o2[h2 + 2]) && (l2 = h2, i2 > 0)); h2 = o2[h2 + 3])
      ;
    return l2;
  }
  slice(t2, e2, i2) {
    let n2 = this.buffer, r2 = new Uint16Array(e2 - t2), o2 = 0;
    for (let l2 = t2, h2 = 0; l2 < e2; ) {
      r2[h2++] = n2[l2++], r2[h2++] = n2[l2++] - i2;
      let a2 = r2[h2++] = n2[l2++] - i2;
      r2[h2++] = n2[l2++] - t2, o2 = Math.max(o2, a2);
    }
    return new Re(r2, o2, this.set);
  }
}
function ch(s, t2, e2, i2) {
  switch (s) {
    case -2:
      return e2 < t2;
    case -1:
      return i2 >= t2 && e2 < t2;
    case 0:
      return e2 < t2 && i2 > t2;
    case 1:
      return e2 <= t2 && i2 > t2;
    case 2:
      return i2 > t2;
    case 4:
      return true;
  }
}
function fh(s, t2) {
  let e2 = s.childBefore(t2);
  for (; e2; ) {
    let i2 = e2.lastChild;
    if (!i2 || i2.to != e2.to)
      break;
    i2.type.isError && i2.from == i2.to ? (s = e2, e2 = i2.prevSibling) : e2 = i2;
  }
  return s;
}
function Ue(s, t2, e2, i2) {
  for (var n2; s.from == s.to || (e2 < 1 ? s.from >= t2 : s.from > t2) || (e2 > -1 ? s.to <= t2 : s.to < t2); ) {
    let o2 = !i2 && s instanceof Zt && s.index < 0 ? null : s.parent;
    if (!o2)
      return s;
    s = o2;
  }
  let r2 = i2 ? 0 : st.IgnoreOverlays;
  if (i2)
    for (let o2 = s, l2 = o2.parent; l2; o2 = l2, l2 = o2.parent)
      o2 instanceof Zt && o2.index < 0 && ((n2 = l2.enter(t2, e2, r2)) === null || n2 === void 0 ? void 0 : n2.from) != o2.from && (s = l2);
  for (; ; ) {
    let o2 = s.enter(t2, e2, r2);
    if (!o2)
      return s;
    s = o2;
  }
}
class Zt {
  constructor(t2, e2, i2, n2) {
    this._tree = t2, this.from = e2, this.index = i2, this._parent = n2;
  }
  get type() {
    return this._tree.type;
  }
  get name() {
    return this._tree.type.name;
  }
  get to() {
    return this.from + this._tree.length;
  }
  nextChild(t2, e2, i2, n2, r2 = 0) {
    for (let o2 = this; ; ) {
      for (let { children: l2, positions: h2 } = o2._tree, a2 = e2 > 0 ? l2.length : -1; t2 != a2; t2 += e2) {
        let c2 = l2[t2], f2 = h2[t2] + o2.from;
        if (ch(n2, i2, f2, f2 + c2.length)) {
          if (c2 instanceof Re) {
            if (r2 & st.ExcludeBuffers)
              continue;
            let u2 = c2.findChild(0, c2.buffer.length, e2, i2 - f2, n2);
            if (u2 > -1)
              return new ce(new td(o2, c2, t2, f2), null, u2);
          } else if (r2 & st.IncludeAnonymous || !c2.type.isAnonymous || er(c2)) {
            let u2;
            if (!(r2 & st.IgnoreMounts) && c2.props && (u2 = c2.prop(P.mounted)) && !u2.overlay)
              return new Zt(u2.tree, f2, t2, o2);
            let d2 = new Zt(c2, f2, t2, o2);
            return r2 & st.IncludeAnonymous || !d2.type.isAnonymous ? d2 : d2.nextChild(e2 < 0 ? c2.children.length - 1 : 0, e2, i2, n2);
          }
        }
      }
      if (r2 & st.IncludeAnonymous || !o2.type.isAnonymous || (o2.index >= 0 ? t2 = o2.index + e2 : t2 = e2 < 0 ? -1 : o2._parent._tree.children.length, o2 = o2._parent, !o2))
        return null;
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
    );
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
    );
  }
  childAfter(t2) {
    return this.nextChild(
      0,
      1,
      t2,
      2
    );
  }
  childBefore(t2) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      t2,
      -2
    );
  }
  enter(t2, e2, i2 = 0) {
    let n2;
    if (!(i2 & st.IgnoreOverlays) && (n2 = this._tree.prop(P.mounted)) && n2.overlay) {
      let r2 = t2 - this.from;
      for (let { from: o2, to: l2 } of n2.overlay)
        if ((e2 > 0 ? o2 <= r2 : o2 < r2) && (e2 < 0 ? l2 >= r2 : l2 > r2))
          return new Zt(n2.tree, n2.overlay[0].from + this.from, -1, this);
    }
    return this.nextChild(0, 1, t2, e2, i2);
  }
  nextSignificantParent() {
    let t2 = this;
    for (; t2.type.isAnonymous && t2._parent; )
      t2 = t2._parent;
    return t2;
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null;
  }
  get nextSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index + 1,
      1,
      0,
      4
    ) : null;
  }
  get prevSibling() {
    return this._parent && this.index >= 0 ? this._parent.nextChild(
      this.index - 1,
      -1,
      0,
      4
    ) : null;
  }
  cursor(t2 = 0) {
    return new fn(this, t2);
  }
  get tree() {
    return this._tree;
  }
  toTree() {
    return this._tree;
  }
  resolve(t2, e2 = 0) {
    return Ue(this, t2, e2, false);
  }
  resolveInner(t2, e2 = 0) {
    return Ue(this, t2, e2, true);
  }
  enterUnfinishedNodesBefore(t2) {
    return fh(this, t2);
  }
  getChild(t2, e2 = null, i2 = null) {
    let n2 = an(this, t2, e2, i2);
    return n2.length ? n2[0] : null;
  }
  getChildren(t2, e2 = null, i2 = null) {
    return an(this, t2, e2, i2);
  }
  toString() {
    return this._tree.toString();
  }
  get node() {
    return this;
  }
  matchContext(t2) {
    return cn(this, t2);
  }
}
function an(s, t2, e2, i2) {
  let n2 = s.cursor(), r2 = [];
  if (!n2.firstChild())
    return r2;
  if (e2 != null) {
    for (; !n2.type.is(e2); )
      if (!n2.nextSibling())
        return r2;
  }
  for (; ; ) {
    if (i2 != null && n2.type.is(i2))
      return r2;
    if (n2.type.is(t2) && r2.push(n2.node), !n2.nextSibling())
      return i2 == null ? r2 : [];
  }
}
function cn(s, t2, e2 = t2.length - 1) {
  for (let i2 = s.parent; e2 >= 0; i2 = i2.parent) {
    if (!i2)
      return false;
    if (!i2.type.isAnonymous) {
      if (t2[e2] && t2[e2] != i2.name)
        return false;
      e2--;
    }
  }
  return true;
}
class td {
  constructor(t2, e2, i2, n2) {
    this.parent = t2, this.buffer = e2, this.index = i2, this.start = n2;
  }
}
class ce {
  get name() {
    return this.type.name;
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1];
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2];
  }
  constructor(t2, e2, i2) {
    this.context = t2, this._parent = e2, this.index = i2, this.type = t2.buffer.set.types[t2.buffer.buffer[i2]];
  }
  child(t2, e2, i2) {
    let { buffer: n2 } = this.context, r2 = n2.findChild(this.index + 4, n2.buffer[this.index + 3], t2, e2 - this.context.start, i2);
    return r2 < 0 ? null : new ce(this.context, this, r2);
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
    );
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
    );
  }
  childAfter(t2) {
    return this.child(
      1,
      t2,
      2
    );
  }
  childBefore(t2) {
    return this.child(
      -1,
      t2,
      -2
    );
  }
  enter(t2, e2, i2 = 0) {
    if (i2 & st.ExcludeBuffers)
      return null;
    let { buffer: n2 } = this.context, r2 = n2.findChild(this.index + 4, n2.buffer[this.index + 3], e2 > 0 ? 1 : -1, t2 - this.context.start, e2);
    return r2 < 0 ? null : new ce(this.context, this, r2);
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent();
  }
  externalSibling(t2) {
    return this._parent ? null : this.context.parent.nextChild(
      this.context.index + t2,
      t2,
      0,
      4
    );
  }
  get nextSibling() {
    let { buffer: t2 } = this.context, e2 = t2.buffer[this.index + 3];
    return e2 < (this._parent ? t2.buffer[this._parent.index + 3] : t2.buffer.length) ? new ce(this.context, this._parent, e2) : this.externalSibling(1);
  }
  get prevSibling() {
    let { buffer: t2 } = this.context, e2 = this._parent ? this._parent.index + 4 : 0;
    return this.index == e2 ? this.externalSibling(-1) : new ce(this.context, this._parent, t2.findChild(
      e2,
      this.index,
      -1,
      0,
      4
    ));
  }
  cursor(t2 = 0) {
    return new fn(this, t2);
  }
  get tree() {
    return null;
  }
  toTree() {
    let t2 = [], e2 = [], { buffer: i2 } = this.context, n2 = this.index + 4, r2 = i2.buffer[this.index + 3];
    if (r2 > n2) {
      let o2 = i2.buffer[this.index + 1];
      t2.push(i2.slice(n2, r2, o2)), e2.push(0);
    }
    return new J(this.type, t2, e2, this.to - this.from);
  }
  resolve(t2, e2 = 0) {
    return Ue(this, t2, e2, false);
  }
  resolveInner(t2, e2 = 0) {
    return Ue(this, t2, e2, true);
  }
  enterUnfinishedNodesBefore(t2) {
    return fh(this, t2);
  }
  toString() {
    return this.context.buffer.childString(this.index);
  }
  getChild(t2, e2 = null, i2 = null) {
    let n2 = an(this, t2, e2, i2);
    return n2.length ? n2[0] : null;
  }
  getChildren(t2, e2 = null, i2 = null) {
    return an(this, t2, e2, i2);
  }
  get node() {
    return this;
  }
  matchContext(t2) {
    return cn(this, t2);
  }
}
class fn {
  get name() {
    return this.type.name;
  }
  constructor(t2, e2 = 0) {
    if (this.mode = e2, this.buffer = null, this.stack = [], this.index = 0, this.bufferNode = null, t2 instanceof Zt)
      this.yieldNode(t2);
    else {
      this._tree = t2.context.parent, this.buffer = t2.context;
      for (let i2 = t2._parent; i2; i2 = i2._parent)
        this.stack.unshift(i2.index);
      this.bufferNode = t2, this.yieldBuf(t2.index);
    }
  }
  yieldNode(t2) {
    return t2 ? (this._tree = t2, this.type = t2.type, this.from = t2.from, this.to = t2.to, true) : false;
  }
  yieldBuf(t2, e2) {
    this.index = t2;
    let { start: i2, buffer: n2 } = this.buffer;
    return this.type = e2 || n2.set.types[n2.buffer[t2]], this.from = i2 + n2.buffer[t2 + 1], this.to = i2 + n2.buffer[t2 + 2], true;
  }
  yield(t2) {
    return t2 ? t2 instanceof Zt ? (this.buffer = null, this.yieldNode(t2)) : (this.buffer = t2.context, this.yieldBuf(t2.index, t2.type)) : false;
  }
  toString() {
    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
  }
  enterChild(t2, e2, i2) {
    if (!this.buffer)
      return this.yield(this._tree.nextChild(t2 < 0 ? this._tree._tree.children.length - 1 : 0, t2, e2, i2, this.mode));
    let { buffer: n2 } = this.buffer, r2 = n2.findChild(this.index + 4, n2.buffer[this.index + 3], t2, e2 - this.buffer.start, i2);
    return r2 < 0 ? false : (this.stack.push(this.index), this.yieldBuf(r2));
  }
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
    );
  }
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
    );
  }
  childAfter(t2) {
    return this.enterChild(
      1,
      t2,
      2
    );
  }
  childBefore(t2) {
    return this.enterChild(
      -1,
      t2,
      -2
    );
  }
  enter(t2, e2, i2 = this.mode) {
    return this.buffer ? i2 & st.ExcludeBuffers ? false : this.enterChild(1, t2, e2) : this.yield(this._tree.enter(t2, e2, i2));
  }
  parent() {
    if (!this.buffer)
      return this.yieldNode(this.mode & st.IncludeAnonymous ? this._tree._parent : this._tree.parent);
    if (this.stack.length)
      return this.yieldBuf(this.stack.pop());
    let t2 = this.mode & st.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
    return this.buffer = null, this.yieldNode(t2);
  }
  sibling(t2) {
    if (!this.buffer)
      return this._tree._parent ? this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + t2, t2, 0, 4, this.mode)) : false;
    let { buffer: e2 } = this.buffer, i2 = this.stack.length - 1;
    if (t2 < 0) {
      let n2 = i2 < 0 ? 0 : this.stack[i2] + 4;
      if (this.index != n2)
        return this.yieldBuf(e2.findChild(
          n2,
          this.index,
          -1,
          0,
          4
        ));
    } else {
      let n2 = e2.buffer[this.index + 3];
      if (n2 < (i2 < 0 ? e2.buffer.length : e2.buffer[this.stack[i2] + 3]))
        return this.yieldBuf(n2);
    }
    return i2 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + t2, t2, 0, 4, this.mode)) : false;
  }
  nextSibling() {
    return this.sibling(1);
  }
  prevSibling() {
    return this.sibling(-1);
  }
  atLastNode(t2) {
    let e2, i2, { buffer: n2 } = this;
    if (n2) {
      if (t2 > 0) {
        if (this.index < n2.buffer.buffer.length)
          return false;
      } else
        for (let r2 = 0; r2 < this.index; r2++)
          if (n2.buffer.buffer[r2 + 3] < this.index)
            return false;
      ({ index: e2, parent: i2 } = n2);
    } else
      ({ index: e2, _parent: i2 } = this._tree);
    for (; i2; { index: e2, _parent: i2 } = i2)
      if (e2 > -1)
        for (let r2 = e2 + t2, o2 = t2 < 0 ? -1 : i2._tree.children.length; r2 != o2; r2 += t2) {
          let l2 = i2._tree.children[r2];
          if (this.mode & st.IncludeAnonymous || l2 instanceof Re || !l2.type.isAnonymous || er(l2))
            return false;
        }
    return true;
  }
  move(t2, e2) {
    if (e2 && this.enterChild(
      t2,
      0,
      4
    ))
      return true;
    for (; ; ) {
      if (this.sibling(t2))
        return true;
      if (this.atLastNode(t2) || !this.parent())
        return false;
    }
  }
  next(t2 = true) {
    return this.move(1, t2);
  }
  prev(t2 = true) {
    return this.move(-1, t2);
  }
  moveTo(t2, e2 = 0) {
    for (; (this.from == this.to || (e2 < 1 ? this.from >= t2 : this.from > t2) || (e2 > -1 ? this.to <= t2 : this.to < t2)) && this.parent(); )
      ;
    for (; this.enterChild(1, t2, e2); )
      ;
    return this;
  }
  get node() {
    if (!this.buffer)
      return this._tree;
    let t2 = this.bufferNode, e2 = null, i2 = 0;
    if (t2 && t2.context == this.buffer) {
      t:
        for (let n2 = this.index, r2 = this.stack.length; r2 >= 0; ) {
          for (let o2 = t2; o2; o2 = o2._parent)
            if (o2.index == n2) {
              if (n2 == this.index)
                return o2;
              e2 = o2, i2 = r2 + 1;
              break t;
            }
          n2 = this.stack[--r2];
        }
    }
    for (let n2 = i2; n2 < this.stack.length; n2++)
      e2 = new ce(this.buffer, e2, this.stack[n2]);
    return this.bufferNode = new ce(this.buffer, e2, this.index);
  }
  get tree() {
    return this.buffer ? null : this._tree._tree;
  }
  iterate(t2, e2) {
    for (let i2 = 0; ; ) {
      let n2 = false;
      if (this.type.isAnonymous || t2(this) !== false) {
        if (this.firstChild()) {
          i2++;
          continue;
        }
        this.type.isAnonymous || (n2 = true);
      }
      for (; n2 && e2 && e2(this), n2 = this.type.isAnonymous, !this.nextSibling(); ) {
        if (!i2)
          return;
        this.parent(), i2--, n2 = true;
      }
    }
  }
  matchContext(t2) {
    if (!this.buffer)
      return cn(this.node, t2);
    let { buffer: e2 } = this.buffer, { types: i2 } = e2.set;
    for (let n2 = t2.length - 1, r2 = this.stack.length - 1; n2 >= 0; r2--) {
      if (r2 < 0)
        return cn(this.node, t2, n2);
      let o2 = i2[e2.buffer[this.stack[r2]]];
      if (!o2.isAnonymous) {
        if (t2[n2] && t2[n2] != o2.name)
          return false;
        n2--;
      }
    }
    return true;
  }
}
function er(s) {
  return s.children.some((t2) => t2 instanceof Re || !t2.type.isAnonymous || er(t2));
}
function ed(s) {
  var t2;
  let { buffer: e2, nodeSet: i2, maxBufferLength: n2 = ah, reused: r2 = [], minRepeatType: o2 = i2.types.length } = s, l2 = Array.isArray(e2) ? new tr(e2, e2.length) : e2, h2 = i2.types, a2 = 0, c2 = 0;
  function f2(D2, B, M2, V2, et) {
    let { id: I2, start: L2, end: K2, size: pt } = l2, Ot = c2;
    for (; pt < 0; )
      if (l2.next(), pt == -1) {
        let ie = r2[I2];
        M2.push(ie), V2.push(L2 - D2);
        return;
      } else if (pt == -3) {
        a2 = I2;
        return;
      } else if (pt == -4) {
        c2 = I2;
        return;
      } else
        throw new RangeError(`Unrecognized record size: ${pt}`);
    let Le = h2[I2], ee, Gt, fr = L2 - D2;
    if (K2 - L2 <= n2 && (Gt = w(l2.pos - B, et))) {
      let ie = new Uint16Array(Gt.size - Gt.skip), Mt = l2.pos - Gt.size, Ut = ie.length;
      for (; l2.pos > Mt; )
        Ut = g2(Gt.start, ie, Ut);
      ee = new Re(ie, K2 - Gt.start, i2), fr = Gt.start - D2;
    } else {
      let ie = l2.pos - pt;
      l2.next();
      let Mt = [], Ut = [], ke = I2 >= o2 ? I2 : -1, Ee = 0, Si = K2;
      for (; l2.pos > ie; )
        ke >= 0 && l2.id == ke && l2.size >= 0 ? (l2.end <= Si - n2 && (d2(Mt, Ut, L2, Ee, l2.end, Si, ke, Ot), Ee = Mt.length, Si = l2.end), l2.next()) : f2(L2, ie, Mt, Ut, ke);
      if (ke >= 0 && Ee > 0 && Ee < Mt.length && d2(Mt, Ut, L2, Ee, L2, Si, ke, Ot), Mt.reverse(), Ut.reverse(), ke > -1 && Ee > 0) {
        let ur = u2(Le);
        ee = ir(Le, Mt, Ut, 0, Mt.length, 0, K2 - L2, ur, ur);
      } else
        ee = p2(Le, Mt, Ut, K2 - L2, Ot - K2);
    }
    M2.push(ee), V2.push(fr);
  }
  function u2(D2) {
    return (B, M2, V2) => {
      let et = 0, I2 = B.length - 1, L2, K2;
      if (I2 >= 0 && (L2 = B[I2]) instanceof J) {
        if (!I2 && L2.type == D2 && L2.length == V2)
          return L2;
        (K2 = L2.prop(P.lookAhead)) && (et = M2[I2] + L2.length + K2);
      }
      return p2(D2, B, M2, V2, et);
    };
  }
  function d2(D2, B, M2, V2, et, I2, L2, K2) {
    let pt = [], Ot = [];
    for (; D2.length > V2; )
      pt.push(D2.pop()), Ot.push(B.pop() + M2 - et);
    D2.push(p2(i2.types[L2], pt, Ot, I2 - et, K2 - I2)), B.push(et - M2);
  }
  function p2(D2, B, M2, V2, et = 0, I2) {
    if (a2) {
      let L2 = [P.contextHash, a2];
      I2 = I2 ? [L2].concat(I2) : [L2];
    }
    if (et > 25) {
      let L2 = [P.lookAhead, et];
      I2 = I2 ? [L2].concat(I2) : [L2];
    }
    return new J(D2, B, M2, V2, I2);
  }
  function w(D2, B) {
    let M2 = l2.fork(), V2 = 0, et = 0, I2 = 0, L2 = M2.end - n2, K2 = { size: 0, start: 0, skip: 0 };
    t:
      for (let pt = M2.pos - D2; M2.pos > pt; ) {
        let Ot = M2.size;
        if (M2.id == B && Ot >= 0) {
          K2.size = V2, K2.start = et, K2.skip = I2, I2 += 4, V2 += 4, M2.next();
          continue;
        }
        let Le = M2.pos - Ot;
        if (Ot < 0 || Le < pt || M2.start < L2)
          break;
        let ee = M2.id >= o2 ? 4 : 0, Gt = M2.start;
        for (M2.next(); M2.pos > Le; ) {
          if (M2.size < 0)
            if (M2.size == -3)
              ee += 4;
            else
              break t;
          else
            M2.id >= o2 && (ee += 4);
          M2.next();
        }
        et = Gt, V2 += Ot, I2 += ee;
      }
    return (B < 0 || V2 == D2) && (K2.size = V2, K2.start = et, K2.skip = I2), K2.size > 4 ? K2 : void 0;
  }
  function g2(D2, B, M2) {
    let { id: V2, start: et, end: I2, size: L2 } = l2;
    if (l2.next(), L2 >= 0 && V2 < o2) {
      let K2 = M2;
      if (L2 > 4) {
        let pt = l2.pos - (L2 - 4);
        for (; l2.pos > pt; )
          M2 = g2(D2, B, M2);
      }
      B[--M2] = K2, B[--M2] = I2 - D2, B[--M2] = et - D2, B[--M2] = V2;
    } else
      L2 == -3 ? a2 = V2 : L2 == -4 && (c2 = V2);
    return M2;
  }
  let y = [], O2 = [];
  for (; l2.pos > 0; )
    f2(s.start || 0, s.bufferStart || 0, y, O2, -1);
  let S2 = (t2 = s.length) !== null && t2 !== void 0 ? t2 : y.length ? O2[0] + y[0].length : 0;
  return new J(h2[s.topID], y.reverse(), O2.reverse(), S2);
}
const fo = /* @__PURE__ */ new WeakMap();
function Qi(s, t2) {
  if (!s.isAnonymous || t2 instanceof Re || t2.type != s)
    return 1;
  let e2 = fo.get(t2);
  if (e2 == null) {
    e2 = 1;
    for (let i2 of t2.children) {
      if (i2.type != s || !(i2 instanceof J)) {
        e2 = 1;
        break;
      }
      e2 += Qi(s, i2);
    }
    fo.set(t2, e2);
  }
  return e2;
}
function ir(s, t2, e2, i2, n2, r2, o2, l2, h2) {
  let a2 = 0;
  for (let p2 = i2; p2 < n2; p2++)
    a2 += Qi(s, t2[p2]);
  let c2 = Math.ceil(
    a2 * 1.5 / 8
  ), f2 = [], u2 = [];
  function d2(p2, w, g2, y, O2) {
    for (let S2 = g2; S2 < y; ) {
      let D2 = S2, B = w[S2], M2 = Qi(s, p2[S2]);
      for (S2++; S2 < y; S2++) {
        let V2 = Qi(s, p2[S2]);
        if (M2 + V2 >= c2)
          break;
        M2 += V2;
      }
      if (S2 == D2 + 1) {
        if (M2 > c2) {
          let V2 = p2[D2];
          d2(V2.children, V2.positions, 0, V2.children.length, w[D2] + O2);
          continue;
        }
        f2.push(p2[D2]);
      } else {
        let V2 = w[S2 - 1] + p2[S2 - 1].length - B;
        f2.push(ir(s, p2, w, D2, S2, B, V2, null, h2));
      }
      u2.push(B + O2 - r2);
    }
  }
  return d2(t2, e2, i2, n2, 0), (l2 || h2)(f2, u2, o2);
}
class Oe {
  constructor(t2, e2, i2, n2, r2 = false, o2 = false) {
    this.from = t2, this.to = e2, this.tree = i2, this.offset = n2, this.open = (r2 ? 1 : 0) | (o2 ? 2 : 0);
  }
  get openStart() {
    return (this.open & 1) > 0;
  }
  get openEnd() {
    return (this.open & 2) > 0;
  }
  static addTree(t2, e2 = [], i2 = false) {
    let n2 = [new Oe(0, t2.length, t2, 0, false, i2)];
    for (let r2 of e2)
      r2.to > t2.length && n2.push(r2);
    return n2;
  }
  static applyChanges(t2, e2, i2 = 128) {
    if (!e2.length)
      return t2;
    let n2 = [], r2 = 1, o2 = t2.length ? t2[0] : null;
    for (let l2 = 0, h2 = 0, a2 = 0; ; l2++) {
      let c2 = l2 < e2.length ? e2[l2] : null, f2 = c2 ? c2.fromA : 1e9;
      if (f2 - h2 >= i2)
        for (; o2 && o2.from < f2; ) {
          let u2 = o2;
          if (h2 >= u2.from || f2 <= u2.to || a2) {
            let d2 = Math.max(u2.from, h2) - a2, p2 = Math.min(u2.to, f2) - a2;
            u2 = d2 >= p2 ? null : new Oe(d2, p2, u2.tree, u2.offset + a2, l2 > 0, !!c2);
          }
          if (u2 && n2.push(u2), o2.to > f2)
            break;
          o2 = r2 < t2.length ? t2[r2++] : null;
        }
      if (!c2)
        break;
      h2 = c2.toA, a2 = c2.toA - c2.toB;
    }
    return n2;
  }
}
class uh {
  startParse(t2, e2, i2) {
    return typeof t2 == "string" && (t2 = new id(t2)), i2 = i2 ? i2.length ? i2.map((n2) => new qn(n2.from, n2.to)) : [new qn(0, 0)] : [new qn(0, t2.length)], this.createParse(t2, e2 || [], i2);
  }
  parse(t2, e2, i2) {
    let n2 = this.startParse(t2, e2, i2);
    for (; ; ) {
      let r2 = n2.advance();
      if (r2)
        return r2;
    }
  }
}
class id {
  constructor(t2) {
    this.string = t2;
  }
  get length() {
    return this.string.length;
  }
  chunk(t2) {
    return this.string.slice(t2);
  }
  get lineChunks() {
    return false;
  }
  read(t2, e2) {
    return this.string.slice(t2, e2);
  }
}
new P({ perNode: true });
let nd = 0;
class It {
  constructor(t2, e2, i2) {
    this.set = t2, this.base = e2, this.modified = i2, this.id = nd++;
  }
  static define(t2) {
    if (t2 != null && t2.base)
      throw new Error("Can not derive from a modified tag");
    let e2 = new It([], null, []);
    if (e2.set.push(e2), t2)
      for (let i2 of t2.set)
        e2.set.push(i2);
    return e2;
  }
  static defineModifier() {
    let t2 = new un();
    return (e2) => e2.modified.indexOf(t2) > -1 ? e2 : un.get(e2.base || e2, e2.modified.concat(t2).sort((i2, n2) => i2.id - n2.id));
  }
}
let sd = 0;
class un {
  constructor() {
    this.instances = [], this.id = sd++;
  }
  static get(t2, e2) {
    if (!e2.length)
      return t2;
    let i2 = e2[0].instances.find((l2) => l2.base == t2 && rd(e2, l2.modified));
    if (i2)
      return i2;
    let n2 = [], r2 = new It(n2, t2, e2);
    for (let l2 of e2)
      l2.instances.push(r2);
    let o2 = od(e2);
    for (let l2 of t2.set)
      if (!l2.modified.length)
        for (let h2 of o2)
          n2.push(un.get(l2, h2));
    return r2;
  }
}
function rd(s, t2) {
  return s.length == t2.length && s.every((e2, i2) => e2 == t2[i2]);
}
function od(s) {
  let t2 = [[]];
  for (let e2 = 0; e2 < s.length; e2++)
    for (let i2 = 0, n2 = t2.length; i2 < n2; i2++)
      t2.push(t2[i2].concat(s[e2]));
  return t2.sort((e2, i2) => i2.length - e2.length);
}
function dh(s) {
  let t2 = /* @__PURE__ */ Object.create(null);
  for (let e2 in s) {
    let i2 = s[e2];
    Array.isArray(i2) || (i2 = [i2]);
    for (let n2 of e2.split(" "))
      if (n2) {
        let r2 = [], o2 = 2, l2 = n2;
        for (let f2 = 0; ; ) {
          if (l2 == "..." && f2 > 0 && f2 + 3 == n2.length) {
            o2 = 1;
            break;
          }
          let u2 = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(l2);
          if (!u2)
            throw new RangeError("Invalid path: " + n2);
          if (r2.push(u2[0] == "*" ? "" : u2[0][0] == '"' ? JSON.parse(u2[0]) : u2[0]), f2 += u2[0].length, f2 == n2.length)
            break;
          let d2 = n2[f2++];
          if (f2 == n2.length && d2 == "!") {
            o2 = 0;
            break;
          }
          if (d2 != "/")
            throw new RangeError("Invalid path: " + n2);
          l2 = n2.slice(f2);
        }
        let h2 = r2.length - 1, a2 = r2[h2];
        if (!a2)
          throw new RangeError("Invalid path: " + n2);
        let c2 = new dn(i2, o2, h2 > 0 ? r2.slice(0, h2) : null);
        t2[a2] = c2.sort(t2[a2]);
      }
  }
  return ph.add(t2);
}
const ph = new P();
class dn {
  constructor(t2, e2, i2, n2) {
    this.tags = t2, this.mode = e2, this.context = i2, this.next = n2;
  }
  get opaque() {
    return this.mode == 0;
  }
  get inherit() {
    return this.mode == 1;
  }
  sort(t2) {
    return !t2 || t2.depth < this.depth ? (this.next = t2, this) : (t2.next = this.sort(t2.next), t2);
  }
  get depth() {
    return this.context ? this.context.length : 0;
  }
}
dn.empty = new dn([], 2, null);
function gh(s, t2) {
  let e2 = /* @__PURE__ */ Object.create(null);
  for (let r2 of s)
    if (!Array.isArray(r2.tag))
      e2[r2.tag.id] = r2.class;
    else
      for (let o2 of r2.tag)
        e2[o2.id] = r2.class;
  let { scope: i2, all: n2 = null } = t2 || {};
  return {
    style: (r2) => {
      let o2 = n2;
      for (let l2 of r2)
        for (let h2 of l2.set) {
          let a2 = e2[h2.id];
          if (a2) {
            o2 = o2 ? o2 + " " + a2 : a2;
            break;
          }
        }
      return o2;
    },
    scope: i2
  };
}
function ld(s, t2) {
  let e2 = null;
  for (let i2 of s) {
    let n2 = i2.style(t2);
    n2 && (e2 = e2 ? e2 + " " + n2 : n2);
  }
  return e2;
}
function hd(s, t2, e2, i2 = 0, n2 = s.length) {
  let r2 = new ad(i2, Array.isArray(t2) ? t2 : [t2], e2);
  r2.highlightRange(s.cursor(), i2, n2, "", r2.highlighters), r2.flush(n2);
}
class ad {
  constructor(t2, e2, i2) {
    this.at = t2, this.highlighters = e2, this.span = i2, this.class = "";
  }
  startSpan(t2, e2) {
    e2 != this.class && (this.flush(t2), t2 > this.at && (this.at = t2), this.class = e2);
  }
  flush(t2) {
    t2 > this.at && this.class && this.span(this.at, t2, this.class);
  }
  highlightRange(t2, e2, i2, n2, r2) {
    let { type: o2, from: l2, to: h2 } = t2;
    if (l2 >= i2 || h2 <= e2)
      return;
    o2.isTop && (r2 = this.highlighters.filter((d2) => !d2.scope || d2.scope(o2)));
    let a2 = n2, c2 = cd(t2) || dn.empty, f2 = ld(r2, c2.tags);
    if (f2 && (a2 && (a2 += " "), a2 += f2, c2.mode == 1 && (n2 += (n2 ? " " : "") + f2)), this.startSpan(t2.from, a2), c2.opaque)
      return;
    let u2 = t2.tree && t2.tree.prop(P.mounted);
    if (u2 && u2.overlay) {
      let d2 = t2.node.enter(u2.overlay[0].from + l2, 1), p2 = this.highlighters.filter((g2) => !g2.scope || g2.scope(u2.tree.type)), w = t2.firstChild();
      for (let g2 = 0, y = l2; ; g2++) {
        let O2 = g2 < u2.overlay.length ? u2.overlay[g2] : null, S2 = O2 ? O2.from + l2 : h2, D2 = Math.max(e2, y), B = Math.min(i2, S2);
        if (D2 < B && w)
          for (; t2.from < B && (this.highlightRange(t2, D2, B, n2, r2), this.startSpan(Math.min(B, t2.to), a2), !(t2.to >= S2 || !t2.nextSibling())); )
            ;
        if (!O2 || S2 > i2)
          break;
        y = O2.to + l2, y > e2 && (this.highlightRange(d2.cursor(), Math.max(e2, O2.from + l2), Math.min(i2, y), n2, p2), this.startSpan(y, a2));
      }
      w && t2.parent();
    } else if (t2.firstChild()) {
      do
        if (!(t2.to <= e2)) {
          if (t2.from >= i2)
            break;
          this.highlightRange(t2, e2, i2, n2, r2), this.startSpan(Math.min(i2, t2.to), a2);
        }
      while (t2.nextSibling());
      t2.parent();
    }
  }
}
function cd(s) {
  let t2 = s.type.prop(ph);
  for (; t2 && t2.context && !s.matchContext(t2.context); )
    t2 = t2.next;
  return t2 || null;
}
const k$1 = It.define, Ii = k$1(), ne = k$1(), uo = k$1(ne), po = k$1(ne), se = k$1(), Hi = k$1(se), Kn = k$1(se), Vt = k$1(), xe = k$1(Vt), Et = k$1(), Nt = k$1(), Es = k$1(), ei = k$1(Es), $i = k$1(), m$1 = {
  comment: Ii,
  lineComment: k$1(Ii),
  blockComment: k$1(Ii),
  docComment: k$1(Ii),
  name: ne,
  variableName: k$1(ne),
  typeName: uo,
  tagName: k$1(uo),
  propertyName: po,
  attributeName: k$1(po),
  className: k$1(ne),
  labelName: k$1(ne),
  namespace: k$1(ne),
  macroName: k$1(ne),
  literal: se,
  string: Hi,
  docString: k$1(Hi),
  character: k$1(Hi),
  attributeValue: k$1(Hi),
  number: Kn,
  integer: k$1(Kn),
  float: k$1(Kn),
  bool: k$1(se),
  regexp: k$1(se),
  escape: k$1(se),
  color: k$1(se),
  url: k$1(se),
  keyword: Et,
  self: k$1(Et),
  null: k$1(Et),
  atom: k$1(Et),
  unit: k$1(Et),
  modifier: k$1(Et),
  operatorKeyword: k$1(Et),
  controlKeyword: k$1(Et),
  definitionKeyword: k$1(Et),
  moduleKeyword: k$1(Et),
  operator: Nt,
  derefOperator: k$1(Nt),
  arithmeticOperator: k$1(Nt),
  logicOperator: k$1(Nt),
  bitwiseOperator: k$1(Nt),
  compareOperator: k$1(Nt),
  updateOperator: k$1(Nt),
  definitionOperator: k$1(Nt),
  typeOperator: k$1(Nt),
  controlOperator: k$1(Nt),
  punctuation: Es,
  separator: k$1(Es),
  bracket: ei,
  angleBracket: k$1(ei),
  squareBracket: k$1(ei),
  paren: k$1(ei),
  brace: k$1(ei),
  content: Vt,
  heading: xe,
  heading1: k$1(xe),
  heading2: k$1(xe),
  heading3: k$1(xe),
  heading4: k$1(xe),
  heading5: k$1(xe),
  heading6: k$1(xe),
  contentSeparator: k$1(Vt),
  list: k$1(Vt),
  quote: k$1(Vt),
  emphasis: k$1(Vt),
  strong: k$1(Vt),
  link: k$1(Vt),
  monospace: k$1(Vt),
  strikethrough: k$1(Vt),
  inserted: k$1(),
  deleted: k$1(),
  changed: k$1(),
  invalid: k$1(),
  meta: $i,
  documentMeta: k$1($i),
  annotation: k$1($i),
  processingInstruction: k$1($i),
  definition: It.defineModifier(),
  constant: It.defineModifier(),
  function: It.defineModifier(),
  standard: It.defineModifier(),
  local: It.defineModifier(),
  special: It.defineModifier()
};
gh([
  { tag: m$1.link, class: "tok-link" },
  { tag: m$1.heading, class: "tok-heading" },
  { tag: m$1.emphasis, class: "tok-emphasis" },
  { tag: m$1.strong, class: "tok-strong" },
  { tag: m$1.keyword, class: "tok-keyword" },
  { tag: m$1.atom, class: "tok-atom" },
  { tag: m$1.bool, class: "tok-bool" },
  { tag: m$1.url, class: "tok-url" },
  { tag: m$1.labelName, class: "tok-labelName" },
  { tag: m$1.inserted, class: "tok-inserted" },
  { tag: m$1.deleted, class: "tok-deleted" },
  { tag: m$1.literal, class: "tok-literal" },
  { tag: m$1.string, class: "tok-string" },
  { tag: m$1.number, class: "tok-number" },
  { tag: [m$1.regexp, m$1.escape, m$1.special(m$1.string)], class: "tok-string2" },
  { tag: m$1.variableName, class: "tok-variableName" },
  { tag: m$1.local(m$1.variableName), class: "tok-variableName tok-local" },
  { tag: m$1.definition(m$1.variableName), class: "tok-variableName tok-definition" },
  { tag: m$1.special(m$1.variableName), class: "tok-variableName2" },
  { tag: m$1.definition(m$1.propertyName), class: "tok-propertyName tok-definition" },
  { tag: m$1.typeName, class: "tok-typeName" },
  { tag: m$1.namespace, class: "tok-namespace" },
  { tag: m$1.className, class: "tok-className" },
  { tag: m$1.macroName, class: "tok-macroName" },
  { tag: m$1.propertyName, class: "tok-propertyName" },
  { tag: m$1.operator, class: "tok-operator" },
  { tag: m$1.comment, class: "tok-comment" },
  { tag: m$1.meta, class: "tok-meta" },
  { tag: m$1.invalid, class: "tok-invalid" },
  { tag: m$1.punctuation, class: "tok-punctuation" }
]);
var Gn;
const mi = /* @__PURE__ */ new P();
function fd(s) {
  return v$2.define({
    combine: s ? (t2) => t2.concat(s) : void 0
  });
}
class Tt {
  constructor(t2, e2, i2 = [], n2 = "") {
    this.data = t2, this.name = n2, N$1.prototype.hasOwnProperty("tree") || Object.defineProperty(N$1.prototype, "tree", { get() {
      return St(this);
    } }), this.parser = e2, this.extension = [
      we.of(this),
      N$1.languageData.of((r2, o2, l2) => r2.facet(go(r2, o2, l2)))
    ].concat(i2);
  }
  isActiveAt(t2, e2, i2 = -1) {
    return go(t2, e2, i2) == this.data;
  }
  findRegions(t2) {
    let e2 = t2.facet(we);
    if ((e2 == null ? void 0 : e2.data) == this.data)
      return [{ from: 0, to: t2.doc.length }];
    if (!e2 || !e2.allowsNesting)
      return [];
    let i2 = [], n2 = (r2, o2) => {
      if (r2.prop(mi) == this.data) {
        i2.push({ from: o2, to: o2 + r2.length });
        return;
      }
      let l2 = r2.prop(P.mounted);
      if (l2) {
        if (l2.tree.prop(mi) == this.data) {
          if (l2.overlay)
            for (let h2 of l2.overlay)
              i2.push({ from: h2.from + o2, to: h2.to + o2 });
          else
            i2.push({ from: o2, to: o2 + r2.length });
          return;
        } else if (l2.overlay) {
          let h2 = i2.length;
          if (n2(l2.tree, l2.overlay[0].from + o2), i2.length > h2)
            return;
        }
      }
      for (let h2 = 0; h2 < r2.children.length; h2++) {
        let a2 = r2.children[h2];
        a2 instanceof J && n2(a2, r2.positions[h2] + o2);
      }
    };
    return n2(St(t2), 0), i2;
  }
  get allowsNesting() {
    return true;
  }
}
Tt.setState = /* @__PURE__ */ F.define();
function go(s, t2, e2) {
  let i2 = s.facet(we);
  if (!i2)
    return null;
  let n2 = i2.data;
  if (i2.allowsNesting)
    for (let r2 = St(s).topNode; r2; r2 = r2.enter(t2, e2, st.ExcludeBuffers))
      n2 = r2.type.prop(mi) || n2;
  return n2;
}
class pn extends Tt {
  constructor(t2, e2, i2) {
    super(t2, e2, [], i2), this.parser = e2;
  }
  static define(t2) {
    let e2 = fd(t2.languageData);
    return new pn(e2, t2.parser.configure({
      props: [mi.add((i2) => i2.isTop ? e2 : void 0)]
    }), t2.name);
  }
  configure(t2, e2) {
    return new pn(this.data, this.parser.configure(t2), e2 || this.name);
  }
  get allowsNesting() {
    return this.parser.hasWrappers();
  }
}
function St(s) {
  let t2 = s.field(Tt.state, false);
  return t2 ? t2.tree : J.empty;
}
class ud {
  constructor(t2, e2 = t2.length) {
    this.doc = t2, this.length = e2, this.cursorPos = 0, this.string = "", this.cursor = t2.iter();
  }
  syncTo(t2) {
    return this.string = this.cursor.next(t2 - this.cursorPos).value, this.cursorPos = t2 + this.string.length, this.cursorPos - this.string.length;
  }
  chunk(t2) {
    return this.syncTo(t2), this.string;
  }
  get lineChunks() {
    return true;
  }
  read(t2, e2) {
    let i2 = this.cursorPos - this.string.length;
    return t2 < i2 || e2 >= this.cursorPos ? this.doc.sliceString(t2, e2) : this.string.slice(t2 - i2, e2 - i2);
  }
}
let ii = null;
class gn {
  constructor(t2, e2, i2 = [], n2, r2, o2, l2, h2) {
    this.parser = t2, this.state = e2, this.fragments = i2, this.tree = n2, this.treeLen = r2, this.viewport = o2, this.skipped = l2, this.scheduleOn = h2, this.parse = null, this.tempSkipped = [];
  }
  static create(t2, e2, i2) {
    return new gn(t2, e2, [], J.empty, 0, i2, [], null);
  }
  startParse() {
    return this.parser.startParse(new ud(this.state.doc), this.fragments);
  }
  work(t2, e2) {
    return e2 != null && e2 >= this.state.doc.length && (e2 = void 0), this.tree != J.empty && this.isDone(e2 != null ? e2 : this.state.doc.length) ? (this.takeTree(), true) : this.withContext(() => {
      var i2;
      if (typeof t2 == "number") {
        let n2 = Date.now() + t2;
        t2 = () => Date.now() > n2;
      }
      for (this.parse || (this.parse = this.startParse()), e2 != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > e2) && e2 < this.state.doc.length && this.parse.stopAt(e2); ; ) {
        let n2 = this.parse.advance();
        if (n2)
          if (this.fragments = this.withoutTempSkipped(Oe.addTree(n2, this.fragments, this.parse.stoppedAt != null)), this.treeLen = (i2 = this.parse.stoppedAt) !== null && i2 !== void 0 ? i2 : this.state.doc.length, this.tree = n2, this.parse = null, this.treeLen < (e2 != null ? e2 : this.state.doc.length))
            this.parse = this.startParse();
          else
            return true;
        if (t2())
          return false;
      }
    });
  }
  takeTree() {
    let t2, e2;
    this.parse && (t2 = this.parse.parsedPos) >= this.treeLen && ((this.parse.stoppedAt == null || this.parse.stoppedAt > t2) && this.parse.stopAt(t2), this.withContext(() => {
      for (; !(e2 = this.parse.advance()); )
        ;
    }), this.treeLen = t2, this.tree = e2, this.fragments = this.withoutTempSkipped(Oe.addTree(this.tree, this.fragments, true)), this.parse = null);
  }
  withContext(t2) {
    let e2 = ii;
    ii = this;
    try {
      return t2();
    } finally {
      ii = e2;
    }
  }
  withoutTempSkipped(t2) {
    for (let e2; e2 = this.tempSkipped.pop(); )
      t2 = mo(t2, e2.from, e2.to);
    return t2;
  }
  changes(t2, e2) {
    let { fragments: i2, tree: n2, treeLen: r2, viewport: o2, skipped: l2 } = this;
    if (this.takeTree(), !t2.empty) {
      let h2 = [];
      if (t2.iterChangedRanges((a2, c2, f2, u2) => h2.push({ fromA: a2, toA: c2, fromB: f2, toB: u2 })), i2 = Oe.applyChanges(i2, h2), n2 = J.empty, r2 = 0, o2 = { from: t2.mapPos(o2.from, -1), to: t2.mapPos(o2.to, 1) }, this.skipped.length) {
        l2 = [];
        for (let a2 of this.skipped) {
          let c2 = t2.mapPos(a2.from, 1), f2 = t2.mapPos(a2.to, -1);
          c2 < f2 && l2.push({ from: c2, to: f2 });
        }
      }
    }
    return new gn(this.parser, e2, i2, n2, r2, o2, l2, this.scheduleOn);
  }
  updateViewport(t2) {
    if (this.viewport.from == t2.from && this.viewport.to == t2.to)
      return false;
    this.viewport = t2;
    let e2 = this.skipped.length;
    for (let i2 = 0; i2 < this.skipped.length; i2++) {
      let { from: n2, to: r2 } = this.skipped[i2];
      n2 < t2.to && r2 > t2.from && (this.fragments = mo(this.fragments, n2, r2), this.skipped.splice(i2--, 1));
    }
    return this.skipped.length >= e2 ? false : (this.reset(), true);
  }
  reset() {
    this.parse && (this.takeTree(), this.parse = null);
  }
  skipUntilInView(t2, e2) {
    this.skipped.push({ from: t2, to: e2 });
  }
  static getSkippingParser(t2) {
    return new class extends uh {
      createParse(e2, i2, n2) {
        let r2 = n2[0].from, o2 = n2[n2.length - 1].to;
        return {
          parsedPos: r2,
          advance() {
            let h2 = ii;
            if (h2) {
              for (let a2 of n2)
                h2.tempSkipped.push(a2);
              t2 && (h2.scheduleOn = h2.scheduleOn ? Promise.all([h2.scheduleOn, t2]) : t2);
            }
            return this.parsedPos = o2, new J(yt.none, [], [], o2 - r2);
          },
          stoppedAt: null,
          stopAt() {
          }
        };
      }
    }();
  }
  isDone(t2) {
    t2 = Math.min(t2, this.state.doc.length);
    let e2 = this.fragments;
    return this.treeLen >= t2 && e2.length && e2[0].from == 0 && e2[0].to >= t2;
  }
  static get() {
    return ii;
  }
}
function mo(s, t2, e2) {
  return Oe.applyChanges(s, [{ fromA: t2, toA: e2, fromB: t2, toB: e2 }]);
}
class Qe {
  constructor(t2) {
    this.context = t2, this.tree = t2.tree;
  }
  apply(t2) {
    if (!t2.docChanged && this.tree == this.context.tree)
      return this;
    let e2 = this.context.changes(t2.changes, t2.state), i2 = this.context.treeLen == t2.startState.doc.length ? void 0 : Math.max(t2.changes.mapPos(this.context.treeLen), e2.viewport.to);
    return e2.work(20, i2) || e2.takeTree(), new Qe(e2);
  }
  static init(t2) {
    let e2 = Math.min(3e3, t2.doc.length), i2 = gn.create(t2.facet(we).parser, t2, { from: 0, to: e2 });
    return i2.work(20, e2) || i2.takeTree(), new Qe(i2);
  }
}
Tt.state = /* @__PURE__ */ Bt.define({
  create: Qe.init,
  update(s, t2) {
    for (let e2 of t2.effects)
      if (e2.is(Tt.setState))
        return e2.value;
    return t2.startState.facet(we) != t2.state.facet(we) ? Qe.init(t2.state) : s.apply(t2);
  }
});
let mh = (s) => {
  let t2 = setTimeout(
    () => s(),
    500
  );
  return () => clearTimeout(t2);
};
typeof requestIdleCallback < "u" && (mh = (s) => {
  let t2 = -1, e2 = setTimeout(
    () => {
      t2 = requestIdleCallback(s, {
        timeout: 500 - 100
      });
    },
    100
  );
  return () => t2 < 0 ? clearTimeout(e2) : cancelIdleCallback(t2);
});
const Un = typeof navigator < "u" && (!((Gn = navigator.scheduling) === null || Gn === void 0) && Gn.isInputPending) ? () => navigator.scheduling.isInputPending() : null, dd = /* @__PURE__ */ wt.fromClass(class {
  constructor(t2) {
    this.view = t2, this.working = null, this.workScheduled = 0, this.chunkEnd = -1, this.chunkBudget = -1, this.work = this.work.bind(this), this.scheduleWork();
  }
  update(t2) {
    let e2 = this.view.state.field(Tt.state).context;
    (e2.updateViewport(t2.view.viewport) || this.view.viewport.to > e2.treeLen) && this.scheduleWork(), t2.docChanged && (this.view.hasFocus && (this.chunkBudget += 50), this.scheduleWork()), this.checkAsyncSchedule(e2);
  }
  scheduleWork() {
    if (this.working)
      return;
    let { state: t2 } = this.view, e2 = t2.field(Tt.state);
    (e2.tree != e2.context.tree || !e2.context.isDone(t2.doc.length)) && (this.working = mh(this.work));
  }
  work(t2) {
    this.working = null;
    let e2 = Date.now();
    if (this.chunkEnd < e2 && (this.chunkEnd < 0 || this.view.hasFocus) && (this.chunkEnd = e2 + 3e4, this.chunkBudget = 3e3), this.chunkBudget <= 0)
      return;
    let { state: i2, viewport: { to: n2 } } = this.view, r2 = i2.field(Tt.state);
    if (r2.tree == r2.context.tree && r2.context.isDone(
      n2 + 1e5
    ))
      return;
    let o2 = Date.now() + Math.min(this.chunkBudget, 100, t2 && !Un ? Math.max(25, t2.timeRemaining() - 5) : 1e9), l2 = r2.context.treeLen < n2 && i2.doc.length > n2 + 1e3, h2 = r2.context.work(() => Un && Un() || Date.now() > o2, n2 + (l2 ? 0 : 1e5));
    this.chunkBudget -= Date.now() - e2, (h2 || this.chunkBudget <= 0) && (r2.context.takeTree(), this.view.dispatch({ effects: Tt.setState.of(new Qe(r2.context)) })), this.chunkBudget > 0 && !(h2 && !l2) && this.scheduleWork(), this.checkAsyncSchedule(r2.context);
  }
  checkAsyncSchedule(t2) {
    t2.scheduleOn && (this.workScheduled++, t2.scheduleOn.then(() => this.scheduleWork()).catch((e2) => zt(this.view.state, e2)).then(() => this.workScheduled--), t2.scheduleOn = null);
  }
  destroy() {
    this.working && this.working();
  }
  isWorking() {
    return !!(this.working || this.workScheduled > 0);
  }
}, {
  eventHandlers: { focus() {
    this.scheduleWork();
  } }
}), we = /* @__PURE__ */ v$2.define({
  combine(s) {
    return s.length ? s[0] : null;
  },
  enables: (s) => [
    Tt.state,
    dd,
    A$2.contentAttributes.compute([s], (t2) => {
      let e2 = t2.facet(s);
      return e2 && e2.name ? { "data-language": e2.name } : {};
    })
  ]
});
class pd {
  constructor(t2, e2 = []) {
    this.language = t2, this.support = e2, this.extension = [t2, e2];
  }
}
const gd = /* @__PURE__ */ v$2.define(), nr = /* @__PURE__ */ v$2.define({
  combine: (s) => {
    if (!s.length)
      return "  ";
    if (!/^(?: +|\t+)$/.test(s[0]))
      throw new Error("Invalid indent unit: " + JSON.stringify(s[0]));
    return s[0];
  }
});
function mn(s) {
  let t2 = s.facet(nr);
  return t2.charCodeAt(0) == 9 ? s.tabSize * t2.length : t2.length;
}
function wi(s, t2) {
  let e2 = "", i2 = s.tabSize;
  if (s.facet(nr).charCodeAt(0) == 9)
    for (; t2 >= i2; )
      e2 += "	", t2 -= i2;
  for (let n2 = 0; n2 < t2; n2++)
    e2 += " ";
  return e2;
}
function sr(s, t2) {
  s instanceof N$1 && (s = new Dn(s));
  for (let i2 of s.state.facet(gd)) {
    let n2 = i2(s, t2);
    if (n2 !== void 0)
      return n2;
  }
  let e2 = St(s.state);
  return e2 ? md(s, e2, t2) : null;
}
class Dn {
  constructor(t2, e2 = {}) {
    this.state = t2, this.options = e2, this.unit = mn(t2);
  }
  lineAt(t2, e2 = 1) {
    let i2 = this.state.doc.lineAt(t2), { simulateBreak: n2, simulateDoubleBreak: r2 } = this.options;
    return n2 != null && n2 >= i2.from && n2 <= i2.to ? r2 && n2 == t2 ? { text: "", from: t2 } : (e2 < 0 ? n2 < t2 : n2 <= t2) ? { text: i2.text.slice(n2 - i2.from), from: n2 } : { text: i2.text.slice(0, n2 - i2.from), from: i2.from } : i2;
  }
  textAfterPos(t2, e2 = 1) {
    if (this.options.simulateDoubleBreak && t2 == this.options.simulateBreak)
      return "";
    let { text: i2, from: n2 } = this.lineAt(t2, e2);
    return i2.slice(t2 - n2, Math.min(i2.length, t2 + 100 - n2));
  }
  column(t2, e2 = 1) {
    let { text: i2, from: n2 } = this.lineAt(t2, e2), r2 = this.countColumn(i2, t2 - n2), o2 = this.options.overrideIndentation ? this.options.overrideIndentation(n2) : -1;
    return o2 > -1 && (r2 += o2 - this.countColumn(i2, i2.search(/\S|$/))), r2;
  }
  countColumn(t2, e2 = t2.length) {
    return Cn(t2, this.state.tabSize, e2);
  }
  lineIndent(t2, e2 = 1) {
    let { text: i2, from: n2 } = this.lineAt(t2, e2), r2 = this.options.overrideIndentation;
    if (r2) {
      let o2 = r2(n2);
      if (o2 > -1)
        return o2;
    }
    return this.countColumn(i2, i2.search(/\S|$/));
  }
  get simulatedBreak() {
    return this.options.simulateBreak || null;
  }
}
const wh = /* @__PURE__ */ new P();
function md(s, t2, e2) {
  return yh(t2.resolveInner(e2).enterUnfinishedNodesBefore(e2), e2, s);
}
function wd(s) {
  return s.pos == s.options.simulateBreak && s.options.simulateDoubleBreak;
}
function yd(s) {
  let t2 = s.type.prop(wh);
  if (t2)
    return t2;
  let e2 = s.firstChild, i2;
  if (e2 && (i2 = e2.type.prop(P.closedBy))) {
    let n2 = s.lastChild, r2 = n2 && i2.indexOf(n2.name) > -1;
    return (o2) => vd(o2, true, 1, void 0, r2 && !wd(o2) ? n2.from : void 0);
  }
  return s.parent == null ? bd : null;
}
function yh(s, t2, e2) {
  for (; s; s = s.parent) {
    let i2 = yd(s);
    if (i2)
      return i2(rr.create(e2, t2, s));
  }
  return null;
}
function bd() {
  return 0;
}
class rr extends Dn {
  constructor(t2, e2, i2) {
    super(t2.state, t2.options), this.base = t2, this.pos = e2, this.node = i2;
  }
  static create(t2, e2, i2) {
    return new rr(t2, e2, i2);
  }
  get textAfter() {
    return this.textAfterPos(this.pos);
  }
  get baseIndent() {
    let t2 = this.state.doc.lineAt(this.node.from);
    for (; ; ) {
      let e2 = this.node.resolve(t2.from);
      for (; e2.parent && e2.parent.from == e2.from; )
        e2 = e2.parent;
      if (kd(e2, this.node))
        break;
      t2 = this.state.doc.lineAt(e2.from);
    }
    return this.lineIndent(t2.from);
  }
  continue() {
    let t2 = this.node.parent;
    return t2 ? yh(t2, this.pos, this.base) : 0;
  }
}
function kd(s, t2) {
  for (let e2 = t2; e2; e2 = e2.parent)
    if (s == e2)
      return true;
  return false;
}
function xd(s) {
  let t2 = s.node, e2 = t2.childAfter(t2.from), i2 = t2.lastChild;
  if (!e2)
    return null;
  let n2 = s.options.simulateBreak, r2 = s.state.doc.lineAt(e2.from), o2 = n2 == null || n2 <= r2.from ? r2.to : Math.min(r2.to, n2);
  for (let l2 = e2.to; ; ) {
    let h2 = t2.childAfter(l2);
    if (!h2 || h2 == i2)
      return null;
    if (!h2.type.isSkipped)
      return h2.from < o2 ? e2 : null;
    l2 = h2.to;
  }
}
function vd(s, t2, e2, i2, n2) {
  let r2 = s.textAfter, o2 = r2.match(/^\s*/)[0].length, l2 = i2 && r2.slice(o2, o2 + i2.length) == i2 || n2 == s.pos + o2, h2 = t2 ? xd(s) : null;
  return h2 ? l2 ? s.column(h2.from) : s.column(h2.to) : s.baseIndent + (l2 ? 0 : s.unit * e2);
}
function wo({ except: s, units: t2 = 1 } = {}) {
  return (e2) => {
    let i2 = s && s.test(e2.textAfter);
    return e2.baseIndent + (i2 ? 0 : t2 * e2.unit);
  };
}
const Sd = 200;
function Cd() {
  return N$1.transactionFilter.of((s) => {
    if (!s.docChanged || !s.isUserEvent("input.type") && !s.isUserEvent("input.complete"))
      return s;
    let t2 = s.startState.languageDataAt("indentOnInput", s.startState.selection.main.head);
    if (!t2.length)
      return s;
    let e2 = s.newDoc, { head: i2 } = s.newSelection.main, n2 = e2.lineAt(i2);
    if (i2 > n2.from + Sd)
      return s;
    let r2 = e2.sliceString(n2.from, i2);
    if (!t2.some((a2) => a2.test(r2)))
      return s;
    let { state: o2 } = s, l2 = -1, h2 = [];
    for (let { head: a2 } of o2.selection.ranges) {
      let c2 = o2.doc.lineAt(a2);
      if (c2.from == l2)
        continue;
      l2 = c2.from;
      let f2 = sr(o2, c2.from);
      if (f2 == null)
        continue;
      let u2 = /^\s*/.exec(c2.text)[0], d2 = wi(o2, f2);
      u2 != d2 && h2.push({ from: c2.from, to: c2.from + u2.length, insert: d2 });
    }
    return h2.length ? [s, { changes: h2, sequential: true }] : s;
  });
}
const Ad = /* @__PURE__ */ v$2.define(), bh = /* @__PURE__ */ new P();
function Od(s) {
  let t2 = s.firstChild, e2 = s.lastChild;
  return t2 && t2.to < e2.from ? { from: t2.to, to: e2.type.isError ? s.to : e2.from } : null;
}
function Md(s, t2, e2) {
  let i2 = St(s);
  if (i2.length < e2)
    return null;
  let n2 = i2.resolveInner(e2, 1), r2 = null;
  for (let o2 = n2; o2; o2 = o2.parent) {
    if (o2.to <= e2 || o2.from > e2)
      continue;
    if (r2 && o2.from < t2)
      break;
    let l2 = o2.type.prop(bh);
    if (l2 && (o2.to < i2.length - 50 || i2.length == s.doc.length || !Dd(o2))) {
      let h2 = l2(o2, s);
      h2 && h2.from <= e2 && h2.from >= t2 && h2.to > e2 && (r2 = h2);
    }
  }
  return r2;
}
function Dd(s) {
  let t2 = s.lastChild;
  return t2 && t2.to == s.to && t2.type.isError;
}
function wn(s, t2, e2) {
  for (let i2 of s.facet(Ad)) {
    let n2 = i2(s, t2, e2);
    if (n2)
      return n2;
  }
  return Md(s, t2, e2);
}
function kh(s, t2) {
  let e2 = t2.mapPos(s.from, 1), i2 = t2.mapPos(s.to, -1);
  return e2 >= i2 ? void 0 : { from: e2, to: i2 };
}
const Tn = /* @__PURE__ */ F.define({ map: kh }), xi = /* @__PURE__ */ F.define({ map: kh });
function xh(s) {
  let t2 = [];
  for (let { head: e2 } of s.state.selection.ranges)
    t2.some((i2) => i2.from <= e2 && i2.to >= e2) || t2.push(s.lineBlockAt(e2));
  return t2;
}
const Pe = /* @__PURE__ */ Bt.define({
  create() {
    return T.none;
  },
  update(s, t2) {
    s = s.map(t2.changes);
    for (let e2 of t2.effects)
      e2.is(Tn) && !Td(s, e2.value.from, e2.value.to) ? s = s.update({ add: [yo.range(e2.value.from, e2.value.to)] }) : e2.is(xi) && (s = s.update({
        filter: (i2, n2) => e2.value.from != i2 || e2.value.to != n2,
        filterFrom: e2.value.from,
        filterTo: e2.value.to
      }));
    if (t2.selection) {
      let e2 = false, { head: i2 } = t2.selection.main;
      s.between(i2, i2, (n2, r2) => {
        n2 < i2 && r2 > i2 && (e2 = true);
      }), e2 && (s = s.update({
        filterFrom: i2,
        filterTo: i2,
        filter: (n2, r2) => r2 <= i2 || n2 >= i2
      }));
    }
    return s;
  },
  provide: (s) => A$2.decorations.from(s),
  toJSON(s, t2) {
    let e2 = [];
    return s.between(0, t2.doc.length, (i2, n2) => {
      e2.push(i2, n2);
    }), e2;
  },
  fromJSON(s) {
    if (!Array.isArray(s) || s.length % 2)
      throw new RangeError("Invalid JSON for fold state");
    let t2 = [];
    for (let e2 = 0; e2 < s.length; ) {
      let i2 = s[e2++], n2 = s[e2++];
      if (typeof i2 != "number" || typeof n2 != "number")
        throw new RangeError("Invalid JSON for fold state");
      t2.push(yo.range(i2, n2));
    }
    return T.set(t2, true);
  }
});
function yn(s, t2, e2) {
  var i2;
  let n2 = null;
  return (i2 = s.field(Pe, false)) === null || i2 === void 0 || i2.between(t2, e2, (r2, o2) => {
    (!n2 || n2.from > r2) && (n2 = { from: r2, to: o2 });
  }), n2;
}
function Td(s, t2, e2) {
  let i2 = false;
  return s.between(t2, t2, (n2, r2) => {
    n2 == t2 && r2 == e2 && (i2 = true);
  }), i2;
}
function vh(s, t2) {
  return s.field(Pe, false) ? t2 : t2.concat(F.appendConfig.of(Ah()));
}
const Pd = (s) => {
  for (let t2 of xh(s)) {
    let e2 = wn(s.state, t2.from, t2.to);
    if (e2)
      return s.dispatch({ effects: vh(s.state, [Tn.of(e2), Sh(s, e2)]) }), true;
  }
  return false;
}, Bd = (s) => {
  if (!s.state.field(Pe, false))
    return false;
  let t2 = [];
  for (let e2 of xh(s)) {
    let i2 = yn(s.state, e2.from, e2.to);
    i2 && t2.push(xi.of(i2), Sh(s, i2, false));
  }
  return t2.length && s.dispatch({ effects: t2 }), t2.length > 0;
};
function Sh(s, t2, e2 = true) {
  let i2 = s.state.doc.lineAt(t2.from).number, n2 = s.state.doc.lineAt(t2.to).number;
  return A$2.announce.of(`${s.state.phrase(e2 ? "Folded lines" : "Unfolded lines")} ${i2} ${s.state.phrase("to")} ${n2}.`);
}
const Rd = (s) => {
  let { state: t2 } = s, e2 = [];
  for (let i2 = 0; i2 < t2.doc.length; ) {
    let n2 = s.lineBlockAt(i2), r2 = wn(t2, n2.from, n2.to);
    r2 && e2.push(Tn.of(r2)), i2 = (r2 ? s.lineBlockAt(r2.to) : n2).to + 1;
  }
  return e2.length && s.dispatch({ effects: vh(s.state, e2) }), !!e2.length;
}, Ld = (s) => {
  let t2 = s.state.field(Pe, false);
  if (!t2 || !t2.size)
    return false;
  let e2 = [];
  return t2.between(0, s.state.doc.length, (i2, n2) => {
    e2.push(xi.of({ from: i2, to: n2 }));
  }), s.dispatch({ effects: e2 }), true;
}, Ed = [
  { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: Pd },
  { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: Bd },
  { key: "Ctrl-Alt-[", run: Rd },
  { key: "Ctrl-Alt-]", run: Ld }
], Nd = {
  placeholderDOM: null,
  placeholderText: "\u2026"
}, Ch = /* @__PURE__ */ v$2.define({
  combine(s) {
    return Sn(s, Nd);
  }
});
function Ah(s) {
  let t2 = [Pe, Hd];
  return s && t2.push(Ch.of(s)), t2;
}
const yo = /* @__PURE__ */ T.replace({ widget: /* @__PURE__ */ new class extends ye {
  toDOM(s) {
    let { state: t2 } = s, e2 = t2.facet(Ch), i2 = (r2) => {
      let o2 = s.lineBlockAt(s.posAtDOM(r2.target)), l2 = yn(s.state, o2.from, o2.to);
      l2 && s.dispatch({ effects: xi.of(l2) }), r2.preventDefault();
    };
    if (e2.placeholderDOM)
      return e2.placeholderDOM(s, i2);
    let n2 = document.createElement("span");
    return n2.textContent = e2.placeholderText, n2.setAttribute("aria-label", t2.phrase("folded code")), n2.title = t2.phrase("unfold"), n2.className = "cm-foldPlaceholder", n2.onclick = i2, n2;
  }
}() }), Vd = {
  openText: "\u2304",
  closedText: "\u203A",
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => false
};
class Qn extends me {
  constructor(t2, e2) {
    super(), this.config = t2, this.open = e2;
  }
  eq(t2) {
    return this.config == t2.config && this.open == t2.open;
  }
  toDOM(t2) {
    if (this.config.markerDOM)
      return this.config.markerDOM(this.open);
    let e2 = document.createElement("span");
    return e2.textContent = this.open ? this.config.openText : this.config.closedText, e2.title = t2.state.phrase(this.open ? "Fold line" : "Unfold line"), e2;
  }
}
function Id(s = {}) {
  let t2 = Object.assign(Object.assign({}, Vd), s), e2 = new Qn(t2, true), i2 = new Qn(t2, false), n2 = wt.fromClass(class {
    constructor(o2) {
      this.from = o2.viewport.from, this.markers = this.buildMarkers(o2);
    }
    update(o2) {
      (o2.docChanged || o2.viewportChanged || o2.startState.facet(we) != o2.state.facet(we) || o2.startState.field(Pe, false) != o2.state.field(Pe, false) || St(o2.startState) != St(o2.state) || t2.foldingChanged(o2)) && (this.markers = this.buildMarkers(o2.view));
    }
    buildMarkers(o2) {
      let l2 = new De();
      for (let h2 of o2.viewportLineBlocks) {
        let a2 = yn(o2.state, h2.from, h2.to) ? i2 : wn(o2.state, h2.from, h2.to) ? e2 : null;
        a2 && l2.add(h2.from, h2.from, a2);
      }
      return l2.finish();
    }
  }), { domEventHandlers: r2 } = t2;
  return [
    n2,
    ju({
      class: "cm-foldGutter",
      markers(o2) {
        var l2;
        return ((l2 = o2.plugin(n2)) === null || l2 === void 0 ? void 0 : l2.markers) || $.empty;
      },
      initialSpacer() {
        return new Qn(t2, false);
      },
      domEventHandlers: Object.assign(Object.assign({}, r2), { click: (o2, l2, h2) => {
        if (r2.click && r2.click(o2, l2, h2))
          return true;
        let a2 = yn(o2.state, l2.from, l2.to);
        if (a2)
          return o2.dispatch({ effects: xi.of(a2) }), true;
        let c2 = wn(o2.state, l2.from, l2.to);
        return c2 ? (o2.dispatch({ effects: Tn.of(c2) }), true) : false;
      } })
    }),
    Ah()
  ];
}
const Hd = /* @__PURE__ */ A$2.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter span": {
    padding: "0 1px",
    cursor: "pointer"
  }
});
class vi {
  constructor(t2, e2) {
    this.specs = t2;
    let i2;
    function n2(l2) {
      let h2 = de.newName();
      return (i2 || (i2 = /* @__PURE__ */ Object.create(null)))["." + h2] = l2, h2;
    }
    const r2 = typeof e2.all == "string" ? e2.all : e2.all ? n2(e2.all) : void 0, o2 = e2.scope;
    this.scope = o2 instanceof Tt ? (l2) => l2.prop(mi) == o2.data : o2 ? (l2) => l2 == o2 : void 0, this.style = gh(t2.map((l2) => ({
      tag: l2.tag,
      class: l2.class || n2(Object.assign({}, l2, { tag: null }))
    })), {
      all: r2
    }).style, this.module = i2 ? new de(i2) : null, this.themeType = e2.themeType;
  }
  static define(t2, e2) {
    return new vi(t2, e2 || {});
  }
}
const Ns = /* @__PURE__ */ v$2.define(), Oh = /* @__PURE__ */ v$2.define({
  combine(s) {
    return s.length ? [s[0]] : null;
  }
});
function Jn(s) {
  let t2 = s.facet(Ns);
  return t2.length ? t2 : s.facet(Oh);
}
function bo(s, t2) {
  let e2 = [Fd], i2;
  return s instanceof vi && (s.module && e2.push(A$2.styleModule.of(s.module)), i2 = s.themeType), t2 != null && t2.fallback ? e2.push(Oh.of(s)) : i2 ? e2.push(Ns.computeN([A$2.darkTheme], (n2) => n2.facet(A$2.darkTheme) == (i2 == "dark") ? [s] : [])) : e2.push(Ns.of(s)), e2;
}
class $d {
  constructor(t2) {
    this.markCache = /* @__PURE__ */ Object.create(null), this.tree = St(t2.state), this.decorations = this.buildDeco(t2, Jn(t2.state));
  }
  update(t2) {
    let e2 = St(t2.state), i2 = Jn(t2.state), n2 = i2 != Jn(t2.startState);
    e2.length < t2.view.viewport.to && !n2 && e2.type == this.tree.type ? this.decorations = this.decorations.map(t2.changes) : (e2 != this.tree || t2.viewportChanged || n2) && (this.tree = e2, this.decorations = this.buildDeco(t2.view, i2));
  }
  buildDeco(t2, e2) {
    if (!e2 || !this.tree.length)
      return T.none;
    let i2 = new De();
    for (let { from: n2, to: r2 } of t2.visibleRanges)
      hd(this.tree, e2, (o2, l2, h2) => {
        i2.add(o2, l2, this.markCache[h2] || (this.markCache[h2] = T.mark({ class: h2 })));
      }, n2, r2);
    return i2.finish();
  }
}
const Fd = /* @__PURE__ */ js.high(/* @__PURE__ */ wt.fromClass($d, {
  decorations: (s) => s.decorations
})), zd = /* @__PURE__ */ vi.define([
  {
    tag: m$1.meta,
    color: "#404740"
  },
  {
    tag: m$1.link,
    textDecoration: "underline"
  },
  {
    tag: m$1.heading,
    textDecoration: "underline",
    fontWeight: "bold"
  },
  {
    tag: m$1.emphasis,
    fontStyle: "italic"
  },
  {
    tag: m$1.strong,
    fontWeight: "bold"
  },
  {
    tag: m$1.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: m$1.keyword,
    color: "#708"
  },
  {
    tag: [m$1.atom, m$1.bool, m$1.url, m$1.contentSeparator, m$1.labelName],
    color: "#219"
  },
  {
    tag: [m$1.literal, m$1.inserted],
    color: "#164"
  },
  {
    tag: [m$1.string, m$1.deleted],
    color: "#a11"
  },
  {
    tag: [m$1.regexp, m$1.escape, /* @__PURE__ */ m$1.special(m$1.string)],
    color: "#e40"
  },
  {
    tag: /* @__PURE__ */ m$1.definition(m$1.variableName),
    color: "#00f"
  },
  {
    tag: /* @__PURE__ */ m$1.local(m$1.variableName),
    color: "#30a"
  },
  {
    tag: [m$1.typeName, m$1.namespace],
    color: "#085"
  },
  {
    tag: m$1.className,
    color: "#167"
  },
  {
    tag: [/* @__PURE__ */ m$1.special(m$1.variableName), m$1.macroName],
    color: "#256"
  },
  {
    tag: /* @__PURE__ */ m$1.definition(m$1.propertyName),
    color: "#00c"
  },
  {
    tag: m$1.comment,
    color: "#940"
  },
  {
    tag: m$1.invalid,
    color: "#f00"
  }
]), _d = /* @__PURE__ */ A$2.baseTheme({
  "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
  "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
}), Mh = 1e4, Dh = "()[]{}", Th = /* @__PURE__ */ v$2.define({
  combine(s) {
    return Sn(s, {
      afterCursor: true,
      brackets: Dh,
      maxScanDistance: Mh,
      renderMatch: qd
    });
  }
}), Wd = /* @__PURE__ */ T.mark({ class: "cm-matchingBracket" }), jd = /* @__PURE__ */ T.mark({ class: "cm-nonmatchingBracket" });
function qd(s) {
  let t2 = [], e2 = s.matched ? Wd : jd;
  return t2.push(e2.range(s.start.from, s.start.to)), s.end && t2.push(e2.range(s.end.from, s.end.to)), t2;
}
const Kd = /* @__PURE__ */ Bt.define({
  create() {
    return T.none;
  },
  update(s, t2) {
    if (!t2.docChanged && !t2.selection)
      return s;
    let e2 = [], i2 = t2.state.facet(Th);
    for (let n2 of t2.state.selection.ranges) {
      if (!n2.empty)
        continue;
      let r2 = Ft(t2.state, n2.head, -1, i2) || n2.head > 0 && Ft(t2.state, n2.head - 1, 1, i2) || i2.afterCursor && (Ft(t2.state, n2.head, 1, i2) || n2.head < t2.state.doc.length && Ft(t2.state, n2.head + 1, -1, i2));
      r2 && (e2 = e2.concat(i2.renderMatch(r2, t2.state)));
    }
    return T.set(e2, true);
  },
  provide: (s) => A$2.decorations.from(s)
}), Gd = [
  Kd,
  _d
];
function Ud(s = {}) {
  return [Th.of(s), Gd];
}
const Qd = /* @__PURE__ */ new P();
function Vs(s, t2, e2) {
  let i2 = s.prop(t2 < 0 ? P.openedBy : P.closedBy);
  if (i2)
    return i2;
  if (s.name.length == 1) {
    let n2 = e2.indexOf(s.name);
    if (n2 > -1 && n2 % 2 == (t2 < 0 ? 1 : 0))
      return [e2[n2 + t2]];
  }
  return null;
}
function Is(s) {
  let t2 = s.type.prop(Qd);
  return t2 ? t2(s.node) : s;
}
function Ft(s, t2, e2, i2 = {}) {
  let n2 = i2.maxScanDistance || Mh, r2 = i2.brackets || Dh, o2 = St(s), l2 = o2.resolveInner(t2, e2);
  for (let h2 = l2; h2; h2 = h2.parent) {
    let a2 = Vs(h2.type, e2, r2);
    if (a2 && h2.from < h2.to) {
      let c2 = Is(h2);
      if (c2 && (e2 > 0 ? t2 >= c2.from && t2 < c2.to : t2 > c2.from && t2 <= c2.to))
        return Jd(s, t2, e2, h2, c2, a2, r2);
    }
  }
  return Xd(s, t2, e2, o2, l2.type, n2, r2);
}
function Jd(s, t2, e2, i2, n2, r2, o2) {
  let l2 = i2.parent, h2 = { from: n2.from, to: n2.to }, a2 = 0, c2 = l2 == null ? void 0 : l2.cursor();
  if (c2 && (e2 < 0 ? c2.childBefore(i2.from) : c2.childAfter(i2.to)))
    do
      if (e2 < 0 ? c2.to <= i2.from : c2.from >= i2.to) {
        if (a2 == 0 && r2.indexOf(c2.type.name) > -1 && c2.from < c2.to) {
          let f2 = Is(c2);
          return { start: h2, end: f2 ? { from: f2.from, to: f2.to } : void 0, matched: true };
        } else if (Vs(c2.type, e2, o2))
          a2++;
        else if (Vs(c2.type, -e2, o2)) {
          if (a2 == 0) {
            let f2 = Is(c2);
            return {
              start: h2,
              end: f2 && f2.from < f2.to ? { from: f2.from, to: f2.to } : void 0,
              matched: false
            };
          }
          a2--;
        }
      }
    while (e2 < 0 ? c2.prevSibling() : c2.nextSibling());
  return { start: h2, matched: false };
}
function Xd(s, t2, e2, i2, n2, r2, o2) {
  let l2 = e2 < 0 ? s.sliceDoc(t2 - 1, t2) : s.sliceDoc(t2, t2 + 1), h2 = o2.indexOf(l2);
  if (h2 < 0 || h2 % 2 == 0 != e2 > 0)
    return null;
  let a2 = { from: e2 < 0 ? t2 - 1 : t2, to: e2 > 0 ? t2 + 1 : t2 }, c2 = s.doc.iterRange(t2, e2 > 0 ? s.doc.length : 0), f2 = 0;
  for (let u2 = 0; !c2.next().done && u2 <= r2; ) {
    let d2 = c2.value;
    e2 < 0 && (u2 += d2.length);
    let p2 = t2 + u2 * e2;
    for (let w = e2 > 0 ? 0 : d2.length - 1, g2 = e2 > 0 ? d2.length : -1; w != g2; w += e2) {
      let y = o2.indexOf(d2[w]);
      if (!(y < 0 || i2.resolveInner(p2 + w, 1).type != n2))
        if (y % 2 == 0 == e2 > 0)
          f2++;
        else {
          if (f2 == 1)
            return { start: a2, end: { from: p2 + w, to: p2 + w + 1 }, matched: y >> 1 == h2 >> 1 };
          f2--;
        }
    }
    e2 > 0 && (u2 += d2.length);
  }
  return c2.done ? { start: a2, matched: false } : null;
}
const Yd = /* @__PURE__ */ Object.create(null), ko = [yt.none], xo = [], Zd = /* @__PURE__ */ Object.create(null);
for (let [s, t2] of [
  ["variable", "variableName"],
  ["variable-2", "variableName.special"],
  ["string-2", "string.special"],
  ["def", "variableName.definition"],
  ["tag", "tagName"],
  ["attribute", "attributeName"],
  ["type", "typeName"],
  ["builtin", "variableName.standard"],
  ["qualifier", "modifier"],
  ["error", "invalid"],
  ["header", "heading"],
  ["property", "propertyName"]
])
  Zd[s] = /* @__PURE__ */ tp(Yd, t2);
function Xn(s, t2) {
  xo.indexOf(s) > -1 || (xo.push(s), console.warn(t2));
}
function tp(s, t2) {
  let e2 = null;
  for (let r2 of t2.split(".")) {
    let o2 = s[r2] || m$1[r2];
    o2 ? typeof o2 == "function" ? e2 ? e2 = o2(e2) : Xn(r2, `Modifier ${r2} used at start of tag`) : e2 ? Xn(r2, `Tag ${r2} used as modifier`) : e2 = o2 : Xn(r2, `Unknown highlighting tag ${r2}`);
  }
  if (!e2)
    return 0;
  let i2 = t2.replace(/ /g, "_"), n2 = yt.define({
    id: ko.length,
    name: i2,
    props: [dh({ [i2]: e2 })]
  });
  return ko.push(n2), n2.id;
}
const ep = (s) => {
  let t2 = lr(s.state);
  return t2.line ? ip(s) : t2.block ? sp(s) : false;
};
function or(s, t2) {
  return ({ state: e2, dispatch: i2 }) => {
    if (e2.readOnly)
      return false;
    let n2 = s(t2, e2);
    return n2 ? (i2(e2.update(n2)), true) : false;
  };
}
const ip = /* @__PURE__ */ or(
  lp,
  0
), np = /* @__PURE__ */ or(
  Ph,
  0
), sp = /* @__PURE__ */ or(
  (s, t2) => Ph(s, t2, op(t2)),
  0
);
function lr(s, t2 = s.selection.main.head) {
  let e2 = s.languageDataAt("commentTokens", t2);
  return e2.length ? e2[0] : {};
}
const ni = 50;
function rp(s, { open: t2, close: e2 }, i2, n2) {
  let r2 = s.sliceDoc(i2 - ni, i2), o2 = s.sliceDoc(n2, n2 + ni), l2 = /\s*$/.exec(r2)[0].length, h2 = /^\s*/.exec(o2)[0].length, a2 = r2.length - l2;
  if (r2.slice(a2 - t2.length, a2) == t2 && o2.slice(h2, h2 + e2.length) == e2)
    return {
      open: { pos: i2 - l2, margin: l2 && 1 },
      close: { pos: n2 + h2, margin: h2 && 1 }
    };
  let c2, f2;
  n2 - i2 <= 2 * ni ? c2 = f2 = s.sliceDoc(i2, n2) : (c2 = s.sliceDoc(i2, i2 + ni), f2 = s.sliceDoc(n2 - ni, n2));
  let u2 = /^\s*/.exec(c2)[0].length, d2 = /\s*$/.exec(f2)[0].length, p2 = f2.length - d2 - e2.length;
  return c2.slice(u2, u2 + t2.length) == t2 && f2.slice(p2, p2 + e2.length) == e2 ? {
    open: {
      pos: i2 + u2 + t2.length,
      margin: /\s/.test(c2.charAt(u2 + t2.length)) ? 1 : 0
    },
    close: {
      pos: n2 - d2 - e2.length,
      margin: /\s/.test(f2.charAt(p2 - 1)) ? 1 : 0
    }
  } : null;
}
function op(s) {
  let t2 = [];
  for (let e2 of s.selection.ranges) {
    let i2 = s.doc.lineAt(e2.from), n2 = e2.to <= i2.to ? i2 : s.doc.lineAt(e2.to), r2 = t2.length - 1;
    r2 >= 0 && t2[r2].to > i2.from ? t2[r2].to = n2.to : t2.push({ from: i2.from, to: n2.to });
  }
  return t2;
}
function Ph(s, t2, e2 = t2.selection.ranges) {
  let i2 = e2.map((r2) => lr(t2, r2.from).block);
  if (!i2.every((r2) => r2))
    return null;
  let n2 = e2.map((r2, o2) => rp(t2, i2[o2], r2.from, r2.to));
  if (s != 2 && !n2.every((r2) => r2))
    return { changes: t2.changes(e2.map((r2, o2) => n2[o2] ? [] : [{ from: r2.from, insert: i2[o2].open + " " }, { from: r2.to, insert: " " + i2[o2].close }])) };
  if (s != 1 && n2.some((r2) => r2)) {
    let r2 = [];
    for (let o2 = 0, l2; o2 < n2.length; o2++)
      if (l2 = n2[o2]) {
        let h2 = i2[o2], { open: a2, close: c2 } = l2;
        r2.push({ from: a2.pos - h2.open.length, to: a2.pos + a2.margin }, { from: c2.pos - c2.margin, to: c2.pos + h2.close.length });
      }
    return { changes: r2 };
  }
  return null;
}
function lp(s, t2, e2 = t2.selection.ranges) {
  let i2 = [], n2 = -1;
  for (let { from: r2, to: o2 } of e2) {
    let l2 = i2.length, h2 = 1e9;
    for (let a2 = r2; a2 <= o2; ) {
      let c2 = t2.doc.lineAt(a2);
      if (c2.from > n2 && (r2 == o2 || o2 > c2.from)) {
        n2 = c2.from;
        let f2 = lr(t2, a2).line;
        if (!f2)
          continue;
        let u2 = /^\s*/.exec(c2.text)[0].length, d2 = u2 == c2.length, p2 = c2.text.slice(u2, u2 + f2.length) == f2 ? u2 : -1;
        u2 < c2.text.length && u2 < h2 && (h2 = u2), i2.push({ line: c2, comment: p2, token: f2, indent: u2, empty: d2, single: false });
      }
      a2 = c2.to + 1;
    }
    if (h2 < 1e9)
      for (let a2 = l2; a2 < i2.length; a2++)
        i2[a2].indent < i2[a2].line.text.length && (i2[a2].indent = h2);
    i2.length == l2 + 1 && (i2[l2].single = true);
  }
  if (s != 2 && i2.some((r2) => r2.comment < 0 && (!r2.empty || r2.single))) {
    let r2 = [];
    for (let { line: l2, token: h2, indent: a2, empty: c2, single: f2 } of i2)
      (f2 || !c2) && r2.push({ from: l2.from + a2, insert: h2 + " " });
    let o2 = t2.changes(r2);
    return { changes: o2, selection: t2.selection.map(o2, 1) };
  } else if (s != 1 && i2.some((r2) => r2.comment >= 0)) {
    let r2 = [];
    for (let { line: o2, comment: l2, token: h2 } of i2)
      if (l2 >= 0) {
        let a2 = o2.from + l2, c2 = a2 + h2.length;
        o2.text[c2 - o2.from] == " " && c2++, r2.push({ from: a2, to: c2 });
      }
    return { changes: r2 };
  }
  return null;
}
function Ye(s, t2) {
  return b.create(s.ranges.map(t2), s.mainIndex);
}
function Kt(s, t2) {
  return s.update({ selection: t2, scrollIntoView: true, userEvent: "select" });
}
function Rt({ state: s, dispatch: t2 }, e2) {
  let i2 = Ye(s.selection, e2);
  return i2.eq(s.selection) ? false : (t2(Kt(s, i2)), true);
}
function Pn(s, t2) {
  return b.cursor(t2 ? s.to : s.from);
}
function Bh(s, t2) {
  return Rt(s, (e2) => e2.empty ? s.moveByChar(e2, t2) : Pn(e2, t2));
}
function ft(s) {
  return s.textDirectionAt(s.state.selection.main.head) == X.LTR;
}
const Rh = (s) => Bh(s, !ft(s)), Lh = (s) => Bh(s, ft(s));
function Eh(s, t2) {
  return Rt(s, (e2) => e2.empty ? s.moveByGroup(e2, t2) : Pn(e2, t2));
}
const hp = (s) => Eh(s, !ft(s)), ap = (s) => Eh(s, ft(s));
function cp(s, t2, e2) {
  if (t2.type.prop(e2))
    return true;
  let i2 = t2.to - t2.from;
  return i2 && (i2 > 2 || /[^\s,.;:]/.test(s.sliceDoc(t2.from, t2.to))) || t2.firstChild;
}
function Bn(s, t2, e2) {
  let i2 = St(s).resolveInner(t2.head), n2 = e2 ? P.closedBy : P.openedBy;
  for (let h2 = t2.head; ; ) {
    let a2 = e2 ? i2.childAfter(h2) : i2.childBefore(h2);
    if (!a2)
      break;
    cp(s, a2, n2) ? i2 = a2 : h2 = e2 ? a2.to : a2.from;
  }
  let r2 = i2.type.prop(n2), o2, l2;
  return r2 && (o2 = e2 ? Ft(s, i2.from, 1) : Ft(s, i2.to, -1)) && o2.matched ? l2 = e2 ? o2.end.to : o2.end.from : l2 = e2 ? i2.to : i2.from, b.cursor(l2, e2 ? -1 : 1);
}
const fp = (s) => Rt(s, (t2) => Bn(s.state, t2, !ft(s))), up = (s) => Rt(s, (t2) => Bn(s.state, t2, ft(s)));
function Nh(s, t2) {
  return Rt(s, (e2) => {
    if (!e2.empty)
      return Pn(e2, t2);
    let i2 = s.moveVertically(e2, t2);
    return i2.head != e2.head ? i2 : s.moveToLineBoundary(e2, t2);
  });
}
const Vh = (s) => Nh(s, false), Ih = (s) => Nh(s, true);
function Hh(s) {
  return Math.max(s.defaultLineHeight, Math.min(s.dom.clientHeight, innerHeight) - 5);
}
function $h(s, t2) {
  let { state: e2 } = s, i2 = Ye(e2.selection, (l2) => l2.empty ? s.moveVertically(l2, t2, Hh(s)) : Pn(l2, t2));
  if (i2.eq(e2.selection))
    return false;
  let n2 = s.coordsAtPos(e2.selection.main.head), r2 = s.scrollDOM.getBoundingClientRect(), o2;
  return n2 && n2.top > r2.top && n2.bottom < r2.bottom && n2.top - r2.top <= s.scrollDOM.scrollHeight - s.scrollDOM.scrollTop - s.scrollDOM.clientHeight && (o2 = A$2.scrollIntoView(i2.main.head, { y: "start", yMargin: n2.top - r2.top })), s.dispatch(Kt(e2, i2), { effects: o2 }), true;
}
const vo = (s) => $h(s, false), Hs = (s) => $h(s, true);
function be(s, t2, e2) {
  let i2 = s.lineBlockAt(t2.head), n2 = s.moveToLineBoundary(t2, e2);
  if (n2.head == t2.head && n2.head != (e2 ? i2.to : i2.from) && (n2 = s.moveToLineBoundary(t2, e2, false)), !e2 && n2.head == i2.from && i2.length) {
    let r2 = /^\s*/.exec(s.state.sliceDoc(i2.from, Math.min(i2.from + 100, i2.to)))[0].length;
    r2 && t2.head != i2.from + r2 && (n2 = b.cursor(i2.from + r2));
  }
  return n2;
}
const dp = (s) => Rt(s, (t2) => be(s, t2, true)), pp = (s) => Rt(s, (t2) => be(s, t2, false)), gp = (s) => Rt(s, (t2) => be(s, t2, !ft(s))), mp = (s) => Rt(s, (t2) => be(s, t2, ft(s))), wp = (s) => Rt(s, (t2) => b.cursor(s.lineBlockAt(t2.head).from, 1)), yp = (s) => Rt(s, (t2) => b.cursor(s.lineBlockAt(t2.head).to, -1));
function bp(s, t2, e2) {
  let i2 = false, n2 = Ye(s.selection, (r2) => {
    let o2 = Ft(s, r2.head, -1) || Ft(s, r2.head, 1) || r2.head > 0 && Ft(s, r2.head - 1, 1) || r2.head < s.doc.length && Ft(s, r2.head + 1, -1);
    if (!o2 || !o2.end)
      return r2;
    i2 = true;
    let l2 = o2.start.from == r2.head ? o2.end.to : o2.end.from;
    return e2 ? b.range(r2.anchor, l2) : b.cursor(l2);
  });
  return i2 ? (t2(Kt(s, n2)), true) : false;
}
const kp = ({ state: s, dispatch: t2 }) => bp(s, t2, false);
function At(s, t2) {
  let e2 = Ye(s.state.selection, (i2) => {
    let n2 = t2(i2);
    return b.range(i2.anchor, n2.head, n2.goalColumn, n2.bidiLevel || void 0);
  });
  return e2.eq(s.state.selection) ? false : (s.dispatch(Kt(s.state, e2)), true);
}
function Fh(s, t2) {
  return At(s, (e2) => s.moveByChar(e2, t2));
}
const zh = (s) => Fh(s, !ft(s)), _h = (s) => Fh(s, ft(s));
function Wh(s, t2) {
  return At(s, (e2) => s.moveByGroup(e2, t2));
}
const xp = (s) => Wh(s, !ft(s)), vp = (s) => Wh(s, ft(s)), Sp = (s) => At(s, (t2) => Bn(s.state, t2, !ft(s))), Cp = (s) => At(s, (t2) => Bn(s.state, t2, ft(s)));
function jh(s, t2) {
  return At(s, (e2) => s.moveVertically(e2, t2));
}
const qh = (s) => jh(s, false), Kh = (s) => jh(s, true);
function Gh(s, t2) {
  return At(s, (e2) => s.moveVertically(e2, t2, Hh(s)));
}
const So = (s) => Gh(s, false), Co = (s) => Gh(s, true), Ap = (s) => At(s, (t2) => be(s, t2, true)), Op = (s) => At(s, (t2) => be(s, t2, false)), Mp = (s) => At(s, (t2) => be(s, t2, !ft(s))), Dp = (s) => At(s, (t2) => be(s, t2, ft(s))), Tp = (s) => At(s, (t2) => b.cursor(s.lineBlockAt(t2.head).from)), Pp = (s) => At(s, (t2) => b.cursor(s.lineBlockAt(t2.head).to)), Ao = ({ state: s, dispatch: t2 }) => (t2(Kt(s, { anchor: 0 })), true), Oo = ({ state: s, dispatch: t2 }) => (t2(Kt(s, { anchor: s.doc.length })), true), Mo = ({ state: s, dispatch: t2 }) => (t2(Kt(s, { anchor: s.selection.main.anchor, head: 0 })), true), Do = ({ state: s, dispatch: t2 }) => (t2(Kt(s, { anchor: s.selection.main.anchor, head: s.doc.length })), true), Bp = ({ state: s, dispatch: t2 }) => (t2(s.update({ selection: { anchor: 0, head: s.doc.length }, userEvent: "select" })), true), Rp = ({ state: s, dispatch: t2 }) => {
  let e2 = Ln(s).map(({ from: i2, to: n2 }) => b.range(i2, Math.min(n2 + 1, s.doc.length)));
  return t2(s.update({ selection: b.create(e2), userEvent: "select" })), true;
}, Lp = ({ state: s, dispatch: t2 }) => {
  let e2 = Ye(s.selection, (i2) => {
    var n2;
    let r2 = St(s).resolveInner(i2.head, 1);
    for (; !(r2.from < i2.from && r2.to >= i2.to || r2.to > i2.to && r2.from <= i2.from || !(!((n2 = r2.parent) === null || n2 === void 0) && n2.parent)); )
      r2 = r2.parent;
    return b.range(r2.to, r2.from);
  });
  return t2(Kt(s, e2)), true;
}, Ep = ({ state: s, dispatch: t2 }) => {
  let e2 = s.selection, i2 = null;
  return e2.ranges.length > 1 ? i2 = b.create([e2.main]) : e2.main.empty || (i2 = b.create([b.cursor(e2.main.head)])), i2 ? (t2(Kt(s, i2)), true) : false;
};
function Rn(s, t2) {
  if (s.state.readOnly)
    return false;
  let e2 = "delete.selection", { state: i2 } = s, n2 = i2.changeByRange((r2) => {
    let { from: o2, to: l2 } = r2;
    if (o2 == l2) {
      let h2 = t2(o2);
      h2 < o2 ? (e2 = "delete.backward", h2 = Fi(s, h2, false)) : h2 > o2 && (e2 = "delete.forward", h2 = Fi(s, h2, true)), o2 = Math.min(o2, h2), l2 = Math.max(l2, h2);
    } else
      o2 = Fi(s, o2, false), l2 = Fi(s, l2, true);
    return o2 == l2 ? { range: r2 } : { changes: { from: o2, to: l2 }, range: b.cursor(o2) };
  });
  return n2.changes.empty ? false : (s.dispatch(i2.update(n2, {
    scrollIntoView: true,
    userEvent: e2,
    effects: e2 == "delete.selection" ? A$2.announce.of(i2.phrase("Selection deleted")) : void 0
  })), true);
}
function Fi(s, t2, e2) {
  if (s instanceof A$2)
    for (let i2 of s.state.facet(A$2.atomicRanges).map((n2) => n2(s)))
      i2.between(t2, t2, (n2, r2) => {
        n2 < t2 && r2 > t2 && (t2 = e2 ? r2 : n2);
      });
  return t2;
}
const Uh = (s, t2) => Rn(s, (e2) => {
  let { state: i2 } = s, n2 = i2.doc.lineAt(e2), r2, o2;
  if (!t2 && e2 > n2.from && e2 < n2.from + 200 && !/[^ \t]/.test(r2 = n2.text.slice(0, e2 - n2.from))) {
    if (r2[r2.length - 1] == "	")
      return e2 - 1;
    let l2 = Cn(r2, i2.tabSize), h2 = l2 % mn(i2) || mn(i2);
    for (let a2 = 0; a2 < h2 && r2[r2.length - 1 - a2] == " "; a2++)
      e2--;
    o2 = e2;
  } else
    o2 = xt(n2.text, e2 - n2.from, t2, t2) + n2.from, o2 == e2 && n2.number != (t2 ? i2.doc.lines : 1) && (o2 += t2 ? 1 : -1);
  return o2;
}), $s = (s) => Uh(s, false), Qh = (s) => Uh(s, true), Jh = (s, t2) => Rn(s, (e2) => {
  let i2 = e2, { state: n2 } = s, r2 = n2.doc.lineAt(i2), o2 = n2.charCategorizer(i2);
  for (let l2 = null; ; ) {
    if (i2 == (t2 ? r2.to : r2.from)) {
      i2 == e2 && r2.number != (t2 ? n2.doc.lines : 1) && (i2 += t2 ? 1 : -1);
      break;
    }
    let h2 = xt(r2.text, i2 - r2.from, t2) + r2.from, a2 = r2.text.slice(Math.min(i2, h2) - r2.from, Math.max(i2, h2) - r2.from), c2 = o2(a2);
    if (l2 != null && c2 != l2)
      break;
    (a2 != " " || i2 != e2) && (l2 = c2), i2 = h2;
  }
  return i2;
}), Xh = (s) => Jh(s, false), Np = (s) => Jh(s, true), Yh = (s) => Rn(s, (t2) => {
  let e2 = s.lineBlockAt(t2).to;
  return t2 < e2 ? e2 : Math.min(s.state.doc.length, t2 + 1);
}), Vp = (s) => Rn(s, (t2) => {
  let e2 = s.lineBlockAt(t2).from;
  return t2 > e2 ? e2 : Math.max(0, t2 - 1);
}), Ip = ({ state: s, dispatch: t2 }) => {
  if (s.readOnly)
    return false;
  let e2 = s.changeByRange((i2) => ({
    changes: { from: i2.from, to: i2.to, insert: E.of(["", ""]) },
    range: b.cursor(i2.from)
  }));
  return t2(s.update(e2, { scrollIntoView: true, userEvent: "input" })), true;
}, Hp = ({ state: s, dispatch: t2 }) => {
  if (s.readOnly)
    return false;
  let e2 = s.changeByRange((i2) => {
    if (!i2.empty || i2.from == 0 || i2.from == s.doc.length)
      return { range: i2 };
    let n2 = i2.from, r2 = s.doc.lineAt(n2), o2 = n2 == r2.from ? n2 - 1 : xt(r2.text, n2 - r2.from, false) + r2.from, l2 = n2 == r2.to ? n2 + 1 : xt(r2.text, n2 - r2.from, true) + r2.from;
    return {
      changes: { from: o2, to: l2, insert: s.doc.slice(n2, l2).append(s.doc.slice(o2, n2)) },
      range: b.cursor(l2)
    };
  });
  return e2.changes.empty ? false : (t2(s.update(e2, { scrollIntoView: true, userEvent: "move.character" })), true);
};
function Ln(s) {
  let t2 = [], e2 = -1;
  for (let i2 of s.selection.ranges) {
    let n2 = s.doc.lineAt(i2.from), r2 = s.doc.lineAt(i2.to);
    if (!i2.empty && i2.to == r2.from && (r2 = s.doc.lineAt(i2.to - 1)), e2 >= n2.number) {
      let o2 = t2[t2.length - 1];
      o2.to = r2.to, o2.ranges.push(i2);
    } else
      t2.push({ from: n2.from, to: r2.to, ranges: [i2] });
    e2 = r2.number + 1;
  }
  return t2;
}
function Zh(s, t2, e2) {
  if (s.readOnly)
    return false;
  let i2 = [], n2 = [];
  for (let r2 of Ln(s)) {
    if (e2 ? r2.to == s.doc.length : r2.from == 0)
      continue;
    let o2 = s.doc.lineAt(e2 ? r2.to + 1 : r2.from - 1), l2 = o2.length + 1;
    if (e2) {
      i2.push({ from: r2.to, to: o2.to }, { from: r2.from, insert: o2.text + s.lineBreak });
      for (let h2 of r2.ranges)
        n2.push(b.range(Math.min(s.doc.length, h2.anchor + l2), Math.min(s.doc.length, h2.head + l2)));
    } else {
      i2.push({ from: o2.from, to: r2.from }, { from: r2.to, insert: s.lineBreak + o2.text });
      for (let h2 of r2.ranges)
        n2.push(b.range(h2.anchor - l2, h2.head - l2));
    }
  }
  return i2.length ? (t2(s.update({
    changes: i2,
    scrollIntoView: true,
    selection: b.create(n2, s.selection.mainIndex),
    userEvent: "move.line"
  })), true) : false;
}
const $p = ({ state: s, dispatch: t2 }) => Zh(s, t2, false), Fp = ({ state: s, dispatch: t2 }) => Zh(s, t2, true);
function ta(s, t2, e2) {
  if (s.readOnly)
    return false;
  let i2 = [];
  for (let n2 of Ln(s))
    e2 ? i2.push({ from: n2.from, insert: s.doc.slice(n2.from, n2.to) + s.lineBreak }) : i2.push({ from: n2.to, insert: s.lineBreak + s.doc.slice(n2.from, n2.to) });
  return t2(s.update({ changes: i2, scrollIntoView: true, userEvent: "input.copyline" })), true;
}
const zp = ({ state: s, dispatch: t2 }) => ta(s, t2, false), _p = ({ state: s, dispatch: t2 }) => ta(s, t2, true), Wp = (s) => {
  if (s.state.readOnly)
    return false;
  let { state: t2 } = s, e2 = t2.changes(Ln(t2).map(({ from: n2, to: r2 }) => (n2 > 0 ? n2-- : r2 < t2.doc.length && r2++, { from: n2, to: r2 }))), i2 = Ye(t2.selection, (n2) => s.moveVertically(n2, true)).map(e2);
  return s.dispatch({ changes: e2, selection: i2, scrollIntoView: true, userEvent: "delete.line" }), true;
};
function jp(s, t2) {
  if (/\(\)|\[\]|\{\}/.test(s.sliceDoc(t2 - 1, t2 + 1)))
    return { from: t2, to: t2 };
  let e2 = St(s).resolveInner(t2), i2 = e2.childBefore(t2), n2 = e2.childAfter(t2), r2;
  return i2 && n2 && i2.to <= t2 && n2.from >= t2 && (r2 = i2.type.prop(P.closedBy)) && r2.indexOf(n2.name) > -1 && s.doc.lineAt(i2.to).from == s.doc.lineAt(n2.from).from ? { from: i2.to, to: n2.from } : null;
}
const qp = /* @__PURE__ */ ea(false), Kp = /* @__PURE__ */ ea(true);
function ea(s) {
  return ({ state: t2, dispatch: e2 }) => {
    if (t2.readOnly)
      return false;
    let i2 = t2.changeByRange((n2) => {
      let { from: r2, to: o2 } = n2, l2 = t2.doc.lineAt(r2), h2 = !s && r2 == o2 && jp(t2, r2);
      s && (r2 = o2 = (o2 <= l2.to ? l2 : t2.doc.lineAt(o2)).to);
      let a2 = new Dn(t2, { simulateBreak: r2, simulateDoubleBreak: !!h2 }), c2 = sr(a2, r2);
      for (c2 == null && (c2 = /^\s*/.exec(t2.doc.lineAt(r2).text)[0].length); o2 < l2.to && /\s/.test(l2.text[o2 - l2.from]); )
        o2++;
      h2 ? { from: r2, to: o2 } = h2 : r2 > l2.from && r2 < l2.from + 100 && !/\S/.test(l2.text.slice(0, r2)) && (r2 = l2.from);
      let f2 = ["", wi(t2, c2)];
      return h2 && f2.push(wi(t2, a2.lineIndent(l2.from, -1))), {
        changes: { from: r2, to: o2, insert: E.of(f2) },
        range: b.cursor(r2 + 1 + f2[1].length)
      };
    });
    return e2(t2.update(i2, { scrollIntoView: true, userEvent: "input" })), true;
  };
}
function hr(s, t2) {
  let e2 = -1;
  return s.changeByRange((i2) => {
    let n2 = [];
    for (let o2 = i2.from; o2 <= i2.to; ) {
      let l2 = s.doc.lineAt(o2);
      l2.number > e2 && (i2.empty || i2.to > l2.from) && (t2(l2, n2, i2), e2 = l2.number), o2 = l2.to + 1;
    }
    let r2 = s.changes(n2);
    return {
      changes: n2,
      range: b.range(r2.mapPos(i2.anchor, 1), r2.mapPos(i2.head, 1))
    };
  });
}
const Gp = ({ state: s, dispatch: t2 }) => {
  if (s.readOnly)
    return false;
  let e2 = /* @__PURE__ */ Object.create(null), i2 = new Dn(s, { overrideIndentation: (r2) => {
    let o2 = e2[r2];
    return o2 != null ? o2 : -1;
  } }), n2 = hr(s, (r2, o2, l2) => {
    let h2 = sr(i2, r2.from);
    if (h2 == null)
      return;
    /\S/.test(r2.text) || (h2 = 0);
    let a2 = /^\s*/.exec(r2.text)[0], c2 = wi(s, h2);
    (a2 != c2 || l2.from < r2.from + a2.length) && (e2[r2.from] = h2, o2.push({ from: r2.from, to: r2.from + a2.length, insert: c2 }));
  });
  return n2.changes.empty || t2(s.update(n2, { userEvent: "indent" })), true;
}, Up = ({ state: s, dispatch: t2 }) => s.readOnly ? false : (t2(s.update(hr(s, (e2, i2) => {
  i2.push({ from: e2.from, insert: s.facet(nr) });
}), { userEvent: "input.indent" })), true), Qp = ({ state: s, dispatch: t2 }) => s.readOnly ? false : (t2(s.update(hr(s, (e2, i2) => {
  let n2 = /^\s*/.exec(e2.text)[0];
  if (!n2)
    return;
  let r2 = Cn(n2, s.tabSize), o2 = 0, l2 = wi(s, Math.max(0, r2 - mn(s)));
  for (; o2 < n2.length && o2 < l2.length && n2.charCodeAt(o2) == l2.charCodeAt(o2); )
    o2++;
  i2.push({ from: e2.from + o2, to: e2.from + n2.length, insert: l2.slice(o2) });
}), { userEvent: "delete.dedent" })), true), Jp = [
  { key: "Ctrl-b", run: Rh, shift: zh, preventDefault: true },
  { key: "Ctrl-f", run: Lh, shift: _h },
  { key: "Ctrl-p", run: Vh, shift: qh },
  { key: "Ctrl-n", run: Ih, shift: Kh },
  { key: "Ctrl-a", run: wp, shift: Tp },
  { key: "Ctrl-e", run: yp, shift: Pp },
  { key: "Ctrl-d", run: Qh },
  { key: "Ctrl-h", run: $s },
  { key: "Ctrl-k", run: Yh },
  { key: "Ctrl-Alt-h", run: Xh },
  { key: "Ctrl-o", run: Ip },
  { key: "Ctrl-t", run: Hp },
  { key: "Ctrl-v", run: Hs }
], Xp = /* @__PURE__ */ [
  { key: "ArrowLeft", run: Rh, shift: zh, preventDefault: true },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: hp, shift: xp, preventDefault: true },
  { mac: "Cmd-ArrowLeft", run: gp, shift: Mp, preventDefault: true },
  { key: "ArrowRight", run: Lh, shift: _h, preventDefault: true },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: ap, shift: vp, preventDefault: true },
  { mac: "Cmd-ArrowRight", run: mp, shift: Dp, preventDefault: true },
  { key: "ArrowUp", run: Vh, shift: qh, preventDefault: true },
  { mac: "Cmd-ArrowUp", run: Ao, shift: Mo },
  { mac: "Ctrl-ArrowUp", run: vo, shift: So },
  { key: "ArrowDown", run: Ih, shift: Kh, preventDefault: true },
  { mac: "Cmd-ArrowDown", run: Oo, shift: Do },
  { mac: "Ctrl-ArrowDown", run: Hs, shift: Co },
  { key: "PageUp", run: vo, shift: So },
  { key: "PageDown", run: Hs, shift: Co },
  { key: "Home", run: pp, shift: Op, preventDefault: true },
  { key: "Mod-Home", run: Ao, shift: Mo },
  { key: "End", run: dp, shift: Ap, preventDefault: true },
  { key: "Mod-End", run: Oo, shift: Do },
  { key: "Enter", run: qp },
  { key: "Mod-a", run: Bp },
  { key: "Backspace", run: $s, shift: $s },
  { key: "Delete", run: Qh },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: Xh },
  { key: "Mod-Delete", mac: "Alt-Delete", run: Np },
  { mac: "Mod-Backspace", run: Vp },
  { mac: "Mod-Delete", run: Yh }
].concat(/* @__PURE__ */ Jp.map((s) => ({ mac: s.key, run: s.run, shift: s.shift }))), Yp = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: fp, shift: Sp },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: up, shift: Cp },
  { key: "Alt-ArrowUp", run: $p },
  { key: "Shift-Alt-ArrowUp", run: zp },
  { key: "Alt-ArrowDown", run: Fp },
  { key: "Shift-Alt-ArrowDown", run: _p },
  { key: "Escape", run: Ep },
  { key: "Mod-Enter", run: Kp },
  { key: "Alt-l", mac: "Ctrl-l", run: Rp },
  { key: "Mod-i", run: Lp, preventDefault: true },
  { key: "Mod-[", run: Qp },
  { key: "Mod-]", run: Up },
  { key: "Mod-Alt-\\", run: Gp },
  { key: "Shift-Mod-k", run: Wp },
  { key: "Shift-Mod-\\", run: kp },
  { key: "Mod-/", run: ep },
  { key: "Alt-A", run: np }
].concat(Xp);
class bn {
  constructor(t2, e2, i2, n2, r2, o2, l2, h2, a2, c2 = 0, f2) {
    this.p = t2, this.stack = e2, this.state = i2, this.reducePos = n2, this.pos = r2, this.score = o2, this.buffer = l2, this.bufferBase = h2, this.curContext = a2, this.lookAhead = c2, this.parent = f2;
  }
  toString() {
    return `[${this.stack.filter((t2, e2) => e2 % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
  }
  static start(t2, e2, i2 = 0) {
    let n2 = t2.parser.context;
    return new bn(t2, [], e2, i2, i2, 0, [], 0, n2 ? new To(n2, n2.start) : null, 0, null);
  }
  get context() {
    return this.curContext ? this.curContext.context : null;
  }
  pushState(t2, e2) {
    this.stack.push(this.state, e2, this.bufferBase + this.buffer.length), this.state = t2;
  }
  reduce(t2) {
    var e2;
    let i2 = t2 >> 19, n2 = t2 & 65535, { parser: r2 } = this.p, o2 = r2.dynamicPrecedence(n2);
    if (o2 && (this.score += o2), i2 == 0) {
      this.pushState(r2.getGoto(this.state, n2, true), this.reducePos), n2 < r2.minRepeatTerm && this.storeNode(n2, this.reducePos, this.reducePos, 4, true), this.reduceContext(n2, this.reducePos);
      return;
    }
    let l2 = this.stack.length - (i2 - 1) * 3 - (t2 & 262144 ? 6 : 0), h2 = l2 ? this.stack[l2 - 2] : this.p.ranges[0].from, a2 = this.reducePos - h2;
    a2 >= 2e3 && !(!((e2 = this.p.parser.nodeSet.types[n2]) === null || e2 === void 0) && e2.isAnonymous) && (h2 == this.p.lastBigReductionStart ? (this.p.bigReductionCount++, this.p.lastBigReductionSize = a2) : this.p.lastBigReductionSize < a2 && (this.p.bigReductionCount = 1, this.p.lastBigReductionStart = h2, this.p.lastBigReductionSize = a2));
    let c2 = l2 ? this.stack[l2 - 1] : 0, f2 = this.bufferBase + this.buffer.length - c2;
    if (n2 < r2.minRepeatTerm || t2 & 131072) {
      let u2 = r2.stateFlag(
        this.state,
        1
      ) ? this.pos : this.reducePos;
      this.storeNode(n2, h2, u2, f2 + 4, true);
    }
    if (t2 & 262144)
      this.state = this.stack[l2];
    else {
      let u2 = this.stack[l2 - 3];
      this.state = r2.getGoto(u2, n2, true);
    }
    for (; this.stack.length > l2; )
      this.stack.pop();
    this.reduceContext(n2, h2);
  }
  storeNode(t2, e2, i2, n2 = 4, r2 = false) {
    if (t2 == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
      let o2 = this, l2 = this.buffer.length;
      if (l2 == 0 && o2.parent && (l2 = o2.bufferBase - o2.parent.bufferBase, o2 = o2.parent), l2 > 0 && o2.buffer[l2 - 4] == 0 && o2.buffer[l2 - 1] > -1) {
        if (e2 == i2)
          return;
        if (o2.buffer[l2 - 2] >= e2) {
          o2.buffer[l2 - 2] = i2;
          return;
        }
      }
    }
    if (!r2 || this.pos == i2)
      this.buffer.push(t2, e2, i2, n2);
    else {
      let o2 = this.buffer.length;
      if (o2 > 0 && this.buffer[o2 - 4] != 0)
        for (; o2 > 0 && this.buffer[o2 - 2] > i2; )
          this.buffer[o2] = this.buffer[o2 - 4], this.buffer[o2 + 1] = this.buffer[o2 - 3], this.buffer[o2 + 2] = this.buffer[o2 - 2], this.buffer[o2 + 3] = this.buffer[o2 - 1], o2 -= 4, n2 > 4 && (n2 -= 4);
      this.buffer[o2] = t2, this.buffer[o2 + 1] = e2, this.buffer[o2 + 2] = i2, this.buffer[o2 + 3] = n2;
    }
  }
  shift(t2, e2, i2) {
    let n2 = this.pos;
    if (t2 & 131072)
      this.pushState(t2 & 65535, this.pos);
    else if (t2 & 262144)
      this.pos = i2, this.shiftContext(e2, n2), e2 <= this.p.parser.maxNode && this.buffer.push(e2, n2, i2, 4);
    else {
      let r2 = t2, { parser: o2 } = this.p;
      (i2 > this.pos || e2 <= o2.maxNode) && (this.pos = i2, o2.stateFlag(
        r2,
        1
      ) || (this.reducePos = i2)), this.pushState(r2, n2), this.shiftContext(e2, n2), e2 <= o2.maxNode && this.buffer.push(e2, n2, i2, 4);
    }
  }
  apply(t2, e2, i2) {
    t2 & 65536 ? this.reduce(t2) : this.shift(t2, e2, i2);
  }
  useNode(t2, e2) {
    let i2 = this.p.reused.length - 1;
    (i2 < 0 || this.p.reused[i2] != t2) && (this.p.reused.push(t2), i2++);
    let n2 = this.pos;
    this.reducePos = this.pos = n2 + t2.length, this.pushState(e2, n2), this.buffer.push(
      i2,
      n2,
      this.reducePos,
      -1
    ), this.curContext && this.updateContext(this.curContext.tracker.reuse(this.curContext.context, t2, this, this.p.stream.reset(this.pos - t2.length)));
  }
  split() {
    let t2 = this, e2 = t2.buffer.length;
    for (; e2 > 0 && t2.buffer[e2 - 2] > t2.reducePos; )
      e2 -= 4;
    let i2 = t2.buffer.slice(e2), n2 = t2.bufferBase + e2;
    for (; t2 && n2 == t2.bufferBase; )
      t2 = t2.parent;
    return new bn(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, i2, n2, this.curContext, this.lookAhead, t2);
  }
  recoverByDelete(t2, e2) {
    let i2 = t2 <= this.p.parser.maxNode;
    i2 && this.storeNode(t2, this.pos, e2, 4), this.storeNode(0, this.pos, e2, i2 ? 8 : 4), this.pos = this.reducePos = e2, this.score -= 190;
  }
  canShift(t2) {
    for (let e2 = new Zp(this); ; ) {
      let i2 = this.p.parser.stateSlot(
        e2.state,
        4
      ) || this.p.parser.hasAction(e2.state, t2);
      if (i2 == 0)
        return false;
      if (!(i2 & 65536))
        return true;
      e2.reduce(i2);
    }
  }
  recoverByInsert(t2) {
    if (this.stack.length >= 300)
      return [];
    let e2 = this.p.parser.nextStates(this.state);
    if (e2.length > 4 << 1 || this.stack.length >= 120) {
      let n2 = [];
      for (let r2 = 0, o2; r2 < e2.length; r2 += 2)
        (o2 = e2[r2 + 1]) != this.state && this.p.parser.hasAction(o2, t2) && n2.push(e2[r2], o2);
      if (this.stack.length < 120)
        for (let r2 = 0; n2.length < 4 << 1 && r2 < e2.length; r2 += 2) {
          let o2 = e2[r2 + 1];
          n2.some((l2, h2) => h2 & 1 && l2 == o2) || n2.push(e2[r2], o2);
        }
      e2 = n2;
    }
    let i2 = [];
    for (let n2 = 0; n2 < e2.length && i2.length < 4; n2 += 2) {
      let r2 = e2[n2 + 1];
      if (r2 == this.state)
        continue;
      let o2 = this.split();
      o2.pushState(r2, this.pos), o2.storeNode(0, o2.pos, o2.pos, 4, true), o2.shiftContext(e2[n2], this.pos), o2.score -= 200, i2.push(o2);
    }
    return i2;
  }
  forceReduce() {
    let t2 = this.p.parser.stateSlot(
      this.state,
      5
    );
    if (!(t2 & 65536))
      return false;
    let { parser: e2 } = this.p;
    if (!e2.validAction(this.state, t2)) {
      let i2 = t2 >> 19, n2 = t2 & 65535, r2 = this.stack.length - i2 * 3;
      if (r2 < 0 || e2.getGoto(this.stack[r2], n2, false) < 0)
        return false;
      this.storeNode(0, this.reducePos, this.reducePos, 4, true), this.score -= 100;
    }
    return this.reducePos = this.pos, this.reduce(t2), true;
  }
  forceAll() {
    for (; !this.p.parser.stateFlag(
      this.state,
      2
    ); )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, true);
        break;
      }
    return this;
  }
  get deadEnd() {
    if (this.stack.length != 3)
      return false;
    let { parser: t2 } = this.p;
    return t2.data[t2.stateSlot(
      this.state,
      1
    )] == 65535 && !t2.stateSlot(
      this.state,
      4
    );
  }
  restart() {
    this.state = this.stack[0], this.stack.length = 0;
  }
  sameState(t2) {
    if (this.state != t2.state || this.stack.length != t2.stack.length)
      return false;
    for (let e2 = 0; e2 < this.stack.length; e2 += 3)
      if (this.stack[e2] != t2.stack[e2])
        return false;
    return true;
  }
  get parser() {
    return this.p.parser;
  }
  dialectEnabled(t2) {
    return this.p.parser.dialect.flags[t2];
  }
  shiftContext(t2, e2) {
    this.curContext && this.updateContext(this.curContext.tracker.shift(this.curContext.context, t2, this, this.p.stream.reset(e2)));
  }
  reduceContext(t2, e2) {
    this.curContext && this.updateContext(this.curContext.tracker.reduce(this.curContext.context, t2, this, this.p.stream.reset(e2)));
  }
  emitContext() {
    let t2 = this.buffer.length - 1;
    (t2 < 0 || this.buffer[t2] != -3) && this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
  }
  emitLookAhead() {
    let t2 = this.buffer.length - 1;
    (t2 < 0 || this.buffer[t2] != -4) && this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
  }
  updateContext(t2) {
    if (t2 != this.curContext.context) {
      let e2 = new To(this.curContext.tracker, t2);
      e2.hash != this.curContext.hash && this.emitContext(), this.curContext = e2;
    }
  }
  setLookAhead(t2) {
    t2 > this.lookAhead && (this.emitLookAhead(), this.lookAhead = t2);
  }
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(), this.lookAhead > 0 && this.emitLookAhead();
  }
}
class To {
  constructor(t2, e2) {
    this.tracker = t2, this.context = e2, this.hash = t2.strict ? t2.hash(e2) : 0;
  }
}
var Po;
(function(s) {
  s[s.Insert = 200] = "Insert", s[s.Delete = 190] = "Delete", s[s.Reduce = 100] = "Reduce", s[s.MaxNext = 4] = "MaxNext", s[s.MaxInsertStackDepth = 300] = "MaxInsertStackDepth", s[s.DampenInsertStackDepth = 120] = "DampenInsertStackDepth", s[s.MinBigReduction = 2e3] = "MinBigReduction";
})(Po || (Po = {}));
class Zp {
  constructor(t2) {
    this.start = t2, this.state = t2.state, this.stack = t2.stack, this.base = this.stack.length;
  }
  reduce(t2) {
    let e2 = t2 & 65535, i2 = t2 >> 19;
    i2 == 0 ? (this.stack == this.start.stack && (this.stack = this.stack.slice()), this.stack.push(this.state, 0, 0), this.base += 3) : this.base -= (i2 - 1) * 3;
    let n2 = this.start.p.parser.getGoto(this.stack[this.base - 3], e2, true);
    this.state = n2;
  }
}
class kn {
  constructor(t2, e2, i2) {
    this.stack = t2, this.pos = e2, this.index = i2, this.buffer = t2.buffer, this.index == 0 && this.maybeNext();
  }
  static create(t2, e2 = t2.bufferBase + t2.buffer.length) {
    return new kn(t2, e2, e2 - t2.bufferBase);
  }
  maybeNext() {
    let t2 = this.stack.parent;
    t2 != null && (this.index = this.stack.bufferBase - t2.bufferBase, this.stack = t2, this.buffer = t2.buffer);
  }
  get id() {
    return this.buffer[this.index - 4];
  }
  get start() {
    return this.buffer[this.index - 3];
  }
  get end() {
    return this.buffer[this.index - 2];
  }
  get size() {
    return this.buffer[this.index - 1];
  }
  next() {
    this.index -= 4, this.pos -= 4, this.index == 0 && this.maybeNext();
  }
  fork() {
    return new kn(this.stack, this.pos, this.index);
  }
}
function zi(s, t2 = Uint16Array) {
  if (typeof s != "string")
    return s;
  let e2 = null;
  for (let i2 = 0, n2 = 0; i2 < s.length; ) {
    let r2 = 0;
    for (; ; ) {
      let o2 = s.charCodeAt(i2++), l2 = false;
      if (o2 == 126) {
        r2 = 65535;
        break;
      }
      o2 >= 92 && o2--, o2 >= 34 && o2--;
      let h2 = o2 - 32;
      if (h2 >= 46 && (h2 -= 46, l2 = true), r2 += h2, l2)
        break;
      r2 *= 46;
    }
    e2 ? e2[n2++] = r2 : e2 = new t2(r2);
  }
  return e2;
}
class Ji {
  constructor() {
    this.start = -1, this.value = -1, this.end = -1, this.extended = -1, this.lookAhead = 0, this.mask = 0, this.context = 0;
  }
}
const Bo = new Ji();
class tg {
  constructor(t2, e2) {
    this.input = t2, this.ranges = e2, this.chunk = "", this.chunkOff = 0, this.chunk2 = "", this.chunk2Pos = 0, this.next = -1, this.token = Bo, this.rangeIndex = 0, this.pos = this.chunkPos = e2[0].from, this.range = e2[0], this.end = e2[e2.length - 1].to, this.readNext();
  }
  resolveOffset(t2, e2) {
    let i2 = this.range, n2 = this.rangeIndex, r2 = this.pos + t2;
    for (; r2 < i2.from; ) {
      if (!n2)
        return null;
      let o2 = this.ranges[--n2];
      r2 -= i2.from - o2.to, i2 = o2;
    }
    for (; e2 < 0 ? r2 > i2.to : r2 >= i2.to; ) {
      if (n2 == this.ranges.length - 1)
        return null;
      let o2 = this.ranges[++n2];
      r2 += o2.from - i2.to, i2 = o2;
    }
    return r2;
  }
  clipPos(t2) {
    if (t2 >= this.range.from && t2 < this.range.to)
      return t2;
    for (let e2 of this.ranges)
      if (e2.to > t2)
        return Math.max(t2, e2.from);
    return this.end;
  }
  peek(t2) {
    let e2 = this.chunkOff + t2, i2, n2;
    if (e2 >= 0 && e2 < this.chunk.length)
      i2 = this.pos + t2, n2 = this.chunk.charCodeAt(e2);
    else {
      let r2 = this.resolveOffset(t2, 1);
      if (r2 == null)
        return -1;
      if (i2 = r2, i2 >= this.chunk2Pos && i2 < this.chunk2Pos + this.chunk2.length)
        n2 = this.chunk2.charCodeAt(i2 - this.chunk2Pos);
      else {
        let o2 = this.rangeIndex, l2 = this.range;
        for (; l2.to <= i2; )
          l2 = this.ranges[++o2];
        this.chunk2 = this.input.chunk(this.chunk2Pos = i2), i2 + this.chunk2.length > l2.to && (this.chunk2 = this.chunk2.slice(0, l2.to - i2)), n2 = this.chunk2.charCodeAt(0);
      }
    }
    return i2 >= this.token.lookAhead && (this.token.lookAhead = i2 + 1), n2;
  }
  acceptToken(t2, e2 = 0) {
    let i2 = e2 ? this.resolveOffset(e2, -1) : this.pos;
    if (i2 == null || i2 < this.token.start)
      throw new RangeError("Token end out of bounds");
    this.token.value = t2, this.token.end = i2;
  }
  getChunk() {
    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
      let { chunk: t2, chunkPos: e2 } = this;
      this.chunk = this.chunk2, this.chunkPos = this.chunk2Pos, this.chunk2 = t2, this.chunk2Pos = e2, this.chunkOff = this.pos - this.chunkPos;
    } else {
      this.chunk2 = this.chunk, this.chunk2Pos = this.chunkPos;
      let t2 = this.input.chunk(this.pos), e2 = this.pos + t2.length;
      this.chunk = e2 > this.range.to ? t2.slice(0, this.range.to - this.pos) : t2, this.chunkPos = this.pos, this.chunkOff = 0;
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length && (this.getChunk(), this.chunkOff == this.chunk.length) ? this.next = -1 : this.next = this.chunk.charCodeAt(this.chunkOff);
  }
  advance(t2 = 1) {
    for (this.chunkOff += t2; this.pos + t2 >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1)
        return this.setDone();
      t2 -= this.range.to - this.pos, this.range = this.ranges[++this.rangeIndex], this.pos = this.range.from;
    }
    return this.pos += t2, this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1), this.readNext();
  }
  setDone() {
    return this.pos = this.chunkPos = this.end, this.range = this.ranges[this.rangeIndex = this.ranges.length - 1], this.chunk = "", this.next = -1;
  }
  reset(t2, e2) {
    if (e2 ? (this.token = e2, e2.start = t2, e2.lookAhead = t2 + 1, e2.value = e2.extended = -1) : this.token = Bo, this.pos != t2) {
      if (this.pos = t2, t2 == this.end)
        return this.setDone(), this;
      for (; t2 < this.range.from; )
        this.range = this.ranges[--this.rangeIndex];
      for (; t2 >= this.range.to; )
        this.range = this.ranges[++this.rangeIndex];
      t2 >= this.chunkPos && t2 < this.chunkPos + this.chunk.length ? this.chunkOff = t2 - this.chunkPos : (this.chunk = "", this.chunkOff = 0), this.readNext();
    }
    return this;
  }
  read(t2, e2) {
    if (t2 >= this.chunkPos && e2 <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(t2 - this.chunkPos, e2 - this.chunkPos);
    if (t2 >= this.chunk2Pos && e2 <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(t2 - this.chunk2Pos, e2 - this.chunk2Pos);
    if (t2 >= this.range.from && e2 <= this.range.to)
      return this.input.read(t2, e2);
    let i2 = "";
    for (let n2 of this.ranges) {
      if (n2.from >= e2)
        break;
      n2.to > t2 && (i2 += this.input.read(Math.max(n2.from, t2), Math.min(n2.to, e2)));
    }
    return i2;
  }
}
class ze {
  constructor(t2, e2) {
    this.data = t2, this.id = e2;
  }
  token(t2, e2) {
    let { parser: i2 } = e2.p;
    eg(this.data, t2, e2, this.id, i2.data, i2.tokenPrecTable);
  }
}
ze.prototype.contextual = ze.prototype.fallback = ze.prototype.extend = false;
ze.prototype.fallback = ze.prototype.extend = false;
function eg(s, t2, e2, i2, n2, r2) {
  let o2 = 0, l2 = 1 << i2, { dialect: h2 } = e2.p.parser;
  t:
    for (; l2 & s[o2]; ) {
      let a2 = s[o2 + 1];
      for (let d2 = o2 + 3; d2 < a2; d2 += 2)
        if ((s[d2 + 1] & l2) > 0) {
          let p2 = s[d2];
          if (h2.allows(p2) && (t2.token.value == -1 || t2.token.value == p2 || ig(p2, t2.token.value, n2, r2))) {
            t2.acceptToken(p2);
            break;
          }
        }
      let c2 = t2.next, f2 = 0, u2 = s[o2 + 2];
      if (t2.next < 0 && u2 > f2 && s[a2 + u2 * 3 - 3] == 65535 && s[a2 + u2 * 3 - 3] == 65535) {
        o2 = s[a2 + u2 * 3 - 1];
        continue t;
      }
      for (; f2 < u2; ) {
        let d2 = f2 + u2 >> 1, p2 = a2 + d2 + (d2 << 1), w = s[p2], g2 = s[p2 + 1] || 65536;
        if (c2 < w)
          u2 = d2;
        else if (c2 >= g2)
          f2 = d2 + 1;
        else {
          o2 = s[p2 + 2], t2.advance();
          continue t;
        }
      }
      break;
    }
}
function Ro(s, t2, e2) {
  for (let i2 = t2, n2; (n2 = s[i2]) != 65535; i2++)
    if (n2 == e2)
      return i2 - t2;
  return -1;
}
function ig(s, t2, e2, i2) {
  let n2 = Ro(e2, i2, t2);
  return n2 < 0 || Ro(e2, i2, s) < n2;
}
const Dt = typeof process < "u" && process.env && /\bparse\b/.test(process.env.LOG);
let Yn = null;
var Lo;
(function(s) {
  s[s.Margin = 25] = "Margin";
})(Lo || (Lo = {}));
function Eo(s, t2, e2) {
  let i2 = s.cursor(st.IncludeAnonymous);
  for (i2.moveTo(t2); ; )
    if (!(e2 < 0 ? i2.childBefore(t2) : i2.childAfter(t2)))
      for (; ; ) {
        if ((e2 < 0 ? i2.to < t2 : i2.from > t2) && !i2.type.isError)
          return e2 < 0 ? Math.max(0, Math.min(
            i2.to - 1,
            t2 - 25
          )) : Math.min(s.length, Math.max(
            i2.from + 1,
            t2 + 25
          ));
        if (e2 < 0 ? i2.prevSibling() : i2.nextSibling())
          break;
        if (!i2.parent())
          return e2 < 0 ? 0 : s.length;
      }
}
class ng {
  constructor(t2, e2) {
    this.fragments = t2, this.nodeSet = e2, this.i = 0, this.fragment = null, this.safeFrom = -1, this.safeTo = -1, this.trees = [], this.start = [], this.index = [], this.nextFragment();
  }
  nextFragment() {
    let t2 = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
    if (t2) {
      for (this.safeFrom = t2.openStart ? Eo(t2.tree, t2.from + t2.offset, 1) - t2.offset : t2.from, this.safeTo = t2.openEnd ? Eo(t2.tree, t2.to + t2.offset, -1) - t2.offset : t2.to; this.trees.length; )
        this.trees.pop(), this.start.pop(), this.index.pop();
      this.trees.push(t2.tree), this.start.push(-t2.offset), this.index.push(0), this.nextStart = this.safeFrom;
    } else
      this.nextStart = 1e9;
  }
  nodeAt(t2) {
    if (t2 < this.nextStart)
      return null;
    for (; this.fragment && this.safeTo <= t2; )
      this.nextFragment();
    if (!this.fragment)
      return null;
    for (; ; ) {
      let e2 = this.trees.length - 1;
      if (e2 < 0)
        return this.nextFragment(), null;
      let i2 = this.trees[e2], n2 = this.index[e2];
      if (n2 == i2.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop();
        continue;
      }
      let r2 = i2.children[n2], o2 = this.start[e2] + i2.positions[n2];
      if (o2 > t2)
        return this.nextStart = o2, null;
      if (r2 instanceof J) {
        if (o2 == t2) {
          if (o2 < this.safeFrom)
            return null;
          let l2 = o2 + r2.length;
          if (l2 <= this.safeTo) {
            let h2 = r2.prop(P.lookAhead);
            if (!h2 || l2 + h2 < this.fragment.to)
              return r2;
          }
        }
        this.index[e2]++, o2 + r2.length >= Math.max(this.safeFrom, t2) && (this.trees.push(r2), this.start.push(o2), this.index.push(0));
      } else
        this.index[e2]++, this.nextStart = o2 + r2.length;
    }
  }
}
class sg {
  constructor(t2, e2) {
    this.stream = e2, this.tokens = [], this.mainToken = null, this.actions = [], this.tokens = t2.tokenizers.map((i2) => new Ji());
  }
  getActions(t2) {
    let e2 = 0, i2 = null, { parser: n2 } = t2.p, { tokenizers: r2 } = n2, o2 = n2.stateSlot(
      t2.state,
      3
    ), l2 = t2.curContext ? t2.curContext.hash : 0, h2 = 0;
    for (let a2 = 0; a2 < r2.length; a2++) {
      if (!(1 << a2 & o2))
        continue;
      let c2 = r2[a2], f2 = this.tokens[a2];
      if (!(i2 && !c2.fallback) && ((c2.contextual || f2.start != t2.pos || f2.mask != o2 || f2.context != l2) && (this.updateCachedToken(f2, c2, t2), f2.mask = o2, f2.context = l2), f2.lookAhead > f2.end + 25 && (h2 = Math.max(f2.lookAhead, h2)), f2.value != 0)) {
        let u2 = e2;
        if (f2.extended > -1 && (e2 = this.addActions(t2, f2.extended, f2.end, e2)), e2 = this.addActions(t2, f2.value, f2.end, e2), !c2.extend && (i2 = f2, e2 > u2))
          break;
      }
    }
    for (; this.actions.length > e2; )
      this.actions.pop();
    return h2 && t2.setLookAhead(h2), !i2 && t2.pos == this.stream.end && (i2 = new Ji(), i2.value = t2.p.parser.eofTerm, i2.start = i2.end = t2.pos, e2 = this.addActions(t2, i2.value, i2.end, e2)), this.mainToken = i2, this.actions;
  }
  getMainToken(t2) {
    if (this.mainToken)
      return this.mainToken;
    let e2 = new Ji(), { pos: i2, p: n2 } = t2;
    return e2.start = i2, e2.end = Math.min(i2 + 1, n2.stream.end), e2.value = i2 == n2.stream.end ? n2.parser.eofTerm : 0, e2;
  }
  updateCachedToken(t2, e2, i2) {
    let n2 = this.stream.clipPos(i2.pos);
    if (e2.token(this.stream.reset(n2, t2), i2), t2.value > -1) {
      let { parser: r2 } = i2.p;
      for (let o2 = 0; o2 < r2.specialized.length; o2++)
        if (r2.specialized[o2] == t2.value) {
          let l2 = r2.specializers[o2](this.stream.read(t2.start, t2.end), i2);
          if (l2 >= 0 && i2.p.parser.dialect.allows(l2 >> 1)) {
            l2 & 1 ? t2.extended = l2 >> 1 : t2.value = l2 >> 1;
            break;
          }
        }
    } else
      t2.value = 0, t2.end = this.stream.clipPos(n2 + 1);
  }
  putAction(t2, e2, i2, n2) {
    for (let r2 = 0; r2 < n2; r2 += 3)
      if (this.actions[r2] == t2)
        return n2;
    return this.actions[n2++] = t2, this.actions[n2++] = e2, this.actions[n2++] = i2, n2;
  }
  addActions(t2, e2, i2, n2) {
    let { state: r2 } = t2, { parser: o2 } = t2.p, { data: l2 } = o2;
    for (let h2 = 0; h2 < 2; h2++)
      for (let a2 = o2.stateSlot(
        r2,
        h2 ? 2 : 1
      ); ; a2 += 3) {
        if (l2[a2] == 65535)
          if (l2[a2 + 1] == 1)
            a2 = Qt(l2, a2 + 2);
          else {
            n2 == 0 && l2[a2 + 1] == 2 && (n2 = this.putAction(Qt(l2, a2 + 2), e2, i2, n2));
            break;
          }
        l2[a2] == e2 && (n2 = this.putAction(Qt(l2, a2 + 1), e2, i2, n2));
      }
    return n2;
  }
}
var No;
(function(s) {
  s[s.Distance = 5] = "Distance", s[s.MaxRemainingPerStep = 3] = "MaxRemainingPerStep", s[s.MinBufferLengthPrune = 500] = "MinBufferLengthPrune", s[s.ForceReduceLimit = 10] = "ForceReduceLimit", s[s.CutDepth = 15e3] = "CutDepth", s[s.CutTo = 9e3] = "CutTo", s[s.MaxLeftAssociativeReductionCount = 300] = "MaxLeftAssociativeReductionCount", s[s.MaxStackCount = 12] = "MaxStackCount";
})(No || (No = {}));
class rg {
  constructor(t2, e2, i2, n2) {
    this.parser = t2, this.input = e2, this.ranges = n2, this.recovering = 0, this.nextStackID = 9812, this.minStackPos = 0, this.reused = [], this.stoppedAt = null, this.lastBigReductionStart = -1, this.lastBigReductionSize = 0, this.bigReductionCount = 0, this.stream = new tg(e2, n2), this.tokens = new sg(t2, this.stream), this.topTerm = t2.top[1];
    let { from: r2 } = n2[0];
    this.stacks = [bn.start(this, t2.top[0], r2)], this.fragments = i2.length && this.stream.end - r2 > t2.bufferLength * 4 ? new ng(i2, t2.nodeSet) : null;
  }
  get parsedPos() {
    return this.minStackPos;
  }
  advance() {
    let t2 = this.stacks, e2 = this.minStackPos, i2 = this.stacks = [], n2, r2;
    if (this.bigReductionCount > 300 && t2.length == 1) {
      let [o2] = t2;
      for (; o2.forceReduce() && o2.stack.length && o2.stack[o2.stack.length - 2] >= this.lastBigReductionStart; )
        ;
      this.bigReductionCount = this.lastBigReductionSize = 0;
    }
    for (let o2 = 0; o2 < t2.length; o2++) {
      let l2 = t2[o2];
      for (; ; ) {
        if (this.tokens.mainToken = null, l2.pos > e2)
          i2.push(l2);
        else {
          if (this.advanceStack(l2, i2, t2))
            continue;
          {
            n2 || (n2 = [], r2 = []), n2.push(l2);
            let h2 = this.tokens.getMainToken(l2);
            r2.push(h2.value, h2.end);
          }
        }
        break;
      }
    }
    if (!i2.length) {
      let o2 = n2 && lg(n2);
      if (o2)
        return this.stackToTree(o2);
      if (this.parser.strict)
        throw Dt && n2 && console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none")), new SyntaxError("No parse at " + e2);
      this.recovering || (this.recovering = 5);
    }
    if (this.recovering && n2) {
      let o2 = this.stoppedAt != null && n2[0].pos > this.stoppedAt ? n2[0] : this.runRecovery(n2, r2, i2);
      if (o2)
        return this.stackToTree(o2.forceAll());
    }
    if (this.recovering) {
      let o2 = this.recovering == 1 ? 1 : this.recovering * 3;
      if (i2.length > o2)
        for (i2.sort((l2, h2) => h2.score - l2.score); i2.length > o2; )
          i2.pop();
      i2.some((l2) => l2.reducePos > e2) && this.recovering--;
    } else if (i2.length > 1) {
      t:
        for (let o2 = 0; o2 < i2.length - 1; o2++) {
          let l2 = i2[o2];
          for (let h2 = o2 + 1; h2 < i2.length; h2++) {
            let a2 = i2[h2];
            if (l2.sameState(a2) || l2.buffer.length > 500 && a2.buffer.length > 500)
              if ((l2.score - a2.score || l2.buffer.length - a2.buffer.length) > 0)
                i2.splice(h2--, 1);
              else {
                i2.splice(o2--, 1);
                continue t;
              }
          }
        }
      i2.length > 12 && i2.splice(
        12,
        i2.length - 12
      );
    }
    this.minStackPos = i2[0].pos;
    for (let o2 = 1; o2 < i2.length; o2++)
      i2[o2].pos < this.minStackPos && (this.minStackPos = i2[o2].pos);
    return null;
  }
  stopAt(t2) {
    if (this.stoppedAt != null && this.stoppedAt < t2)
      throw new RangeError("Can't move stoppedAt forward");
    this.stoppedAt = t2;
  }
  advanceStack(t2, e2, i2) {
    let n2 = t2.pos, { parser: r2 } = this, o2 = Dt ? this.stackID(t2) + " -> " : "";
    if (this.stoppedAt != null && n2 > this.stoppedAt)
      return t2.forceReduce() ? t2 : null;
    if (this.fragments) {
      let a2 = t2.curContext && t2.curContext.tracker.strict, c2 = a2 ? t2.curContext.hash : 0;
      for (let f2 = this.fragments.nodeAt(n2); f2; ) {
        let u2 = this.parser.nodeSet.types[f2.type.id] == f2.type ? r2.getGoto(t2.state, f2.type.id) : -1;
        if (u2 > -1 && f2.length && (!a2 || (f2.prop(P.contextHash) || 0) == c2))
          return t2.useNode(f2, u2), Dt && console.log(o2 + this.stackID(t2) + ` (via reuse of ${r2.getName(f2.type.id)})`), true;
        if (!(f2 instanceof J) || f2.children.length == 0 || f2.positions[0] > 0)
          break;
        let d2 = f2.children[0];
        if (d2 instanceof J && f2.positions[0] == 0)
          f2 = d2;
        else
          break;
      }
    }
    let l2 = r2.stateSlot(
      t2.state,
      4
    );
    if (l2 > 0)
      return t2.reduce(l2), Dt && console.log(o2 + this.stackID(t2) + ` (via always-reduce ${r2.getName(
        l2 & 65535
      )})`), true;
    if (t2.stack.length >= 15e3)
      for (; t2.stack.length > 9e3 && t2.forceReduce(); )
        ;
    let h2 = this.tokens.getActions(t2);
    for (let a2 = 0; a2 < h2.length; ) {
      let c2 = h2[a2++], f2 = h2[a2++], u2 = h2[a2++], d2 = a2 == h2.length || !i2, p2 = d2 ? t2 : t2.split();
      if (p2.apply(c2, f2, u2), Dt && console.log(o2 + this.stackID(p2) + ` (via ${c2 & 65536 ? `reduce of ${r2.getName(
        c2 & 65535
      )}` : "shift"} for ${r2.getName(f2)} @ ${n2}${p2 == t2 ? "" : ", split"})`), d2)
        return true;
      p2.pos > n2 ? e2.push(p2) : i2.push(p2);
    }
    return false;
  }
  advanceFully(t2, e2) {
    let i2 = t2.pos;
    for (; ; ) {
      if (!this.advanceStack(t2, null, null))
        return false;
      if (t2.pos > i2)
        return Vo(t2, e2), true;
    }
  }
  runRecovery(t2, e2, i2) {
    let n2 = null, r2 = false;
    for (let o2 = 0; o2 < t2.length; o2++) {
      let l2 = t2[o2], h2 = e2[o2 << 1], a2 = e2[(o2 << 1) + 1], c2 = Dt ? this.stackID(l2) + " -> " : "";
      if (l2.deadEnd && (r2 || (r2 = true, l2.restart(), Dt && console.log(c2 + this.stackID(l2) + " (restarted)"), this.advanceFully(l2, i2))))
        continue;
      let f2 = l2.split(), u2 = c2;
      for (let d2 = 0; f2.forceReduce() && d2 < 10 && (Dt && console.log(u2 + this.stackID(f2) + " (via force-reduce)"), !this.advanceFully(f2, i2)); d2++)
        Dt && (u2 = this.stackID(f2) + " -> ");
      for (let d2 of l2.recoverByInsert(h2))
        Dt && console.log(c2 + this.stackID(d2) + " (via recover-insert)"), this.advanceFully(d2, i2);
      this.stream.end > l2.pos ? (a2 == l2.pos && (a2++, h2 = 0), l2.recoverByDelete(h2, a2), Dt && console.log(c2 + this.stackID(l2) + ` (via recover-delete ${this.parser.getName(h2)})`), Vo(l2, i2)) : (!n2 || n2.score < l2.score) && (n2 = l2);
    }
    return n2;
  }
  stackToTree(t2) {
    return t2.close(), J.build({
      buffer: kn.create(t2),
      nodeSet: this.parser.nodeSet,
      topID: this.topTerm,
      maxBufferLength: this.parser.bufferLength,
      reused: this.reused,
      start: this.ranges[0].from,
      length: t2.pos - this.ranges[0].from,
      minRepeatType: this.parser.minRepeatTerm
    });
  }
  stackID(t2) {
    let e2 = (Yn || (Yn = /* @__PURE__ */ new WeakMap())).get(t2);
    return e2 || Yn.set(t2, e2 = String.fromCodePoint(this.nextStackID++)), e2 + t2;
  }
}
function Vo(s, t2) {
  for (let e2 = 0; e2 < t2.length; e2++) {
    let i2 = t2[e2];
    if (i2.pos == s.pos && i2.sameState(s)) {
      t2[e2].score < s.score && (t2[e2] = s);
      return;
    }
  }
  t2.push(s);
}
class og {
  constructor(t2, e2, i2) {
    this.source = t2, this.flags = e2, this.disabled = i2;
  }
  allows(t2) {
    return !this.disabled || this.disabled[t2] == 0;
  }
}
class xn extends uh {
  constructor(t2) {
    if (super(), this.wrappers = [], t2.version != 14)
      throw new RangeError(`Parser version (${t2.version}) doesn't match runtime version (${14})`);
    let e2 = t2.nodeNames.split(" ");
    this.minRepeatTerm = e2.length;
    for (let l2 = 0; l2 < t2.repeatNodeCount; l2++)
      e2.push("");
    let i2 = Object.keys(t2.topRules).map((l2) => t2.topRules[l2][1]), n2 = [];
    for (let l2 = 0; l2 < e2.length; l2++)
      n2.push([]);
    function r2(l2, h2, a2) {
      n2[l2].push([h2, h2.deserialize(String(a2))]);
    }
    if (t2.nodeProps)
      for (let l2 of t2.nodeProps) {
        let h2 = l2[0];
        typeof h2 == "string" && (h2 = P[h2]);
        for (let a2 = 1; a2 < l2.length; ) {
          let c2 = l2[a2++];
          if (c2 >= 0)
            r2(c2, h2, l2[a2++]);
          else {
            let f2 = l2[a2 + -c2];
            for (let u2 = -c2; u2 > 0; u2--)
              r2(l2[a2++], h2, f2);
            a2++;
          }
        }
      }
    this.nodeSet = new Zs(e2.map((l2, h2) => yt.define({
      name: h2 >= this.minRepeatTerm ? void 0 : l2,
      id: h2,
      props: n2[h2],
      top: i2.indexOf(h2) > -1,
      error: h2 == 0,
      skipped: t2.skippedNodes && t2.skippedNodes.indexOf(h2) > -1
    }))), t2.propSources && (this.nodeSet = this.nodeSet.extend(...t2.propSources)), this.strict = false, this.bufferLength = ah;
    let o2 = zi(t2.tokenData);
    this.context = t2.context, this.specializerSpecs = t2.specialized || [], this.specialized = new Uint16Array(this.specializerSpecs.length);
    for (let l2 = 0; l2 < this.specializerSpecs.length; l2++)
      this.specialized[l2] = this.specializerSpecs[l2].term;
    this.specializers = this.specializerSpecs.map(Io), this.states = zi(t2.states, Uint32Array), this.data = zi(t2.stateData), this.goto = zi(t2.goto), this.maxTerm = t2.maxTerm, this.tokenizers = t2.tokenizers.map((l2) => typeof l2 == "number" ? new ze(o2, l2) : l2), this.topRules = t2.topRules, this.dialects = t2.dialects || {}, this.dynamicPrecedences = t2.dynamicPrecedences || null, this.tokenPrecTable = t2.tokenPrec, this.termNames = t2.termNames || null, this.maxNode = this.nodeSet.types.length - 1, this.dialect = this.parseDialect(), this.top = this.topRules[Object.keys(this.topRules)[0]];
  }
  createParse(t2, e2, i2) {
    let n2 = new rg(this, t2, e2, i2);
    for (let r2 of this.wrappers)
      n2 = r2(n2, t2, e2, i2);
    return n2;
  }
  getGoto(t2, e2, i2 = false) {
    let n2 = this.goto;
    if (e2 >= n2[0])
      return -1;
    for (let r2 = n2[e2 + 1]; ; ) {
      let o2 = n2[r2++], l2 = o2 & 1, h2 = n2[r2++];
      if (l2 && i2)
        return h2;
      for (let a2 = r2 + (o2 >> 1); r2 < a2; r2++)
        if (n2[r2] == t2)
          return h2;
      if (l2)
        return -1;
    }
  }
  hasAction(t2, e2) {
    let i2 = this.data;
    for (let n2 = 0; n2 < 2; n2++)
      for (let r2 = this.stateSlot(
        t2,
        n2 ? 2 : 1
      ), o2; ; r2 += 3) {
        if ((o2 = i2[r2]) == 65535)
          if (i2[r2 + 1] == 1)
            o2 = i2[r2 = Qt(i2, r2 + 2)];
          else {
            if (i2[r2 + 1] == 2)
              return Qt(i2, r2 + 2);
            break;
          }
        if (o2 == e2 || o2 == 0)
          return Qt(i2, r2 + 1);
      }
    return 0;
  }
  stateSlot(t2, e2) {
    return this.states[t2 * 6 + e2];
  }
  stateFlag(t2, e2) {
    return (this.stateSlot(
      t2,
      0
    ) & e2) > 0;
  }
  validAction(t2, e2) {
    if (e2 == this.stateSlot(
      t2,
      4
    ))
      return true;
    for (let i2 = this.stateSlot(
      t2,
      1
    ); ; i2 += 3) {
      if (this.data[i2] == 65535)
        if (this.data[i2 + 1] == 1)
          i2 = Qt(this.data, i2 + 2);
        else
          return false;
      if (e2 == Qt(this.data, i2 + 1))
        return true;
    }
  }
  nextStates(t2) {
    let e2 = [];
    for (let i2 = this.stateSlot(
      t2,
      1
    ); ; i2 += 3) {
      if (this.data[i2] == 65535)
        if (this.data[i2 + 1] == 1)
          i2 = Qt(this.data, i2 + 2);
        else
          break;
      if (!(this.data[i2 + 2] & 1)) {
        let n2 = this.data[i2 + 1];
        e2.some((r2, o2) => o2 & 1 && r2 == n2) || e2.push(this.data[i2], n2);
      }
    }
    return e2;
  }
  configure(t2) {
    let e2 = Object.assign(Object.create(xn.prototype), this);
    if (t2.props && (e2.nodeSet = this.nodeSet.extend(...t2.props)), t2.top) {
      let i2 = this.topRules[t2.top];
      if (!i2)
        throw new RangeError(`Invalid top rule name ${t2.top}`);
      e2.top = i2;
    }
    return t2.tokenizers && (e2.tokenizers = this.tokenizers.map((i2) => {
      let n2 = t2.tokenizers.find((r2) => r2.from == i2);
      return n2 ? n2.to : i2;
    })), t2.specializers && (e2.specializers = this.specializers.slice(), e2.specializerSpecs = this.specializerSpecs.map((i2, n2) => {
      let r2 = t2.specializers.find((l2) => l2.from == i2.external);
      if (!r2)
        return i2;
      let o2 = Object.assign(Object.assign({}, i2), { external: r2.to });
      return e2.specializers[n2] = Io(o2), o2;
    })), t2.contextTracker && (e2.context = t2.contextTracker), t2.dialect && (e2.dialect = this.parseDialect(t2.dialect)), t2.strict != null && (e2.strict = t2.strict), t2.wrap && (e2.wrappers = e2.wrappers.concat(t2.wrap)), t2.bufferLength != null && (e2.bufferLength = t2.bufferLength), e2;
  }
  hasWrappers() {
    return this.wrappers.length > 0;
  }
  getName(t2) {
    return this.termNames ? this.termNames[t2] : String(t2 <= this.maxNode && this.nodeSet.types[t2].name || t2);
  }
  get eofTerm() {
    return this.maxNode + 1;
  }
  get topNode() {
    return this.nodeSet.types[this.top[1]];
  }
  dynamicPrecedence(t2) {
    let e2 = this.dynamicPrecedences;
    return e2 == null ? 0 : e2[t2] || 0;
  }
  parseDialect(t2) {
    let e2 = Object.keys(this.dialects), i2 = e2.map(() => false);
    if (t2)
      for (let r2 of t2.split(" ")) {
        let o2 = e2.indexOf(r2);
        o2 >= 0 && (i2[o2] = true);
      }
    let n2 = null;
    for (let r2 = 0; r2 < e2.length; r2++)
      if (!i2[r2])
        for (let o2 = this.dialects[e2[r2]], l2; (l2 = this.data[o2++]) != 65535; )
          (n2 || (n2 = new Uint8Array(this.maxTerm + 1)))[l2] = 1;
    return new og(t2, i2, n2);
  }
  static deserialize(t2) {
    return new xn(t2);
  }
}
function Qt(s, t2) {
  return s[t2] | s[t2 + 1] << 16;
}
function lg(s) {
  let t2 = null;
  for (let e2 of s) {
    let i2 = e2.p.stoppedAt;
    (e2.pos == e2.p.stream.end || i2 != null && e2.pos > i2) && e2.p.parser.stateFlag(
      e2.state,
      2
    ) && (!t2 || t2.score < e2.score) && (t2 = e2);
  }
  return t2;
}
function Io(s) {
  if (s.external) {
    let t2 = s.extend ? 1 : 0;
    return (e2, i2) => s.external(e2, i2) << 1 | t2;
  }
  return s.get;
}
const hg = dh({
  String: m$1.string,
  Number: m$1.number,
  "True False": m$1.bool,
  PropertyName: m$1.propertyName,
  Null: m$1.null,
  ",": m$1.separator,
  "[ ]": m$1.squareBracket,
  "{ }": m$1.brace
}), ag = xn.deserialize({
  version: 14,
  states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
  stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
  goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
  nodeNames: "\u26A0 JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
  maxTerm: 25,
  nodeProps: [
    ["openedBy", 7, "{", 12, "["],
    ["closedBy", 8, "}", 13, "]"]
  ],
  propSources: [hg],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~",
  tokenizers: [0],
  topRules: { JsonText: [0, 1] },
  tokenPrec: 0
}), cg = /* @__PURE__ */ pn.define({
  name: "json",
  parser: /* @__PURE__ */ ag.configure({
    props: [
      /* @__PURE__ */ wh.add({
        Object: /* @__PURE__ */ wo({ except: /^\s*\}/ }),
        Array: /* @__PURE__ */ wo({ except: /^\s*\]/ })
      }),
      /* @__PURE__ */ bh.add({
        "Object Array": Od
      })
    ]
  }),
  languageData: {
    closeBrackets: { brackets: ["[", "{", '"'] },
    indentOnInput: /^\s*[\}\]]$/
  }
});
function fg() {
  return new pd(cg);
}
function $t() {
  var s = arguments[0];
  typeof s == "string" && (s = document.createElement(s));
  var t2 = 1, e2 = arguments[1];
  if (e2 && typeof e2 == "object" && e2.nodeType == null && !Array.isArray(e2)) {
    for (var i2 in e2)
      if (Object.prototype.hasOwnProperty.call(e2, i2)) {
        var n2 = e2[i2];
        typeof n2 == "string" ? s.setAttribute(i2, n2) : n2 != null && (s[i2] = n2);
      }
    t2++;
  }
  for (; t2 < arguments.length; t2++)
    ia(s, arguments[t2]);
  return s;
}
function ia(s, t2) {
  if (typeof t2 == "string")
    s.appendChild(document.createTextNode(t2));
  else if (t2 != null)
    if (t2.nodeType != null)
      s.appendChild(t2);
    else if (Array.isArray(t2))
      for (var e2 = 0; e2 < t2.length; e2++)
        ia(s, t2[e2]);
    else
      throw new RangeError("Unsupported child node: " + t2);
}
class ug {
  constructor(t2, e2, i2) {
    this.from = t2, this.to = e2, this.diagnostic = i2;
  }
}
class Se {
  constructor(t2, e2, i2) {
    this.diagnostics = t2, this.panel = e2, this.selected = i2;
  }
  static init(t2, e2, i2) {
    let n2 = t2, r2 = i2.facet(Ve).markerFilter;
    r2 && (n2 = r2(n2));
    let o2 = T.set(n2.map((l2) => l2.from == l2.to || l2.from == l2.to - 1 && i2.doc.lineAt(l2.from).to == l2.from ? T.widget({
      widget: new vg(l2),
      diagnostic: l2
    }).range(l2.from) : T.mark({
      attributes: { class: "cm-lintRange cm-lintRange-" + l2.severity },
      diagnostic: l2
    }).range(l2.from, l2.to)), true);
    return new Se(o2, e2, Je(o2));
  }
}
function Je(s, t2 = null, e2 = 0) {
  let i2 = null;
  return s.between(e2, 1e9, (n2, r2, { spec: o2 }) => {
    if (!(t2 && o2.diagnostic != t2))
      return i2 = new ug(n2, r2, o2.diagnostic), false;
  }), i2;
}
function dg(s, t2) {
  return !!(s.effects.some((e2) => e2.is(ar)) || s.changes.touchesRange(t2.pos));
}
function na(s, t2) {
  return s.field(vt, false) ? t2 : t2.concat(F.appendConfig.of([
    vt,
    A$2.decorations.compute([vt], (e2) => {
      let { selected: i2, panel: n2 } = e2.field(vt);
      return !i2 || !n2 || i2.from == i2.to ? T.none : T.set([
        gg.range(i2.from, i2.to)
      ]);
    }),
    Fu(mg, { hideOn: dg }),
    Cg
  ]));
}
function pg(s, t2) {
  return {
    effects: na(s, [ar.of(t2)])
  };
}
const ar = /* @__PURE__ */ F.define(), cr = /* @__PURE__ */ F.define(), sa = /* @__PURE__ */ F.define(), vt = /* @__PURE__ */ Bt.define({
  create() {
    return new Se(T.none, null, null);
  },
  update(s, t2) {
    if (t2.docChanged) {
      let e2 = s.diagnostics.map(t2.changes), i2 = null;
      if (s.selected) {
        let n2 = t2.changes.mapPos(s.selected.from, 1);
        i2 = Je(e2, s.selected.diagnostic, n2) || Je(e2, null, n2);
      }
      s = new Se(e2, s.panel, i2);
    }
    for (let e2 of t2.effects)
      e2.is(ar) ? s = Se.init(e2.value, s.panel, t2.state) : e2.is(cr) ? s = new Se(s.diagnostics, e2.value ? En.open : null, s.selected) : e2.is(sa) && (s = new Se(s.diagnostics, s.panel, e2.value));
    return s;
  },
  provide: (s) => [
    Rs.from(s, (t2) => t2.panel),
    A$2.decorations.from(s, (t2) => t2.diagnostics)
  ]
}), gg = /* @__PURE__ */ T.mark({ class: "cm-lintRange cm-lintRange-active" });
function mg(s, t2, e2) {
  let { diagnostics: i2 } = s.state.field(vt), n2 = [], r2 = 2e8, o2 = 0;
  i2.between(t2 - (e2 < 0 ? 1 : 0), t2 + (e2 > 0 ? 1 : 0), (h2, a2, { spec: c2 }) => {
    t2 >= h2 && t2 <= a2 && (h2 == a2 || (t2 > h2 || e2 > 0) && (t2 < a2 || e2 < 0)) && (n2.push(c2.diagnostic), r2 = Math.min(h2, r2), o2 = Math.max(a2, o2));
  });
  let l2 = s.state.facet(Ve).tooltipFilter;
  return l2 && (n2 = l2(n2)), n2.length ? {
    pos: r2,
    end: o2,
    above: s.state.doc.lineAt(r2).to < o2,
    create() {
      return { dom: wg(s, n2) };
    }
  } : null;
}
function wg(s, t2) {
  return $t("ul", { class: "cm-tooltip-lint" }, t2.map((e2) => oa(s, e2, false)));
}
const yg = (s) => {
  let t2 = s.state.field(vt, false);
  (!t2 || !t2.panel) && s.dispatch({ effects: na(s.state, [cr.of(true)]) });
  let e2 = _u(s, En.open);
  return e2 && e2.dom.querySelector(".cm-panel-lint ul").focus(), true;
}, Ho = (s) => {
  let t2 = s.state.field(vt, false);
  return !t2 || !t2.panel ? false : (s.dispatch({ effects: cr.of(false) }), true);
}, bg = (s) => {
  let t2 = s.state.field(vt, false);
  if (!t2)
    return false;
  let e2 = s.state.selection.main, i2 = t2.diagnostics.iter(e2.to + 1);
  return !i2.value && (i2 = t2.diagnostics.iter(0), !i2.value || i2.from == e2.from && i2.to == e2.to) ? false : (s.dispatch({ selection: { anchor: i2.from, head: i2.to }, scrollIntoView: true }), true);
}, kg = [
  { key: "Mod-Shift-m", run: yg, preventDefault: true },
  { key: "F8", run: bg }
], xg = /* @__PURE__ */ wt.fromClass(class {
  constructor(s) {
    this.view = s, this.timeout = -1, this.set = true;
    let { delay: t2 } = s.state.facet(Ve);
    this.lintTime = Date.now() + t2, this.run = this.run.bind(this), this.timeout = setTimeout(this.run, t2);
  }
  run() {
    let s = Date.now();
    if (s < this.lintTime - 10)
      setTimeout(this.run, this.lintTime - s);
    else {
      this.set = false;
      let { state: t2 } = this.view, { sources: e2 } = t2.facet(Ve);
      Promise.all(e2.map((i2) => Promise.resolve(i2(this.view)))).then((i2) => {
        let n2 = i2.reduce((r2, o2) => r2.concat(o2));
        this.view.state.doc == t2.doc && this.view.dispatch(pg(this.view.state, n2));
      }, (i2) => {
        zt(this.view.state, i2);
      });
    }
  }
  update(s) {
    let t2 = s.state.facet(Ve);
    (s.docChanged || t2 != s.startState.facet(Ve)) && (this.lintTime = Date.now() + t2.delay, this.set || (this.set = true, this.timeout = setTimeout(this.run, t2.delay)));
  }
  force() {
    this.set && (this.lintTime = Date.now(), this.run());
  }
  destroy() {
    clearTimeout(this.timeout);
  }
}), Ve = /* @__PURE__ */ v$2.define({
  combine(s) {
    return Object.assign({ sources: s.map((t2) => t2.source) }, Sn(s.map((t2) => t2.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null
    }));
  },
  enables: xg
});
function ra(s) {
  let t2 = [];
  if (s)
    t:
      for (let { name: e2 } of s) {
        for (let i2 = 0; i2 < e2.length; i2++) {
          let n2 = e2[i2];
          if (/[a-zA-Z]/.test(n2) && !t2.some((r2) => r2.toLowerCase() == n2.toLowerCase())) {
            t2.push(n2);
            continue t;
          }
        }
        t2.push("");
      }
  return t2;
}
function oa(s, t2, e2) {
  var i2;
  let n2 = e2 ? ra(t2.actions) : [];
  return $t("li", { class: "cm-diagnostic cm-diagnostic-" + t2.severity }, $t("span", { class: "cm-diagnosticText" }, t2.renderMessage ? t2.renderMessage() : t2.message), (i2 = t2.actions) === null || i2 === void 0 ? void 0 : i2.map((r2, o2) => {
    let l2 = (f2) => {
      f2.preventDefault();
      let u2 = Je(s.state.field(vt).diagnostics, t2);
      u2 && r2.apply(s, u2.from, u2.to);
    }, { name: h2 } = r2, a2 = n2[o2] ? h2.indexOf(n2[o2]) : -1, c2 = a2 < 0 ? h2 : [
      h2.slice(0, a2),
      $t("u", h2.slice(a2, a2 + 1)),
      h2.slice(a2 + 1)
    ];
    return $t("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: l2,
      onmousedown: l2,
      "aria-label": ` Action: ${h2}${a2 < 0 ? "" : ` (access key "${n2[o2]})"`}.`
    }, c2);
  }), t2.source && $t("div", { class: "cm-diagnosticSource" }, t2.source));
}
class vg extends ye {
  constructor(t2) {
    super(), this.diagnostic = t2;
  }
  eq(t2) {
    return t2.diagnostic == this.diagnostic;
  }
  toDOM() {
    return $t("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
  }
}
class $o {
  constructor(t2, e2) {
    this.diagnostic = e2, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = oa(t2, e2, true), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class En {
  constructor(t2) {
    this.view = t2, this.items = [];
    let e2 = (n2) => {
      if (n2.keyCode == 27)
        Ho(this.view), this.view.focus();
      else if (n2.keyCode == 38 || n2.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (n2.keyCode == 40 || n2.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (n2.keyCode == 36)
        this.moveSelection(0);
      else if (n2.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (n2.keyCode == 13)
        this.view.focus();
      else if (n2.keyCode >= 65 && n2.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: r2 } = this.items[this.selectedIndex], o2 = ra(r2.actions);
        for (let l2 = 0; l2 < o2.length; l2++)
          if (o2[l2].toUpperCase().charCodeAt(0) == n2.keyCode) {
            let h2 = Je(this.view.state.field(vt).diagnostics, r2);
            h2 && r2.actions[l2].apply(t2, h2.from, h2.to);
          }
      } else
        return;
      n2.preventDefault();
    }, i2 = (n2) => {
      for (let r2 = 0; r2 < this.items.length; r2++)
        this.items[r2].dom.contains(n2.target) && this.moveSelection(r2);
    };
    this.list = $t("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: e2,
      onclick: i2
    }), this.dom = $t("div", { class: "cm-panel-lint" }, this.list, $t("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => Ho(this.view)
    }, "\xD7")), this.update();
  }
  get selectedIndex() {
    let t2 = this.view.state.field(vt).selected;
    if (!t2)
      return -1;
    for (let e2 = 0; e2 < this.items.length; e2++)
      if (this.items[e2].diagnostic == t2.diagnostic)
        return e2;
    return -1;
  }
  update() {
    let { diagnostics: t2, selected: e2 } = this.view.state.field(vt), i2 = 0, n2 = false, r2 = null;
    for (t2.between(0, this.view.state.doc.length, (o2, l2, { spec: h2 }) => {
      let a2 = -1, c2;
      for (let f2 = i2; f2 < this.items.length; f2++)
        if (this.items[f2].diagnostic == h2.diagnostic) {
          a2 = f2;
          break;
        }
      a2 < 0 ? (c2 = new $o(this.view, h2.diagnostic), this.items.splice(i2, 0, c2), n2 = true) : (c2 = this.items[a2], a2 > i2 && (this.items.splice(i2, a2 - i2), n2 = true)), e2 && c2.diagnostic == e2.diagnostic ? c2.dom.hasAttribute("aria-selected") || (c2.dom.setAttribute("aria-selected", "true"), r2 = c2) : c2.dom.hasAttribute("aria-selected") && c2.dom.removeAttribute("aria-selected"), i2++;
    }); i2 < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      n2 = true, this.items.pop();
    this.items.length == 0 && (this.items.push(new $o(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), n2 = true), r2 ? (this.list.setAttribute("aria-activedescendant", r2.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: r2.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: o2, panel: l2 }) => {
        o2.top < l2.top ? this.list.scrollTop -= l2.top - o2.top : o2.bottom > l2.bottom && (this.list.scrollTop += o2.bottom - l2.bottom);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), n2 && this.sync();
  }
  sync() {
    let t2 = this.list.firstChild;
    function e2() {
      let i2 = t2;
      t2 = i2.nextSibling, i2.remove();
    }
    for (let i2 of this.items)
      if (i2.dom.parentNode == this.list) {
        for (; t2 != i2.dom; )
          e2();
        t2 = i2.dom.nextSibling;
      } else
        this.list.insertBefore(i2.dom, t2);
    for (; t2; )
      e2();
  }
  moveSelection(t2) {
    if (this.selectedIndex < 0)
      return;
    let e2 = this.view.state.field(vt), i2 = Je(e2.diagnostics, this.items[t2].diagnostic);
    i2 && this.view.dispatch({
      selection: { anchor: i2.from, head: i2.to },
      scrollIntoView: true,
      effects: sa.of(i2)
    });
  }
  static open(t2) {
    return new En(t2);
  }
}
function Sg(s, t2 = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${t2}>${encodeURIComponent(s)}</svg>')`;
}
function Zn(s) {
  return Sg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${s}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const Cg = /* @__PURE__ */ A$2.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ Zn("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ Zn("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ Zn("#999") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
}), Ag = "#e5c07b", Fo = "#e06c75", Og = "#56b6c2", Mg = "#ffffff", Xi = "#abb2bf", Fs = "#7d8799", Dg = "#61afef", Tg = "#98c379", zo = "#d19a66", Pg = "#c678dd", Bg = "#21252b", _o = "#2c313a", Wo = "#282c34", ts = "#353a42", Rg = "#3E4451", jo = "#528bff", Lg = /* @__PURE__ */ A$2.theme({
  "&": {
    color: Xi,
    backgroundColor: Wo
  },
  ".cm-content": {
    caretColor: jo
  },
  ".cm-cursor, .cm-dropCursor": { borderLeftColor: jo },
  "&.cm-focused .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: Rg },
  ".cm-panels": { backgroundColor: Bg, color: Xi },
  ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
  ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
  ".cm-searchMatch": {
    backgroundColor: "#72a1ff59",
    outline: "1px solid #457dff"
  },
  ".cm-searchMatch.cm-searchMatch-selected": {
    backgroundColor: "#6199ff2f"
  },
  ".cm-activeLine": { backgroundColor: "#6699ff0b" },
  ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
  "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
    backgroundColor: "#bad0f847",
    outline: "1px solid #515a6b"
  },
  ".cm-gutters": {
    backgroundColor: Wo,
    color: Fs,
    border: "none"
  },
  ".cm-activeLineGutter": {
    backgroundColor: _o
  },
  ".cm-foldPlaceholder": {
    backgroundColor: "transparent",
    border: "none",
    color: "#ddd"
  },
  ".cm-tooltip": {
    border: "none",
    backgroundColor: ts
  },
  ".cm-tooltip .cm-tooltip-arrow:before": {
    borderTopColor: "transparent",
    borderBottomColor: "transparent"
  },
  ".cm-tooltip .cm-tooltip-arrow:after": {
    borderTopColor: ts,
    borderBottomColor: ts
  },
  ".cm-tooltip-autocomplete": {
    "& > ul > li[aria-selected]": {
      backgroundColor: _o,
      color: Xi
    }
  }
}, { dark: true }), Eg = /* @__PURE__ */ vi.define([
  {
    tag: m$1.keyword,
    color: Pg
  },
  {
    tag: [m$1.name, m$1.deleted, m$1.character, m$1.propertyName, m$1.macroName],
    color: Fo
  },
  {
    tag: [/* @__PURE__ */ m$1.function(m$1.variableName), m$1.labelName],
    color: Dg
  },
  {
    tag: [m$1.color, /* @__PURE__ */ m$1.constant(m$1.name), /* @__PURE__ */ m$1.standard(m$1.name)],
    color: zo
  },
  {
    tag: [/* @__PURE__ */ m$1.definition(m$1.name), m$1.separator],
    color: Xi
  },
  {
    tag: [m$1.typeName, m$1.className, m$1.number, m$1.changed, m$1.annotation, m$1.modifier, m$1.self, m$1.namespace],
    color: Ag
  },
  {
    tag: [m$1.operator, m$1.operatorKeyword, m$1.url, m$1.escape, m$1.regexp, m$1.link, /* @__PURE__ */ m$1.special(m$1.string)],
    color: Og
  },
  {
    tag: [m$1.meta, m$1.comment],
    color: Fs
  },
  {
    tag: m$1.strong,
    fontWeight: "bold"
  },
  {
    tag: m$1.emphasis,
    fontStyle: "italic"
  },
  {
    tag: m$1.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: m$1.link,
    color: Fs,
    textDecoration: "underline"
  },
  {
    tag: m$1.heading,
    fontWeight: "bold",
    color: Fo
  },
  {
    tag: [m$1.atom, m$1.bool, /* @__PURE__ */ m$1.special(m$1.variableName)],
    color: zo
  },
  {
    tag: [m$1.processingInstruction, m$1.string, m$1.inserted],
    color: Tg
  },
  {
    tag: m$1.invalid,
    color: Mg
  }
]), la = ref$1(false);
window.__hst_controls_dark || (window.__hst_controls_dark = []);
window.__hst_controls_dark.push(la);
var qo;
(qo = window.__hst_controls_dark_ready) == null || qo.call(window);
const Ng = {
  name: "HstJson",
  inheritAttrs: false
}, Vg = /* @__PURE__ */ defineComponent$1({
  ...Ng,
  props: {
    title: null,
    modelValue: null
  },
  emits: {
    "update:modelValue": (s) => true
  },
  setup(s, { emit: t2 }) {
    const e2 = s;
    let i2;
    const n2 = ref$1(""), r2 = ref$1(false), o2 = ref$1(), l2 = {
      light: [A$2.baseTheme({}), bo(zd)],
      dark: [Lg, bo(Eg)]
    }, h2 = new yi(), a2 = [
      Xu(),
      Pu(),
      Cu(),
      fg(),
      Ud(),
      Cd(),
      Id(),
      nh.of([
        ...Yp,
        ...Ed,
        ...kg
      ]),
      A$2.updateListener.of((c2) => {
        n2.value = c2.view.state.doc.toString();
      }),
      h2.of(l2.light)
    ];
    return onMounted$1(() => {
      i2 = new A$2({
        doc: JSON.stringify(e2.modelValue, null, 2),
        extensions: a2,
        parent: o2.value
      }), watchEffect$1(() => {
        i2.dispatch({
          effects: [
            h2.reconfigure(l2[la.value ? "dark" : "light"])
          ]
        });
      });
    }), watch$1(() => e2.modelValue, () => {
      let c2;
      try {
        c2 = JSON.stringify(JSON.parse(n2.value)) === JSON.stringify(e2.modelValue);
      } catch {
        c2 = false;
      }
      c2 || i2.dispatch({ changes: [{ from: 0, to: i2.state.doc.length, insert: JSON.stringify(e2.modelValue, null, 2) }] });
    }, { deep: true }), watch$1(() => n2.value, () => {
      r2.value = false;
      try {
        t2("update:modelValue", JSON.parse(n2.value));
      } catch {
        r2.value = true;
      }
    }), (c2, f2) => (openBlock$1(), createBlock$1(qt, {
      title: s.title,
      class: normalizeClass$1(["histoire-json htw-cursor-text", c2.$attrs.class]),
      style: normalizeStyle$1(c2.$attrs.style)
    }, {
      actions: withCtx$1(() => [
        r2.value ? withDirectives$1((openBlock$1(), createBlock$1(unref$1(Icon), {
          key: 0,
          icon: "carbon:warning-alt",
          class: "htw-text-orange-500"
        }, null, 512)), [
          [unref$1(VTooltip), "JSON error"]
        ]) : createCommentVNode$1("", true),
        renderSlot$1(c2.$slots, "actions", {}, void 0, true)
      ]),
      default: withCtx$1(() => [
        createBaseVNode$1("div", mergeProps$1({
          ref_key: "editorElement",
          ref: o2,
          class: "__histoire-json-code htw-w-full htw-border htw-border-solid htw-border-black/25 dark:htw-border-white/25 focus-within:htw-border-primary-500 dark:focus-within:htw-border-primary-500 htw-rounded-sm htw-box-border htw-overflow-auto htw-resize-y htw-min-h-32 htw-h-48 htw-relative"
        }, { ...c2.$attrs, class: null, style: null }), null, 16)
      ]),
      _: 3
    }, 8, ["title", "class", "style"]));
  }
});
const Ig = (s, t2) => {
  const e2 = s.__vccOpts || s;
  for (const [i2, n2] of t2)
    e2[i2] = n2;
  return e2;
}, Hg = /* @__PURE__ */ Ig(Vg, [["__scopeId", "data-v-e5fbff29"]]), $g = Uo, Fg = xa, zg = Oa, _g = Pa, Wg = La, jg = Na, qg = $a, Kg = _a, Gg = Ja, Ug = rc, Qg = dc, Jg = kc, Xg = Me, Yg = Ac, Zg = Hg, rm = {
  HstButton: $g,
  HstButtonGroup: Fg,
  HstCheckbox: zg,
  HstCheckboxList: _g,
  HstText: Wg,
  HstNumber: jg,
  HstSlider: qg,
  HstTextarea: Kg,
  HstSelect: Gg,
  HstRadio: Yg,
  HstJson: Zg,
  HstColorShades: Ug,
  HstTokenList: Qg,
  HstTokenGrid: Jg,
  HstCopyIcon: Xg
};
const config = markRaw$1({
  "theme": {
    "screens": {
      "sm": "640px",
      "md": "768px",
      "lg": "1024px",
      "xl": "1280px",
      "2xl": "1536px"
    },
    "colors": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "columns": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "auto": "auto",
      "3xs": "16rem",
      "2xs": "18rem",
      "xs": "20rem",
      "sm": "24rem",
      "md": "28rem",
      "lg": "32rem",
      "xl": "36rem",
      "2xl": "42rem",
      "3xl": "48rem",
      "4xl": "56rem",
      "5xl": "64rem",
      "6xl": "72rem",
      "7xl": "80rem"
    },
    "spacing": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "animation": {
      "none": "none",
      "spin": "spin 1s linear infinite",
      "ping": "ping 1s cubic-bezier(0, 0, 0.2, 1) infinite",
      "pulse": "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
      "bounce": "bounce 1s infinite"
    },
    "aspectRatio": {
      "auto": "auto",
      "square": "1 / 1",
      "video": "16 / 9"
    },
    "backdropBlur": {
      "0": "0",
      "none": "0",
      "sm": "4px",
      "DEFAULT": "8px",
      "md": "12px",
      "lg": "16px",
      "xl": "24px",
      "2xl": "40px",
      "3xl": "64px"
    },
    "backdropBrightness": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "90": ".9",
      "95": ".95",
      "100": "1",
      "105": "1.05",
      "110": "1.1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "backdropContrast": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "100": "1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "backdropGrayscale": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "backdropHueRotate": {
      "0": "0deg",
      "15": "15deg",
      "30": "30deg",
      "60": "60deg",
      "90": "90deg",
      "180": "180deg"
    },
    "backdropInvert": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "backdropOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "backdropSaturate": {
      "0": "0",
      "50": ".5",
      "100": "1",
      "150": "1.5",
      "200": "2"
    },
    "backdropSepia": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "backgroundColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "backgroundImage": {
      "none": "none",
      "gradient-to-t": "linear-gradient(to top, var(--tw-gradient-stops))",
      "gradient-to-tr": "linear-gradient(to top right, var(--tw-gradient-stops))",
      "gradient-to-r": "linear-gradient(to right, var(--tw-gradient-stops))",
      "gradient-to-br": "linear-gradient(to bottom right, var(--tw-gradient-stops))",
      "gradient-to-b": "linear-gradient(to bottom, var(--tw-gradient-stops))",
      "gradient-to-bl": "linear-gradient(to bottom left, var(--tw-gradient-stops))",
      "gradient-to-l": "linear-gradient(to left, var(--tw-gradient-stops))",
      "gradient-to-tl": "linear-gradient(to top left, var(--tw-gradient-stops))"
    },
    "backgroundOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "backgroundPosition": {
      "bottom": "bottom",
      "center": "center",
      "left": "left",
      "left-bottom": "left bottom",
      "left-top": "left top",
      "right": "right",
      "right-bottom": "right bottom",
      "right-top": "right top",
      "top": "top"
    },
    "backgroundSize": {
      "auto": "auto",
      "cover": "cover",
      "contain": "contain"
    },
    "blur": {
      "0": "0",
      "none": "0",
      "sm": "4px",
      "DEFAULT": "8px",
      "md": "12px",
      "lg": "16px",
      "xl": "24px",
      "2xl": "40px",
      "3xl": "64px"
    },
    "brightness": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "90": ".9",
      "95": ".95",
      "100": "1",
      "105": "1.05",
      "110": "1.1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "borderColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E",
      "DEFAULT": "#e5e7eb"
    },
    "borderOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "borderRadius": {
      "none": "0px",
      "sm": "0.125rem",
      "DEFAULT": "0.25rem",
      "md": "0.375rem",
      "lg": "0.5rem",
      "xl": "0.75rem",
      "2xl": "1rem",
      "3xl": "1.5rem",
      "full": "9999px"
    },
    "borderSpacing": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "borderWidth": {
      "0": "0px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "DEFAULT": "1px"
    },
    "boxShadow": {
      "sm": "0 1px 2px 0 rgb(0 0 0 / 0.05)",
      "DEFAULT": "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
      "md": "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
      "lg": "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
      "xl": "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)",
      "2xl": "0 25px 50px -12px rgb(0 0 0 / 0.25)",
      "inner": "inset 0 2px 4px 0 rgb(0 0 0 / 0.05)",
      "none": "none"
    },
    "boxShadowColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "caretColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "accentColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E",
      "auto": "auto"
    },
    "contrast": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "100": "1",
      "125": "1.25",
      "150": "1.5",
      "200": "2"
    },
    "container": {},
    "content": {
      "none": "none"
    },
    "cursor": {
      "auto": "auto",
      "default": "default",
      "pointer": "pointer",
      "wait": "wait",
      "text": "text",
      "move": "move",
      "help": "help",
      "not-allowed": "not-allowed",
      "none": "none",
      "context-menu": "context-menu",
      "progress": "progress",
      "cell": "cell",
      "crosshair": "crosshair",
      "vertical-text": "vertical-text",
      "alias": "alias",
      "copy": "copy",
      "no-drop": "no-drop",
      "grab": "grab",
      "grabbing": "grabbing",
      "all-scroll": "all-scroll",
      "col-resize": "col-resize",
      "row-resize": "row-resize",
      "n-resize": "n-resize",
      "e-resize": "e-resize",
      "s-resize": "s-resize",
      "w-resize": "w-resize",
      "ne-resize": "ne-resize",
      "nw-resize": "nw-resize",
      "se-resize": "se-resize",
      "sw-resize": "sw-resize",
      "ew-resize": "ew-resize",
      "ns-resize": "ns-resize",
      "nesw-resize": "nesw-resize",
      "nwse-resize": "nwse-resize",
      "zoom-in": "zoom-in",
      "zoom-out": "zoom-out"
    },
    "divideColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E",
      "DEFAULT": "#e5e7eb"
    },
    "divideOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "divideWidth": {
      "0": "0px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "DEFAULT": "1px"
    },
    "dropShadow": {
      "sm": "0 1px 1px rgb(0 0 0 / 0.05)",
      "DEFAULT": [
        "0 1px 2px rgb(0 0 0 / 0.1)",
        "0 1px 1px rgb(0 0 0 / 0.06)"
      ],
      "md": [
        "0 4px 3px rgb(0 0 0 / 0.07)",
        "0 2px 2px rgb(0 0 0 / 0.06)"
      ],
      "lg": [
        "0 10px 8px rgb(0 0 0 / 0.04)",
        "0 4px 3px rgb(0 0 0 / 0.1)"
      ],
      "xl": [
        "0 20px 13px rgb(0 0 0 / 0.03)",
        "0 8px 5px rgb(0 0 0 / 0.08)"
      ],
      "2xl": "0 25px 25px rgb(0 0 0 / 0.15)",
      "none": "0 0 #0000"
    },
    "fill": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "grayscale": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "hueRotate": {
      "0": "0deg",
      "15": "15deg",
      "30": "30deg",
      "60": "60deg",
      "90": "90deg",
      "180": "180deg"
    },
    "invert": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "flex": {
      "1": "1 1 0%",
      "auto": "1 1 auto",
      "initial": "0 1 auto",
      "none": "none"
    },
    "flexBasis": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "1/5": "20%",
      "2/5": "40%",
      "3/5": "60%",
      "4/5": "80%",
      "1/6": "16.666667%",
      "2/6": "33.333333%",
      "3/6": "50%",
      "4/6": "66.666667%",
      "5/6": "83.333333%",
      "1/12": "8.333333%",
      "2/12": "16.666667%",
      "3/12": "25%",
      "4/12": "33.333333%",
      "5/12": "41.666667%",
      "6/12": "50%",
      "7/12": "58.333333%",
      "8/12": "66.666667%",
      "9/12": "75%",
      "10/12": "83.333333%",
      "11/12": "91.666667%",
      "full": "100%"
    },
    "flexGrow": {
      "0": "0",
      "DEFAULT": "1"
    },
    "flexShrink": {
      "0": "0",
      "DEFAULT": "1"
    },
    "fontFamily": {
      "sans": [
        "ui-sans-serif",
        "system-ui",
        "-apple-system",
        "BlinkMacSystemFont",
        '"Segoe UI"',
        "Roboto",
        '"Helvetica Neue"',
        "Arial",
        '"Noto Sans"',
        "sans-serif",
        '"Apple Color Emoji"',
        '"Segoe UI Emoji"',
        '"Segoe UI Symbol"',
        '"Noto Color Emoji"'
      ],
      "serif": [
        "ui-serif",
        "Georgia",
        "Cambria",
        '"Times New Roman"',
        "Times",
        "serif"
      ],
      "mono": [
        "ui-monospace",
        "SFMono-Regular",
        "Menlo",
        "Monaco",
        "Consolas",
        '"Liberation Mono"',
        '"Courier New"',
        "monospace"
      ],
      "dm-sans": [
        "DM Sans"
      ]
    },
    "fontSize": {
      "xs": [
        "0.75rem",
        {
          "lineHeight": "1rem"
        }
      ],
      "sm": [
        "0.875rem",
        {
          "lineHeight": "1.25rem"
        }
      ],
      "base": [
        "1rem",
        {
          "lineHeight": "1.5rem"
        }
      ],
      "lg": [
        "1.125rem",
        {
          "lineHeight": "1.75rem"
        }
      ],
      "xl": [
        "1.25rem",
        {
          "lineHeight": "1.75rem"
        }
      ],
      "2xl": [
        "1.5rem",
        {
          "lineHeight": "2rem"
        }
      ],
      "3xl": [
        "1.875rem",
        {
          "lineHeight": "2.25rem"
        }
      ],
      "4xl": [
        "2.25rem",
        {
          "lineHeight": "2.5rem"
        }
      ],
      "5xl": [
        "3rem",
        {
          "lineHeight": "1"
        }
      ],
      "6xl": [
        "3.75rem",
        {
          "lineHeight": "1"
        }
      ],
      "7xl": [
        "4.5rem",
        {
          "lineHeight": "1"
        }
      ],
      "8xl": [
        "6rem",
        {
          "lineHeight": "1"
        }
      ],
      "9xl": [
        "8rem",
        {
          "lineHeight": "1"
        }
      ]
    },
    "fontWeight": {
      "thin": "100",
      "extralight": "200",
      "light": "300",
      "normal": "400",
      "medium": "500",
      "semibold": "600",
      "bold": "700",
      "extrabold": "800",
      "black": "900"
    },
    "gap": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "gradientColorStops": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "gridAutoColumns": {
      "auto": "auto",
      "min": "min-content",
      "max": "max-content",
      "fr": "minmax(0, 1fr)"
    },
    "gridAutoRows": {
      "auto": "auto",
      "min": "min-content",
      "max": "max-content",
      "fr": "minmax(0, 1fr)"
    },
    "gridColumn": {
      "auto": "auto",
      "span-1": "span 1 / span 1",
      "span-2": "span 2 / span 2",
      "span-3": "span 3 / span 3",
      "span-4": "span 4 / span 4",
      "span-5": "span 5 / span 5",
      "span-6": "span 6 / span 6",
      "span-7": "span 7 / span 7",
      "span-8": "span 8 / span 8",
      "span-9": "span 9 / span 9",
      "span-10": "span 10 / span 10",
      "span-11": "span 11 / span 11",
      "span-12": "span 12 / span 12",
      "span-full": "1 / -1"
    },
    "gridColumnEnd": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "13": "13",
      "auto": "auto"
    },
    "gridColumnStart": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "13": "13",
      "auto": "auto"
    },
    "gridRow": {
      "auto": "auto",
      "span-1": "span 1 / span 1",
      "span-2": "span 2 / span 2",
      "span-3": "span 3 / span 3",
      "span-4": "span 4 / span 4",
      "span-5": "span 5 / span 5",
      "span-6": "span 6 / span 6",
      "span-full": "1 / -1"
    },
    "gridRowStart": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "auto": "auto"
    },
    "gridRowEnd": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "auto": "auto"
    },
    "gridTemplateColumns": {
      "1": "repeat(1, minmax(0, 1fr))",
      "2": "repeat(2, minmax(0, 1fr))",
      "3": "repeat(3, minmax(0, 1fr))",
      "4": "repeat(4, minmax(0, 1fr))",
      "5": "repeat(5, minmax(0, 1fr))",
      "6": "repeat(6, minmax(0, 1fr))",
      "7": "repeat(7, minmax(0, 1fr))",
      "8": "repeat(8, minmax(0, 1fr))",
      "9": "repeat(9, minmax(0, 1fr))",
      "10": "repeat(10, minmax(0, 1fr))",
      "11": "repeat(11, minmax(0, 1fr))",
      "12": "repeat(12, minmax(0, 1fr))",
      "none": "none"
    },
    "gridTemplateRows": {
      "1": "repeat(1, minmax(0, 1fr))",
      "2": "repeat(2, minmax(0, 1fr))",
      "3": "repeat(3, minmax(0, 1fr))",
      "4": "repeat(4, minmax(0, 1fr))",
      "5": "repeat(5, minmax(0, 1fr))",
      "6": "repeat(6, minmax(0, 1fr))",
      "none": "none"
    },
    "height": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "1/5": "20%",
      "2/5": "40%",
      "3/5": "60%",
      "4/5": "80%",
      "1/6": "16.666667%",
      "2/6": "33.333333%",
      "3/6": "50%",
      "4/6": "66.666667%",
      "5/6": "83.333333%",
      "full": "100%",
      "screen": "100vh",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "inset": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "full": "100%"
    },
    "keyframes": {
      "spin": {
        "to": {
          "transform": "rotate(360deg)"
        }
      },
      "ping": {
        "75%, 100%": {
          "transform": "scale(2)",
          "opacity": "0"
        }
      },
      "pulse": {
        "50%": {
          "opacity": ".5"
        }
      },
      "bounce": {
        "0%, 100%": {
          "transform": "translateY(-25%)",
          "animationTimingFunction": "cubic-bezier(0.8,0,1,1)"
        },
        "50%": {
          "transform": "none",
          "animationTimingFunction": "cubic-bezier(0,0,0.2,1)"
        }
      }
    },
    "letterSpacing": {
      "tighter": "-0.05em",
      "tight": "-0.025em",
      "normal": "0em",
      "wide": "0.025em",
      "wider": "0.05em",
      "widest": "0.1em"
    },
    "lineHeight": {
      "3": ".75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "none": "1",
      "tight": "1.25",
      "snug": "1.375",
      "normal": "1.5",
      "relaxed": "1.625",
      "loose": "2"
    },
    "listStyleType": {
      "none": "none",
      "disc": "disc",
      "decimal": "decimal"
    },
    "margin": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "maxHeight": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "full": "100%",
      "screen": "100vh",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "maxWidth": {
      "0": "0rem",
      "none": "none",
      "xs": "20rem",
      "sm": "24rem",
      "md": "28rem",
      "lg": "32rem",
      "xl": "36rem",
      "2xl": "42rem",
      "3xl": "48rem",
      "4xl": "56rem",
      "5xl": "64rem",
      "6xl": "72rem",
      "7xl": "80rem",
      "full": "100%",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content",
      "prose": "65ch",
      "screen-sm": "640px",
      "screen-md": "768px",
      "screen-lg": "1024px",
      "screen-xl": "1280px",
      "screen-2xl": "1536px"
    },
    "minHeight": {
      "0": "0px",
      "full": "100%",
      "screen": "100vh",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "minWidth": {
      "0": "0px",
      "full": "100%",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "objectPosition": {
      "bottom": "bottom",
      "center": "center",
      "left": "left",
      "left-bottom": "left bottom",
      "left-top": "left top",
      "right": "right",
      "right-bottom": "right bottom",
      "right-top": "right top",
      "top": "top"
    },
    "opacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "order": {
      "1": "1",
      "2": "2",
      "3": "3",
      "4": "4",
      "5": "5",
      "6": "6",
      "7": "7",
      "8": "8",
      "9": "9",
      "10": "10",
      "11": "11",
      "12": "12",
      "first": "-9999",
      "last": "9999",
      "none": "0"
    },
    "padding": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "placeholderColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "placeholderOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "outlineColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "outlineOffset": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px"
    },
    "outlineWidth": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px"
    },
    "ringColor": {
      "DEFAULT": "#3b82f6",
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "ringOffsetColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "ringOffsetWidth": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px"
    },
    "ringOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1",
      "DEFAULT": "0.5"
    },
    "ringWidth": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "DEFAULT": "3px"
    },
    "rotate": {
      "0": "0deg",
      "1": "1deg",
      "2": "2deg",
      "3": "3deg",
      "6": "6deg",
      "12": "12deg",
      "45": "45deg",
      "90": "90deg",
      "180": "180deg"
    },
    "saturate": {
      "0": "0",
      "50": ".5",
      "100": "1",
      "150": "1.5",
      "200": "2"
    },
    "scale": {
      "0": "0",
      "50": ".5",
      "75": ".75",
      "90": ".9",
      "95": ".95",
      "100": "1",
      "105": "1.05",
      "110": "1.1",
      "125": "1.25",
      "150": "1.5"
    },
    "scrollMargin": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "scrollPadding": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "sepia": {
      "0": "0",
      "DEFAULT": "100%"
    },
    "skew": {
      "0": "0deg",
      "1": "1deg",
      "2": "2deg",
      "3": "3deg",
      "6": "6deg",
      "12": "12deg"
    },
    "space": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "stroke": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "strokeWidth": {
      "0": "0",
      "1": "1",
      "2": "2"
    },
    "textColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "textDecorationColor": {
      "inherit": "inherit",
      "current": "currentColor",
      "transparent": "transparent",
      "black": "#000",
      "white": "#fff",
      "slate": {
        "50": "#f8fafc",
        "100": "#f1f5f9",
        "200": "#e2e8f0",
        "300": "#cbd5e1",
        "400": "#94a3b8",
        "500": "#64748b",
        "600": "#475569",
        "700": "#334155",
        "800": "#1e293b",
        "900": "#0f172a"
      },
      "gray": {
        "50": "#f9fafb",
        "100": "#f3f4f6",
        "200": "#e5e7eb",
        "300": "#d1d5db",
        "400": "#9ca3af",
        "500": "#6b7280",
        "600": "#4b5563",
        "700": "#374151",
        "800": "#1f2937",
        "900": "#111827"
      },
      "zinc": {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      },
      "neutral": {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#e5e5e5",
        "300": "#d4d4d4",
        "400": "#a3a3a3",
        "500": "#737373",
        "600": "#525252",
        "700": "#404040",
        "800": "#262626",
        "900": "#171717"
      },
      "stone": {
        "50": "#fafaf9",
        "100": "#f5f5f4",
        "200": "#e7e5e4",
        "300": "#d6d3d1",
        "400": "#a8a29e",
        "500": "#78716c",
        "600": "#57534e",
        "700": "#44403c",
        "800": "#292524",
        "900": "#1c1917"
      },
      "red": {
        "50": "#fef2f2",
        "100": "#fee2e2",
        "200": "#fecaca",
        "300": "#fca5a5",
        "400": "#f87171",
        "500": "#ef4444",
        "600": "#dc2626",
        "700": "#b91c1c",
        "800": "#991b1b",
        "900": "#7f1d1d"
      },
      "orange": {
        "50": "#fff7ed",
        "100": "#ffedd5",
        "200": "#fed7aa",
        "300": "#fdba74",
        "400": "#fb923c",
        "500": "#f97316",
        "600": "#ea580c",
        "700": "#c2410c",
        "800": "#9a3412",
        "900": "#7c2d12"
      },
      "amber": {
        "50": "#fffbeb",
        "100": "#fef3c7",
        "200": "#fde68a",
        "300": "#fcd34d",
        "400": "#fbbf24",
        "500": "#f59e0b",
        "600": "#d97706",
        "700": "#b45309",
        "800": "#92400e",
        "900": "#78350f"
      },
      "yellow": {
        "50": "#fefce8",
        "100": "#fef9c3",
        "200": "#fef08a",
        "300": "#fde047",
        "400": "#facc15",
        "500": "#eab308",
        "600": "#ca8a04",
        "700": "#a16207",
        "800": "#854d0e",
        "900": "#713f12"
      },
      "lime": {
        "50": "#f7fee7",
        "100": "#ecfccb",
        "200": "#d9f99d",
        "300": "#bef264",
        "400": "#a3e635",
        "500": "#84cc16",
        "600": "#65a30d",
        "700": "#4d7c0f",
        "800": "#3f6212",
        "900": "#365314"
      },
      "green": {
        "50": "#f0fdf4",
        "100": "#dcfce7",
        "200": "#bbf7d0",
        "300": "#86efac",
        "400": "#4ade80",
        "500": "#22c55e",
        "600": "#16a34a",
        "700": "#15803d",
        "800": "#166534",
        "900": "#14532d"
      },
      "emerald": {
        "50": "#ecfdf5",
        "100": "#d1fae5",
        "200": "#a7f3d0",
        "300": "#6ee7b7",
        "400": "#34d399",
        "500": "#10b981",
        "600": "#059669",
        "700": "#047857",
        "800": "#065f46",
        "900": "#064e3b"
      },
      "teal": {
        "50": "#f0fdfa",
        "100": "#ccfbf1",
        "200": "#99f6e4",
        "300": "#5eead4",
        "400": "#2dd4bf",
        "500": "#14b8a6",
        "600": "#0d9488",
        "700": "#0f766e",
        "800": "#115e59",
        "900": "#134e4a"
      },
      "cyan": {
        "50": "#ecfeff",
        "100": "#cffafe",
        "200": "#a5f3fc",
        "300": "#67e8f9",
        "400": "#22d3ee",
        "500": "#06b6d4",
        "600": "#0891b2",
        "700": "#0e7490",
        "800": "#155e75",
        "900": "#164e63"
      },
      "sky": {
        "50": "#f0f9ff",
        "100": "#e0f2fe",
        "200": "#bae6fd",
        "300": "#7dd3fc",
        "400": "#38bdf8",
        "500": "#0ea5e9",
        "600": "#0284c7",
        "700": "#0369a1",
        "800": "#075985",
        "900": "#0c4a6e"
      },
      "blue": {
        "50": "#eff6ff",
        "100": "#dbeafe",
        "200": "#bfdbfe",
        "300": "#93c5fd",
        "400": "#60a5fa",
        "500": "#3b82f6",
        "600": "#2563eb",
        "700": "#1d4ed8",
        "800": "#1e40af",
        "900": "#1e3a8a"
      },
      "indigo": {
        "50": "#eef2ff",
        "100": "#e0e7ff",
        "200": "#c7d2fe",
        "300": "#a5b4fc",
        "400": "#818cf8",
        "500": "#6366f1",
        "600": "#4f46e5",
        "700": "#4338ca",
        "800": "#3730a3",
        "900": "#312e81"
      },
      "violet": {
        "50": "#f5f3ff",
        "100": "#ede9fe",
        "200": "#ddd6fe",
        "300": "#c4b5fd",
        "400": "#a78bfa",
        "500": "#8b5cf6",
        "600": "#7c3aed",
        "700": "#6d28d9",
        "800": "#5b21b6",
        "900": "#4c1d95"
      },
      "purple": {
        "50": "#faf5ff",
        "100": "#f3e8ff",
        "200": "#e9d5ff",
        "300": "#d8b4fe",
        "400": "#c084fc",
        "500": "#a855f7",
        "600": "#9333ea",
        "700": "#7e22ce",
        "800": "#6b21a8",
        "900": "#581c87"
      },
      "fuchsia": {
        "50": "#fdf4ff",
        "100": "#fae8ff",
        "200": "#f5d0fe",
        "300": "#f0abfc",
        "400": "#e879f9",
        "500": "#d946ef",
        "600": "#c026d3",
        "700": "#a21caf",
        "800": "#86198f",
        "900": "#701a75"
      },
      "pink": {
        "50": "#fdf2f8",
        "100": "#fce7f3",
        "200": "#fbcfe8",
        "300": "#f9a8d4",
        "400": "#f472b6",
        "500": "#ec4899",
        "600": "#db2777",
        "700": "#be185d",
        "800": "#9d174d",
        "900": "#831843"
      },
      "rose": {
        "50": "#fff1f2",
        "100": "#ffe4e6",
        "200": "#fecdd3",
        "300": "#fda4af",
        "400": "#fb7185",
        "500": "#f43f5e",
        "600": "#e11d48",
        "700": "#be123c",
        "800": "#9f1239",
        "900": "#881337"
      },
      "gray-dark": "#5E5E5E"
    },
    "textDecorationThickness": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "auto": "auto",
      "from-font": "from-font"
    },
    "textUnderlineOffset": {
      "0": "0px",
      "1": "1px",
      "2": "2px",
      "4": "4px",
      "8": "8px",
      "auto": "auto"
    },
    "textIndent": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem"
    },
    "textOpacity": {
      "0": "0",
      "5": "0.05",
      "10": "0.1",
      "20": "0.2",
      "25": "0.25",
      "30": "0.3",
      "40": "0.4",
      "50": "0.5",
      "60": "0.6",
      "70": "0.7",
      "75": "0.75",
      "80": "0.8",
      "90": "0.9",
      "95": "0.95",
      "100": "1"
    },
    "transformOrigin": {
      "center": "center",
      "top": "top",
      "top-right": "top right",
      "right": "right",
      "bottom-right": "bottom right",
      "bottom": "bottom",
      "bottom-left": "bottom left",
      "left": "left",
      "top-left": "top left"
    },
    "transitionDelay": {
      "75": "75ms",
      "100": "100ms",
      "150": "150ms",
      "200": "200ms",
      "300": "300ms",
      "500": "500ms",
      "700": "700ms",
      "1000": "1000ms"
    },
    "transitionDuration": {
      "75": "75ms",
      "100": "100ms",
      "150": "150ms",
      "200": "200ms",
      "300": "300ms",
      "500": "500ms",
      "700": "700ms",
      "1000": "1000ms",
      "DEFAULT": "150ms"
    },
    "transitionProperty": {
      "none": "none",
      "all": "all",
      "DEFAULT": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter",
      "colors": "color, background-color, border-color, text-decoration-color, fill, stroke",
      "opacity": "opacity",
      "shadow": "box-shadow",
      "transform": "transform"
    },
    "transitionTimingFunction": {
      "DEFAULT": "cubic-bezier(0.4, 0, 0.2, 1)",
      "linear": "linear",
      "in": "cubic-bezier(0.4, 0, 1, 1)",
      "out": "cubic-bezier(0, 0, 0.2, 1)",
      "in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
    },
    "translate": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "full": "100%"
    },
    "width": {
      "0": "0px",
      "1": "0.25rem",
      "2": "0.5rem",
      "3": "0.75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem",
      "11": "2.75rem",
      "12": "3rem",
      "14": "3.5rem",
      "16": "4rem",
      "20": "5rem",
      "24": "6rem",
      "28": "7rem",
      "32": "8rem",
      "36": "9rem",
      "40": "10rem",
      "44": "11rem",
      "48": "12rem",
      "52": "13rem",
      "56": "14rem",
      "60": "15rem",
      "64": "16rem",
      "72": "18rem",
      "80": "20rem",
      "96": "24rem",
      "auto": "auto",
      "px": "1px",
      "0.5": "0.125rem",
      "1.5": "0.375rem",
      "2.5": "0.625rem",
      "3.5": "0.875rem",
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      "1/5": "20%",
      "2/5": "40%",
      "3/5": "60%",
      "4/5": "80%",
      "1/6": "16.666667%",
      "2/6": "33.333333%",
      "3/6": "50%",
      "4/6": "66.666667%",
      "5/6": "83.333333%",
      "1/12": "8.333333%",
      "2/12": "16.666667%",
      "3/12": "25%",
      "4/12": "33.333333%",
      "5/12": "41.666667%",
      "6/12": "50%",
      "7/12": "58.333333%",
      "8/12": "66.666667%",
      "9/12": "75%",
      "10/12": "83.333333%",
      "11/12": "91.666667%",
      "full": "100%",
      "screen": "100vw",
      "min": "min-content",
      "max": "max-content",
      "fit": "fit-content"
    },
    "willChange": {
      "auto": "auto",
      "scroll": "scroll-position",
      "contents": "contents",
      "transform": "transform"
    },
    "zIndex": {
      "0": "0",
      "10": "10",
      "20": "20",
      "30": "30",
      "40": "40",
      "50": "50",
      "auto": "auto"
    }
  },
  "corePlugins": [
    "preflight",
    "container",
    "accessibility",
    "pointerEvents",
    "visibility",
    "position",
    "inset",
    "isolation",
    "zIndex",
    "order",
    "gridColumn",
    "gridColumnStart",
    "gridColumnEnd",
    "gridRow",
    "gridRowStart",
    "gridRowEnd",
    "float",
    "clear",
    "margin",
    "boxSizing",
    "display",
    "aspectRatio",
    "height",
    "maxHeight",
    "minHeight",
    "width",
    "minWidth",
    "maxWidth",
    "flex",
    "flexShrink",
    "flexGrow",
    "flexBasis",
    "tableLayout",
    "borderCollapse",
    "borderSpacing",
    "transformOrigin",
    "translate",
    "rotate",
    "skew",
    "scale",
    "transform",
    "animation",
    "cursor",
    "touchAction",
    "userSelect",
    "resize",
    "scrollSnapType",
    "scrollSnapAlign",
    "scrollSnapStop",
    "scrollMargin",
    "scrollPadding",
    "listStylePosition",
    "listStyleType",
    "appearance",
    "columns",
    "breakBefore",
    "breakInside",
    "breakAfter",
    "gridAutoColumns",
    "gridAutoFlow",
    "gridAutoRows",
    "gridTemplateColumns",
    "gridTemplateRows",
    "flexDirection",
    "flexWrap",
    "placeContent",
    "placeItems",
    "alignContent",
    "alignItems",
    "justifyContent",
    "justifyItems",
    "gap",
    "space",
    "divideWidth",
    "divideStyle",
    "divideColor",
    "divideOpacity",
    "placeSelf",
    "alignSelf",
    "justifySelf",
    "overflow",
    "overscrollBehavior",
    "scrollBehavior",
    "textOverflow",
    "whitespace",
    "wordBreak",
    "borderRadius",
    "borderWidth",
    "borderStyle",
    "borderColor",
    "borderOpacity",
    "backgroundColor",
    "backgroundOpacity",
    "backgroundImage",
    "gradientColorStops",
    "boxDecorationBreak",
    "backgroundSize",
    "backgroundAttachment",
    "backgroundClip",
    "backgroundPosition",
    "backgroundRepeat",
    "backgroundOrigin",
    "fill",
    "stroke",
    "strokeWidth",
    "objectFit",
    "objectPosition",
    "padding",
    "textAlign",
    "textIndent",
    "verticalAlign",
    "fontFamily",
    "fontSize",
    "fontWeight",
    "textTransform",
    "fontStyle",
    "fontVariantNumeric",
    "lineHeight",
    "letterSpacing",
    "textColor",
    "textOpacity",
    "textDecoration",
    "textDecorationColor",
    "textDecorationStyle",
    "textDecorationThickness",
    "textUnderlineOffset",
    "fontSmoothing",
    "placeholderColor",
    "placeholderOpacity",
    "caretColor",
    "accentColor",
    "opacity",
    "backgroundBlendMode",
    "mixBlendMode",
    "boxShadow",
    "boxShadowColor",
    "outlineStyle",
    "outlineWidth",
    "outlineOffset",
    "outlineColor",
    "ringWidth",
    "ringColor",
    "ringOpacity",
    "ringOffsetWidth",
    "ringOffsetColor",
    "blur",
    "brightness",
    "contrast",
    "dropShadow",
    "grayscale",
    "hueRotate",
    "invert",
    "saturate",
    "sepia",
    "filter",
    "backdropBlur",
    "backdropBrightness",
    "backdropContrast",
    "backdropGrayscale",
    "backdropHueRotate",
    "backdropInvert",
    "backdropOpacity",
    "backdropSaturate",
    "backdropSepia",
    "backdropFilter",
    "transitionProperty",
    "transitionDelay",
    "transitionDuration",
    "transitionTimingFunction",
    "willChange",
    "content"
  ],
  "plugins": [
    {},
    null
  ],
  "content": {
    "files": [
      "index.html",
      "./src/**/*.{html,js,ts,vue}"
    ],
    "extract": {},
    "transform": {}
  },
  "safelist": [
    "bg-indigo-100",
    "bg-pink-100",
    "bg-emerald-100",
    "bg-purple-100",
    "bg-indigo-300",
    "bg-pink-300",
    "bg-emerald-300",
    "bg-purple-300",
    "bg-indigo-600",
    "bg-pink-600",
    "bg-emerald-600",
    "bg-purple-600",
    "bg-lime-500",
    "bg-sky-600",
    {
      "pattern": {}
    },
    {
      "pattern": {}
    },
    "border-indigo-50",
    "border-pink-50",
    "border-emerald-50",
    "border-purple-50",
    "fill-indigo-600",
    "fill-pink-600",
    "fill-emerald-600",
    "fill-purple-600",
    "stroke-indigo-50",
    "stroke-pink-50",
    "stroke-emerald-50",
    "stroke-purple-50",
    "stroke-indigo-600",
    "stroke-pink-600",
    "stroke-emerald-600",
    "stroke-purple-600",
    "text-indigo-600",
    "text-pink-600",
    "text-emerald-600",
    "text-purple-600",
    "before:bg-neutral-900",
    "stroke-neutral-900",
    "before:bg-red-600",
    "stroke-red-600",
    "text-neutral-500",
    "before:bg-neutral-500",
    "text-neutral-900",
    "before:bg-neutral-900",
    "border-red-600",
    "before:border-indigo-500",
    "before:border-indigo-600",
    "before:border-pink-500",
    "before:border-pink-600",
    "before:border-emerald-500",
    "before:border-emerald-600",
    "before:border-purple-500",
    "before:border-purple-600"
  ],
  "default": {
    "content": [
      "index.html",
      "./src/**/*.{html,js,ts,vue}"
    ],
    "safelist": [
      "bg-indigo-100",
      "bg-pink-100",
      "bg-emerald-100",
      "bg-purple-100",
      "bg-indigo-300",
      "bg-pink-300",
      "bg-emerald-300",
      "bg-purple-300",
      "bg-indigo-600",
      "bg-pink-600",
      "bg-emerald-600",
      "bg-purple-600",
      "bg-lime-500",
      "bg-sky-600",
      {
        "pattern": {}
      },
      {
        "pattern": {}
      },
      "border-indigo-50",
      "border-pink-50",
      "border-emerald-50",
      "border-purple-50",
      "fill-indigo-600",
      "fill-pink-600",
      "fill-emerald-600",
      "fill-purple-600",
      "stroke-indigo-50",
      "stroke-pink-50",
      "stroke-emerald-50",
      "stroke-purple-50",
      "stroke-indigo-600",
      "stroke-pink-600",
      "stroke-emerald-600",
      "stroke-purple-600",
      "text-indigo-600",
      "text-pink-600",
      "text-emerald-600",
      "text-purple-600",
      "before:bg-neutral-900",
      "stroke-neutral-900",
      "before:bg-red-600",
      "stroke-red-600",
      "text-neutral-500",
      "before:bg-neutral-500",
      "text-neutral-900",
      "before:bg-neutral-900",
      "border-red-600",
      "before:border-indigo-500",
      "before:border-indigo-600",
      "before:border-pink-500",
      "before:border-pink-600",
      "before:border-emerald-500",
      "before:border-emerald-600",
      "before:border-purple-500",
      "before:border-purple-600"
    ],
    "theme": {
      "extend": {
        "fontFamily": {
          "dm-sans": [
            "DM Sans"
          ]
        },
        "colors": {
          "gray-dark": "#5E5E5E"
        }
      }
    },
    "plugins": [
      {},
      null
    ]
  },
  "presets": [],
  "darkMode": "media",
  "variantOrder": [
    "first",
    "last",
    "odd",
    "even",
    "visited",
    "checked",
    "empty",
    "read-only",
    "group-hover",
    "group-focus",
    "focus-within",
    "hover",
    "focus",
    "focus-visible",
    "active",
    "disabled"
  ],
  "prefix": "",
  "important": false,
  "separator": ":"
});
const search = ref$1("");
const sampleText = ref$1("Cat sit like bread eat prawns daintily with a claw then lick paws clean wash down prawns with a lap of carnation milk then retire to the warmest spot on the couch to claw at the fabric before taking a catnap mrow cat cat moo moo lick ears lick paws");
const fontSize = ref$1(16);
function mountApp({ el: el2, state, onUnmount }, render2) {
  Object.assign(state, {
    search,
    sampleText,
    fontSize
  });
  const app = createApp$1({
    render: render2
  });
  app.mount(el2);
  onUnmount(() => {
    app.unmount();
  });
}
const Comp10 = {
  id: "tailwind",
  title: "Tailwind",
  group: "design-system",
  icon: "mdi:tailwind",
  responsiveDisabled: true,
  layout: { type: "single", iframe: false },
  variants: [
    {
      id: "background-color",
      title: "Background Color",
      icon: "carbon:color-palette",
      onMount: (api) => mountApp(api, () => Object.entries(config.theme.backgroundColor).map(([key, shades]) => h$2(Ug, {
        key,
        shades: typeof shades === "object" ? shades : { DEFAULT: shades },
        getName: (shade) => {
          var _a2;
          return ((_a2 = config.prefix) != null ? _a2 : "") + (shade === "DEFAULT" ? `bg-${key}` : `bg-${key}-${shade}`);
        },
        search: search.value
      }, ({ color }) => h$2("div", {
        class: "__hst-shade",
        style: {
          backgroundColor: color
        }
      })))),
      onMountControls: (api) => mountApp(api, () => [
        h$2(Wg, {
          title: "Filter...",
          modelValue: search.value,
          "onUpdate:modelValue": (value) => {
            search.value = value;
          }
        })
      ])
    },
    {
      id: "text-color",
      title: "Text Color",
      icon: "carbon:text-color",
      onMount: (api) => mountApp(api, () => Object.entries(config.theme.textColor).map(([key, shades]) => h$2(Ug, {
        key,
        shades: typeof shades === "object" ? shades : { DEFAULT: shades },
        getName: (shade) => {
          var _a2;
          return ((_a2 = config.prefix) != null ? _a2 : "") + (shade === "DEFAULT" ? `text-${key}` : `text-${key}-${shade}`);
        },
        search: search.value
      }, ({ color }) => h$2("div", {
        class: "__hst-shade __hst-text",
        style: {
          color
        }
      }, "Aa")))),
      onMountControls: (api) => mountApp(api, () => [
        h$2(Wg, {
          title: "Filter...",
          modelValue: search.value,
          "onUpdate:modelValue": (value) => {
            search.value = value;
          }
        })
      ])
    },
    {
      id: "border-color",
      title: "Border Color",
      icon: "carbon:color-palette",
      onMount: (api) => mountApp(api, () => Object.entries(config.theme.borderColor).map(([key, shades]) => h$2(Ug, {
        key,
        shades: typeof shades === "object" ? shades : { DEFAULT: shades },
        getName: (shade) => {
          var _a2;
          return ((_a2 = config.prefix) != null ? _a2 : "") + (shade === "DEFAULT" ? `border-${key}` : `border-${key}-${shade}`);
        },
        search: search.value
      }, ({ color }) => h$2("div", {
        class: "__hst-shade __hst-border",
        style: {
          borderColor: color
        }
      })))),
      onMountControls: (api) => mountApp(api, () => [
        h$2(Wg, {
          title: "Filter...",
          modelValue: search.value,
          "onUpdate:modelValue": (value) => {
            search.value = value;
          }
        })
      ])
    },
    {
      id: "padding",
      title: "Padding",
      icon: "carbon:area",
      onMount: (api) => mountApp(api, () => h$2(Qg, {
        tokens: config.theme.padding,
        getName: (key) => {
          var _a2;
          return `${(_a2 = config.prefix) != null ? _a2 : ""}p-${key}`;
        }
      }, ({ token }) => h$2("div", {
        class: "__hst-padding",
        style: {
          padding: token.value
        }
      }, [
        h$2("div", {
          class: "__hst-padding-box"
        })
      ])))
    },
    {
      id: "margin",
      title: "Margin",
      icon: "carbon:area",
      onMount: (api) => mountApp(api, () => h$2(Qg, {
        tokens: config.theme.margin,
        getName: (key) => {
          var _a2;
          return `${(_a2 = config.prefix) != null ? _a2 : ""}m-${key}`;
        }
      }, ({ token }) => h$2("div", {
        class: "__hst-margin"
      }, [
        h$2("div", {
          class: "__hst-margin-box",
          style: {
            margin: token.value
          }
        })
      ])))
    },
    {
      id: "font-size",
      title: "Font Size",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$2(Qg, {
        tokens: config.theme.fontSize,
        getName: (key) => {
          var _a2;
          return `${(_a2 = config.prefix) != null ? _a2 : ""}text-${key}`;
        }
      }, ({ token }) => h$2("div", {
        class: "__hst-truncate",
        style: {
          fontSize: token.value[0],
          ...token.value[1]
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$2(Kg, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        })
      ])
    },
    {
      id: "font-weight",
      title: "Font Weight",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$2(Qg, {
        tokens: config.theme.fontWeight,
        getName: (key) => {
          var _a2;
          return `${(_a2 = config.prefix) != null ? _a2 : ""}font-${key}`;
        }
      }, ({ token }) => h$2("div", {
        class: "__hst-truncate",
        style: {
          fontWeight: token.value,
          fontSize: `${fontSize.value}px`
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$2(Kg, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        }),
        h$2(jg, {
          title: "Font size",
          modelValue: fontSize.value,
          "onUpdate:modelValue": (value) => {
            fontSize.value = value;
          },
          min: 1
        })
      ])
    },
    {
      id: "font-family",
      title: "Font Family",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$2(Qg, {
        tokens: config.theme.fontFamily,
        getName: (key) => {
          var _a2;
          return `${(_a2 = config.prefix) != null ? _a2 : ""}font-${key}`;
        }
      }, ({ token }) => h$2("div", {
        class: "__hst-truncate",
        style: {
          fontFamily: token.value,
          fontSize: `${fontSize.value}px`
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$2(Kg, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        }),
        h$2(jg, {
          title: "Font size",
          modelValue: fontSize.value,
          "onUpdate:modelValue": (value) => {
            fontSize.value = value;
          },
          min: 1
        })
      ])
    },
    {
      id: "letter-spacing",
      title: "Letter Spacing",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$2(Qg, {
        tokens: config.theme.letterSpacing,
        getName: (key) => {
          var _a2;
          return `${(_a2 = config.prefix) != null ? _a2 : ""}tracking-${key}`;
        }
      }, ({ token }) => h$2("div", {
        class: "__hst-truncate",
        style: {
          letterSpacing: token.value,
          fontSize: `${fontSize.value}px`
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$2(Kg, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        }),
        h$2(jg, {
          title: "Font size",
          modelValue: fontSize.value,
          "onUpdate:modelValue": (value) => {
            fontSize.value = value;
          },
          min: 1
        })
      ])
    },
    {
      id: "line-height",
      title: "Line Height",
      icon: "carbon:text-font",
      onMount: (api) => mountApp(api, () => h$2(Qg, {
        tokens: config.theme.lineHeight,
        getName: (key) => {
          var _a2;
          return `${(_a2 = config.prefix) != null ? _a2 : ""}leading-${key}`;
        }
      }, ({ token }) => h$2("div", {
        style: {
          lineHeight: token.value
        }
      }, sampleText.value))),
      onMountControls: (api) => mountApp(api, () => [
        h$2(Kg, {
          title: "Sample text",
          modelValue: sampleText.value,
          "onUpdate:modelValue": (value) => {
            sampleText.value = value;
          },
          rows: 5
        })
      ])
    },
    {
      id: "drop-shadow",
      title: "Drop Shadow",
      icon: "carbon:shape-except",
      onMount: (api) => mountApp(api, () => h$2(Jg, {
        tokens: config.theme.dropShadow,
        getName: (key) => {
          var _a2;
          return ((_a2 = config.prefix) != null ? _a2 : "") + (key === "DEFAULT" ? "drop-shadow" : `drop-shadow-${key}`);
        },
        colSize: 180
      }, ({ token }) => h$2("div", {
        class: "__hst-drop-shadow",
        style: {
          filter: `${(Array.isArray(token.value) ? token.value : [token.value]).map((v2) => `drop-shadow(${v2})`).join(" ")}`
        }
      })))
    },
    {
      id: "border-radius",
      title: "Border Radius",
      icon: "carbon:condition-wait-point",
      onMount: (api) => mountApp(api, () => h$2(Jg, {
        tokens: config.theme.borderRadius,
        getName: (key) => {
          var _a2;
          return ((_a2 = config.prefix) != null ? _a2 : "") + (key === "DEFAULT" ? "rounded" : `rounded-${key}`);
        },
        colSize: 180
      }, ({ token }) => h$2("div", {
        class: "__hst-border-radius",
        style: {
          borderRadius: token.value
        }
      })))
    },
    {
      id: "border-width",
      title: "Border Width",
      icon: "carbon:checkbox",
      onMount: (api) => mountApp(api, () => h$2(Jg, {
        tokens: config.theme.borderWidth,
        getName: (key) => {
          var _a2;
          return ((_a2 = config.prefix) != null ? _a2 : "") + (key === "DEFAULT" ? "border" : `border-${key}`);
        },
        colSize: 180
      }, ({ token }) => h$2("div", {
        class: "__hst-border-width",
        style: {
          borderWidth: token.value
        }
      })))
    },
    {
      id: "width",
      title: "Width",
      icon: "carbon:pan-horizontal",
      onMount: (api) => mountApp(api, () => h$2(Qg, {
        tokens: config.theme.width,
        getName: (key) => {
          var _a2;
          return ((_a2 = config.prefix) != null ? _a2 : "") + (key === "DEFAULT" ? "w" : `w-${key}`);
        }
      }, ({ token }) => h$2("div", {
        class: "__hst-width"
      }, [
        h$2("div", {
          class: "__hst-width-box",
          style: {
            width: token.value
          }
        })
      ])))
    },
    {
      id: "height",
      title: "Height",
      icon: "carbon:pan-vertical",
      onMount: (api) => mountApp(api, () => h$2(Qg, {
        tokens: config.theme.height,
        getName: (key) => {
          var _a2;
          return ((_a2 = config.prefix) != null ? _a2 : "") + (key === "DEFAULT" ? "h" : `h-${key}`);
        }
      }, ({ token }) => h$2("div", {
        class: "__hst-height",
        style: {
          height: token.value
        }
      })))
    },
    {
      id: "full-config",
      title: "Full Config",
      icon: "carbon:code",
      onMount: (api) => mountApp(api, () => h$2("pre", JSON.stringify(config, null, 2)))
    }
  ]
};
/*!
  * vue-router v4.1.6
  * (c) 2022 Eduardo San Martin Morote
  * @license MIT
  */
const isBrowser = typeof window !== "undefined";
function isESModule(obj) {
  return obj.__esModule || obj[Symbol.toStringTag] === "Module";
}
const assign = Object.assign;
function applyToParams(fn2, params) {
  const newParams = {};
  for (const key in params) {
    const value = params[key];
    newParams[key] = isArray(value) ? value.map(fn2) : fn2(value);
  }
  return newParams;
}
const noop = () => {
};
const isArray = Array.isArray;
function warn(msg) {
  const args = Array.from(arguments).slice(1);
  console.warn.apply(console, ["[Vue Router warn]: " + msg].concat(args));
}
const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, "");
function parseURL(parseQuery2, location2, currentLocation = "/") {
  let path, query = {}, searchString = "", hash2 = "";
  const hashPos = location2.indexOf("#");
  let searchPos = location2.indexOf("?");
  if (hashPos < searchPos && hashPos >= 0) {
    searchPos = -1;
  }
  if (searchPos > -1) {
    path = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path = path || location2.slice(0, hashPos);
    hash2 = location2.slice(hashPos, location2.length);
  }
  path = resolveRelativePath(path != null ? path : location2, currentLocation);
  return {
    fullPath: path + (searchString && "?") + searchString + hash2,
    path,
    query,
    hash: hash2
  };
}
function stringifyURL(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase(pathname, base) {
  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
    return pathname;
  return pathname.slice(base.length) || "/";
}
function isSameRouteLocation(stringifyQuery2, a2, b2) {
  const aLastIndex = a2.matched.length - 1;
  const bLastIndex = b2.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a2.matched[aLastIndex], b2.matched[bLastIndex]) && isSameRouteLocationParams(a2.params, b2.params) && stringifyQuery2(a2.query) === stringifyQuery2(b2.query) && a2.hash === b2.hash;
}
function isSameRouteRecord(a2, b2) {
  return (a2.aliasOf || a2) === (b2.aliasOf || b2);
}
function isSameRouteLocationParams(a2, b2) {
  if (Object.keys(a2).length !== Object.keys(b2).length)
    return false;
  for (const key in a2) {
    if (!isSameRouteLocationParamsValue(a2[key], b2[key]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue(a2, b2) {
  return isArray(a2) ? isEquivalentArray(a2, b2) : isArray(b2) ? isEquivalentArray(b2, a2) : a2 === b2;
}
function isEquivalentArray(a2, b2) {
  return isArray(b2) ? a2.length === b2.length && a2.every((value, i2) => value === b2[i2]) : a2.length === 1 && a2[0] === b2;
}
function resolveRelativePath(to2, from) {
  if (to2.startsWith("/"))
    return to2;
  if (!from.startsWith("/")) {
    warn(`Cannot resolve a relative location without an absolute path. Trying to resolve "${to2}" from "${from}". It should look like "/${from}".`);
    return to2;
  }
  if (!to2)
    return from;
  const fromSegments = from.split("/");
  const toSegments = to2.split("/");
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (segment === ".")
      continue;
    if (segment === "..") {
      if (position > 1)
        position--;
    } else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join("/");
}
var NavigationType$1;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType$1 || (NavigationType$1 = {}));
var NavigationDirection$1;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection$1 || (NavigationDirection$1 = {}));
function normalizeBase(base) {
  if (!base) {
    if (isBrowser) {
      const baseEl = document.querySelector("base");
      base = baseEl && baseEl.getAttribute("href") || "/";
      base = base.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base = "/";
    }
  }
  if (base[0] !== "/" && base[0] !== "#")
    base = "/" + base;
  return removeTrailingSlash(base);
}
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base, location2) {
  return base.replace(BEFORE_HASH_RE, "#") + location2;
}
function getElementPosition(el2, offset2) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el2.getBoundingClientRect();
  return {
    behavior: offset2.behavior,
    left: elRect.left - docRect.left - (offset2.left || 0),
    top: elRect.top - docRect.top - (offset2.top || 0)
  };
}
const computeScrollPosition = () => ({
  left: window.pageXOffset,
  top: window.pageYOffset
});
function scrollToPosition(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    if (typeof position.el === "string") {
      if (!isIdSelector || !document.getElementById(position.el.slice(1))) {
        try {
          const foundEl = document.querySelector(position.el);
          if (isIdSelector && foundEl) {
            warn(`The selector "${position.el}" should be passed as "el: document.querySelector('${position.el}')" because it starts with "#".`);
            return;
          }
        } catch (err) {
          warn(`The selector "${position.el}" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);
          return;
        }
      }
    }
    const el2 = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el2) {
      warn(`Couldn't find element using selector "${position.el}" returned by scrollBehavior.`);
      return;
    }
    scrollToOptions = getElementPosition(el2, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);
  }
}
function getScrollKey(path, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path;
}
const scrollPositions = /* @__PURE__ */ new Map();
function saveScrollPosition(key, scrollPosition) {
  scrollPositions.set(key, scrollPosition);
}
function getSavedScrollPosition(key) {
  const scroll = scrollPositions.get(key);
  scrollPositions.delete(key);
  return scroll;
}
let createBaseLocation = () => location.protocol + "//" + location.host;
function createCurrentLocation(base, location2) {
  const { pathname, search: search2, hash: hash2 } = location2;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash2.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash2.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase(pathFromHash, "");
  }
  const path = stripBase(pathname, base);
  return path + search2 + hash2;
}
function useHistoryListeners(base, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state }) => {
    const to2 = createCurrentLocation(base, location);
    const from = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state) {
      currentLocation.value = to2;
      historyState.value = state;
      if (pauseState && pauseState === from) {
        pauseState = null;
        return;
      }
      delta = fromState ? state.position - fromState.position : 0;
    } else {
      replace(to2);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from, {
        delta,
        type: NavigationType$1.pop,
        direction: delta ? delta > 0 ? NavigationDirection$1.forward : NavigationDirection$1.back : NavigationDirection$1.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index = listeners.indexOf(callback);
      if (index > -1)
        listeners.splice(index, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign({}, history2.state, { scroll: computeScrollPosition() }), "");
  }
  function destroy() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener);
  return {
    pauseListeners,
    listen,
    destroy
  };
}
function buildState(back, current, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition() : null
  };
}
function useHistoryStateNavigation(base) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation(base, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      position: history2.length - 1,
      replaced: true,
      scroll: null
    }, true);
  }
  function changeLocation(to2, state, replace2) {
    const hashIndex = base.indexOf("#");
    const url = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base : base.slice(hashIndex)) + to2 : createBaseLocation() + base + to2;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state, "", url);
      historyState.value = state;
    } catch (err) {
      {
        warn("Error with push/replace State", err);
      }
      location2[replace2 ? "replace" : "assign"](url);
    }
  }
  function replace(to2, data) {
    const state = assign({}, history2.state, buildState(
      historyState.value.back,
      to2,
      historyState.value.forward,
      true
    ), data, { position: historyState.value.position });
    changeLocation(to2, state, true);
    currentLocation.value = to2;
  }
  function push(to2, data) {
    const currentState = assign(
      {},
      historyState.value,
      history2.state,
      {
        forward: to2,
        scroll: computeScrollPosition()
      }
    );
    if (!history2.state) {
      warn(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:

history.replaceState(history.state, '', url)

You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);
    }
    changeLocation(currentState.current, currentState, true);
    const state = assign({}, buildState(currentLocation.value, to2, null), { position: currentState.position + 1 }, data);
    changeLocation(to2, state, false);
    currentLocation.value = to2;
  }
  return {
    location: currentLocation,
    state: historyState,
    push,
    replace
  };
}
function createWebHistory(base) {
  base = normalizeBase(base);
  const historyNavigation = useHistoryStateNavigation(base);
  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go2(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign({
    location: "",
    base,
    go: go2,
    createHref: createHref.bind(null, base)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function createWebHashHistory(base) {
  base = location.host ? base || location.pathname + location.search : "";
  if (!base.includes("#"))
    base += "#";
  if (!base.endsWith("#/") && !base.endsWith("#")) {
    warn(`A hash base must end with a "#":
"${base}" should be "${base.replace(/#.*$/, "#")}".`);
  }
  return createWebHistory(base);
}
function isRouteLocation(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName(name) {
  return typeof name === "string" || typeof name === "symbol";
}
const START_LOCATION_NORMALIZED = {
  path: "/",
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
const NavigationFailureSymbol = Symbol("navigation failure");
var NavigationFailureType$1;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType$1 || (NavigationFailureType$1 = {}));
const ErrorTypeMessages = {
  [1]({ location: location2, currentLocation }) {
    return `No match for
 ${JSON.stringify(location2)}${currentLocation ? "\nwhile being at\n" + JSON.stringify(currentLocation) : ""}`;
  },
  [2]({ from, to: to2 }) {
    return `Redirected from "${from.fullPath}" to "${stringifyRoute(to2)}" via a navigation guard.`;
  },
  [4]({ from, to: to2 }) {
    return `Navigation aborted from "${from.fullPath}" to "${to2.fullPath}" via a navigation guard.`;
  },
  [8]({ from, to: to2 }) {
    return `Navigation cancelled from "${from.fullPath}" to "${to2.fullPath}" with a new navigation.`;
  },
  [16]({ from, to: to2 }) {
    return `Avoided redundant navigation to current location: "${from.fullPath}".`;
  }
};
function createRouterError(type, params) {
  {
    return assign(new Error(ErrorTypeMessages[type](params)), {
      type,
      [NavigationFailureSymbol]: true
    }, params);
  }
}
function isNavigationFailure(error, type) {
  return error instanceof Error && NavigationFailureSymbol in error && (type == null || !!(error.type & type));
}
const propertiesToLog = ["params", "query", "hash"];
function stringifyRoute(to2) {
  if (typeof to2 === "string")
    return to2;
  if ("path" in to2)
    return to2.path;
  const location2 = {};
  for (const key of propertiesToLog) {
    if (key in to2)
      location2[key] = to2[key];
  }
  return JSON.stringify(location2, null, 2);
}
const BASE_PARAM_PATTERN = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
function tokensToParser(segments, extraOptions) {
  const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);
  const score = [];
  let pattern = options.start ? "^" : "";
  const keys = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [90];
    if (options.strict && !segment.length)
      pattern += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token = segment[tokenIndex];
      let subSegmentScore = 40 + (options.sensitive ? 0.25 : 0);
      if (token.type === 0) {
        if (!tokenIndex)
          pattern += "/";
        pattern += token.value.replace(REGEX_CHARS_RE, "\\$&");
        subSegmentScore += 40;
      } else if (token.type === 1) {
        const { value, repeatable, optional, regexp } = token;
        keys.push({
          name: value,
          repeatable,
          optional
        });
        const re3 = regexp ? regexp : BASE_PARAM_PATTERN;
        if (re3 !== BASE_PARAM_PATTERN) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re3})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value}" (${re3}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re3})(?:/(?:${re3}))*)` : `(${re3})`;
        if (!tokenIndex)
          subPattern = optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re3 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options.strict && options.end) {
    const i2 = score.length - 1;
    score[i2][score[i2].length - 1] += 0.7000000000000001;
  }
  if (!options.strict)
    pattern += "/?";
  if (options.end)
    pattern += "$";
  else if (options.strict)
    pattern += "(?:/|$)";
  const re2 = new RegExp(pattern, options.sensitive ? "" : "i");
  function parse2(path) {
    const match = path.match(re2);
    const params = {};
    if (!match)
      return null;
    for (let i2 = 1; i2 < match.length; i2++) {
      const value = match[i2] || "";
      const key = keys[i2 - 1];
      params[key.name] = value && key.repeatable ? value.split("/") : value;
    }
    return params;
  }
  function stringify(params) {
    let path = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path.endsWith("/"))
        path += "/";
      avoidDuplicatedSlash = false;
      for (const token of segment) {
        if (token.type === 0) {
          path += token.value;
        } else if (token.type === 1) {
          const { value, repeatable, optional } = token;
          const param = value in params ? params[value] : "";
          if (isArray(param) && !repeatable) {
            throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
          }
          const text = isArray(param) ? param.join("/") : param;
          if (!text) {
            if (optional) {
              if (segment.length < 2) {
                if (path.endsWith("/"))
                  path = path.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value}"`);
          }
          path += text;
        }
      }
    }
    return path || "/";
  }
  return {
    re: re2,
    score,
    keys,
    parse: parse2,
    stringify
  };
}
function compareScoreArray(a2, b2) {
  let i2 = 0;
  while (i2 < a2.length && i2 < b2.length) {
    const diff = b2[i2] - a2[i2];
    if (diff)
      return diff;
    i2++;
  }
  if (a2.length < b2.length) {
    return a2.length === 1 && a2[0] === 40 + 40 ? -1 : 1;
  } else if (a2.length > b2.length) {
    return b2.length === 1 && b2[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore(a2, b2) {
  let i2 = 0;
  const aScore = a2.score;
  const bScore = b2.score;
  while (i2 < aScore.length && i2 < bScore.length) {
    const comp = compareScoreArray(aScore[i2], bScore[i2]);
    if (comp)
      return comp;
    i2++;
  }
  if (Math.abs(bScore.length - aScore.length) === 1) {
    if (isLastScoreNegative(aScore))
      return 1;
    if (isLastScoreNegative(bScore))
      return -1;
  }
  return bScore.length - aScore.length;
}
function isLastScoreNegative(score) {
  const last = score[score.length - 1];
  return score.length > 0 && last[last.length - 1] < 0;
}
const ROOT_TOKEN = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
function tokenizePath(path) {
  if (!path)
    return [[]];
  if (path === "/")
    return [[ROOT_TOKEN]];
  if (!path.startsWith("/")) {
    throw new Error(
      `Route paths should start with a "/": "${path}" should be "/${path}".`
    );
  }
  function crash(message) {
    throw new Error(`ERR (${state})/"${buffer2}": ${message}`);
  }
  let state = 0;
  let previousState = state;
  const tokens = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens.push(segment);
    segment = [];
  }
  let i2 = 0;
  let char;
  let buffer2 = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer2)
      return;
    if (state === 0) {
      segment.push({
        type: 0,
        value: buffer2
      });
    } else if (state === 1 || state === 2 || state === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer2}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer2,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer2 = "";
  }
  function addCharToBuffer() {
    buffer2 += char;
  }
  while (i2 < path.length) {
    char = path[i2++];
    if (char === "\\" && state !== 2) {
      previousState = state;
      state = 4;
      continue;
    }
    switch (state) {
      case 0:
        if (char === "/") {
          if (buffer2) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state = previousState;
        break;
      case 1:
        if (char === "(") {
          state = 2;
        } else if (VALID_PARAM_RE.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i2--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i2--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state === 2)
    crash(`Unfinished custom RegExp for param "${buffer2}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens;
}
function createRouteRecordMatcher(record, parent, options) {
  const parser = tokensToParser(tokenizePath(record.path), options);
  {
    const existingKeys = /* @__PURE__ */ new Set();
    for (const key of parser.keys) {
      if (existingKeys.has(key.name))
        warn(`Found duplicated params with name "${key.name}" for path "${record.path}". Only the last one will be available on "$route.params".`);
      existingKeys.add(key.name);
    }
  }
  const matcher = assign(parser, {
    record,
    parent,
    children: [],
    alias: []
  });
  if (parent) {
    if (!matcher.record.aliasOf === !parent.record.aliasOf)
      parent.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher(routes, globalOptions) {
  const matchers = [];
  const matcherMap = /* @__PURE__ */ new Map();
  globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name) {
    return matcherMap.get(name);
  }
  function addRoute(record, parent, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord(record);
    {
      checkChildMissingNameWithEmptyPath(mainNormalizedRecord, parent);
    }
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options = mergeOptions(globalOptions, record);
    const normalizedRecords = [
      mainNormalizedRecord
    ];
    if ("alias" in record) {
      const aliases = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases) {
        normalizedRecords.push(assign({}, mainNormalizedRecord, {
          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
          path: alias,
          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
        }));
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path } = normalizedRecord;
      if (parent && path[0] !== "/") {
        const parentPath = parent.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);
      }
      if (normalizedRecord.path === "*") {
        throw new Error('Catch all routes ("*") must now be defined using a param with a custom regexp.\nSee more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');
      }
      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);
      if (parent && path[0] === "/")
        checkMissingParamsInAbsolutePath(matcher, parent);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
        {
          checkSameParams(originalRecord, matcher);
        }
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord(matcher))
          removeRoute(record.name);
      }
      if (mainNormalizedRecord.children) {
        const children = mainNormalizedRecord.children;
        for (let i2 = 0; i2 < children.length; i2++) {
          addRoute(children[i2], matcher, originalRecord && originalRecord.children[i2]);
        }
      }
      originalRecord = originalRecord || matcher;
      if (matcher.record.components && Object.keys(matcher.record.components).length || matcher.record.name || matcher.record.redirect) {
        insertMatcher(matcher);
      }
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop;
  }
  function removeRoute(matcherRef) {
    if (isRouteName(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers.splice(matchers.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index = matchers.indexOf(matcherRef);
      if (index > -1) {
        matchers.splice(index, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers;
  }
  function insertMatcher(matcher) {
    let i2 = 0;
    while (i2 < matchers.length && comparePathParserScore(matcher, matchers[i2]) >= 0 && (matcher.record.path !== matchers[i2].record.path || !isRecordChildOf(matcher, matchers[i2])))
      i2++;
    matchers.splice(i2, 0, matcher);
    if (matcher.record.name && !isAliasRecord(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve2(location2, currentLocation) {
    let matcher;
    let params = {};
    let path;
    let name;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError(1, {
          location: location2
        });
      {
        const invalidParams = Object.keys(location2.params || {}).filter((paramName) => !matcher.keys.find((k2) => k2.name === paramName));
        if (invalidParams.length) {
          warn(`Discarded invalid param(s) "${invalidParams.join('", "')}" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`);
        }
      }
      name = matcher.record.name;
      params = assign(
        paramsFromLocation(
          currentLocation.params,
          matcher.keys.filter((k2) => !k2.optional).map((k2) => k2.name)
        ),
        location2.params && paramsFromLocation(location2.params, matcher.keys.map((k2) => k2.name))
      );
      path = matcher.stringify(params);
    } else if ("path" in location2) {
      path = location2.path;
      if (!path.startsWith("/")) {
        warn(`The Matcher cannot resolve relative paths but received "${path}". Unless you directly called \`matcher.resolve("${path}")\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/router.`);
      }
      matcher = matchers.find((m2) => m2.re.test(path));
      if (matcher) {
        params = matcher.parse(path);
        name = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find((m2) => m2.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError(1, {
          location: location2,
          currentLocation
        });
      name = matcher.record.name;
      params = assign({}, currentLocation.params, location2.params);
      path = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name,
      path,
      params,
      matched,
      meta: mergeMetaFields(matched)
    };
  }
  routes.forEach((route) => addRoute(route));
  return { addRoute, resolve: resolve2, removeRoute, getRoutes, getRecordMatcher };
}
function paramsFromLocation(params, keys) {
  const newParams = {};
  for (const key of keys) {
    if (key in params)
      newParams[key] = params[key];
  }
  return newParams;
}
function normalizeRouteRecord(record) {
  return {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: void 0,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps(record),
    children: record.children || [],
    instances: {},
    leaveGuards: /* @__PURE__ */ new Set(),
    updateGuards: /* @__PURE__ */ new Set(),
    enterCallbacks: {},
    components: "components" in record ? record.components || null : record.component && { default: record.component }
  };
}
function normalizeRecordProps(record) {
  const propsObject = {};
  const props = record.props || false;
  if ("component" in record) {
    propsObject.default = props;
  } else {
    for (const name in record.components)
      propsObject[name] = typeof props === "boolean" ? props : props[name];
  }
  return propsObject;
}
function isAliasRecord(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields(matched) {
  return matched.reduce((meta, record) => assign(meta, record.meta), {});
}
function mergeOptions(defaults2, partialOptions) {
  const options = {};
  for (const key in defaults2) {
    options[key] = key in partialOptions ? partialOptions[key] : defaults2[key];
  }
  return options;
}
function isSameParam(a2, b2) {
  return a2.name === b2.name && a2.optional === b2.optional && a2.repeatable === b2.repeatable;
}
function checkSameParams(a2, b2) {
  for (const key of a2.keys) {
    if (!key.optional && !b2.keys.find(isSameParam.bind(null, key)))
      return warn(`Alias "${b2.record.path}" and the original record: "${a2.record.path}" must have the exact same param named "${key.name}"`);
  }
  for (const key of b2.keys) {
    if (!key.optional && !a2.keys.find(isSameParam.bind(null, key)))
      return warn(`Alias "${b2.record.path}" and the original record: "${a2.record.path}" must have the exact same param named "${key.name}"`);
  }
}
function checkChildMissingNameWithEmptyPath(mainNormalizedRecord, parent) {
  if (parent && parent.record.name && !mainNormalizedRecord.name && !mainNormalizedRecord.path) {
    warn(`The route named "${String(parent.record.name)}" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`);
  }
}
function checkMissingParamsInAbsolutePath(record, parent) {
  for (const key of parent.keys) {
    if (!record.keys.find(isSameParam.bind(null, key)))
      return warn(`Absolute path "${record.record.path}" must have the exact same param named "${key.name}" as its parent "${parent.record.path}".`);
  }
}
function isRecordChildOf(record, parent) {
  return parent.children.some((child) => child === record || isRecordChildOf(record, child));
}
const HASH_RE = /#/g;
const AMPERSAND_RE = /&/g;
const SLASH_RE = /\//g;
const EQUAL_RE = /=/g;
const IM_RE = /\?/g;
const PLUS_RE = /\+/g;
const ENC_BRACKET_OPEN_RE = /%5B/g;
const ENC_BRACKET_CLOSE_RE = /%5D/g;
const ENC_CARET_RE = /%5E/g;
const ENC_BACKTICK_RE = /%60/g;
const ENC_CURLY_OPEN_RE = /%7B/g;
const ENC_PIPE_RE = /%7C/g;
const ENC_CURLY_CLOSE_RE = /%7D/g;
const ENC_SPACE_RE = /%20/g;
function commonEncode(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE, "|").replace(ENC_BRACKET_OPEN_RE, "[").replace(ENC_BRACKET_CLOSE_RE, "]");
}
function encodeHash(text) {
  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryValue(text) {
  return commonEncode(text).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryKey(text) {
  return encodeQueryValue(text).replace(EQUAL_RE, "%3D");
}
function encodePath(text) {
  return commonEncode(text).replace(HASH_RE, "%23").replace(IM_RE, "%3F");
}
function encodeParam(text) {
  return text == null ? "" : encodePath(text).replace(SLASH_RE, "%2F");
}
function decode(text) {
  try {
    return decodeURIComponent("" + text);
  } catch (err) {
    warn(`Error decoding "${text}". Using original value`);
  }
  return "" + text;
}
function parseQuery(search2) {
  const query = {};
  if (search2 === "" || search2 === "?")
    return query;
  const hasLeadingIM = search2[0] === "?";
  const searchParams = (hasLeadingIM ? search2.slice(1) : search2).split("&");
  for (let i2 = 0; i2 < searchParams.length; ++i2) {
    const searchParam = searchParams[i2].replace(PLUS_RE, " ");
    const eqPos = searchParam.indexOf("=");
    const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
    if (key in query) {
      let currentValue = query[key];
      if (!isArray(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value);
    } else {
      query[key] = value;
    }
  }
  return query;
}
function stringifyQuery(query) {
  let search2 = "";
  for (let key in query) {
    const value = query[key];
    key = encodeQueryKey(key);
    if (value == null) {
      if (value !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
      }
      continue;
    }
    const values = isArray(value) ? value.map((v2) => v2 && encodeQueryValue(v2)) : [value && encodeQueryValue(value)];
    values.forEach((value2) => {
      if (value2 !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
        if (value2 != null)
          search2 += "=" + value2;
      }
    });
  }
  return search2;
}
function normalizeQuery(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value = query[key];
    if (value !== void 0) {
      normalizedQuery[key] = isArray(value) ? value.map((v2) => v2 == null ? null : "" + v2) : value == null ? value : "" + value;
    }
  }
  return normalizedQuery;
}
const matchedRouteKey = Symbol("router view location matched");
const viewDepthKey = Symbol("router view depth");
const routerKey$1 = Symbol("router");
const routeLocationKey = Symbol("route location");
const routerViewLocationKey = Symbol("router view location");
function useCallbacks() {
  let handlers2 = [];
  function add2(handler) {
    handlers2.push(handler);
    return () => {
      const i2 = handlers2.indexOf(handler);
      if (i2 > -1)
        handlers2.splice(i2, 1);
    };
  }
  function reset() {
    handlers2 = [];
  }
  return {
    add: add2,
    list: () => handlers2,
    reset
  };
}
function guardToPromiseFn(guard, to2, from, record, name) {
  const enterCallbackArray = record && (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
  return () => new Promise((resolve2, reject) => {
    const next = (valid) => {
      if (valid === false) {
        reject(createRouterError(4, {
          from,
          to: to2
        }));
      } else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation(valid)) {
        reject(createRouterError(2, {
          from: to2,
          to: valid
        }));
      } else {
        if (enterCallbackArray && record.enterCallbacks[name] === enterCallbackArray && typeof valid === "function") {
          enterCallbackArray.push(valid);
        }
        resolve2();
      }
    };
    const guardReturn = guard.call(record && record.instances[name], to2, from, canOnlyBeCalledOnce(next, to2, from));
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next);
    if (guard.length > 2) {
      const message = `The "next" callback was never called inside of ${guard.name ? '"' + guard.name + '"' : ""}:
${guard.toString()}
. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.`;
      if (typeof guardReturn === "object" && "then" in guardReturn) {
        guardCall = guardCall.then((resolvedValue) => {
          if (!next._called) {
            warn(message);
            return Promise.reject(new Error("Invalid navigation guard"));
          }
          return resolvedValue;
        });
      } else if (guardReturn !== void 0) {
        if (!next._called) {
          warn(message);
          reject(new Error("Invalid navigation guard"));
          return;
        }
      }
    }
    guardCall.catch((err) => reject(err));
  });
}
function canOnlyBeCalledOnce(next, to2, from) {
  let called = 0;
  return function() {
    if (called++ === 1)
      warn(`The "next" callback was called more than once in one navigation guard when going from "${from.fullPath}" to "${to2.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`);
    next._called = true;
    if (called === 1)
      next.apply(null, arguments);
  };
}
function extractComponentsGuards(matched, guardType, to2, from) {
  const guards = [];
  for (const record of matched) {
    if (!record.components && !record.children.length) {
      warn(`Record with path "${record.path}" is either missing a "component(s)" or "children" property.`);
    }
    for (const name in record.components) {
      let rawComponent = record.components[name];
      {
        if (!rawComponent || typeof rawComponent !== "object" && typeof rawComponent !== "function") {
          warn(`Component "${name}" in record with path "${record.path}" is not a valid component. Received "${String(rawComponent)}".`);
          throw new Error("Invalid route component");
        } else if ("then" in rawComponent) {
          warn(`Component "${name}" in record with path "${record.path}" is a Promise instead of a function that returns a Promise. Did you write "import('./MyPage.vue')" instead of "() => import('./MyPage.vue')" ? This will break in production if not fixed.`);
          const promise = rawComponent;
          rawComponent = () => promise;
        } else if (rawComponent.__asyncLoader && !rawComponent.__warnedDefineAsync) {
          rawComponent.__warnedDefineAsync = true;
          warn(`Component "${name}" in record with path "${record.path}" is defined using "defineAsyncComponent()". Write "() => import('./MyPage.vue')" instead of "defineAsyncComponent(() => import('./MyPage.vue'))".`);
        }
      }
      if (guardType !== "beforeRouteEnter" && !record.instances[name])
        continue;
      if (isRouteComponent(rawComponent)) {
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard && guards.push(guardToPromiseFn(guard, to2, from, record, name));
      } else {
        let componentPromise = rawComponent();
        if (!("catch" in componentPromise)) {
          warn(`Component "${name}" in record with path "${record.path}" is a function that does not return a Promise. If you were passing a functional component, make sure to add a "displayName" to the component. This will break in production if not fixed.`);
          componentPromise = Promise.resolve(componentPromise);
        }
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            return Promise.reject(new Error(`Couldn't resolve component "${name}" at "${record.path}"`));
          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;
          record.components[name] = resolvedComponent;
          const options = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options[guardType];
          return guard && guardToPromiseFn(guard, to2, from, record, name)();
        }));
      }
    }
  }
  return guards;
}
function isRouteComponent(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function useLink(props) {
  const router = inject$1(routerKey$1);
  const currentRoute = inject$1(routeLocationKey);
  const route = computed$2(() => router.resolve(unref$1(props.to)));
  const activeRecordIndex = computed$2(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
    if (index > -1)
      return index;
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return length > 1 && getOriginalPath(routeMatched) === parentRecordPath && currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index;
  });
  const isActive = computed$2(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));
  const isExactActive = computed$2(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));
  function navigate(e2 = {}) {
    if (guardEvent(e2)) {
      return router[unref$1(props.replace) ? "replace" : "push"](
        unref$1(props.to)
      ).catch(noop);
    }
    return Promise.resolve();
  }
  if (isBrowser) {
    const instance = getCurrentInstance$1();
    if (instance) {
      const linkContextDevtools = {
        route: route.value,
        isActive: isActive.value,
        isExactActive: isExactActive.value
      };
      instance.__vrl_devtools = instance.__vrl_devtools || [];
      instance.__vrl_devtools.push(linkContextDevtools);
      watchEffect$1(() => {
        linkContextDevtools.route = route.value;
        linkContextDevtools.isActive = isActive.value;
        linkContextDevtools.isExactActive = isExactActive.value;
      }, { flush: "post" });
    }
  }
  return {
    route,
    href: computed$2(() => route.value.href),
    isActive,
    isExactActive,
    navigate
  };
}
const RouterLinkImpl = /* @__PURE__ */ defineComponent$1({
  name: "RouterLink",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink,
  setup(props, { slots }) {
    const link = reactive$1(useLink(props));
    const { options } = inject$1(routerKey$1);
    const elClass = computed$2(() => ({
      [getLinkClass(props.activeClass, options.linkActiveClass, "router-link-active")]: link.isActive,
      [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, "router-link-exact-active")]: link.isExactActive
    }));
    return () => {
      const children = slots.default && slots.default(link);
      return props.custom ? children : h$2("a", {
        "aria-current": link.isExactActive ? props.ariaCurrentValue : null,
        href: link.href,
        onClick: link.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink = RouterLinkImpl;
function guardEvent(e2) {
  if (e2.metaKey || e2.altKey || e2.ctrlKey || e2.shiftKey)
    return;
  if (e2.defaultPrevented)
    return;
  if (e2.button !== void 0 && e2.button !== 0)
    return;
  if (e2.currentTarget && e2.currentTarget.getAttribute) {
    const target = e2.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e2.preventDefault)
    e2.preventDefault();
  return true;
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i2) => value !== outerValue[i2]))
        return false;
    }
  }
  return true;
}
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl = /* @__PURE__ */ defineComponent$1({
  name: "RouterView",
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  compatConfig: { MODE: 3 },
  setup(props, { attrs, slots }) {
    warnDeprecatedUsage();
    const injectedRoute = inject$1(routerViewLocationKey);
    const routeToDisplay = computed$2(() => props.route || injectedRoute.value);
    const injectedDepth = inject$1(viewDepthKey, 0);
    const depth = computed$2(() => {
      let initialDepth = unref$1(injectedDepth);
      const { matched } = routeToDisplay.value;
      let matchedRoute;
      while ((matchedRoute = matched[initialDepth]) && !matchedRoute.components) {
        initialDepth++;
      }
      return initialDepth;
    });
    const matchedRouteRef = computed$2(() => routeToDisplay.value.matched[depth.value]);
    provide$1(viewDepthKey, computed$2(() => depth.value + 1));
    provide$1(matchedRouteKey, matchedRouteRef);
    provide$1(routerViewLocationKey, routeToDisplay);
    const viewRef = ref$1();
    watch$1(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to2, name], [oldInstance, from, oldName]) => {
      if (to2) {
        to2.instances[name] = instance;
        if (from && from !== to2 && instance && instance === oldInstance) {
          if (!to2.leaveGuards.size) {
            to2.leaveGuards = from.leaveGuards;
          }
          if (!to2.updateGuards.size) {
            to2.updateGuards = from.updateGuards;
          }
        }
      }
      if (instance && to2 && (!from || !isSameRouteRecord(to2, from) || !oldInstance)) {
        (to2.enterCallbacks[name] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const currentName = props.name;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[currentName];
      if (!ViewComponent) {
        return normalizeSlot(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[currentName];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h$2(ViewComponent, assign({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      if (isBrowser && component.ref) {
        const info = {
          depth: depth.value,
          name: matchedRoute.name,
          path: matchedRoute.path,
          meta: matchedRoute.meta
        };
        const internalInstances = isArray(component.ref) ? component.ref.map((r2) => r2.i) : [component.ref.i];
        internalInstances.forEach((instance) => {
          instance.__vrv_devtools = info;
        });
      }
      return normalizeSlot(slots.default, { Component: component, route }) || component;
    };
  }
});
function normalizeSlot(slot, data) {
  if (!slot)
    return null;
  const slotContent = slot(data);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView = RouterViewImpl;
function warnDeprecatedUsage() {
  const instance = getCurrentInstance$1();
  const parentName = instance.parent && instance.parent.type.name;
  if (parentName && (parentName === "KeepAlive" || parentName.includes("Transition"))) {
    const comp = parentName === "KeepAlive" ? "keep-alive" : "transition";
    warn(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.
Use slot props instead:

<router-view v-slot="{ Component }">
  <${comp}>
    <component :is="Component" />
  </${comp}>
</router-view>`);
  }
}
function formatRouteLocation(routeLocation, tooltip) {
  const copy = assign({}, routeLocation, {
    matched: routeLocation.matched.map((matched) => omit$1(matched, ["instances", "children", "aliasOf"]))
  });
  return {
    _custom: {
      type: null,
      readOnly: true,
      display: routeLocation.fullPath,
      tooltip,
      value: copy
    }
  };
}
function formatDisplay(display) {
  return {
    _custom: {
      display
    }
  };
}
let routerId = 0;
function addDevtools(app, router, matcher) {
  if (router.__hasDevtools)
    return;
  router.__hasDevtools = true;
  const id2 = routerId++;
  setupDevtoolsPlugin({
    id: "org.vuejs.router" + (id2 ? "." + id2 : ""),
    label: "Vue Router",
    packageName: "vue-router",
    homepage: "https://router.vuejs.org",
    logo: "https://router.vuejs.org/logo.png",
    componentStateTypes: ["Routing"],
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.on.inspectComponent((payload, ctx) => {
      if (payload.instanceData) {
        payload.instanceData.state.push({
          type: "Routing",
          key: "$route",
          editable: false,
          value: formatRouteLocation(router.currentRoute.value, "Current Route")
        });
      }
    });
    api.on.visitComponentTree(({ treeNode: node, componentInstance }) => {
      if (componentInstance.__vrv_devtools) {
        const info = componentInstance.__vrv_devtools;
        node.tags.push({
          label: (info.name ? `${info.name.toString()}: ` : "") + info.path,
          textColor: 0,
          tooltip: "This component is rendered by &lt;router-view&gt;",
          backgroundColor: PINK_500
        });
      }
      if (isArray(componentInstance.__vrl_devtools)) {
        componentInstance.__devtoolsApi = api;
        componentInstance.__vrl_devtools.forEach((devtoolsData) => {
          let backgroundColor = ORANGE_400;
          let tooltip = "";
          if (devtoolsData.isExactActive) {
            backgroundColor = LIME_500;
            tooltip = "This is exactly active";
          } else if (devtoolsData.isActive) {
            backgroundColor = BLUE_600;
            tooltip = "This link is active";
          }
          node.tags.push({
            label: devtoolsData.route.path,
            textColor: 0,
            tooltip,
            backgroundColor
          });
        });
      }
    });
    watch$1(router.currentRoute, () => {
      refreshRoutesView();
      api.notifyComponentUpdate();
      api.sendInspectorTree(routerInspectorId);
      api.sendInspectorState(routerInspectorId);
    });
    const navigationsLayerId = "router:navigations:" + id2;
    api.addTimelineLayer({
      id: navigationsLayerId,
      label: `Router${id2 ? " " + id2 : ""} Navigations`,
      color: 4237508
    });
    router.onError((error, to2) => {
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          title: "Error during Navigation",
          subtitle: to2.fullPath,
          logType: "error",
          time: api.now(),
          data: { error },
          groupId: to2.meta.__navigationId
        }
      });
    });
    let navigationId = 0;
    router.beforeEach((to2, from) => {
      const data = {
        guard: formatDisplay("beforeEach"),
        from: formatRouteLocation(from, "Current Location during this navigation"),
        to: formatRouteLocation(to2, "Target location")
      };
      Object.defineProperty(to2.meta, "__navigationId", {
        value: navigationId++
      });
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          time: api.now(),
          title: "Start of navigation",
          subtitle: to2.fullPath,
          data,
          groupId: to2.meta.__navigationId
        }
      });
    });
    router.afterEach((to2, from, failure) => {
      const data = {
        guard: formatDisplay("afterEach")
      };
      if (failure) {
        data.failure = {
          _custom: {
            type: Error,
            readOnly: true,
            display: failure ? failure.message : "",
            tooltip: "Navigation Failure",
            value: failure
          }
        };
        data.status = formatDisplay("\u274C");
      } else {
        data.status = formatDisplay("\u2705");
      }
      data.from = formatRouteLocation(from, "Current Location during this navigation");
      data.to = formatRouteLocation(to2, "Target location");
      api.addTimelineEvent({
        layerId: navigationsLayerId,
        event: {
          title: "End of navigation",
          subtitle: to2.fullPath,
          time: api.now(),
          data,
          logType: failure ? "warning" : "default",
          groupId: to2.meta.__navigationId
        }
      });
    });
    const routerInspectorId = "router-inspector:" + id2;
    api.addInspector({
      id: routerInspectorId,
      label: "Routes" + (id2 ? " " + id2 : ""),
      icon: "book",
      treeFilterPlaceholder: "Search routes"
    });
    function refreshRoutesView() {
      if (!activeRoutesPayload)
        return;
      const payload = activeRoutesPayload;
      let routes = matcher.getRoutes().filter((route) => !route.parent);
      routes.forEach(resetMatchStateOnRouteRecord);
      if (payload.filter) {
        routes = routes.filter((route) => isRouteMatching(route, payload.filter.toLowerCase()));
      }
      routes.forEach((route) => markRouteRecordActive(route, router.currentRoute.value));
      payload.rootNodes = routes.map(formatRouteRecordForInspector);
    }
    let activeRoutesPayload;
    api.on.getInspectorTree((payload) => {
      activeRoutesPayload = payload;
      if (payload.app === app && payload.inspectorId === routerInspectorId) {
        refreshRoutesView();
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === routerInspectorId) {
        const routes = matcher.getRoutes();
        const route = routes.find((route2) => route2.record.__vd_id === payload.nodeId);
        if (route) {
          payload.state = {
            options: formatRouteRecordMatcherForStateInspector(route)
          };
        }
      }
    });
    api.sendInspectorTree(routerInspectorId);
    api.sendInspectorState(routerInspectorId);
  });
}
function modifierForKey(key) {
  if (key.optional) {
    return key.repeatable ? "*" : "?";
  } else {
    return key.repeatable ? "+" : "";
  }
}
function formatRouteRecordMatcherForStateInspector(route) {
  const { record } = route;
  const fields = [
    { editable: false, key: "path", value: record.path }
  ];
  if (record.name != null) {
    fields.push({
      editable: false,
      key: "name",
      value: record.name
    });
  }
  fields.push({ editable: false, key: "regexp", value: route.re });
  if (route.keys.length) {
    fields.push({
      editable: false,
      key: "keys",
      value: {
        _custom: {
          type: null,
          readOnly: true,
          display: route.keys.map((key) => `${key.name}${modifierForKey(key)}`).join(" "),
          tooltip: "Param keys",
          value: route.keys
        }
      }
    });
  }
  if (record.redirect != null) {
    fields.push({
      editable: false,
      key: "redirect",
      value: record.redirect
    });
  }
  if (route.alias.length) {
    fields.push({
      editable: false,
      key: "aliases",
      value: route.alias.map((alias) => alias.record.path)
    });
  }
  if (Object.keys(route.record.meta).length) {
    fields.push({
      editable: false,
      key: "meta",
      value: route.record.meta
    });
  }
  fields.push({
    key: "score",
    editable: false,
    value: {
      _custom: {
        type: null,
        readOnly: true,
        display: route.score.map((score) => score.join(", ")).join(" | "),
        tooltip: "Score used to sort routes",
        value: route.score
      }
    }
  });
  return fields;
}
const PINK_500 = 15485081;
const BLUE_600 = 2450411;
const LIME_500 = 8702998;
const CYAN_400 = 2282478;
const ORANGE_400 = 16486972;
const DARK = 6710886;
function formatRouteRecordForInspector(route) {
  const tags = [];
  const { record } = route;
  if (record.name != null) {
    tags.push({
      label: String(record.name),
      textColor: 0,
      backgroundColor: CYAN_400
    });
  }
  if (record.aliasOf) {
    tags.push({
      label: "alias",
      textColor: 0,
      backgroundColor: ORANGE_400
    });
  }
  if (route.__vd_match) {
    tags.push({
      label: "matches",
      textColor: 0,
      backgroundColor: PINK_500
    });
  }
  if (route.__vd_exactActive) {
    tags.push({
      label: "exact",
      textColor: 0,
      backgroundColor: LIME_500
    });
  }
  if (route.__vd_active) {
    tags.push({
      label: "active",
      textColor: 0,
      backgroundColor: BLUE_600
    });
  }
  if (record.redirect) {
    tags.push({
      label: typeof record.redirect === "string" ? `redirect: ${record.redirect}` : "redirects",
      textColor: 16777215,
      backgroundColor: DARK
    });
  }
  let id2 = record.__vd_id;
  if (id2 == null) {
    id2 = String(routeRecordId++);
    record.__vd_id = id2;
  }
  return {
    id: id2,
    label: record.path,
    tags,
    children: route.children.map(formatRouteRecordForInspector)
  };
}
let routeRecordId = 0;
const EXTRACT_REGEXP_RE = /^\/(.*)\/([a-z]*)$/;
function markRouteRecordActive(route, currentRoute) {
  const isExactActive = currentRoute.matched.length && isSameRouteRecord(currentRoute.matched[currentRoute.matched.length - 1], route.record);
  route.__vd_exactActive = route.__vd_active = isExactActive;
  if (!isExactActive) {
    route.__vd_active = currentRoute.matched.some((match) => isSameRouteRecord(match, route.record));
  }
  route.children.forEach((childRoute) => markRouteRecordActive(childRoute, currentRoute));
}
function resetMatchStateOnRouteRecord(route) {
  route.__vd_match = false;
  route.children.forEach(resetMatchStateOnRouteRecord);
}
function isRouteMatching(route, filter) {
  const found = String(route.re).match(EXTRACT_REGEXP_RE);
  route.__vd_match = false;
  if (!found || found.length < 3) {
    return false;
  }
  const nonEndingRE = new RegExp(found[1].replace(/\$$/, ""), found[2]);
  if (nonEndingRE.test(filter)) {
    route.children.forEach((child) => isRouteMatching(child, filter));
    if (route.record.path !== "/" || filter === "/") {
      route.__vd_match = route.re.test(filter);
      return true;
    }
    return false;
  }
  const path = route.record.path.toLowerCase();
  const decodedPath = decode(path);
  if (!filter.startsWith("/") && (decodedPath.includes(filter) || path.includes(filter)))
    return true;
  if (decodedPath.startsWith(filter) || path.startsWith(filter))
    return true;
  if (route.record.name && String(route.record.name).includes(filter))
    return true;
  return route.children.some((child) => isRouteMatching(child, filter));
}
function omit$1(obj, keys) {
  const ret = {};
  for (const key in obj) {
    if (!keys.includes(key)) {
      ret[key] = obj[key];
    }
  }
  return ret;
}
function createRouter(options) {
  const matcher = createRouterMatcher(options.routes, options);
  const parseQuery$1 = options.parseQuery || parseQuery;
  const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;
  const routerHistory = options.history;
  if (!routerHistory)
    throw new Error('Provide the "history" option when calling "createRouter()": https://next.router.vuejs.org/api/#history.');
  const beforeGuards = useCallbacks();
  const beforeResolveGuards = useCallbacks();
  const afterGuards = useCallbacks();
  const currentRoute = shallowRef$1(START_LOCATION_NORMALIZED);
  let pendingLocation = START_LOCATION_NORMALIZED;
  if (isBrowser && options.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams.bind(null, encodeParam);
  const decodeParams = applyToParams.bind(null, decode);
  function addRoute(parentOrRoute, route) {
    let parent;
    let record;
    if (isRouteName(parentOrRoute)) {
      parent = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent);
  }
  function removeRoute(name) {
    const recordMatcher = matcher.getRecordMatcher(name);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    } else {
      warn(`Cannot remove non-existent route "${String(name)}"`);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name) {
    return !!matcher.getRecordMatcher(name);
  }
  function resolve2(rawLocation, currentLocation) {
    currentLocation = assign({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      {
        if (href2.startsWith("//"))
          warn(`Location "${rawLocation}" resolved to "${href2}". A resolved location cannot start with multiple slashes.`);
        else if (!matchedRoute2.matched.length) {
          warn(`No match found for location with path "${rawLocation}"`);
        }
      }
      return assign(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if ("path" in rawLocation) {
      if ("params" in rawLocation && !("name" in rawLocation) && Object.keys(rawLocation.params).length) {
        warn(`Path "${rawLocation.path}" was passed with params but they will be ignored. Use a named route alongside params instead.`);
      }
      matcherLocation = assign({}, rawLocation, {
        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      matcherLocation = assign({}, rawLocation, {
        params: encodeParams(rawLocation.params)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash2 = rawLocation.hash || "";
    if (hash2 && !hash2.startsWith("#")) {
      warn(`A \`hash\` should always start with the character "#". Replace "${hash2}" with "#${hash2}".`);
    }
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {
      hash: encodeHash(hash2),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    {
      if (href.startsWith("//")) {
        warn(`Location "${rawLocation}" resolved to "${href}". A resolved location cannot start with multiple slashes.`);
      } else if (!matchedRoute.matched.length) {
        warn(`No match found for location with path "${"path" in rawLocation ? rawLocation.path : rawLocation}"`);
      }
    }
    return assign({
      fullPath,
      hash: hash2,
      query: stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {}
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to2) {
    return typeof to2 === "string" ? parseURL(parseQuery$1, to2, currentRoute.value.path) : assign({}, to2);
  }
  function checkCanceledNavigation(to2, from) {
    if (pendingLocation !== to2) {
      return createRouterError(8, {
        from,
        to: to2
      });
    }
  }
  function push(to2) {
    return pushWithRedirect(to2);
  }
  function replace(to2) {
    return push(assign(locationAsObject(to2), { replace: true }));
  }
  function handleRedirectRecord(to2) {
    const lastMatched = to2.matched[to2.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to2) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : { path: newTargetLocation };
        newTargetLocation.params = {};
      }
      if (!("path" in newTargetLocation) && !("name" in newTargetLocation)) {
        warn(`Invalid redirect found:
${JSON.stringify(newTargetLocation, null, 2)}
 when navigating to "${to2.fullPath}". A redirect must contain a name or path. This will break in production.`);
        throw new Error("Invalid redirect");
      }
      return assign({
        query: to2.query,
        hash: to2.hash,
        params: "path" in newTargetLocation ? {} : to2.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to2, redirectedFrom) {
    const targetLocation = pendingLocation = resolve2(to2);
    const from = currentRoute.value;
    const data = to2.state;
    const force = to2.force;
    const replace2 = to2.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(
        assign(locationAsObject(shouldRedirect), {
          state: typeof shouldRedirect === "object" ? assign({}, data, shouldRedirect.state) : data,
          force,
          replace: replace2
        }),
        redirectedFrom || targetLocation
      );
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {
      failure = createRouterError(16, { to: toLocation, from });
      handleScroll(
        from,
        from,
        true,
        false
      );
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch((error) => isNavigationFailure(error) ? isNavigationFailure(error, 2) ? error : markAsReady(error) : triggerError(error, toLocation, from)).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure(failure2, 2)) {
          if (isSameRouteLocation(stringifyQuery$1, resolve2(failure2.to), toLocation) && redirectedFrom && (redirectedFrom._count = redirectedFrom._count ? redirectedFrom._count + 1 : 1) > 10) {
            warn(`Detected an infinite redirection in a navigation guard when going from "${from.fullPath}" to "${toLocation.fullPath}". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`);
            return Promise.reject(new Error("Infinite redirect in navigation guard"));
          }
          return pushWithRedirect(
            assign({
              replace: replace2
            }, locationAsObject(failure2.to), {
              state: typeof failure2.to === "object" ? assign({}, data, failure2.to.state) : data,
              force
            }),
            redirectedFrom || toLocation
          );
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from, true, replace2, data);
      }
      triggerAfterEach(toLocation, from, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to2, from) {
    const error = checkCanceledNavigation(to2, from);
    return error ? Promise.reject(error) : Promise.resolve();
  }
  function navigate(to2, from) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to2, from);
    guards = extractComponentsGuards(leavingRecords.reverse(), "beforeRouteLeave", to2, from);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn(guard, to2, from));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to2, from);
    guards.push(canceledNavigationCheck);
    return runGuardQueue(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = extractComponentsGuards(updatingRecords, "beforeRouteUpdate", to2, from);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn(guard, to2, from));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const record of to2.matched) {
        if (record.beforeEnter && !from.matched.includes(record)) {
          if (isArray(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn(beforeEnter, to2, from));
          } else {
            guards.push(guardToPromiseFn(record.beforeEnter, to2, from));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      to2.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards(enteringRecords, "beforeRouteEnter", to2, from);
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn(guard, to2, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).catch((err) => isNavigationFailure(err, 8) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to2, from, failure) {
    for (const guard of afterGuards.list())
      guard(to2, from, failure);
  }
  function finalizeNavigation(toLocation, from, isPush, replace2, data) {
    const error = checkCanceledNavigation(toLocation, from);
    if (error)
      return error;
    const isFirstNavigation = from === START_LOCATION_NORMALIZED;
    const state = !isBrowser ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign({
          scroll: isFirstNavigation && state && state.scroll
        }, data));
      else
        routerHistory.push(toLocation.fullPath, data);
    }
    currentRoute.value = toLocation;
    handleScroll(toLocation, from, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    if (removeHistoryListener)
      return;
    removeHistoryListener = routerHistory.listen((to2, _from, info) => {
      if (!router.listening)
        return;
      const toLocation = resolve2(to2);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign(shouldRedirect, { replace: true }), toLocation).catch(noop);
        return;
      }
      pendingLocation = toLocation;
      const from = currentRoute.value;
      if (isBrowser) {
        saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());
      }
      navigate(toLocation, from).catch((error) => {
        if (isNavigationFailure(error, 4 | 8)) {
          return error;
        }
        if (isNavigationFailure(error, 2)) {
          pushWithRedirect(
            error.to,
            toLocation
          ).then((failure) => {
            if (isNavigationFailure(failure, 4 | 16) && !info.delta && info.type === NavigationType$1.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop);
          return Promise.reject();
        }
        if (info.delta) {
          routerHistory.go(-info.delta, false);
        }
        return triggerError(error, toLocation, from);
      }).then((failure) => {
        failure = failure || finalizeNavigation(
          toLocation,
          from,
          false
        );
        if (failure) {
          if (info.delta && !isNavigationFailure(failure, 8)) {
            routerHistory.go(-info.delta, false);
          } else if (info.type === NavigationType$1.pop && isNavigationFailure(failure, 4 | 16)) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from, failure);
      }).catch(noop);
    });
  }
  let readyHandlers = useCallbacks();
  let errorHandlers = useCallbacks();
  let ready;
  function triggerError(error, to2, from) {
    markAsReady(error);
    const list = errorHandlers.list();
    if (list.length) {
      list.forEach((handler) => handler(error, to2, from));
    } else {
      {
        warn("uncaught error during route navigation:");
      }
      console.error(error);
    }
    return Promise.reject(error);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)
      return Promise.resolve();
    return new Promise((resolve3, reject) => {
      readyHandlers.add([resolve3, reject]);
    });
  }
  function markAsReady(err) {
    if (!ready) {
      ready = !err;
      setupListeners();
      readyHandlers.list().forEach(([resolve3, reject]) => err ? reject(err) : resolve3());
      readyHandlers.reset();
    }
    return err;
  }
  function handleScroll(to2, from, isPush, isFirstNavigation) {
    const { scrollBehavior } = options;
    if (!isBrowser || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to2.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick$1().then(() => scrollBehavior(to2, from, scrollPosition)).then((position) => position && scrollToPosition(position)).catch((err) => triggerError(err, to2, from));
  }
  const go2 = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = /* @__PURE__ */ new Set();
  const router = {
    currentRoute,
    listening: true,
    addRoute,
    removeRoute,
    hasRoute,
    getRoutes,
    resolve: resolve2,
    options,
    push,
    replace,
    go: go2,
    back: () => go2(-1),
    forward: () => go2(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorHandlers.add,
    isReady,
    install(app) {
      const router2 = this;
      app.component("RouterLink", RouterLink);
      app.component("RouterView", RouterView);
      app.config.globalProperties.$router = router2;
      Object.defineProperty(app.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref$1(currentRoute)
      });
      if (isBrowser && !started && currentRoute.value === START_LOCATION_NORMALIZED) {
        started = true;
        push(routerHistory.location).catch((err) => {
          warn("Unexpected error when starting the router:", err);
        });
      }
      const reactiveRoute = {};
      for (const key in START_LOCATION_NORMALIZED) {
        reactiveRoute[key] = computed$2(() => currentRoute.value[key]);
      }
      app.provide(routerKey$1, router2);
      app.provide(routeLocationKey, reactive$1(reactiveRoute));
      app.provide(routerViewLocationKey, currentRoute);
      const unmountApp = app.unmount;
      installedApps.add(app);
      app.unmount = function() {
        installedApps.delete(app);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED;
          removeHistoryListener && removeHistoryListener();
          removeHistoryListener = null;
          currentRoute.value = START_LOCATION_NORMALIZED;
          started = false;
          ready = false;
        }
        unmountApp();
      };
      if (isBrowser) {
        addDevtools(app, router2, matcher);
      }
    }
  };
  return router;
}
function runGuardQueue(guards) {
  return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());
}
function extractChangingRecords(to2, from) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len = Math.max(from.matched.length, to2.matched.length);
  for (let i2 = 0; i2 < len; i2++) {
    const recordFrom = from.matched[i2];
    if (recordFrom) {
      if (to2.matched.find((record) => isSameRouteRecord(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to2.matched[i2];
    if (recordTo) {
      if (!from.matched.find((record) => isSameRouteRecord(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
function useRouter$1() {
  return inject$1(routerKey$1);
}
function useRoute() {
  return inject$1(routeLocationKey);
}
function t(t2) {
  return "object" == typeof t2 && null != t2 && 1 === t2.nodeType;
}
function e(t2, e2) {
  return (!e2 || "hidden" !== t2) && "visible" !== t2 && "clip" !== t2;
}
function n$1(t2, n2) {
  if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {
    var r2 = getComputedStyle(t2, null);
    return e(r2.overflowY, n2) || e(r2.overflowX, n2) || function(t3) {
      var e2 = function(t4) {
        if (!t4.ownerDocument || !t4.ownerDocument.defaultView)
          return null;
        try {
          return t4.ownerDocument.defaultView.frameElement;
        } catch (t5) {
          return null;
        }
      }(t3);
      return !!e2 && (e2.clientHeight < t3.scrollHeight || e2.clientWidth < t3.scrollWidth);
    }(t2);
  }
  return false;
}
function r$1(t2, e2, n2, r2, i2, o2, l2, d2) {
  return o2 < t2 && l2 > e2 || o2 > t2 && l2 < e2 ? 0 : o2 <= t2 && d2 <= n2 || l2 >= e2 && d2 >= n2 ? o2 - t2 - r2 : l2 > e2 && d2 < n2 || o2 < t2 && d2 > n2 ? l2 - e2 + i2 : 0;
}
var i$2 = function(e2, i2) {
  var o2 = window, l2 = i2.scrollMode, d2 = i2.block, f2 = i2.inline, h2 = i2.boundary, u2 = i2.skipOverflowHiddenElements, s = "function" == typeof h2 ? h2 : function(t2) {
    return t2 !== h2;
  };
  if (!t(e2))
    throw new TypeError("Invalid target");
  for (var a2, c2, g2 = document.scrollingElement || document.documentElement, p2 = [], m2 = e2; t(m2) && s(m2); ) {
    if ((m2 = null == (c2 = (a2 = m2).parentElement) ? a2.getRootNode().host || null : c2) === g2) {
      p2.push(m2);
      break;
    }
    null != m2 && m2 === document.body && n$1(m2) && !n$1(document.documentElement) || null != m2 && n$1(m2, u2) && p2.push(m2);
  }
  for (var w = o2.visualViewport ? o2.visualViewport.width : innerWidth, v2 = o2.visualViewport ? o2.visualViewport.height : innerHeight, W2 = window.scrollX || pageXOffset, H = window.scrollY || pageYOffset, b2 = e2.getBoundingClientRect(), y = b2.height, E2 = b2.width, M2 = b2.top, V2 = b2.right, x2 = b2.bottom, I2 = b2.left, C2 = "start" === d2 || "nearest" === d2 ? M2 : "end" === d2 ? x2 : M2 + y / 2, R2 = "center" === f2 ? I2 + E2 / 2 : "end" === f2 ? V2 : I2, T2 = [], k2 = 0; k2 < p2.length; k2++) {
    var B = p2[k2], D2 = B.getBoundingClientRect(), O2 = D2.height, X2 = D2.width, Y2 = D2.top, L2 = D2.right, S2 = D2.bottom, j2 = D2.left;
    if ("if-needed" === l2 && M2 >= 0 && I2 >= 0 && x2 <= v2 && V2 <= w && M2 >= Y2 && x2 <= S2 && I2 >= j2 && V2 <= L2)
      return T2;
    var N2 = getComputedStyle(B), q2 = parseInt(N2.borderLeftWidth, 10), z2 = parseInt(N2.borderTopWidth, 10), A2 = parseInt(N2.borderRightWidth, 10), F2 = parseInt(N2.borderBottomWidth, 10), G2 = 0, J2 = 0, K2 = "offsetWidth" in B ? B.offsetWidth - B.clientWidth - q2 - A2 : 0, P2 = "offsetHeight" in B ? B.offsetHeight - B.clientHeight - z2 - F2 : 0, Q2 = "offsetWidth" in B ? 0 === B.offsetWidth ? 0 : X2 / B.offsetWidth : 0, U2 = "offsetHeight" in B ? 0 === B.offsetHeight ? 0 : O2 / B.offsetHeight : 0;
    if (g2 === B)
      G2 = "start" === d2 ? C2 : "end" === d2 ? C2 - v2 : "nearest" === d2 ? r$1(H, H + v2, v2, z2, F2, H + C2, H + C2 + y, y) : C2 - v2 / 2, J2 = "start" === f2 ? R2 : "center" === f2 ? R2 - w / 2 : "end" === f2 ? R2 - w : r$1(W2, W2 + w, w, q2, A2, W2 + R2, W2 + R2 + E2, E2), G2 = Math.max(0, G2 + H), J2 = Math.max(0, J2 + W2);
    else {
      G2 = "start" === d2 ? C2 - Y2 - z2 : "end" === d2 ? C2 - S2 + F2 + P2 : "nearest" === d2 ? r$1(Y2, S2, O2, z2, F2 + P2, C2, C2 + y, y) : C2 - (Y2 + O2 / 2) + P2 / 2, J2 = "start" === f2 ? R2 - j2 - q2 : "center" === f2 ? R2 - (j2 + X2 / 2) + K2 / 2 : "end" === f2 ? R2 - L2 + A2 + K2 : r$1(j2, L2, X2, q2, A2 + K2, R2, R2 + E2, E2);
      var Z2 = B.scrollLeft, $2 = B.scrollTop;
      C2 += $2 - (G2 = Math.max(0, Math.min($2 + G2 / U2, B.scrollHeight - O2 / U2 + P2))), R2 += Z2 - (J2 = Math.max(0, Math.min(Z2 + J2 / Q2, B.scrollWidth - X2 / Q2 + K2)));
    }
    T2.push({ el: B, top: G2, left: J2 });
  }
  return T2;
};
function isOptionsObject(options) {
  return options === Object(options) && Object.keys(options).length !== 0;
}
function defaultBehavior(actions, behavior) {
  if (behavior === void 0) {
    behavior = "auto";
  }
  var canSmoothScroll = "scrollBehavior" in document.body.style;
  actions.forEach(function(_ref) {
    var el2 = _ref.el, top = _ref.top, left = _ref.left;
    if (el2.scroll && canSmoothScroll) {
      el2.scroll({
        top,
        left,
        behavior
      });
    } else {
      el2.scrollTop = top;
      el2.scrollLeft = left;
    }
  });
}
function getOptions(options) {
  if (options === false) {
    return {
      block: "end",
      inline: "nearest"
    };
  }
  if (isOptionsObject(options)) {
    return options;
  }
  return {
    block: "start",
    inline: "nearest"
  };
}
function scrollIntoView(target, options) {
  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);
  if (isOptionsObject(options) && typeof options.behavior === "function") {
    return options.behavior(isTargetAttached ? i$2(target, options) : []);
  }
  if (!isTargetAttached) {
    return;
  }
  var computeOptions = getOptions(options);
  return defaultBehavior(i$2(target, computeOptions), computeOptions.behavior);
}
const voidElements = [
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
];
const KEY_ESCAPE_REG = /[\s-.:|#@$£*%]/;
const MAX_SINGLE_LINE_ARRAY_LENGTH = 3;
function serializeJs(value) {
  const seen = /* @__PURE__ */ new Set();
  if (value === void 0) {
    return "undefined";
  }
  if (value === null) {
    return "null";
  }
  if (typeof value === "string") {
    return `'${value}'`;
  }
  if (typeof value === "boolean") {
    return value ? "true" : "false";
  }
  if (Array.isArray(value)) {
    return printLines(arrayToSourceLines(value, seen));
  }
  if (typeof value === "object") {
    return printLines(objectToSourceLines(value, seen));
  }
  if (value == null ? void 0 : value.__autoBuildingObject) {
    return value;
  }
  if (typeof value === "function" && value.name) {
    return value.name;
  }
  return value.toString();
}
function printLines(lines) {
  return lines.map((line) => "  ".repeat(line.spaces) + line.line).join("\n");
}
function objectToSourceLines(object, seen, indentCount = 0) {
  if (seen.has(object)) {
    object = {};
  } else {
    seen.add(object);
  }
  return createLines(indentCount, (lines) => {
    lines.push("{");
    lines.push(...createLines(1, (lines2) => {
      for (const key in object) {
        const value = object[key];
        let printedKey = key;
        if (KEY_ESCAPE_REG.test(key)) {
          printedKey = `'${printedKey}'`;
        }
        addLinesFromValue(lines2, value, `${printedKey}: `, ",", seen);
      }
    }));
    lines.push("}");
  });
}
function arrayToSourceLines(array, seen, indentCount = 0) {
  if (seen.has(array)) {
    array = [];
  } else {
    seen.add(array);
  }
  return createLines(indentCount, (lines) => {
    const contentLines = createLines(1, (lines2) => {
      for (const value of array) {
        addLinesFromValue(lines2, value, "", ",", seen);
      }
    });
    if (contentLines.length === 0) {
      lines.push("[]");
    } else if (contentLines.length <= MAX_SINGLE_LINE_ARRAY_LENGTH && !contentLines.some((line) => line.spaces > 1)) {
      const [first] = contentLines;
      first.line = contentLines.map(({ line }) => line.substring(0, line.length - 1)).join(", ");
      first.line = `[${first.line}]`;
      first.spaces--;
      lines.push(first);
    } else {
      lines.push("[", ...contentLines, "]");
    }
  });
}
function createLines(indentCount, handler) {
  const lines = [];
  handler(lines);
  return lines.map((line) => {
    if (line.spaces != null) {
      line.spaces += indentCount;
      return line;
    }
    return { spaces: indentCount, line };
  });
}
function addLinesFromValue(lines, value, before, after, seen) {
  let result;
  if (Array.isArray(value)) {
    lines.push(...wrap(arrayToSourceLines(value, seen), before, after));
    return;
  } else if (value && typeof value === "object") {
    lines.push(...wrap(objectToSourceLines(value, seen), before, after));
    return;
  } else if (typeof value === "string") {
    result = value.includes("'") ? `\`${value}\`` : `'${value}'`;
  } else if (typeof value === "undefined") {
    result = "undefined";
  } else if (value === null) {
    result = "null";
  } else if (typeof value === "boolean") {
    result = value ? "true" : "false";
  } else {
    result = value;
  }
  lines.push(before + result + after);
}
function wrap(lines, before, after) {
  lines[0].line = before + lines[0].line;
  lines[lines.length - 1].line += after;
  return lines;
}
function indent(lines, count2 = 1) {
  return lines.map((line) => `${"  ".repeat(count2)}${line}`);
}
function unindent(code) {
  const lines = code.split("\n");
  let indentLevel = -1;
  let indentText;
  const linesToAnalyze = lines.filter((line) => line.trim().length > 0);
  for (const line of linesToAnalyze) {
    const match = /^\s*/.exec(line);
    if (match && (indentLevel === -1 || indentLevel > match[0].length)) {
      indentLevel = match[0].length;
      indentText = match[0];
    }
  }
  const result = [];
  for (const line of lines) {
    result.push(line.replace(indentText, ""));
  }
  return result.join("\n").trim();
}
function createAutoBuildingObject(format, specialKeysHandler, key = "", depth = 0) {
  const cache2 = {};
  if (depth > 32)
    return { key, cache: cache2, target: {}, proxy: () => key };
  const target = () => {
    const k2 = key + "()";
    return format ? format(k2) : k2;
  };
  const proxy = new Proxy(target, {
    get(_2, p2) {
      if (p2 === "__autoBuildingObject") {
        return true;
      }
      if (p2 === "__autoBuildingObjectGetKey") {
        return key;
      }
      if (specialKeysHandler) {
        const fn2 = specialKeysHandler(target, p2);
        if (fn2) {
          return fn2();
        }
      }
      if (p2 === "toString") {
        const k2 = key + ".toString()";
        return () => format ? format(k2) : k2;
      }
      if (p2 === Symbol.toPrimitive) {
        return () => format ? format(key) : key;
      }
      if (!cache2[p2]) {
        const childKey = key ? `${key}.${p2.toString()}` : p2.toString();
        const child = createAutoBuildingObject(format, specialKeysHandler, childKey, depth + 1);
        cache2[p2] = { key: childKey, ...child };
      }
      return cache2[p2].proxy;
    },
    apply(_2, thisArg, args) {
      const k2 = `${key}(${args.join(", ")})`;
      return format ? format(k2) : k2;
    }
  });
  return {
    key,
    cache: cache2,
    target,
    proxy
  };
}
function clone(data) {
  try {
    return structuredClone(data);
  } catch (e2) {
    console.warn(e2, `Fallback to JSON cloning`);
    try {
      return JSON.parse(JSON.stringify(data));
    } catch (e3) {
      console.error(e3);
    }
    return data;
  }
}
function omit(data, keys) {
  const copy = {};
  for (const key in data) {
    if (!keys.includes(key)) {
      copy[key] = data[key];
    }
  }
  return copy;
}
function applyState(target, state, override = false) {
  for (const key in state) {
    if (!override && target[key] && !key.startsWith("_h") && typeof target[key] === "object" && !Array.isArray(target[key])) {
      Object.assign(target[key], state[key]);
    } else {
      target[key] = state[key];
    }
  }
}
const omitInheritStoryProps = [
  "id",
  "title",
  "group",
  "layout",
  "variants",
  "file",
  "slots",
  "lastSelectedVariant"
];
/*!
  * vue-router v4.1.5
  * (c) 2022 Eduardo San Martin Morote
  * @license MIT
  */
var NavigationType;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType || (NavigationType = {}));
var NavigationDirection;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {}));
var NavigationFailureType;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {}));
const routerKey = Symbol("router");
function useRouter() {
  return inject(routerKey);
}
var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function getAugmentedNamespace(n2) {
  var f2 = n2.default;
  if (typeof f2 == "function") {
    var a2 = function() {
      return f2.apply(this, arguments);
    };
    a2.prototype = f2.prototype;
  } else
    a2 = {};
  Object.defineProperty(a2, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k2) {
    var d2 = Object.getOwnPropertyDescriptor(n2, k2);
    Object.defineProperty(a2, k2, d2.get ? d2 : {
      enumerable: true,
      get: function() {
        return n2[k2];
      }
    });
  });
  return a2;
}
var vue3Apexcharts_common = { exports: {} };
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(vue_runtime_esmBundler);
var apexcharts_common = { exports: {} };
/*!
 * ApexCharts v3.37.1
 * (c) 2018-2023 ApexCharts
 * Released under the MIT License.
 */
var hasRequiredApexcharts_common;
function requireApexcharts_common() {
  if (hasRequiredApexcharts_common)
    return apexcharts_common.exports;
  hasRequiredApexcharts_common = 1;
  (function(module2, exports) {
    function t2(t3, e3) {
      var i3 = Object.keys(t3);
      if (Object.getOwnPropertySymbols) {
        var a3 = Object.getOwnPropertySymbols(t3);
        e3 && (a3 = a3.filter(function(e4) {
          return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
        })), i3.push.apply(i3, a3);
      }
      return i3;
    }
    function e2(e3) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var a3 = null != arguments[i3] ? arguments[i3] : {};
        i3 % 2 ? t2(Object(a3), true).forEach(function(t3) {
          o2(e3, t3, a3[t3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(a3)) : t2(Object(a3)).forEach(function(t3) {
          Object.defineProperty(e3, t3, Object.getOwnPropertyDescriptor(a3, t3));
        });
      }
      return e3;
    }
    function i2(t3) {
      return i2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
        return typeof t4;
      } : function(t4) {
        return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
      }, i2(t3);
    }
    function a2(t3, e3) {
      if (!(t3 instanceof e3))
        throw new TypeError("Cannot call a class as a function");
    }
    function s(t3, e3) {
      for (var i3 = 0; i3 < e3.length; i3++) {
        var a3 = e3[i3];
        a3.enumerable = a3.enumerable || false, a3.configurable = true, "value" in a3 && (a3.writable = true), Object.defineProperty(t3, a3.key, a3);
      }
    }
    function r2(t3, e3, i3) {
      return e3 && s(t3.prototype, e3), i3 && s(t3, i3), t3;
    }
    function o2(t3, e3, i3) {
      return e3 in t3 ? Object.defineProperty(t3, e3, { value: i3, enumerable: true, configurable: true, writable: true }) : t3[e3] = i3, t3;
    }
    function n2(t3, e3) {
      if ("function" != typeof e3 && null !== e3)
        throw new TypeError("Super expression must either be null or a function");
      t3.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t3, writable: true, configurable: true } }), e3 && h2(t3, e3);
    }
    function l2(t3) {
      return l2 = Object.setPrototypeOf ? Object.getPrototypeOf : function(t4) {
        return t4.__proto__ || Object.getPrototypeOf(t4);
      }, l2(t3);
    }
    function h2(t3, e3) {
      return h2 = Object.setPrototypeOf || function(t4, e4) {
        return t4.__proto__ = e4, t4;
      }, h2(t3, e3);
    }
    function c2(t3, e3) {
      if (e3 && ("object" == typeof e3 || "function" == typeof e3))
        return e3;
      if (void 0 !== e3)
        throw new TypeError("Derived constructors may only return object or undefined");
      return function(t4) {
        if (void 0 === t4)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return t4;
      }(t3);
    }
    function d2(t3) {
      var e3 = function() {
        if ("undefined" == typeof Reflect || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if ("function" == typeof Proxy)
          return true;
        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          })), true;
        } catch (t4) {
          return false;
        }
      }();
      return function() {
        var i3, a3 = l2(t3);
        if (e3) {
          var s2 = l2(this).constructor;
          i3 = Reflect.construct(a3, arguments, s2);
        } else
          i3 = a3.apply(this, arguments);
        return c2(this, i3);
      };
    }
    function g2(t3, e3) {
      return function(t4) {
        if (Array.isArray(t4))
          return t4;
      }(t3) || function(t4, e4) {
        var i3 = null == t4 ? null : "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
        if (null == i3)
          return;
        var a3, s2, r3 = [], o3 = true, n3 = false;
        try {
          for (i3 = i3.call(t4); !(o3 = (a3 = i3.next()).done) && (r3.push(a3.value), !e4 || r3.length !== e4); o3 = true)
            ;
        } catch (t5) {
          n3 = true, s2 = t5;
        } finally {
          try {
            o3 || null == i3.return || i3.return();
          } finally {
            if (n3)
              throw s2;
          }
        }
        return r3;
      }(t3, e3) || f2(t3, e3) || function() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    function u2(t3) {
      return function(t4) {
        if (Array.isArray(t4))
          return p2(t4);
      }(t3) || function(t4) {
        if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"])
          return Array.from(t4);
      }(t3) || f2(t3) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    function f2(t3, e3) {
      if (t3) {
        if ("string" == typeof t3)
          return p2(t3, e3);
        var i3 = Object.prototype.toString.call(t3).slice(8, -1);
        return "Object" === i3 && t3.constructor && (i3 = t3.constructor.name), "Map" === i3 || "Set" === i3 ? Array.from(t3) : "Arguments" === i3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i3) ? p2(t3, e3) : void 0;
      }
    }
    function p2(t3, e3) {
      (null == e3 || e3 > t3.length) && (e3 = t3.length);
      for (var i3 = 0, a3 = new Array(e3); i3 < e3; i3++)
        a3[i3] = t3[i3];
      return a3;
    }
    var x2 = function() {
      function t3() {
        a2(this, t3);
      }
      return r2(t3, [{ key: "shadeRGBColor", value: function(t4, e3) {
        var i3 = e3.split(","), a3 = t4 < 0 ? 0 : 255, s2 = t4 < 0 ? -1 * t4 : t4, r3 = parseInt(i3[0].slice(4), 10), o3 = parseInt(i3[1], 10), n3 = parseInt(i3[2], 10);
        return "rgb(" + (Math.round((a3 - r3) * s2) + r3) + "," + (Math.round((a3 - o3) * s2) + o3) + "," + (Math.round((a3 - n3) * s2) + n3) + ")";
      } }, { key: "shadeHexColor", value: function(t4, e3) {
        var i3 = parseInt(e3.slice(1), 16), a3 = t4 < 0 ? 0 : 255, s2 = t4 < 0 ? -1 * t4 : t4, r3 = i3 >> 16, o3 = i3 >> 8 & 255, n3 = 255 & i3;
        return "#" + (16777216 + 65536 * (Math.round((a3 - r3) * s2) + r3) + 256 * (Math.round((a3 - o3) * s2) + o3) + (Math.round((a3 - n3) * s2) + n3)).toString(16).slice(1);
      } }, { key: "shadeColor", value: function(e3, i3) {
        return t3.isColorHex(i3) ? this.shadeHexColor(e3, i3) : this.shadeRGBColor(e3, i3);
      } }], [{ key: "bind", value: function(t4, e3) {
        return function() {
          return t4.apply(e3, arguments);
        };
      } }, { key: "isObject", value: function(t4) {
        return t4 && "object" === i2(t4) && !Array.isArray(t4) && null != t4;
      } }, { key: "is", value: function(t4, e3) {
        return Object.prototype.toString.call(e3) === "[object " + t4 + "]";
      } }, { key: "listToArray", value: function(t4) {
        var e3, i3 = [];
        for (e3 = 0; e3 < t4.length; e3++)
          i3[e3] = t4[e3];
        return i3;
      } }, { key: "extend", value: function(t4, e3) {
        var i3 = this;
        "function" != typeof Object.assign && (Object.assign = function(t5) {
          if (null == t5)
            throw new TypeError("Cannot convert undefined or null to object");
          for (var e4 = Object(t5), i4 = 1; i4 < arguments.length; i4++) {
            var a4 = arguments[i4];
            if (null != a4)
              for (var s2 in a4)
                a4.hasOwnProperty(s2) && (e4[s2] = a4[s2]);
          }
          return e4;
        });
        var a3 = Object.assign({}, t4);
        return this.isObject(t4) && this.isObject(e3) && Object.keys(e3).forEach(function(s2) {
          i3.isObject(e3[s2]) && s2 in t4 ? a3[s2] = i3.extend(t4[s2], e3[s2]) : Object.assign(a3, o2({}, s2, e3[s2]));
        }), a3;
      } }, { key: "extendArray", value: function(e3, i3) {
        var a3 = [];
        return e3.map(function(e4) {
          a3.push(t3.extend(i3, e4));
        }), e3 = a3;
      } }, { key: "monthMod", value: function(t4) {
        return t4 % 12;
      } }, { key: "clone", value: function(e3) {
        if (t3.is("Array", e3)) {
          for (var a3 = [], s2 = 0; s2 < e3.length; s2++)
            a3[s2] = this.clone(e3[s2]);
          return a3;
        }
        if (t3.is("Null", e3))
          return null;
        if (t3.is("Date", e3))
          return e3;
        if ("object" === i2(e3)) {
          var r3 = {};
          for (var o3 in e3)
            e3.hasOwnProperty(o3) && (r3[o3] = this.clone(e3[o3]));
          return r3;
        }
        return e3;
      } }, { key: "log10", value: function(t4) {
        return Math.log(t4) / Math.LN10;
      } }, { key: "roundToBase10", value: function(t4) {
        return Math.pow(10, Math.floor(Math.log10(t4)));
      } }, { key: "roundToBase", value: function(t4, e3) {
        return Math.pow(e3, Math.floor(Math.log(t4) / Math.log(e3)));
      } }, { key: "parseNumber", value: function(t4) {
        return null === t4 ? t4 : parseFloat(t4);
      } }, { key: "randomId", value: function() {
        return (Math.random() + 1).toString(36).substring(4);
      } }, { key: "noExponents", value: function(t4) {
        var e3 = String(t4).split(/[eE]/);
        if (1 === e3.length)
          return e3[0];
        var i3 = "", a3 = t4 < 0 ? "-" : "", s2 = e3[0].replace(".", ""), r3 = Number(e3[1]) + 1;
        if (r3 < 0) {
          for (i3 = a3 + "0."; r3++; )
            i3 += "0";
          return i3 + s2.replace(/^-/, "");
        }
        for (r3 -= s2.length; r3--; )
          i3 += "0";
        return s2 + i3;
      } }, { key: "getDimensions", value: function(t4) {
        var e3 = getComputedStyle(t4, null), i3 = t4.clientHeight, a3 = t4.clientWidth;
        return i3 -= parseFloat(e3.paddingTop) + parseFloat(e3.paddingBottom), [a3 -= parseFloat(e3.paddingLeft) + parseFloat(e3.paddingRight), i3];
      } }, { key: "getBoundingClientRect", value: function(t4) {
        var e3 = t4.getBoundingClientRect();
        return { top: e3.top, right: e3.right, bottom: e3.bottom, left: e3.left, width: t4.clientWidth, height: t4.clientHeight, x: e3.left, y: e3.top };
      } }, { key: "getLargestStringFromArr", value: function(t4) {
        return t4.reduce(function(t5, e3) {
          return Array.isArray(e3) && (e3 = e3.reduce(function(t6, e4) {
            return t6.length > e4.length ? t6 : e4;
          })), t5.length > e3.length ? t5 : e3;
        }, 0);
      } }, { key: "hexToRgba", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999", e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.6;
        "#" !== t4.substring(0, 1) && (t4 = "#999999");
        var i3 = t4.replace("#", "");
        i3 = i3.match(new RegExp("(.{" + i3.length / 3 + "})", "g"));
        for (var a3 = 0; a3 < i3.length; a3++)
          i3[a3] = parseInt(1 === i3[a3].length ? i3[a3] + i3[a3] : i3[a3], 16);
        return void 0 !== e3 && i3.push(e3), "rgba(" + i3.join(",") + ")";
      } }, { key: "getOpacityFromRGBA", value: function(t4) {
        return parseFloat(t4.replace(/^.*,(.+)\)/, "$1"));
      } }, { key: "rgb2hex", value: function(t4) {
        return (t4 = t4.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t4.length ? "#" + ("0" + parseInt(t4[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t4[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t4[3], 10).toString(16)).slice(-2) : "";
      } }, { key: "isColorHex", value: function(t4) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t4);
      } }, { key: "getPolygonPos", value: function(t4, e3) {
        for (var i3 = [], a3 = 2 * Math.PI / e3, s2 = 0; s2 < e3; s2++) {
          var r3 = {};
          r3.x = t4 * Math.sin(s2 * a3), r3.y = -t4 * Math.cos(s2 * a3), i3.push(r3);
        }
        return i3;
      } }, { key: "polarToCartesian", value: function(t4, e3, i3, a3) {
        var s2 = (a3 - 90) * Math.PI / 180;
        return { x: t4 + i3 * Math.cos(s2), y: e3 + i3 * Math.sin(s2) };
      } }, { key: "escapeString", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x", i3 = t4.toString().slice();
        return i3 = i3.replace(/[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi, e3);
      } }, { key: "negToZero", value: function(t4) {
        return t4 < 0 ? 0 : t4;
      } }, { key: "moveIndexInArray", value: function(t4, e3, i3) {
        if (i3 >= t4.length)
          for (var a3 = i3 - t4.length + 1; a3--; )
            t4.push(void 0);
        return t4.splice(i3, 0, t4.splice(e3, 1)[0]), t4;
      } }, { key: "extractNumber", value: function(t4) {
        return parseFloat(t4.replace(/[^\d.]*/g, ""));
      } }, { key: "findAncestor", value: function(t4, e3) {
        for (; (t4 = t4.parentElement) && !t4.classList.contains(e3); )
          ;
        return t4;
      } }, { key: "setELstyles", value: function(t4, e3) {
        for (var i3 in e3)
          e3.hasOwnProperty(i3) && (t4.style.key = e3[i3]);
      } }, { key: "isNumber", value: function(t4) {
        return !isNaN(t4) && parseFloat(Number(t4)) === t4 && !isNaN(parseInt(t4, 10));
      } }, { key: "isFloat", value: function(t4) {
        return Number(t4) === t4 && t4 % 1 != 0;
      } }, { key: "isSafari", value: function() {
        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      } }, { key: "isFirefox", value: function() {
        return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      } }, { key: "isIE11", value: function() {
        if (-1 !== window.navigator.userAgent.indexOf("MSIE") || window.navigator.appVersion.indexOf("Trident/") > -1)
          return true;
      } }, { key: "isIE", value: function() {
        var t4 = window.navigator.userAgent, e3 = t4.indexOf("MSIE ");
        if (e3 > 0)
          return parseInt(t4.substring(e3 + 5, t4.indexOf(".", e3)), 10);
        if (t4.indexOf("Trident/") > 0) {
          var i3 = t4.indexOf("rv:");
          return parseInt(t4.substring(i3 + 3, t4.indexOf(".", i3)), 10);
        }
        var a3 = t4.indexOf("Edge/");
        return a3 > 0 && parseInt(t4.substring(a3 + 5, t4.indexOf(".", a3)), 10);
      } }]), t3;
    }(), b2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.setEasingFunctions();
      }
      return r2(t3, [{ key: "setEasingFunctions", value: function() {
        var t4;
        if (!this.w.globals.easing) {
          switch (this.w.config.chart.animations.easing) {
            case "linear":
              t4 = "-";
              break;
            case "easein":
              t4 = "<";
              break;
            case "easeout":
              t4 = ">";
              break;
            case "easeinout":
            default:
              t4 = "<>";
              break;
            case "swing":
              t4 = function(t5) {
                var e3 = 1.70158;
                return (t5 -= 1) * t5 * ((e3 + 1) * t5 + e3) + 1;
              };
              break;
            case "bounce":
              t4 = function(t5) {
                return t5 < 1 / 2.75 ? 7.5625 * t5 * t5 : t5 < 2 / 2.75 ? 7.5625 * (t5 -= 1.5 / 2.75) * t5 + 0.75 : t5 < 2.5 / 2.75 ? 7.5625 * (t5 -= 2.25 / 2.75) * t5 + 0.9375 : 7.5625 * (t5 -= 2.625 / 2.75) * t5 + 0.984375;
              };
              break;
            case "elastic":
              t4 = function(t5) {
                return t5 === !!t5 ? t5 : Math.pow(2, -10 * t5) * Math.sin((t5 - 0.075) * (2 * Math.PI) / 0.3) + 1;
              };
          }
          this.w.globals.easing = t4;
        }
      } }, { key: "animateLine", value: function(t4, e3, i3, a3) {
        t4.attr(e3).animate(a3).attr(i3);
      } }, { key: "animateMarker", value: function(t4, e3, i3, a3, s2, r3) {
        e3 || (e3 = 0), t4.attr({ r: e3, width: e3, height: e3 }).animate(a3, s2).attr({ r: i3, width: i3.width, height: i3.height }).afterAll(function() {
          r3();
        });
      } }, { key: "animateCircle", value: function(t4, e3, i3, a3, s2) {
        t4.attr({ r: e3.r, cx: e3.cx, cy: e3.cy }).animate(a3, s2).attr({ r: i3.r, cx: i3.cx, cy: i3.cy });
      } }, { key: "animateRect", value: function(t4, e3, i3, a3, s2) {
        t4.attr(e3).animate(a3).attr(i3).afterAll(function() {
          return s2();
        });
      } }, { key: "animatePathsGradually", value: function(t4) {
        var e3 = t4.el, i3 = t4.realIndex, a3 = t4.j, s2 = t4.fill, r3 = t4.pathFrom, o3 = t4.pathTo, n3 = t4.speed, l3 = t4.delay, h3 = this.w, c3 = 0;
        h3.config.chart.animations.animateGradually.enabled && (c3 = h3.config.chart.animations.animateGradually.delay), h3.config.chart.animations.dynamicAnimation.enabled && h3.globals.dataChanged && "bar" !== h3.config.chart.type && (c3 = 0), this.morphSVG(e3, i3, a3, "line" !== h3.config.chart.type || h3.globals.comboCharts ? s2 : "stroke", r3, o3, n3, l3 * c3);
      } }, { key: "showDelayedElements", value: function() {
        this.w.globals.delayedElements.forEach(function(t4) {
          t4.el.classList.remove("apexcharts-element-hidden");
        });
      } }, { key: "animationCompleted", value: function(t4) {
        var e3 = this.w;
        e3.globals.animationEnded || (e3.globals.animationEnded = true, this.showDelayedElements(), "function" == typeof e3.config.chart.events.animationEnd && e3.config.chart.events.animationEnd(this.ctx, { el: t4, w: e3 }));
      } }, { key: "morphSVG", value: function(t4, e3, i3, a3, s2, r3, o3, n3) {
        var l3 = this, h3 = this.w;
        s2 || (s2 = t4.attr("pathFrom")), r3 || (r3 = t4.attr("pathTo"));
        var c3 = function(t5) {
          return "radar" === h3.config.chart.type && (o3 = 1), "M 0 ".concat(h3.globals.gridHeight);
        };
        (!s2 || s2.indexOf("undefined") > -1 || s2.indexOf("NaN") > -1) && (s2 = c3()), (!r3 || r3.indexOf("undefined") > -1 || r3.indexOf("NaN") > -1) && (r3 = c3()), h3.globals.shouldAnimate || (o3 = 1), t4.plot(s2).animate(1, h3.globals.easing, n3).plot(s2).animate(o3, h3.globals.easing, n3).plot(r3).afterAll(function() {
          x2.isNumber(i3) ? i3 === h3.globals.series[h3.globals.maxValsInArrayIndex].length - 2 && h3.globals.shouldAnimate && l3.animationCompleted(t4) : "none" !== a3 && h3.globals.shouldAnimate && (!h3.globals.comboCharts && e3 === h3.globals.series.length - 1 || h3.globals.comboCharts) && l3.animationCompleted(t4), l3.showDelayedElements();
        });
      } }]), t3;
    }(), v2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "getDefaultFilter", value: function(t4, e3) {
        var i3 = this.w;
        t4.unfilter(true), new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"), "none" !== i3.config.states.normal.filter ? this.applyFilter(t4, e3, i3.config.states.normal.filter.type, i3.config.states.normal.filter.value) : i3.config.chart.dropShadow.enabled && this.dropShadow(t4, i3.config.chart.dropShadow, e3);
      } }, { key: "addNormalFilter", value: function(t4, e3) {
        var i3 = this.w;
        i3.config.chart.dropShadow.enabled && !t4.node.classList.contains("apexcharts-marker") && this.dropShadow(t4, i3.config.chart.dropShadow, e3);
      } }, { key: "addLightenFilter", value: function(t4, e3, i3) {
        var a3 = this, s2 = this.w, r3 = i3.intensity;
        t4.unfilter(true);
        new window.SVG.Filter();
        t4.filter(function(t5) {
          var i4 = s2.config.chart.dropShadow;
          (i4.enabled ? a3.addShadow(t5, e3, i4) : t5).componentTransfer({ rgb: { type: "linear", slope: 1.5, intercept: r3 } });
        }), t4.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t4.filterer.node);
      } }, { key: "addDarkenFilter", value: function(t4, e3, i3) {
        var a3 = this, s2 = this.w, r3 = i3.intensity;
        t4.unfilter(true);
        new window.SVG.Filter();
        t4.filter(function(t5) {
          var i4 = s2.config.chart.dropShadow;
          (i4.enabled ? a3.addShadow(t5, e3, i4) : t5).componentTransfer({ rgb: { type: "linear", slope: r3 } });
        }), t4.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t4.filterer.node);
      } }, { key: "applyFilter", value: function(t4, e3, i3) {
        var a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.5;
        switch (i3) {
          case "none":
            this.addNormalFilter(t4, e3);
            break;
          case "lighten":
            this.addLightenFilter(t4, e3, { intensity: a3 });
            break;
          case "darken":
            this.addDarkenFilter(t4, e3, { intensity: a3 });
        }
      } }, { key: "addShadow", value: function(t4, e3, i3) {
        var a3 = i3.blur, s2 = i3.top, r3 = i3.left, o3 = i3.color, n3 = i3.opacity, l3 = t4.flood(Array.isArray(o3) ? o3[e3] : o3, n3).composite(t4.sourceAlpha, "in").offset(r3, s2).gaussianBlur(a3).merge(t4.source);
        return t4.blend(t4.source, l3);
      } }, { key: "dropShadow", value: function(t4, e3) {
        var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a3 = e3.top, s2 = e3.left, r3 = e3.blur, o3 = e3.color, n3 = e3.opacity, l3 = e3.noUserSpaceOnUse, h3 = this.w;
        return t4.unfilter(true), x2.isIE() && "radialBar" === h3.config.chart.type || (o3 = Array.isArray(o3) ? o3[i3] : o3, t4.filter(function(t5) {
          var e4 = null;
          e4 = x2.isSafari() || x2.isFirefox() || x2.isIE() ? t5.flood(o3, n3).composite(t5.sourceAlpha, "in").offset(s2, a3).gaussianBlur(r3) : t5.flood(o3, n3).composite(t5.sourceAlpha, "in").offset(s2, a3).gaussianBlur(r3).merge(t5.source), t5.blend(t5.source, e4);
        }), l3 || t4.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t4.filterer.node)), t4;
      } }, { key: "setSelectionFilter", value: function(t4, e3, i3) {
        var a3 = this.w;
        if (void 0 !== a3.globals.selectedDataPoints[e3] && a3.globals.selectedDataPoints[e3].indexOf(i3) > -1) {
          t4.node.setAttribute("selected", true);
          var s2 = a3.config.states.active.filter;
          "none" !== s2 && this.applyFilter(t4, e3, s2.type, s2.value);
        }
      } }, { key: "_scaleFilterSize", value: function(t4) {
        !function(e3) {
          for (var i3 in e3)
            e3.hasOwnProperty(i3) && t4.setAttribute(i3, e3[i3]);
        }({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
      } }]), t3;
    }(), m2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "roundPathCorners", value: function(t4, e3) {
        function i3(t5, e4, i4) {
          var s3 = e4.x - t5.x, r4 = e4.y - t5.y, o4 = Math.sqrt(s3 * s3 + r4 * r4);
          return a3(t5, e4, Math.min(1, i4 / o4));
        }
        function a3(t5, e4, i4) {
          return { x: t5.x + (e4.x - t5.x) * i4, y: t5.y + (e4.y - t5.y) * i4 };
        }
        function s2(t5, e4) {
          t5.length > 2 && (t5[t5.length - 2] = e4.x, t5[t5.length - 1] = e4.y);
        }
        function r3(t5) {
          return { x: parseFloat(t5[t5.length - 2]), y: parseFloat(t5[t5.length - 1]) };
        }
        var o3 = t4.split(/[,\s]/).reduce(function(t5, e4) {
          var i4 = e4.match("([a-zA-Z])(.+)");
          return i4 ? (t5.push(i4[1]), t5.push(i4[2])) : t5.push(e4), t5;
        }, []).reduce(function(t5, e4) {
          return parseFloat(e4) == e4 && t5.length ? t5[t5.length - 1].push(e4) : t5.push([e4]), t5;
        }, []), n3 = [];
        if (o3.length > 1) {
          var l3 = r3(o3[0]), h3 = null;
          "Z" == o3[o3.length - 1][0] && o3[0].length > 2 && (h3 = ["L", l3.x, l3.y], o3[o3.length - 1] = h3), n3.push(o3[0]);
          for (var c3 = 1; c3 < o3.length; c3++) {
            var d3 = n3[n3.length - 1], g3 = o3[c3], u3 = g3 == h3 ? o3[1] : o3[c3 + 1];
            if (u3 && d3 && d3.length > 2 && "L" == g3[0] && u3.length > 2 && "L" == u3[0]) {
              var f3, p3, x3 = r3(d3), b3 = r3(g3), v3 = r3(u3);
              f3 = i3(b3, x3, e3), p3 = i3(b3, v3, e3), s2(g3, f3), g3.origPoint = b3, n3.push(g3);
              var m3 = a3(f3, b3, 0.5), y2 = a3(b3, p3, 0.5), w2 = ["C", m3.x, m3.y, y2.x, y2.y, p3.x, p3.y];
              w2.origPoint = b3, n3.push(w2);
            } else
              n3.push(g3);
          }
          if (h3) {
            var k3 = r3(n3[n3.length - 1]);
            n3.push(["Z"]), s2(n3[0], k3);
          }
        } else
          n3 = o3;
        return n3.reduce(function(t5, e4) {
          return t5 + e4.join(" ") + " ";
        }, "");
      } }, { key: "drawLine", value: function(t4, e3, i3, a3) {
        var s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8", r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, n3 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt", l3 = this.w, h3 = l3.globals.dom.Paper.line().attr({ x1: t4, y1: e3, x2: i3, y2: a3, stroke: s2, "stroke-dasharray": r3, "stroke-width": o3, "stroke-linecap": n3 });
        return h3;
      } }, { key: "drawRect", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe", o3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, n3 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l3 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h3 = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, c3 = this.w, d3 = c3.globals.dom.Paper.rect();
        return d3.attr({ x: t4, y: e3, width: i3 > 0 ? i3 : 0, height: a3 > 0 ? a3 : 0, rx: s2, ry: s2, opacity: o3, "stroke-width": null !== n3 ? n3 : 0, stroke: null !== l3 ? l3 : "none", "stroke-dasharray": h3 }), d3.node.setAttribute("fill", r3), d3;
      } }, { key: "drawPolygon", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1", i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none", s2 = this.w, r3 = s2.globals.dom.Paper.polygon(t4).attr({ fill: a3, stroke: e3, "stroke-width": i3 });
        return r3;
      } }, { key: "drawCircle", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i3 = this.w;
        t4 < 0 && (t4 = 0);
        var a3 = i3.globals.dom.Paper.circle(2 * t4);
        return null !== e3 && a3.attr(e3), a3;
      } }, { key: "drawPath", value: function(t4) {
        var e3 = t4.d, i3 = void 0 === e3 ? "" : e3, a3 = t4.stroke, s2 = void 0 === a3 ? "#a8a8a8" : a3, r3 = t4.strokeWidth, o3 = void 0 === r3 ? 1 : r3, n3 = t4.fill, l3 = t4.fillOpacity, h3 = void 0 === l3 ? 1 : l3, c3 = t4.strokeOpacity, d3 = void 0 === c3 ? 1 : c3, g3 = t4.classes, u3 = t4.strokeLinecap, f3 = void 0 === u3 ? null : u3, p3 = t4.strokeDashArray, x3 = void 0 === p3 ? 0 : p3, b3 = this.w;
        return null === f3 && (f3 = b3.config.stroke.lineCap), (i3.indexOf("undefined") > -1 || i3.indexOf("NaN") > -1) && (i3 = "M 0 ".concat(b3.globals.gridHeight)), b3.globals.dom.Paper.path(i3).attr({ fill: n3, "fill-opacity": h3, stroke: s2, "stroke-opacity": d3, "stroke-linecap": f3, "stroke-width": o3, "stroke-dasharray": x3, class: g3 });
      } }, { key: "group", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e3 = this.w, i3 = e3.globals.dom.Paper.group();
        return null !== t4 && i3.attr(t4), i3;
      } }, { key: "move", value: function(t4, e3) {
        var i3 = ["M", t4, e3].join(" ");
        return i3;
      } }, { key: "line", value: function(t4, e3) {
        var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = null;
        return null === i3 ? a3 = [" L", t4, e3].join(" ") : "H" === i3 ? a3 = [" H", t4].join(" ") : "V" === i3 && (a3 = [" V", e3].join(" ")), a3;
      } }, { key: "curve", value: function(t4, e3, i3, a3, s2, r3) {
        var o3 = ["C", t4, e3, i3, a3, s2, r3].join(" ");
        return o3;
      } }, { key: "quadraticCurve", value: function(t4, e3, i3, a3) {
        return ["Q", t4, e3, i3, a3].join(" ");
      } }, { key: "arc", value: function(t4, e3, i3, a3, s2, r3, o3) {
        var n3 = arguments.length > 7 && void 0 !== arguments[7] && arguments[7], l3 = "A";
        n3 && (l3 = "a");
        var h3 = [l3, t4, e3, i3, a3, s2, r3, o3].join(" ");
        return h3;
      } }, { key: "renderPaths", value: function(t4) {
        var i3, a3 = t4.j, s2 = t4.realIndex, r3 = t4.pathFrom, o3 = t4.pathTo, n3 = t4.stroke, l3 = t4.strokeWidth, h3 = t4.strokeLinecap, c3 = t4.fill, d3 = t4.animationDelay, g3 = t4.initialSpeed, u3 = t4.dataChangeSpeed, f3 = t4.className, p3 = t4.shouldClipToGrid, x3 = void 0 === p3 || p3, m3 = t4.bindEventsOnPaths, y2 = void 0 === m3 || m3, w2 = t4.drawShadow, k3 = void 0 === w2 || w2, A3 = this.w, S3 = new v2(this.ctx), C3 = new b2(this.ctx), L3 = this.w.config.chart.animations.enabled, P3 = L3 && this.w.config.chart.animations.dynamicAnimation.enabled, T3 = !!(L3 && !A3.globals.resized || P3 && A3.globals.dataChanged && A3.globals.shouldAnimate);
        T3 ? i3 = r3 : (i3 = o3, A3.globals.animationEnded = true);
        var M3 = A3.config.stroke.dashArray, I3 = 0;
        I3 = Array.isArray(M3) ? M3[s2] : A3.config.stroke.dashArray;
        var z3 = this.drawPath({ d: i3, stroke: n3, strokeWidth: l3, fill: c3, fillOpacity: 1, classes: f3, strokeLinecap: h3, strokeDashArray: I3 });
        if (z3.attr("index", s2), x3 && z3.attr({ "clip-path": "url(#gridRectMask".concat(A3.globals.cuid, ")") }), "none" !== A3.config.states.normal.filter.type)
          S3.getDefaultFilter(z3, s2);
        else if (A3.config.chart.dropShadow.enabled && k3 && (!A3.config.chart.dropShadow.enabledOnSeries || A3.config.chart.dropShadow.enabledOnSeries && -1 !== A3.config.chart.dropShadow.enabledOnSeries.indexOf(s2))) {
          var X3 = A3.config.chart.dropShadow;
          S3.dropShadow(z3, X3, s2);
        }
        y2 && (z3.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, z3)), z3.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, z3)), z3.node.addEventListener("mousedown", this.pathMouseDown.bind(this, z3))), z3.attr({ pathTo: o3, pathFrom: r3 });
        var E3 = { el: z3, j: a3, realIndex: s2, pathFrom: r3, pathTo: o3, fill: c3, strokeWidth: l3, delay: d3 };
        return !L3 || A3.globals.resized || A3.globals.dataChanged ? !A3.globals.resized && A3.globals.dataChanged || C3.showDelayedElements() : C3.animatePathsGradually(e2(e2({}, E3), {}, { speed: g3 })), A3.globals.dataChanged && P3 && T3 && C3.animatePathsGradually(e2(e2({}, E3), {}, { speed: u3 })), z3;
      } }, { key: "drawPattern", value: function(t4, e3, i3) {
        var a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8", s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r3 = this.w, o3 = r3.globals.dom.Paper.pattern(e3, i3, function(r4) {
          "horizontalLines" === t4 ? r4.line(0, 0, i3, 0).stroke({ color: a3, width: s2 + 1 }) : "verticalLines" === t4 ? r4.line(0, 0, 0, e3).stroke({ color: a3, width: s2 + 1 }) : "slantedLines" === t4 ? r4.line(0, 0, e3, i3).stroke({ color: a3, width: s2 }) : "squares" === t4 ? r4.rect(e3, i3).fill("none").stroke({ color: a3, width: s2 }) : "circles" === t4 && r4.circle(e3).fill("none").stroke({ color: a3, width: s2 });
        });
        return o3;
      } }, { key: "drawGradient", value: function(t4, e3, i3, a3, s2) {
        var r3, o3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, n3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l3 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, h3 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c3 = this.w;
        e3.length < 9 && 0 === e3.indexOf("#") && (e3 = x2.hexToRgba(e3, a3)), i3.length < 9 && 0 === i3.indexOf("#") && (i3 = x2.hexToRgba(i3, s2));
        var d3 = 0, g3 = 1, u3 = 1, f3 = null;
        null !== n3 && (d3 = void 0 !== n3[0] ? n3[0] / 100 : 0, g3 = void 0 !== n3[1] ? n3[1] / 100 : 1, u3 = void 0 !== n3[2] ? n3[2] / 100 : 1, f3 = void 0 !== n3[3] ? n3[3] / 100 : null);
        var p3 = !("donut" !== c3.config.chart.type && "pie" !== c3.config.chart.type && "polarArea" !== c3.config.chart.type && "bubble" !== c3.config.chart.type);
        if (r3 = null === l3 || 0 === l3.length ? c3.globals.dom.Paper.gradient(p3 ? "radial" : "linear", function(t5) {
          t5.at(d3, e3, a3), t5.at(g3, i3, s2), t5.at(u3, i3, s2), null !== f3 && t5.at(f3, e3, a3);
        }) : c3.globals.dom.Paper.gradient(p3 ? "radial" : "linear", function(t5) {
          (Array.isArray(l3[h3]) ? l3[h3] : l3).forEach(function(e4) {
            t5.at(e4.offset / 100, e4.color, e4.opacity);
          });
        }), p3) {
          var b3 = c3.globals.gridWidth / 2, v3 = c3.globals.gridHeight / 2;
          "bubble" !== c3.config.chart.type ? r3.attr({ gradientUnits: "userSpaceOnUse", cx: b3, cy: v3, r: o3 }) : r3.attr({ cx: 0.5, cy: 0.5, r: 0.8, fx: 0.2, fy: 0.2 });
        } else
          "vertical" === t4 ? r3.from(0, 0).to(0, 1) : "diagonal" === t4 ? r3.from(0, 0).to(1, 1) : "horizontal" === t4 ? r3.from(0, 1).to(1, 1) : "diagonal2" === t4 && r3.from(1, 0).to(0, 1);
        return r3;
      } }, { key: "getTextBasedOnMaxWidth", value: function(t4) {
        var e3 = t4.text, i3 = t4.maxWidth, a3 = t4.fontSize, s2 = t4.fontFamily, r3 = this.getTextRects(e3, a3, s2), o3 = r3.width / e3.length, n3 = Math.floor(i3 / o3);
        return i3 < r3.width ? e3.slice(0, n3 - 3) + "..." : e3;
      } }, { key: "drawText", value: function(t4) {
        var i3 = this, a3 = t4.x, s2 = t4.y, r3 = t4.text, o3 = t4.textAnchor, n3 = t4.fontSize, l3 = t4.fontFamily, h3 = t4.fontWeight, c3 = t4.foreColor, d3 = t4.opacity, g3 = t4.maxWidth, u3 = t4.cssClass, f3 = void 0 === u3 ? "" : u3, p3 = t4.isPlainText, x3 = void 0 === p3 || p3, b3 = this.w;
        void 0 === r3 && (r3 = "");
        var v3 = r3;
        o3 || (o3 = "start"), c3 && c3.length || (c3 = b3.config.chart.foreColor), l3 = l3 || b3.config.chart.fontFamily, h3 = h3 || "regular";
        var m3, y2 = { maxWidth: g3, fontSize: n3 = n3 || "11px", fontFamily: l3 };
        return Array.isArray(r3) ? m3 = b3.globals.dom.Paper.text(function(t5) {
          for (var a4 = 0; a4 < r3.length; a4++)
            v3 = r3[a4], g3 && (v3 = i3.getTextBasedOnMaxWidth(e2({ text: r3[a4] }, y2))), 0 === a4 ? t5.tspan(v3) : t5.tspan(v3).newLine();
        }) : (g3 && (v3 = this.getTextBasedOnMaxWidth(e2({ text: r3 }, y2))), m3 = x3 ? b3.globals.dom.Paper.plain(r3) : b3.globals.dom.Paper.text(function(t5) {
          return t5.tspan(v3);
        })), m3.attr({ x: a3, y: s2, "text-anchor": o3, "dominant-baseline": "auto", "font-size": n3, "font-family": l3, "font-weight": h3, fill: c3, class: "apexcharts-text " + f3 }), m3.node.style.fontFamily = l3, m3.node.style.opacity = d3, m3;
      } }, { key: "drawMarker", value: function(t4, e3, i3) {
        t4 = t4 || 0;
        var a3 = i3.pSize || 0, s2 = null;
        if ("square" === i3.shape || "rect" === i3.shape) {
          var r3 = void 0 === i3.pRadius ? a3 / 2 : i3.pRadius;
          null !== e3 && a3 || (a3 = 0, r3 = 0);
          var o3 = 1.2 * a3 + r3, n3 = this.drawRect(o3, o3, o3, o3, r3);
          n3.attr({ x: t4 - o3 / 2, y: e3 - o3 / 2, cx: t4, cy: e3, class: i3.class ? i3.class : "", fill: i3.pointFillColor, "fill-opacity": i3.pointFillOpacity ? i3.pointFillOpacity : 1, stroke: i3.pointStrokeColor, "stroke-width": i3.pointStrokeWidth ? i3.pointStrokeWidth : 0, "stroke-opacity": i3.pointStrokeOpacity ? i3.pointStrokeOpacity : 1 }), s2 = n3;
        } else
          "circle" !== i3.shape && i3.shape || (x2.isNumber(e3) || (a3 = 0, e3 = 0), s2 = this.drawCircle(a3, { cx: t4, cy: e3, class: i3.class ? i3.class : "", stroke: i3.pointStrokeColor, fill: i3.pointFillColor, "fill-opacity": i3.pointFillOpacity ? i3.pointFillOpacity : 1, "stroke-width": i3.pointStrokeWidth ? i3.pointStrokeWidth : 0, "stroke-opacity": i3.pointStrokeOpacity ? i3.pointStrokeOpacity : 1 }));
        return s2;
      } }, { key: "pathMouseEnter", value: function(t4, e3) {
        var i3 = this.w, a3 = new v2(this.ctx), s2 = parseInt(t4.node.getAttribute("index"), 10), r3 = parseInt(t4.node.getAttribute("j"), 10);
        if ("function" == typeof i3.config.chart.events.dataPointMouseEnter && i3.config.chart.events.dataPointMouseEnter(e3, this.ctx, { seriesIndex: s2, dataPointIndex: r3, w: i3 }), this.ctx.events.fireEvent("dataPointMouseEnter", [e3, this.ctx, { seriesIndex: s2, dataPointIndex: r3, w: i3 }]), ("none" === i3.config.states.active.filter.type || "true" !== t4.node.getAttribute("selected")) && "none" !== i3.config.states.hover.filter.type && !i3.globals.isTouchDevice) {
          var o3 = i3.config.states.hover.filter;
          a3.applyFilter(t4, s2, o3.type, o3.value);
        }
      } }, { key: "pathMouseLeave", value: function(t4, e3) {
        var i3 = this.w, a3 = new v2(this.ctx), s2 = parseInt(t4.node.getAttribute("index"), 10), r3 = parseInt(t4.node.getAttribute("j"), 10);
        "function" == typeof i3.config.chart.events.dataPointMouseLeave && i3.config.chart.events.dataPointMouseLeave(e3, this.ctx, { seriesIndex: s2, dataPointIndex: r3, w: i3 }), this.ctx.events.fireEvent("dataPointMouseLeave", [e3, this.ctx, { seriesIndex: s2, dataPointIndex: r3, w: i3 }]), "none" !== i3.config.states.active.filter.type && "true" === t4.node.getAttribute("selected") || "none" !== i3.config.states.hover.filter.type && a3.getDefaultFilter(t4, s2);
      } }, { key: "pathMouseDown", value: function(t4, e3) {
        var i3 = this.w, a3 = new v2(this.ctx), s2 = parseInt(t4.node.getAttribute("index"), 10), r3 = parseInt(t4.node.getAttribute("j"), 10), o3 = "false";
        if ("true" === t4.node.getAttribute("selected")) {
          if (t4.node.setAttribute("selected", "false"), i3.globals.selectedDataPoints[s2].indexOf(r3) > -1) {
            var n3 = i3.globals.selectedDataPoints[s2].indexOf(r3);
            i3.globals.selectedDataPoints[s2].splice(n3, 1);
          }
        } else {
          if (!i3.config.states.active.allowMultipleDataPointsSelection && i3.globals.selectedDataPoints.length > 0) {
            i3.globals.selectedDataPoints = [];
            var l3 = i3.globals.dom.Paper.select(".apexcharts-series path").members, h3 = i3.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members, c3 = function(t5) {
              Array.prototype.forEach.call(t5, function(t6) {
                t6.node.setAttribute("selected", "false"), a3.getDefaultFilter(t6, s2);
              });
            };
            c3(l3), c3(h3);
          }
          t4.node.setAttribute("selected", "true"), o3 = "true", void 0 === i3.globals.selectedDataPoints[s2] && (i3.globals.selectedDataPoints[s2] = []), i3.globals.selectedDataPoints[s2].push(r3);
        }
        if ("true" === o3) {
          var d3 = i3.config.states.active.filter;
          if ("none" !== d3)
            a3.applyFilter(t4, s2, d3.type, d3.value);
          else if ("none" !== i3.config.states.hover.filter && !i3.globals.isTouchDevice) {
            var g3 = i3.config.states.hover.filter;
            a3.applyFilter(t4, s2, g3.type, g3.value);
          }
        } else if ("none" !== i3.config.states.active.filter.type)
          if ("none" === i3.config.states.hover.filter.type || i3.globals.isTouchDevice)
            a3.getDefaultFilter(t4, s2);
          else {
            g3 = i3.config.states.hover.filter;
            a3.applyFilter(t4, s2, g3.type, g3.value);
          }
        "function" == typeof i3.config.chart.events.dataPointSelection && i3.config.chart.events.dataPointSelection(e3, this.ctx, { selectedDataPoints: i3.globals.selectedDataPoints, seriesIndex: s2, dataPointIndex: r3, w: i3 }), e3 && this.ctx.events.fireEvent("dataPointSelection", [e3, this.ctx, { selectedDataPoints: i3.globals.selectedDataPoints, seriesIndex: s2, dataPointIndex: r3, w: i3 }]);
      } }, { key: "rotateAroundCenter", value: function(t4) {
        var e3 = {};
        return t4 && "function" == typeof t4.getBBox && (e3 = t4.getBBox()), { x: e3.x + e3.width / 2, y: e3.y + e3.height / 2 };
      } }, { key: "getTextRects", value: function(t4, e3, i3, a3) {
        var s2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r3 = this.w, o3 = this.drawText({ x: -200, y: -200, text: t4, textAnchor: "start", fontSize: e3, fontFamily: i3, foreColor: "#fff", opacity: 0 });
        a3 && o3.attr("transform", a3), r3.globals.dom.Paper.add(o3);
        var n3 = o3.bbox();
        return s2 || (n3 = o3.node.getBoundingClientRect()), o3.remove(), { width: n3.width, height: n3.height };
      } }, { key: "placeTextWithEllipsis", value: function(t4, e3, i3) {
        if ("function" == typeof t4.getComputedTextLength && (t4.textContent = e3, e3.length > 0 && t4.getComputedTextLength() >= i3 / 1.1)) {
          for (var a3 = e3.length - 3; a3 > 0; a3 -= 3)
            if (t4.getSubStringLength(0, a3) <= i3 / 1.1)
              return void (t4.textContent = e3.substring(0, a3) + "...");
          t4.textContent = ".";
        }
      } }], [{ key: "setAttrs", value: function(t4, e3) {
        for (var i3 in e3)
          e3.hasOwnProperty(i3) && t4.setAttribute(i3, e3[i3]);
      } }]), t3;
    }(), y = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "getStackedSeriesTotals", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = this.w, i3 = [];
        if (0 === e3.globals.series.length)
          return i3;
        for (var a3 = 0; a3 < e3.globals.series[e3.globals.maxValsInArrayIndex].length; a3++) {
          for (var s2 = 0, r3 = 0; r3 < e3.globals.series.length; r3++)
            void 0 !== e3.globals.series[r3][a3] && -1 === t4.indexOf(r3) && (s2 += e3.globals.series[r3][a3]);
          i3.push(s2);
        }
        return i3;
      } }, { key: "getSeriesTotalByIndex", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return null === t4 ? this.w.config.series.reduce(function(t5, e3) {
          return t5 + e3;
        }, 0) : this.w.globals.series[t4].reduce(function(t5, e3) {
          return t5 + e3;
        }, 0);
      } }, { key: "isSeriesNull", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return 0 === (null === t4 ? this.w.config.series.filter(function(t5) {
          return null !== t5;
        }) : this.w.config.series[t4].data.filter(function(t5) {
          return null !== t5;
        })).length;
      } }, { key: "seriesHaveSameValues", value: function(t4) {
        return this.w.globals.series[t4].every(function(t5, e3, i3) {
          return t5 === i3[0];
        });
      } }, { key: "getCategoryLabels", value: function(t4) {
        var e3 = this.w, i3 = t4.slice();
        return e3.config.xaxis.convertedCatToNumeric && (i3 = t4.map(function(t5, i4) {
          return e3.config.xaxis.labels.formatter(t5 - e3.globals.minX + 1);
        })), i3;
      } }, { key: "getLargestSeries", value: function() {
        var t4 = this.w;
        t4.globals.maxValsInArrayIndex = t4.globals.series.map(function(t5) {
          return t5.length;
        }).indexOf(Math.max.apply(Math, t4.globals.series.map(function(t5) {
          return t5.length;
        })));
      } }, { key: "getLargestMarkerSize", value: function() {
        var t4 = this.w, e3 = 0;
        return t4.globals.markers.size.forEach(function(t5) {
          e3 = Math.max(e3, t5);
        }), t4.config.markers.discrete && t4.config.markers.discrete.length && t4.config.markers.discrete.forEach(function(t5) {
          e3 = Math.max(e3, t5.size);
        }), e3 > 0 && (e3 += t4.config.markers.hover.sizeOffset + 1), t4.globals.markers.largestSize = e3, e3;
      } }, { key: "getSeriesTotals", value: function() {
        var t4 = this.w;
        t4.globals.seriesTotals = t4.globals.series.map(function(t5, e3) {
          var i3 = 0;
          if (Array.isArray(t5))
            for (var a3 = 0; a3 < t5.length; a3++)
              i3 += t5[a3];
          else
            i3 += t5;
          return i3;
        });
      } }, { key: "getSeriesTotalsXRange", value: function(t4, e3) {
        var i3 = this.w;
        return i3.globals.series.map(function(a3, s2) {
          for (var r3 = 0, o3 = 0; o3 < a3.length; o3++)
            i3.globals.seriesX[s2][o3] > t4 && i3.globals.seriesX[s2][o3] < e3 && (r3 += a3[o3]);
          return r3;
        });
      } }, { key: "getPercentSeries", value: function() {
        var t4 = this.w;
        t4.globals.seriesPercent = t4.globals.series.map(function(e3, i3) {
          var a3 = [];
          if (Array.isArray(e3))
            for (var s2 = 0; s2 < e3.length; s2++) {
              var r3 = t4.globals.stackedSeriesTotals[s2], o3 = 0;
              r3 && (o3 = 100 * e3[s2] / r3), a3.push(o3);
            }
          else {
            var n3 = 100 * e3 / t4.globals.seriesTotals.reduce(function(t5, e4) {
              return t5 + e4;
            }, 0);
            a3.push(n3);
          }
          return a3;
        });
      } }, { key: "getCalculatedRatios", value: function() {
        var t4, e3, i3, a3, s2 = this.w.globals, r3 = [], o3 = 0, n3 = [], l3 = 0.1, h3 = 0;
        if (s2.yRange = [], s2.isMultipleYAxis)
          for (var c3 = 0; c3 < s2.minYArr.length; c3++)
            s2.yRange.push(Math.abs(s2.minYArr[c3] - s2.maxYArr[c3])), n3.push(0);
        else
          s2.yRange.push(Math.abs(s2.minY - s2.maxY));
        s2.xRange = Math.abs(s2.maxX - s2.minX), s2.zRange = Math.abs(s2.maxZ - s2.minZ);
        for (var d3 = 0; d3 < s2.yRange.length; d3++)
          r3.push(s2.yRange[d3] / s2.gridHeight);
        if (e3 = s2.xRange / s2.gridWidth, i3 = Math.abs(s2.initialMaxX - s2.initialMinX) / s2.gridWidth, t4 = s2.yRange / s2.gridWidth, a3 = s2.xRange / s2.gridHeight, (o3 = s2.zRange / s2.gridHeight * 16) || (o3 = 1), s2.minY !== Number.MIN_VALUE && 0 !== Math.abs(s2.minY) && (s2.hasNegs = true), s2.isMultipleYAxis) {
          n3 = [];
          for (var g3 = 0; g3 < r3.length; g3++)
            n3.push(-s2.minYArr[g3] / r3[g3]);
        } else
          n3.push(-s2.minY / r3[0]), s2.minY !== Number.MIN_VALUE && 0 !== Math.abs(s2.minY) && (l3 = -s2.minY / t4, h3 = s2.minX / e3);
        return { yRatio: r3, invertedYRatio: t4, zRatio: o3, xRatio: e3, initialXRatio: i3, invertedXRatio: a3, baseLineInvertedY: l3, baseLineY: n3, baseLineX: h3 };
      } }, { key: "getLogSeries", value: function(t4) {
        var e3 = this, i3 = this.w;
        return i3.globals.seriesLog = t4.map(function(t5, a3) {
          return i3.config.yaxis[a3] && i3.config.yaxis[a3].logarithmic ? t5.map(function(t6) {
            return null === t6 ? null : e3.getLogVal(i3.config.yaxis[a3].logBase, t6, a3);
          }) : t5;
        }), i3.globals.invalidLogScale ? t4 : i3.globals.seriesLog;
      } }, { key: "getBaseLog", value: function(t4, e3) {
        return Math.log(e3) / Math.log(t4);
      } }, { key: "getLogVal", value: function(t4, e3, i3) {
        if (0 === e3)
          return 0;
        var a3 = this.w, s2 = 0 === a3.globals.minYArr[i3] ? -1 : this.getBaseLog(t4, a3.globals.minYArr[i3]), r3 = (0 === a3.globals.maxYArr[i3] ? 0 : this.getBaseLog(t4, a3.globals.maxYArr[i3])) - s2;
        return e3 < 1 ? e3 / r3 : (this.getBaseLog(t4, e3) - s2) / r3;
      } }, { key: "getLogYRatios", value: function(t4) {
        var e3 = this, i3 = this.w, a3 = this.w.globals;
        return a3.yLogRatio = t4.slice(), a3.logYRange = a3.yRange.map(function(t5, s2) {
          if (i3.config.yaxis[s2] && e3.w.config.yaxis[s2].logarithmic) {
            var r3, o3 = -Number.MAX_VALUE, n3 = Number.MIN_VALUE;
            return a3.seriesLog.forEach(function(t6, e4) {
              t6.forEach(function(t7) {
                i3.config.yaxis[e4] && i3.config.yaxis[e4].logarithmic && (o3 = Math.max(t7, o3), n3 = Math.min(t7, n3));
              });
            }), r3 = Math.pow(a3.yRange[s2], Math.abs(n3 - o3) / a3.yRange[s2]), a3.yLogRatio[s2] = r3 / a3.gridHeight, r3;
          }
        }), a3.invalidLogScale ? t4.slice() : a3.yLogRatio;
      } }], [{ key: "checkComboSeries", value: function(t4) {
        var e3 = false, i3 = 0, a3 = 0;
        return t4.length && void 0 !== t4[0].type && t4.forEach(function(t5) {
          "bar" !== t5.type && "column" !== t5.type && "candlestick" !== t5.type && "boxPlot" !== t5.type || i3++, void 0 !== t5.type && a3++;
        }), a3 > 0 && (e3 = true), { comboBarCount: i3, comboCharts: e3 };
      } }, { key: "extendArrayProps", value: function(t4, e3, i3) {
        return e3.yaxis && (e3 = t4.extendYAxis(e3, i3)), e3.annotations && (e3.annotations.yaxis && (e3 = t4.extendYAxisAnnotations(e3)), e3.annotations.xaxis && (e3 = t4.extendXAxisAnnotations(e3)), e3.annotations.points && (e3 = t4.extendPointAnnotations(e3))), e3;
      } }]), t3;
    }(), w = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.annoCtx = e3;
      }
      return r2(t3, [{ key: "setOrientations", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i3 = this.w;
        if ("vertical" === t4.label.orientation) {
          var a3 = null !== e3 ? e3 : 0, s2 = i3.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a3, "']"));
          if (null !== s2) {
            var r3 = s2.getBoundingClientRect();
            s2.setAttribute("x", parseFloat(s2.getAttribute("x")) - r3.height + 4), "top" === t4.label.position ? s2.setAttribute("y", parseFloat(s2.getAttribute("y")) + r3.width) : s2.setAttribute("y", parseFloat(s2.getAttribute("y")) - r3.width);
            var o3 = this.annoCtx.graphics.rotateAroundCenter(s2), n3 = o3.x, l3 = o3.y;
            s2.setAttribute("transform", "rotate(-90 ".concat(n3, " ").concat(l3, ")"));
          }
        }
      } }, { key: "addBackgroundToAnno", value: function(t4, e3) {
        var i3 = this.w;
        if (!t4 || void 0 === e3.label.text || void 0 !== e3.label.text && !String(e3.label.text).trim())
          return null;
        var a3 = i3.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(), s2 = t4.getBoundingClientRect(), r3 = e3.label.style.padding.left, o3 = e3.label.style.padding.right, n3 = e3.label.style.padding.top, l3 = e3.label.style.padding.bottom;
        "vertical" === e3.label.orientation && (n3 = e3.label.style.padding.left, l3 = e3.label.style.padding.right, r3 = e3.label.style.padding.top, o3 = e3.label.style.padding.bottom);
        var h3 = s2.left - a3.left - r3, c3 = s2.top - a3.top - n3, d3 = this.annoCtx.graphics.drawRect(h3 - i3.globals.barPadForNumericAxis, c3, s2.width + r3 + o3, s2.height + n3 + l3, e3.label.borderRadius, e3.label.style.background, 1, e3.label.borderWidth, e3.label.borderColor, 0);
        return e3.id && d3.node.classList.add(e3.id), d3;
      } }, { key: "annotationsBackground", value: function() {
        var t4 = this, e3 = this.w, i3 = function(i4, a3, s2) {
          var r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations .apexcharts-").concat(s2, "-annotation-label[rel='").concat(a3, "']"));
          if (r3) {
            var o3 = r3.parentNode, n3 = t4.addBackgroundToAnno(r3, i4);
            n3 && (o3.insertBefore(n3.node, r3), i4.label.mouseEnter && n3.node.addEventListener("mouseenter", i4.label.mouseEnter.bind(t4, i4)), i4.label.mouseLeave && n3.node.addEventListener("mouseleave", i4.label.mouseLeave.bind(t4, i4)), i4.label.click && n3.node.addEventListener("click", i4.label.click.bind(t4, i4)));
          }
        };
        e3.config.annotations.xaxis.map(function(t5, e4) {
          i3(t5, e4, "xaxis");
        }), e3.config.annotations.yaxis.map(function(t5, e4) {
          i3(t5, e4, "yaxis");
        }), e3.config.annotations.points.map(function(t5, e4) {
          i3(t5, e4, "point");
        });
      } }, { key: "getY1Y2", value: function(t4, e3) {
        var i3, a3 = "y1" === t4 ? e3.y : e3.y2, s2 = this.w;
        if (this.annoCtx.invertAxis) {
          var r3 = s2.globals.labels.indexOf(a3);
          s2.config.xaxis.convertedCatToNumeric && (r3 = s2.globals.categoryLabels.indexOf(a3));
          var o3 = s2.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (r3 + 1) + ")");
          o3 && (i3 = parseFloat(o3.getAttribute("y")));
        } else {
          var n3;
          if (s2.config.yaxis[e3.yAxisIndex].logarithmic)
            n3 = (a3 = new y(this.annoCtx.ctx).getLogVal(a3, e3.yAxisIndex)) / s2.globals.yLogRatio[e3.yAxisIndex];
          else
            n3 = (a3 - s2.globals.minYArr[e3.yAxisIndex]) / (s2.globals.yRange[e3.yAxisIndex] / s2.globals.gridHeight);
          i3 = s2.globals.gridHeight - n3, !e3.marker || void 0 !== e3.y && null !== e3.y || (i3 = 0), s2.config.yaxis[e3.yAxisIndex] && s2.config.yaxis[e3.yAxisIndex].reversed && (i3 = n3);
        }
        return "string" == typeof a3 && a3.indexOf("px") > -1 && (i3 = parseFloat(a3)), i3;
      } }, { key: "getX1X2", value: function(t4, e3) {
        var i3 = this.w, a3 = this.annoCtx.invertAxis ? i3.globals.minY : i3.globals.minX, s2 = this.annoCtx.invertAxis ? i3.globals.maxY : i3.globals.maxX, r3 = this.annoCtx.invertAxis ? i3.globals.yRange[0] : i3.globals.xRange, o3 = (e3.x - a3) / (r3 / i3.globals.gridWidth);
        this.annoCtx.inversedReversedAxis && (o3 = (s2 - e3.x) / (r3 / i3.globals.gridWidth)), "category" !== i3.config.xaxis.type && !i3.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i3.globals.dataFormatXNumeric || (o3 = this.getStringX(e3.x));
        var n3 = (e3.x2 - a3) / (r3 / i3.globals.gridWidth);
        return this.annoCtx.inversedReversedAxis && (n3 = (s2 - e3.x2) / (r3 / i3.globals.gridWidth)), "category" !== i3.config.xaxis.type && !i3.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i3.globals.dataFormatXNumeric || (n3 = this.getStringX(e3.x2)), void 0 !== e3.x && null !== e3.x || !e3.marker || (o3 = i3.globals.gridWidth), "x1" === t4 && "string" == typeof e3.x && e3.x.indexOf("px") > -1 && (o3 = parseFloat(e3.x)), "x2" === t4 && "string" == typeof e3.x2 && e3.x2.indexOf("px") > -1 && (n3 = parseFloat(e3.x2)), "x1" === t4 ? o3 : n3;
      } }, { key: "getStringX", value: function(t4) {
        var e3 = this.w, i3 = t4;
        e3.config.xaxis.convertedCatToNumeric && e3.globals.categoryLabels.length && (t4 = e3.globals.categoryLabels.indexOf(t4) + 1);
        var a3 = e3.globals.labels.indexOf(t4), s2 = e3.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (a3 + 1) + ")");
        return s2 && (i3 = parseFloat(s2.getAttribute("x"))), i3;
      } }]), t3;
    }(), k2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.annoCtx = e3, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new w(this.annoCtx);
      }
      return r2(t3, [{ key: "addXaxisAnnotation", value: function(t4, e3, i3) {
        var a3, s2 = this.w, r3 = this.helpers.getX1X2("x1", t4), o3 = t4.label.text, n3 = t4.strokeDashArray;
        if (x2.isNumber(r3)) {
          if (null === t4.x2 || void 0 === t4.x2) {
            var l3 = this.annoCtx.graphics.drawLine(r3 + t4.offsetX, 0 + t4.offsetY, r3 + t4.offsetX, s2.globals.gridHeight + t4.offsetY, t4.borderColor, n3, t4.borderWidth);
            e3.appendChild(l3.node), t4.id && l3.node.classList.add(t4.id);
          } else {
            if ((a3 = this.helpers.getX1X2("x2", t4)) < r3) {
              var h3 = r3;
              r3 = a3, a3 = h3;
            }
            var c3 = this.annoCtx.graphics.drawRect(r3 + t4.offsetX, 0 + t4.offsetY, a3 - r3, s2.globals.gridHeight + t4.offsetY, 0, t4.fillColor, t4.opacity, 1, t4.borderColor, n3);
            c3.node.classList.add("apexcharts-annotation-rect"), c3.attr("clip-path", "url(#gridRectMask".concat(s2.globals.cuid, ")")), e3.appendChild(c3.node), t4.id && c3.node.classList.add(t4.id);
          }
          var d3 = this.annoCtx.graphics.getTextRects(o3, parseFloat(t4.label.style.fontSize)), g3 = "top" === t4.label.position ? 4 : "center" === t4.label.position ? s2.globals.gridHeight / 2 + ("vertical" === t4.label.orientation ? d3.width / 2 : 0) : s2.globals.gridHeight, u3 = this.annoCtx.graphics.drawText({ x: r3 + t4.label.offsetX, y: g3 + t4.label.offsetY - ("vertical" === t4.label.orientation ? "top" === t4.label.position ? d3.width / 2 - 12 : -d3.width / 2 : 0), text: o3, textAnchor: t4.label.textAnchor, fontSize: t4.label.style.fontSize, fontFamily: t4.label.style.fontFamily, fontWeight: t4.label.style.fontWeight, foreColor: t4.label.style.color, cssClass: "apexcharts-xaxis-annotation-label ".concat(t4.label.style.cssClass, " ").concat(t4.id ? t4.id : "") });
          u3.attr({ rel: i3 }), e3.appendChild(u3.node), this.annoCtx.helpers.setOrientations(t4, i3);
        }
      } }, { key: "drawXAxisAnnotations", value: function() {
        var t4 = this, e3 = this.w, i3 = this.annoCtx.graphics.group({ class: "apexcharts-xaxis-annotations" });
        return e3.config.annotations.xaxis.map(function(e4, a3) {
          t4.addXaxisAnnotation(e4, i3.node, a3);
        }), i3;
      } }]), t3;
    }(), A2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.annoCtx = e3, this.helpers = new w(this.annoCtx);
      }
      return r2(t3, [{ key: "addYaxisAnnotation", value: function(t4, e3, i3) {
        var a3, s2 = this.w, r3 = t4.strokeDashArray, o3 = this.helpers.getY1Y2("y1", t4), n3 = t4.label.text;
        if (null === t4.y2 || void 0 === t4.y2) {
          var l3 = this.annoCtx.graphics.drawLine(0 + t4.offsetX, o3 + t4.offsetY, this._getYAxisAnnotationWidth(t4), o3 + t4.offsetY, t4.borderColor, r3, t4.borderWidth);
          e3.appendChild(l3.node), t4.id && l3.node.classList.add(t4.id);
        } else {
          if ((a3 = this.helpers.getY1Y2("y2", t4)) > o3) {
            var h3 = o3;
            o3 = a3, a3 = h3;
          }
          var c3 = this.annoCtx.graphics.drawRect(0 + t4.offsetX, a3 + t4.offsetY, this._getYAxisAnnotationWidth(t4), o3 - a3, 0, t4.fillColor, t4.opacity, 1, t4.borderColor, r3);
          c3.node.classList.add("apexcharts-annotation-rect"), c3.attr("clip-path", "url(#gridRectMask".concat(s2.globals.cuid, ")")), e3.appendChild(c3.node), t4.id && c3.node.classList.add(t4.id);
        }
        var d3 = "right" === t4.label.position ? s2.globals.gridWidth : "center" === t4.label.position ? s2.globals.gridWidth / 2 : 0, g3 = this.annoCtx.graphics.drawText({ x: d3 + t4.label.offsetX, y: (null != a3 ? a3 : o3) + t4.label.offsetY - 3, text: n3, textAnchor: t4.label.textAnchor, fontSize: t4.label.style.fontSize, fontFamily: t4.label.style.fontFamily, fontWeight: t4.label.style.fontWeight, foreColor: t4.label.style.color, cssClass: "apexcharts-yaxis-annotation-label ".concat(t4.label.style.cssClass, " ").concat(t4.id ? t4.id : "") });
        g3.attr({ rel: i3 }), e3.appendChild(g3.node);
      } }, { key: "_getYAxisAnnotationWidth", value: function(t4) {
        var e3 = this.w;
        e3.globals.gridWidth;
        return (t4.width.indexOf("%") > -1 ? e3.globals.gridWidth * parseInt(t4.width, 10) / 100 : parseInt(t4.width, 10)) + t4.offsetX;
      } }, { key: "drawYAxisAnnotations", value: function() {
        var t4 = this, e3 = this.w, i3 = this.annoCtx.graphics.group({ class: "apexcharts-yaxis-annotations" });
        return e3.config.annotations.yaxis.map(function(e4, a3) {
          t4.addYaxisAnnotation(e4, i3.node, a3);
        }), i3;
      } }]), t3;
    }(), S2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.annoCtx = e3, this.helpers = new w(this.annoCtx);
      }
      return r2(t3, [{ key: "addPointAnnotation", value: function(t4, e3, i3) {
        this.w;
        var a3 = this.helpers.getX1X2("x1", t4), s2 = this.helpers.getY1Y2("y1", t4);
        if (x2.isNumber(a3)) {
          var r3 = { pSize: t4.marker.size, pointStrokeWidth: t4.marker.strokeWidth, pointFillColor: t4.marker.fillColor, pointStrokeColor: t4.marker.strokeColor, shape: t4.marker.shape, pRadius: t4.marker.radius, class: "apexcharts-point-annotation-marker ".concat(t4.marker.cssClass, " ").concat(t4.id ? t4.id : "") }, o3 = this.annoCtx.graphics.drawMarker(a3 + t4.marker.offsetX, s2 + t4.marker.offsetY, r3);
          e3.appendChild(o3.node);
          var n3 = t4.label.text ? t4.label.text : "", l3 = this.annoCtx.graphics.drawText({ x: a3 + t4.label.offsetX, y: s2 + t4.label.offsetY - t4.marker.size - parseFloat(t4.label.style.fontSize) / 1.6, text: n3, textAnchor: t4.label.textAnchor, fontSize: t4.label.style.fontSize, fontFamily: t4.label.style.fontFamily, fontWeight: t4.label.style.fontWeight, foreColor: t4.label.style.color, cssClass: "apexcharts-point-annotation-label ".concat(t4.label.style.cssClass, " ").concat(t4.id ? t4.id : "") });
          if (l3.attr({ rel: i3 }), e3.appendChild(l3.node), t4.customSVG.SVG) {
            var h3 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations-custom-svg " + t4.customSVG.cssClass });
            h3.attr({ transform: "translate(".concat(a3 + t4.customSVG.offsetX, ", ").concat(s2 + t4.customSVG.offsetY, ")") }), h3.node.innerHTML = t4.customSVG.SVG, e3.appendChild(h3.node);
          }
          if (t4.image.path) {
            var c3 = t4.image.width ? t4.image.width : 20, d3 = t4.image.height ? t4.image.height : 20;
            o3 = this.annoCtx.addImage({ x: a3 + t4.image.offsetX - c3 / 2, y: s2 + t4.image.offsetY - d3 / 2, width: c3, height: d3, path: t4.image.path, appendTo: ".apexcharts-point-annotations" });
          }
          t4.mouseEnter && o3.node.addEventListener("mouseenter", t4.mouseEnter.bind(this, t4)), t4.mouseLeave && o3.node.addEventListener("mouseleave", t4.mouseLeave.bind(this, t4)), t4.click && o3.node.addEventListener("click", t4.click.bind(this, t4));
        }
      } }, { key: "drawPointAnnotations", value: function() {
        var t4 = this, e3 = this.w, i3 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations" });
        return e3.config.annotations.points.map(function(e4, a3) {
          t4.addPointAnnotation(e4, i3.node, a3);
        }), i3;
      } }]), t3;
    }();
    var C2 = { name: "en", options: { months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], toolbar: { exportToSVG: "Download SVG", exportToPNG: "Download PNG", exportToCSV: "Download CSV", menu: "Menu", selection: "Selection", selectionZoom: "Selection Zoom", zoomIn: "Zoom In", zoomOut: "Zoom Out", pan: "Panning", reset: "Reset Zoom" } } }, L2 = function() {
      function t3() {
        a2(this, t3), this.yAxis = { show: true, showAlways: false, showForNullSeries: true, seriesName: void 0, opposite: false, reversed: false, logarithmic: false, logBase: 10, tickAmount: void 0, forceNiceScale: false, max: void 0, min: void 0, floating: false, decimalsInFloat: void 0, labels: { show: true, minWidth: 0, maxWidth: 160, offsetX: 0, offsetY: 0, align: void 0, rotate: 0, padding: 20, style: { colors: [], fontSize: "11px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, formatter: void 0 }, axisBorder: { show: false, color: "#e0e0e0", width: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: false, color: "#e0e0e0", width: 6, offsetX: 0, offsetY: 0 }, title: { text: void 0, rotate: -90, offsetY: 0, offsetX: 0, style: { color: void 0, fontSize: "11px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, tooltip: { enabled: false, offsetX: 0 }, crosshairs: { show: true, position: "front", stroke: { color: "#b6b6b6", width: 1, dashArray: 0 } } }, this.pointAnnotation = { id: void 0, x: 0, y: null, yAxisIndex: 0, seriesIndex: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, marker: { size: 4, fillColor: "#fff", strokeWidth: 2, strokeColor: "#333", shape: "circle", offsetX: 0, offsetY: 0, radius: 2, cssClass: "" }, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } }, customSVG: { SVG: void 0, cssClass: void 0, offsetX: 0, offsetY: 0 }, image: { path: void 0, width: 20, height: 20, offsetX: 0, offsetY: 0 } }, this.yAxisAnnotation = { id: void 0, y: 0, y2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, width: "100%", yAxisIndex: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "end", position: "right", offsetX: 0, offsetY: -3, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.xAxisAnnotation = { id: void 0, x: 0, x2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", orientation: "vertical", position: "top", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.text = { x: 0, y: 0, text: "", textAnchor: "start", foreColor: void 0, fontSize: "13px", fontFamily: void 0, fontWeight: 400, appendTo: ".apexcharts-annotations", backgroundColor: "transparent", borderColor: "#c2c2c2", borderRadius: 0, borderWidth: 0, paddingLeft: 4, paddingRight: 4, paddingTop: 2, paddingBottom: 2 };
      }
      return r2(t3, [{ key: "init", value: function() {
        return { annotations: { yaxis: [this.yAxisAnnotation], xaxis: [this.xAxisAnnotation], points: [this.pointAnnotation], texts: [], images: [], shapes: [] }, chart: { animations: { enabled: true, easing: "easeinout", speed: 800, animateGradually: { delay: 150, enabled: true }, dynamicAnimation: { enabled: true, speed: 350 } }, background: "transparent", locales: [C2], defaultLocale: "en", dropShadow: { enabled: false, enabledOnSeries: void 0, top: 2, left: 2, blur: 4, color: "#000", opacity: 0.35 }, events: { animationEnd: void 0, beforeMount: void 0, mounted: void 0, updated: void 0, click: void 0, mouseMove: void 0, mouseLeave: void 0, xAxisLabelClick: void 0, legendClick: void 0, markerClick: void 0, selection: void 0, dataPointSelection: void 0, dataPointMouseEnter: void 0, dataPointMouseLeave: void 0, beforeZoom: void 0, beforeResetZoom: void 0, zoomed: void 0, scrolled: void 0, brushScrolled: void 0 }, foreColor: "#373d3f", fontFamily: "Helvetica, Arial, sans-serif", height: "auto", parentHeightOffset: 15, redrawOnParentResize: true, redrawOnWindowResize: true, id: void 0, group: void 0, offsetX: 0, offsetY: 0, selection: { enabled: false, type: "x", fill: { color: "#24292e", opacity: 0.1 }, stroke: { width: 1, color: "#24292e", opacity: 0.4, dashArray: 3 }, xaxis: { min: void 0, max: void 0 }, yaxis: { min: void 0, max: void 0 } }, sparkline: { enabled: false }, brush: { enabled: false, autoScaleYaxis: true, target: void 0 }, stacked: false, stackType: "normal", toolbar: { show: true, offsetX: 0, offsetY: 0, tools: { download: true, selection: true, zoom: true, zoomin: true, zoomout: true, pan: true, reset: true, customIcons: [] }, export: { csv: { filename: void 0, columnDelimiter: ",", headerCategory: "category", headerValue: "value", dateFormatter: function(t4) {
          return new Date(t4).toDateString();
        } }, png: { filename: void 0 }, svg: { filename: void 0 } }, autoSelected: "zoom" }, type: "line", width: "100%", zoom: { enabled: true, type: "x", autoScaleYaxis: false, zoomedArea: { fill: { color: "#90CAF9", opacity: 0.4 }, stroke: { color: "#0D47A1", opacity: 0.4, width: 1 } } } }, plotOptions: { area: { fillTo: "origin" }, bar: { horizontal: false, columnWidth: "70%", barHeight: "70%", distributed: false, borderRadius: 0, borderRadiusApplication: "around", borderRadiusWhenStacked: "last", rangeBarOverlap: true, rangeBarGroupRows: false, hideZeroBarsWhenGrouped: true, colors: { ranges: [], backgroundBarColors: [], backgroundBarOpacity: 1, backgroundBarRadius: 0 }, dataLabels: { position: "top", maxItems: 100, hideOverflowingLabels: true, orientation: "horizontal", total: { enabled: false, formatter: void 0, offsetX: 0, offsetY: 0, style: { color: "#373d3f", fontSize: "12px", fontFamily: void 0, fontWeight: 600 } } } }, bubble: { zScaling: true, minBubbleRadius: void 0, maxBubbleRadius: void 0 }, candlestick: { colors: { upward: "#00B746", downward: "#EF403C" }, wick: { useFillColor: true } }, boxPlot: { colors: { upper: "#00E396", lower: "#008FFB" } }, heatmap: { radius: 2, enableShades: true, shadeIntensity: 0.5, reverseNegativeShade: false, distributed: false, useFillColorAsStroke: false, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, treemap: { enableShades: true, shadeIntensity: 0.5, distributed: false, reverseNegativeShade: false, useFillColorAsStroke: false, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, radialBar: { inverseOrder: false, startAngle: 0, endAngle: 360, offsetX: 0, offsetY: 0, hollow: { margin: 5, size: "50%", background: "transparent", image: void 0, imageWidth: 150, imageHeight: 150, imageOffsetX: 0, imageOffsetY: 0, imageClipped: true, position: "front", dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, track: { show: true, startAngle: void 0, endAngle: void 0, background: "#f2f2f2", strokeWidth: "97%", opacity: 1, margin: 5, dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, dataLabels: { show: true, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: 0, formatter: function(t4) {
          return t4;
        } }, value: { show: true, fontSize: "14px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 16, formatter: function(t4) {
          return t4 + "%";
        } }, total: { show: false, label: "Total", fontSize: "16px", fontWeight: 600, fontFamily: void 0, color: void 0, formatter: function(t4) {
          return t4.globals.seriesTotals.reduce(function(t5, e3) {
            return t5 + e3;
          }, 0) / t4.globals.series.length + "%";
        } } } }, pie: { customScale: 1, offsetX: 0, offsetY: 0, startAngle: 0, endAngle: 360, expandOnClick: true, dataLabels: { offset: 0, minAngleToShowLabel: 10 }, donut: { size: "65%", background: "transparent", labels: { show: false, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: -10, formatter: function(t4) {
          return t4;
        } }, value: { show: true, fontSize: "20px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 10, formatter: function(t4) {
          return t4;
        } }, total: { show: false, showAlways: false, label: "Total", fontSize: "16px", fontWeight: 400, fontFamily: void 0, color: void 0, formatter: function(t4) {
          return t4.globals.seriesTotals.reduce(function(t5, e3) {
            return t5 + e3;
          }, 0);
        } } } } }, polarArea: { rings: { strokeWidth: 1, strokeColor: "#e8e8e8" }, spokes: { strokeWidth: 1, connectorColors: "#e8e8e8" } }, radar: { size: void 0, offsetX: 0, offsetY: 0, polygons: { strokeWidth: 1, strokeColors: "#e8e8e8", connectorColors: "#e8e8e8", fill: { colors: void 0 } } } }, colors: void 0, dataLabels: { enabled: true, enabledOnSeries: void 0, formatter: function(t4) {
          return null !== t4 ? t4 : "";
        }, textAnchor: "middle", distributed: false, offsetX: 0, offsetY: 0, style: { fontSize: "12px", fontFamily: void 0, fontWeight: 600, colors: void 0 }, background: { enabled: true, foreColor: "#fff", borderRadius: 2, padding: 4, opacity: 0.9, borderWidth: 1, borderColor: "#fff", dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 } }, dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 } }, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] }, image: { src: [], width: void 0, height: void 0 }, pattern: { style: "squares", width: 6, height: 6, strokeWidth: 2 } }, forecastDataPoints: { count: 0, fillOpacity: 0.5, strokeWidth: void 0, dashArray: 4 }, grid: { show: true, borderColor: "#e0e0e0", strokeDashArray: 0, position: "back", xaxis: { lines: { show: false } }, yaxis: { lines: { show: true } }, row: { colors: void 0, opacity: 0.5 }, column: { colors: void 0, opacity: 0.5 }, padding: { top: 0, right: 10, bottom: 0, left: 12 } }, labels: [], legend: { show: true, showForSingleSeries: false, showForNullSeries: true, showForZeroSeries: true, floating: false, position: "bottom", horizontalAlign: "center", inverseOrder: false, fontSize: "12px", fontFamily: void 0, fontWeight: 400, width: void 0, height: void 0, formatter: void 0, tooltipHoverFormatter: void 0, offsetX: -20, offsetY: 4, customLegendItems: [], labels: { colors: void 0, useSeriesColors: false }, markers: { width: 12, height: 12, strokeWidth: 0, fillColors: void 0, strokeColor: "#fff", radius: 12, customHTML: void 0, offsetX: 0, offsetY: 0, onClick: void 0 }, itemMargin: { horizontal: 5, vertical: 2 }, onItemClick: { toggleDataSeries: true }, onItemHover: { highlightDataSeries: true } }, markers: { discrete: [], size: 0, colors: void 0, strokeColors: "#fff", strokeWidth: 2, strokeOpacity: 0.9, strokeDashArray: 0, fillOpacity: 1, shape: "circle", width: 8, height: 8, radius: 2, offsetX: 0, offsetY: 0, onClick: void 0, onDblClick: void 0, showNullDataPoints: true, hover: { size: void 0, sizeOffset: 3 } }, noData: { text: void 0, align: "center", verticalAlign: "middle", offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "14px", fontFamily: void 0 } }, responsive: [], series: void 0, states: { normal: { filter: { type: "none", value: 0 } }, hover: { filter: { type: "lighten", value: 0.1 } }, active: { allowMultipleDataPointsSelection: false, filter: { type: "darken", value: 0.5 } } }, title: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 0, floating: false, style: { fontSize: "14px", fontWeight: 900, fontFamily: void 0, color: void 0 } }, subtitle: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 30, floating: false, style: { fontSize: "12px", fontWeight: 400, fontFamily: void 0, color: void 0 } }, stroke: { show: true, curve: "smooth", lineCap: "butt", width: 2, colors: void 0, dashArray: 0, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] } } }, tooltip: { enabled: true, enabledOnSeries: void 0, shared: true, followCursor: false, intersect: false, inverseOrder: false, custom: void 0, fillSeriesColor: false, theme: "light", cssClass: "", style: { fontSize: "12px", fontFamily: void 0 }, onDatasetHover: { highlightDataSeries: false }, x: { show: true, format: "dd MMM", formatter: void 0 }, y: { formatter: void 0, title: { formatter: function(t4) {
          return t4 ? t4 + ": " : "";
        } } }, z: { formatter: void 0, title: "Size: " }, marker: { show: true, fillColors: void 0 }, items: { display: "flex" }, fixed: { enabled: false, position: "topRight", offsetX: 0, offsetY: 0 } }, xaxis: { type: "category", categories: [], convertedCatToNumeric: false, offsetX: 0, offsetY: 0, overwriteCategories: void 0, labels: { show: true, rotate: -45, rotateAlways: false, hideOverlappingLabels: true, trim: false, minHeight: void 0, maxHeight: 120, showDuplicates: true, style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, offsetX: 0, offsetY: 0, format: void 0, formatter: void 0, datetimeUTC: true, datetimeFormatter: { year: "yyyy", month: "MMM 'yy", day: "dd MMM", hour: "HH:mm", minute: "HH:mm:ss", second: "HH:mm:ss" } }, group: { groups: [], style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" } }, axisBorder: { show: true, color: "#e0e0e0", width: "100%", height: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: true, color: "#e0e0e0", height: 6, offsetX: 0, offsetY: 0 }, tickAmount: void 0, tickPlacement: "on", min: void 0, max: void 0, range: void 0, floating: false, decimalsInFloat: void 0, position: "bottom", title: { text: void 0, offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "12px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, crosshairs: { show: true, width: 1, position: "back", opacity: 0.9, stroke: { color: "#b6b6b6", width: 1, dashArray: 3 }, fill: { type: "solid", color: "#B1B9C4", gradient: { colorFrom: "#D8E3F0", colorTo: "#BED1E6", stops: [0, 100], opacityFrom: 0.4, opacityTo: 0.5 } }, dropShadow: { enabled: false, left: 0, top: 0, blur: 1, opacity: 0.4 } }, tooltip: { enabled: true, offsetY: 0, formatter: void 0, style: { fontSize: "12px", fontFamily: void 0 } } }, yaxis: this.yAxis, theme: { mode: "light", palette: "palette1", monochrome: { enabled: false, color: "#008FFB", shadeTo: "light", shadeIntensity: 0.65 } } };
      } }]), t3;
    }(), P2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.graphics = new m2(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = true), this.helpers = new w(this), this.xAxisAnnotations = new k2(this), this.yAxisAnnotations = new A2(this), this.pointsAnnotations = new S2(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = true), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
      }
      return r2(t3, [{ key: "drawAxesAnnotations", value: function() {
        var t4 = this.w;
        if (t4.globals.axisCharts) {
          for (var e3 = this.yAxisAnnotations.drawYAxisAnnotations(), i3 = this.xAxisAnnotations.drawXAxisAnnotations(), a3 = this.pointsAnnotations.drawPointAnnotations(), s2 = t4.config.chart.animations.enabled, r3 = [e3, i3, a3], o3 = [i3.node, e3.node, a3.node], n3 = 0; n3 < 3; n3++)
            t4.globals.dom.elGraphical.add(r3[n3]), !s2 || t4.globals.resized || t4.globals.dataChanged || "scatter" !== t4.config.chart.type && "bubble" !== t4.config.chart.type && t4.globals.dataPoints > 1 && o3[n3].classList.add("apexcharts-element-hidden"), t4.globals.delayedElements.push({ el: o3[n3], index: 0 });
          this.helpers.annotationsBackground();
        }
      } }, { key: "drawImageAnnos", value: function() {
        var t4 = this;
        this.w.config.annotations.images.map(function(e3, i3) {
          t4.addImage(e3, i3);
        });
      } }, { key: "drawTextAnnos", value: function() {
        var t4 = this;
        this.w.config.annotations.texts.map(function(e3, i3) {
          t4.addText(e3, i3);
        });
      } }, { key: "addXaxisAnnotation", value: function(t4, e3, i3) {
        this.xAxisAnnotations.addXaxisAnnotation(t4, e3, i3);
      } }, { key: "addYaxisAnnotation", value: function(t4, e3, i3) {
        this.yAxisAnnotations.addYaxisAnnotation(t4, e3, i3);
      } }, { key: "addPointAnnotation", value: function(t4, e3, i3) {
        this.pointsAnnotations.addPointAnnotation(t4, e3, i3);
      } }, { key: "addText", value: function(t4, e3) {
        var i3 = t4.x, a3 = t4.y, s2 = t4.text, r3 = t4.textAnchor, o3 = t4.foreColor, n3 = t4.fontSize, l3 = t4.fontFamily, h3 = t4.fontWeight, c3 = t4.cssClass, d3 = t4.backgroundColor, g3 = t4.borderWidth, u3 = t4.strokeDashArray, f3 = t4.borderRadius, p3 = t4.borderColor, x3 = t4.appendTo, b3 = void 0 === x3 ? ".apexcharts-annotations" : x3, v3 = t4.paddingLeft, m3 = void 0 === v3 ? 4 : v3, y2 = t4.paddingRight, w2 = void 0 === y2 ? 4 : y2, k3 = t4.paddingBottom, A3 = void 0 === k3 ? 2 : k3, S3 = t4.paddingTop, C3 = void 0 === S3 ? 2 : S3, L3 = this.w, P3 = this.graphics.drawText({ x: i3, y: a3, text: s2, textAnchor: r3 || "start", fontSize: n3 || "12px", fontWeight: h3 || "regular", fontFamily: l3 || L3.config.chart.fontFamily, foreColor: o3 || L3.config.chart.foreColor, cssClass: c3 }), T3 = L3.globals.dom.baseEl.querySelector(b3);
        T3 && T3.appendChild(P3.node);
        var M3 = P3.bbox();
        if (s2) {
          var I3 = this.graphics.drawRect(M3.x - m3, M3.y - C3, M3.width + m3 + w2, M3.height + A3 + C3, f3, d3 || "transparent", 1, g3, p3, u3);
          T3.insertBefore(I3.node, P3.node);
        }
      } }, { key: "addImage", value: function(t4, e3) {
        var i3 = this.w, a3 = t4.path, s2 = t4.x, r3 = void 0 === s2 ? 0 : s2, o3 = t4.y, n3 = void 0 === o3 ? 0 : o3, l3 = t4.width, h3 = void 0 === l3 ? 20 : l3, c3 = t4.height, d3 = void 0 === c3 ? 20 : c3, g3 = t4.appendTo, u3 = void 0 === g3 ? ".apexcharts-annotations" : g3, f3 = i3.globals.dom.Paper.image(a3);
        f3.size(h3, d3).move(r3, n3);
        var p3 = i3.globals.dom.baseEl.querySelector(u3);
        return p3 && p3.appendChild(f3.node), f3;
      } }, { key: "addXaxisAnnotationExternal", value: function(t4, e3, i3) {
        return this.addAnnotationExternal({ params: t4, pushToMemory: e3, context: i3, type: "xaxis", contextMethod: i3.addXaxisAnnotation }), i3;
      } }, { key: "addYaxisAnnotationExternal", value: function(t4, e3, i3) {
        return this.addAnnotationExternal({ params: t4, pushToMemory: e3, context: i3, type: "yaxis", contextMethod: i3.addYaxisAnnotation }), i3;
      } }, { key: "addPointAnnotationExternal", value: function(t4, e3, i3) {
        return void 0 === this.invertAxis && (this.invertAxis = i3.w.globals.isBarHorizontal), this.addAnnotationExternal({ params: t4, pushToMemory: e3, context: i3, type: "point", contextMethod: i3.addPointAnnotation }), i3;
      } }, { key: "addAnnotationExternal", value: function(t4) {
        var e3 = t4.params, i3 = t4.pushToMemory, a3 = t4.context, s2 = t4.type, r3 = t4.contextMethod, o3 = a3, n3 = o3.w, l3 = n3.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations")), h3 = l3.childNodes.length + 1, c3 = new L2(), d3 = Object.assign({}, "xaxis" === s2 ? c3.xAxisAnnotation : "yaxis" === s2 ? c3.yAxisAnnotation : c3.pointAnnotation), g3 = x2.extend(d3, e3);
        switch (s2) {
          case "xaxis":
            this.addXaxisAnnotation(g3, l3, h3);
            break;
          case "yaxis":
            this.addYaxisAnnotation(g3, l3, h3);
            break;
          case "point":
            this.addPointAnnotation(g3, l3, h3);
        }
        var u3 = n3.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations .apexcharts-").concat(s2, "-annotation-label[rel='").concat(h3, "']")), f3 = this.helpers.addBackgroundToAnno(u3, g3);
        return f3 && l3.insertBefore(f3.node, u3), i3 && n3.globals.memory.methodsToExec.push({ context: o3, id: g3.id ? g3.id : x2.randomId(), method: r3, label: "addAnnotation", params: e3 }), a3;
      } }, { key: "clearAnnotations", value: function(t4) {
        var e3 = t4.w, i3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");
        e3.globals.memory.methodsToExec.map(function(t5, i4) {
          "addText" !== t5.label && "addAnnotation" !== t5.label || e3.globals.memory.methodsToExec.splice(i4, 1);
        }), i3 = x2.listToArray(i3), Array.prototype.forEach.call(i3, function(t5) {
          for (; t5.firstChild; )
            t5.removeChild(t5.firstChild);
        });
      } }, { key: "removeAnnotation", value: function(t4, e3) {
        var i3 = t4.w, a3 = i3.globals.dom.baseEl.querySelectorAll(".".concat(e3));
        a3 && (i3.globals.memory.methodsToExec.map(function(t5, a4) {
          t5.id === e3 && i3.globals.memory.methodsToExec.splice(a4, 1);
        }), Array.prototype.forEach.call(a3, function(t5) {
          t5.parentElement.removeChild(t5);
        }));
      } }]), t3;
    }(), T2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
      }
      return r2(t3, [{ key: "isValidDate", value: function(t4) {
        return !isNaN(this.parseDate(t4));
      } }, { key: "getTimeStamp", value: function(t4) {
        return Date.parse(t4) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t4).toISOString().substr(0, 25)).getTime() : new Date(t4).getTime() : t4;
      } }, { key: "getDate", value: function(t4) {
        return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t4).toUTCString()) : new Date(t4);
      } }, { key: "parseDate", value: function(t4) {
        var e3 = Date.parse(t4);
        if (!isNaN(e3))
          return this.getTimeStamp(t4);
        var i3 = Date.parse(t4.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
        return i3 = this.getTimeStamp(i3);
      } }, { key: "parseDateWithTimezone", value: function(t4) {
        return Date.parse(t4.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
      } }, { key: "formatDate", value: function(t4, e3) {
        var i3 = this.w.globals.locale, a3 = this.w.config.xaxis.labels.datetimeUTC, s2 = ["\0"].concat(u2(i3.months)), r3 = [""].concat(u2(i3.shortMonths)), o3 = [""].concat(u2(i3.days)), n3 = [""].concat(u2(i3.shortDays));
        function l3(t5, e4) {
          var i4 = t5 + "";
          for (e4 = e4 || 2; i4.length < e4; )
            i4 = "0" + i4;
          return i4;
        }
        var h3 = a3 ? t4.getUTCFullYear() : t4.getFullYear();
        e3 = (e3 = (e3 = e3.replace(/(^|[^\\])yyyy+/g, "$1" + h3)).replace(/(^|[^\\])yy/g, "$1" + h3.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h3);
        var c3 = (a3 ? t4.getUTCMonth() : t4.getMonth()) + 1;
        e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])MMMM+/g, "$1" + s2[0])).replace(/(^|[^\\])MMM/g, "$1" + r3[0])).replace(/(^|[^\\])MM/g, "$1" + l3(c3))).replace(/(^|[^\\])M/g, "$1" + c3);
        var d3 = a3 ? t4.getUTCDate() : t4.getDate();
        e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])dddd+/g, "$1" + o3[0])).replace(/(^|[^\\])ddd/g, "$1" + n3[0])).replace(/(^|[^\\])dd/g, "$1" + l3(d3))).replace(/(^|[^\\])d/g, "$1" + d3);
        var g3 = a3 ? t4.getUTCHours() : t4.getHours(), f3 = g3 > 12 ? g3 - 12 : 0 === g3 ? 12 : g3;
        e3 = (e3 = (e3 = (e3 = e3.replace(/(^|[^\\])HH+/g, "$1" + l3(g3))).replace(/(^|[^\\])H/g, "$1" + g3)).replace(/(^|[^\\])hh+/g, "$1" + l3(f3))).replace(/(^|[^\\])h/g, "$1" + f3);
        var p3 = a3 ? t4.getUTCMinutes() : t4.getMinutes();
        e3 = (e3 = e3.replace(/(^|[^\\])mm+/g, "$1" + l3(p3))).replace(/(^|[^\\])m/g, "$1" + p3);
        var x3 = a3 ? t4.getUTCSeconds() : t4.getSeconds();
        e3 = (e3 = e3.replace(/(^|[^\\])ss+/g, "$1" + l3(x3))).replace(/(^|[^\\])s/g, "$1" + x3);
        var b3 = a3 ? t4.getUTCMilliseconds() : t4.getMilliseconds();
        e3 = e3.replace(/(^|[^\\])fff+/g, "$1" + l3(b3, 3)), b3 = Math.round(b3 / 10), e3 = e3.replace(/(^|[^\\])ff/g, "$1" + l3(b3)), b3 = Math.round(b3 / 10);
        var v3 = g3 < 12 ? "AM" : "PM";
        e3 = (e3 = (e3 = e3.replace(/(^|[^\\])f/g, "$1" + b3)).replace(/(^|[^\\])TT+/g, "$1" + v3)).replace(/(^|[^\\])T/g, "$1" + v3.charAt(0));
        var m3 = v3.toLowerCase();
        e3 = (e3 = e3.replace(/(^|[^\\])tt+/g, "$1" + m3)).replace(/(^|[^\\])t/g, "$1" + m3.charAt(0));
        var y2 = -t4.getTimezoneOffset(), w2 = a3 || !y2 ? "Z" : y2 > 0 ? "+" : "-";
        if (!a3) {
          var k3 = (y2 = Math.abs(y2)) % 60;
          w2 += l3(Math.floor(y2 / 60)) + ":" + l3(k3);
        }
        e3 = e3.replace(/(^|[^\\])K/g, "$1" + w2);
        var A3 = (a3 ? t4.getUTCDay() : t4.getDay()) + 1;
        return e3 = (e3 = (e3 = (e3 = (e3 = e3.replace(new RegExp(o3[0], "g"), o3[A3])).replace(new RegExp(n3[0], "g"), n3[A3])).replace(new RegExp(s2[0], "g"), s2[c3])).replace(new RegExp(r3[0], "g"), r3[c3])).replace(/\\(.)/g, "$1");
      } }, { key: "getTimeUnitsfromTimestamp", value: function(t4, e3, i3) {
        var a3 = this.w;
        void 0 !== a3.config.xaxis.min && (t4 = a3.config.xaxis.min), void 0 !== a3.config.xaxis.max && (e3 = a3.config.xaxis.max);
        var s2 = this.getDate(t4), r3 = this.getDate(e3), o3 = this.formatDate(s2, "yyyy MM dd HH mm ss fff").split(" "), n3 = this.formatDate(r3, "yyyy MM dd HH mm ss fff").split(" ");
        return { minMillisecond: parseInt(o3[6], 10), maxMillisecond: parseInt(n3[6], 10), minSecond: parseInt(o3[5], 10), maxSecond: parseInt(n3[5], 10), minMinute: parseInt(o3[4], 10), maxMinute: parseInt(n3[4], 10), minHour: parseInt(o3[3], 10), maxHour: parseInt(n3[3], 10), minDate: parseInt(o3[2], 10), maxDate: parseInt(n3[2], 10), minMonth: parseInt(o3[1], 10) - 1, maxMonth: parseInt(n3[1], 10) - 1, minYear: parseInt(o3[0], 10), maxYear: parseInt(n3[0], 10) };
      } }, { key: "isLeapYear", value: function(t4) {
        return t4 % 4 == 0 && t4 % 100 != 0 || t4 % 400 == 0;
      } }, { key: "calculcateLastDaysOfMonth", value: function(t4, e3, i3) {
        return this.determineDaysOfMonths(t4, e3) - i3;
      } }, { key: "determineDaysOfYear", value: function(t4) {
        var e3 = 365;
        return this.isLeapYear(t4) && (e3 = 366), e3;
      } }, { key: "determineRemainingDaysOfYear", value: function(t4, e3, i3) {
        var a3 = this.daysCntOfYear[e3] + i3;
        return e3 > 1 && this.isLeapYear() && a3++, a3;
      } }, { key: "determineDaysOfMonths", value: function(t4, e3) {
        var i3 = 30;
        switch (t4 = x2.monthMod(t4), true) {
          case this.months30.indexOf(t4) > -1:
            2 === t4 && (i3 = this.isLeapYear(e3) ? 29 : 28);
            break;
          case this.months31.indexOf(t4) > -1:
          default:
            i3 = 31;
        }
        return i3;
      } }]), t3;
    }(), M2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.tooltipKeyFormat = "dd MMM";
      }
      return r2(t3, [{ key: "xLabelFormat", value: function(t4, e3, i3, a3) {
        var s2 = this.w;
        if ("datetime" === s2.config.xaxis.type && void 0 === s2.config.xaxis.labels.formatter && void 0 === s2.config.tooltip.x.formatter) {
          var r3 = new T2(this.ctx);
          return r3.formatDate(r3.getDate(e3), s2.config.tooltip.x.format);
        }
        return t4(e3, i3, a3);
      } }, { key: "defaultGeneralFormatter", value: function(t4) {
        return Array.isArray(t4) ? t4.map(function(t5) {
          return t5;
        }) : t4;
      } }, { key: "defaultYFormatter", value: function(t4, e3, i3) {
        var a3 = this.w;
        return x2.isNumber(t4) && (t4 = 0 !== a3.globals.yValueDecimal ? t4.toFixed(void 0 !== e3.decimalsInFloat ? e3.decimalsInFloat : a3.globals.yValueDecimal) : a3.globals.maxYArr[i3] - a3.globals.minYArr[i3] < 5 ? t4.toFixed(1) : t4.toFixed(0)), t4;
      } }, { key: "setLabelFormatters", value: function() {
        var t4 = this, e3 = this.w;
        return e3.globals.xaxisTooltipFormatter = function(e4) {
          return t4.defaultGeneralFormatter(e4);
        }, e3.globals.ttKeyFormatter = function(e4) {
          return t4.defaultGeneralFormatter(e4);
        }, e3.globals.ttZFormatter = function(t5) {
          return t5;
        }, e3.globals.legendFormatter = function(e4) {
          return t4.defaultGeneralFormatter(e4);
        }, void 0 !== e3.config.xaxis.labels.formatter ? e3.globals.xLabelFormatter = e3.config.xaxis.labels.formatter : e3.globals.xLabelFormatter = function(t5) {
          if (x2.isNumber(t5)) {
            if (!e3.config.xaxis.convertedCatToNumeric && "numeric" === e3.config.xaxis.type) {
              if (x2.isNumber(e3.config.xaxis.decimalsInFloat))
                return t5.toFixed(e3.config.xaxis.decimalsInFloat);
              var i3 = e3.globals.maxX - e3.globals.minX;
              return i3 > 0 && i3 < 100 ? t5.toFixed(1) : t5.toFixed(0);
            }
            if (e3.globals.isBarHorizontal) {
              if (e3.globals.maxY - e3.globals.minYArr < 4)
                return t5.toFixed(1);
            }
            return t5.toFixed(0);
          }
          return t5;
        }, "function" == typeof e3.config.tooltip.x.formatter ? e3.globals.ttKeyFormatter = e3.config.tooltip.x.formatter : e3.globals.ttKeyFormatter = e3.globals.xLabelFormatter, "function" == typeof e3.config.xaxis.tooltip.formatter && (e3.globals.xaxisTooltipFormatter = e3.config.xaxis.tooltip.formatter), (Array.isArray(e3.config.tooltip.y) || void 0 !== e3.config.tooltip.y.formatter) && (e3.globals.ttVal = e3.config.tooltip.y), void 0 !== e3.config.tooltip.z.formatter && (e3.globals.ttZFormatter = e3.config.tooltip.z.formatter), void 0 !== e3.config.legend.formatter && (e3.globals.legendFormatter = e3.config.legend.formatter), e3.config.yaxis.forEach(function(i3, a3) {
          void 0 !== i3.labels.formatter ? e3.globals.yLabelFormatters[a3] = i3.labels.formatter : e3.globals.yLabelFormatters[a3] = function(s2) {
            return e3.globals.xyCharts ? Array.isArray(s2) ? s2.map(function(e4) {
              return t4.defaultYFormatter(e4, i3, a3);
            }) : t4.defaultYFormatter(s2, i3, a3) : s2;
          };
        }), e3.globals;
      } }, { key: "heatmapLabelFormatters", value: function() {
        var t4 = this.w;
        if ("heatmap" === t4.config.chart.type) {
          t4.globals.yAxisScale[0].result = t4.globals.seriesNames.slice();
          var e3 = t4.globals.seriesNames.reduce(function(t5, e4) {
            return t5.length > e4.length ? t5 : e4;
          }, 0);
          t4.globals.yAxisScale[0].niceMax = e3, t4.globals.yAxisScale[0].niceMin = e3;
        }
      } }]), t3;
    }(), I2 = function(t3) {
      var e3, i3 = t3.isTimeline, a3 = t3.ctx, s2 = t3.seriesIndex, r3 = t3.dataPointIndex, o3 = t3.y1, n3 = t3.y2, l3 = t3.w, h3 = l3.globals.seriesRangeStart[s2][r3], c3 = l3.globals.seriesRangeEnd[s2][r3], d3 = l3.globals.labels[r3], g3 = l3.config.series[s2].name ? l3.config.series[s2].name : "", u3 = l3.globals.ttKeyFormatter, f3 = l3.config.tooltip.y.title.formatter, p3 = { w: l3, seriesIndex: s2, dataPointIndex: r3, start: h3, end: c3 };
      ("function" == typeof f3 && (g3 = f3(g3, p3)), null !== (e3 = l3.config.series[s2].data[r3]) && void 0 !== e3 && e3.x && (d3 = l3.config.series[s2].data[r3].x), i3) || "datetime" === l3.config.xaxis.type && (d3 = new M2(a3).xLabelFormat(l3.globals.ttKeyFormatter, d3, d3, { i: void 0, dateFormatter: new T2(a3).formatDate, w: l3 }));
      "function" == typeof u3 && (d3 = u3(d3, p3)), Number.isFinite(o3) && Number.isFinite(n3) && (h3 = o3, c3 = n3);
      var x3 = "", b3 = "", v3 = l3.globals.colors[s2];
      if (void 0 === l3.config.tooltip.x.formatter)
        if ("datetime" === l3.config.xaxis.type) {
          var m3 = new T2(a3);
          x3 = m3.formatDate(m3.getDate(h3), l3.config.tooltip.x.format), b3 = m3.formatDate(m3.getDate(c3), l3.config.tooltip.x.format);
        } else
          x3 = h3, b3 = c3;
      else
        x3 = l3.config.tooltip.x.formatter(h3), b3 = l3.config.tooltip.x.formatter(c3);
      return { start: h3, end: c3, startVal: x3, endVal: b3, ylabel: d3, color: v3, seriesName: g3 };
    }, z2 = function(t3) {
      var e3 = t3.color, i3 = t3.seriesName, a3 = t3.ylabel, s2 = t3.start, r3 = t3.end, o3 = t3.seriesIndex, n3 = t3.dataPointIndex, l3 = t3.ctx.tooltip.tooltipLabels.getFormatters(o3);
      s2 = l3.yLbFormatter(s2), r3 = l3.yLbFormatter(r3);
      var h3 = l3.yLbFormatter(t3.w.globals.series[o3][n3]), c3 = '<span class="value start-value">\n  '.concat(s2, '\n  </span> <span class="separator">-</span> <span class="value end-value">\n  ').concat(r3, "\n  </span>");
      return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + e3 + '">' + (i3 || "") + '</span></div><div> <span class="category">' + a3 + ": </span> " + (t3.w.globals.comboCharts ? "rangeArea" === t3.w.config.series[o3].type || "rangeBar" === t3.w.config.series[o3].type ? c3 : "<span>".concat(h3, "</span>") : c3) + " </div></div>";
    }, X2 = function() {
      function t3(e3) {
        a2(this, t3), this.opts = e3;
      }
      return r2(t3, [{ key: "line", value: function() {
        return { chart: { animations: { easing: "swing" } }, dataLabels: { enabled: false }, stroke: { width: 5, curve: "straight" }, markers: { size: 0, hover: { sizeOffset: 6 } }, xaxis: { crosshairs: { width: 1 } } };
      } }, { key: "sparkline", value: function(t4) {
        this.opts.yaxis[0].show = false, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = false, this.opts.yaxis[0].axisTicks.show = false, this.opts.yaxis[0].floating = true;
        return x2.extend(t4, { grid: { show: false, padding: { left: 0, right: 0, top: 0, bottom: 0 } }, legend: { show: false }, xaxis: { labels: { show: false }, tooltip: { enabled: false }, axisBorder: { show: false }, axisTicks: { show: false } }, chart: { toolbar: { show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false } });
      } }, { key: "bar", value: function() {
        return { chart: { stacked: false, animations: { easing: "swing" } }, plotOptions: { bar: { dataLabels: { position: "center" } } }, dataLabels: { style: { colors: ["#fff"] }, background: { enabled: false } }, stroke: { width: 0, lineCap: "round" }, fill: { opacity: 0.85 }, legend: { markers: { shape: "square", radius: 2, size: 8 } }, tooltip: { shared: false, intersect: true }, xaxis: { tooltip: { enabled: false }, tickPlacement: "between", crosshairs: { width: "barWidth", position: "back", fill: { type: "gradient" }, dropShadow: { enabled: false }, stroke: { width: 0 } } } };
      } }, { key: "candlestick", value: function() {
        var t4 = this;
        return { stroke: { width: 1, colors: ["#333"] }, fill: { opacity: 1 }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e3) {
          var i3 = e3.seriesIndex, a3 = e3.dataPointIndex, s2 = e3.w;
          return t4._getBoxTooltip(s2, i3, a3, ["Open", "High", "", "Low", "Close"], "candlestick");
        } }, states: { active: { filter: { type: "none" } } }, xaxis: { crosshairs: { width: 1 } } };
      } }, { key: "boxPlot", value: function() {
        var t4 = this;
        return { chart: { animations: { dynamicAnimation: { enabled: false } } }, stroke: { width: 1, colors: ["#24292e"] }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e3) {
          var i3 = e3.seriesIndex, a3 = e3.dataPointIndex, s2 = e3.w;
          return t4._getBoxTooltip(s2, i3, a3, ["Minimum", "Q1", "Median", "Q3", "Maximum"], "boxPlot");
        } }, markers: { size: 5, strokeWidth: 1, strokeColors: "#111" }, xaxis: { crosshairs: { width: 1 } } };
      } }, { key: "rangeBar", value: function() {
        return { stroke: { width: 0, lineCap: "square" }, plotOptions: { bar: { borderRadius: 0, dataLabels: { position: "center" } } }, dataLabels: { enabled: false, formatter: function(t4, e3) {
          e3.ctx;
          var i3 = e3.seriesIndex, a3 = e3.dataPointIndex, s2 = e3.w, r3 = function() {
            var t5 = s2.globals.seriesRangeStart[i3][a3];
            return s2.globals.seriesRangeEnd[i3][a3] - t5;
          };
          return s2.globals.comboCharts ? "rangeBar" === s2.config.series[i3].type || "rangeArea" === s2.config.series[i3].type ? r3() : t4 : r3();
        }, background: { enabled: false }, style: { colors: ["#fff"] } }, tooltip: { shared: false, followCursor: true, custom: function(t4) {
          return t4.w.config.plotOptions && t4.w.config.plotOptions.bar && t4.w.config.plotOptions.bar.horizontal ? function(t5) {
            var i3 = I2(e2(e2({}, t5), {}, { isTimeline: true })), a3 = i3.color, s2 = i3.seriesName, r3 = i3.ylabel, o3 = i3.startVal, n3 = i3.endVal;
            return z2(e2(e2({}, t5), {}, { color: a3, seriesName: s2, ylabel: r3, start: o3, end: n3 }));
          }(t4) : function(t5) {
            var i3 = I2(t5), a3 = i3.color, s2 = i3.seriesName, r3 = i3.ylabel, o3 = i3.start, n3 = i3.end;
            return z2(e2(e2({}, t5), {}, { color: a3, seriesName: s2, ylabel: r3, start: o3, end: n3 }));
          }(t4);
        } }, xaxis: { tickPlacement: "between", tooltip: { enabled: false }, crosshairs: { stroke: { width: 0 } } } };
      } }, { key: "area", value: function() {
        return { stroke: { width: 4, fill: { type: "solid", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } } }, fill: { type: "gradient", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } }, markers: { size: 0, hover: { sizeOffset: 6 } }, tooltip: { followCursor: false } };
      } }, { key: "rangeArea", value: function() {
        return { stroke: { curve: "straight", width: 0 }, fill: { type: "solid", opacity: 0.6 }, markers: { size: 0 }, states: { hover: { filter: { type: "none" } }, active: { filter: { type: "none" } } }, tooltip: { intersect: false, shared: true, followCursor: true, custom: function(t4) {
          return function(t5) {
            var i3 = I2(t5), a3 = i3.color, s2 = i3.seriesName, r3 = i3.ylabel, o3 = i3.start, n3 = i3.end;
            return z2(e2(e2({}, t5), {}, { color: a3, seriesName: s2, ylabel: r3, start: o3, end: n3 }));
          }(t4);
        } } };
      } }, { key: "brush", value: function(t4) {
        return x2.extend(t4, { chart: { toolbar: { autoSelected: "selection", show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false }, stroke: { width: 1 }, tooltip: { enabled: false }, xaxis: { tooltip: { enabled: false } } });
      } }, { key: "stacked100", value: function(t4) {
        t4.dataLabels = t4.dataLabels || {}, t4.dataLabels.formatter = t4.dataLabels.formatter || void 0;
        var e3 = t4.dataLabels.formatter;
        return t4.yaxis.forEach(function(e4, i3) {
          t4.yaxis[i3].min = 0, t4.yaxis[i3].max = 100;
        }), "bar" === t4.chart.type && (t4.dataLabels.formatter = e3 || function(t5) {
          return "number" == typeof t5 && t5 ? t5.toFixed(0) + "%" : t5;
        }), t4;
      } }, { key: "stackedBars", value: function() {
        var t4 = this.bar();
        return e2(e2({}, t4), {}, { plotOptions: e2(e2({}, t4.plotOptions), {}, { bar: e2(e2({}, t4.plotOptions.bar), {}, { borderRadiusApplication: "end", borderRadiusWhenStacked: "last" }) }) });
      } }, { key: "convertCatToNumeric", value: function(t4) {
        return t4.xaxis.convertedCatToNumeric = true, t4;
      } }, { key: "convertCatToNumericXaxis", value: function(t4, e3, i3) {
        t4.xaxis.type = "numeric", t4.xaxis.labels = t4.xaxis.labels || {}, t4.xaxis.labels.formatter = t4.xaxis.labels.formatter || function(t5) {
          return x2.isNumber(t5) ? Math.floor(t5) : t5;
        };
        var a3 = t4.xaxis.labels.formatter, s2 = t4.xaxis.categories && t4.xaxis.categories.length ? t4.xaxis.categories : t4.labels;
        return i3 && i3.length && (s2 = i3.map(function(t5) {
          return Array.isArray(t5) ? t5 : String(t5);
        })), s2 && s2.length && (t4.xaxis.labels.formatter = function(t5) {
          return x2.isNumber(t5) ? a3(s2[Math.floor(t5) - 1]) : a3(t5);
        }), t4.xaxis.categories = [], t4.labels = [], t4.xaxis.tickAmount = t4.xaxis.tickAmount || "dataPoints", t4;
      } }, { key: "bubble", value: function() {
        return { dataLabels: { style: { colors: ["#fff"] } }, tooltip: { shared: false, intersect: true }, xaxis: { crosshairs: { width: 0 } }, fill: { type: "solid", gradient: { shade: "light", inverse: true, shadeIntensity: 0.55, opacityFrom: 0.4, opacityTo: 0.8 } } };
      } }, { key: "scatter", value: function() {
        return { dataLabels: { enabled: false }, tooltip: { shared: false, intersect: true }, markers: { size: 6, strokeWidth: 1, hover: { sizeOffset: 2 } } };
      } }, { key: "heatmap", value: function() {
        return { chart: { stacked: false }, fill: { opacity: 1 }, dataLabels: { style: { colors: ["#fff"] } }, stroke: { colors: ["#fff"] }, tooltip: { followCursor: true, marker: { show: false }, x: { show: false } }, legend: { position: "top", markers: { shape: "square", size: 10, offsetY: 2 } }, grid: { padding: { right: 20 } } };
      } }, { key: "treemap", value: function() {
        return { chart: { zoom: { enabled: false } }, dataLabels: { style: { fontSize: 14, fontWeight: 600, colors: ["#fff"] } }, stroke: { show: true, width: 2, colors: ["#fff"] }, legend: { show: false }, fill: { gradient: { stops: [0, 100] } }, tooltip: { followCursor: true, x: { show: false } }, grid: { padding: { left: 0, right: 0 } }, xaxis: { crosshairs: { show: false }, tooltip: { enabled: false } } };
      } }, { key: "pie", value: function() {
        return { chart: { toolbar: { show: false } }, plotOptions: { pie: { donut: { labels: { show: false } } } }, dataLabels: { formatter: function(t4) {
          return t4.toFixed(1) + "%";
        }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", stops: [0, 100] } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
      } }, { key: "donut", value: function() {
        return { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t4) {
          return t4.toFixed(1) + "%";
        }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", shadeIntensity: 0.35, stops: [80, 100], opacityFrom: 1, opacityTo: 1 } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
      } }, { key: "polarArea", value: function() {
        return this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount ? this.opts.yaxis[0].tickAmount : 6, { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t4) {
          return t4.toFixed(1) + "%";
        }, enabled: false }, stroke: { show: true, width: 2 }, fill: { opacity: 0.7 }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
      } }, { key: "radar", value: function() {
        return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, { dataLabels: { enabled: false, style: { fontSize: "11px" } }, stroke: { width: 2 }, markers: { size: 3, strokeWidth: 1, strokeOpacity: 1 }, fill: { opacity: 0.2 }, tooltip: { shared: false, intersect: true, followCursor: true }, grid: { show: false }, xaxis: { labels: { formatter: function(t4) {
          return t4;
        }, style: { colors: ["#a8a8a8"], fontSize: "11px" } }, tooltip: { enabled: false }, crosshairs: { show: false } } };
      } }, { key: "radialBar", value: function() {
        return { chart: { animations: { dynamicAnimation: { enabled: true, speed: 800 } }, toolbar: { show: false } }, fill: { gradient: { shade: "dark", shadeIntensity: 0.4, inverseColors: false, type: "diagonal2", opacityFrom: 1, opacityTo: 1, stops: [70, 98, 100] } }, legend: { show: false, position: "right" }, tooltip: { enabled: false, fillSeriesColor: true } };
      } }, { key: "_getBoxTooltip", value: function(t4, e3, i3, a3, s2) {
        var r3 = t4.globals.seriesCandleO[e3][i3], o3 = t4.globals.seriesCandleH[e3][i3], n3 = t4.globals.seriesCandleM[e3][i3], l3 = t4.globals.seriesCandleL[e3][i3], h3 = t4.globals.seriesCandleC[e3][i3];
        return t4.config.series[e3].type && t4.config.series[e3].type !== s2 ? '<div class="apexcharts-custom-tooltip">\n          '.concat(t4.config.series[e3].name ? t4.config.series[e3].name : "series-" + (e3 + 1), ": <strong>").concat(t4.globals.series[e3][i3], "</strong>\n        </div>") : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t4.config.chart.type, '">') + "<div>".concat(a3[0], ': <span class="value">') + r3 + "</span></div>" + "<div>".concat(a3[1], ': <span class="value">') + o3 + "</span></div>" + (n3 ? "<div>".concat(a3[2], ': <span class="value">') + n3 + "</span></div>" : "") + "<div>".concat(a3[3], ': <span class="value">') + l3 + "</span></div>" + "<div>".concat(a3[4], ': <span class="value">') + h3 + "</span></div></div>";
      } }]), t3;
    }(), E2 = function() {
      function t3(e3) {
        a2(this, t3), this.opts = e3;
      }
      return r2(t3, [{ key: "init", value: function(t4) {
        var e3 = t4.responsiveOverride, a3 = this.opts, s2 = new L2(), r3 = new X2(a3);
        this.chartType = a3.chart.type, a3 = this.extendYAxis(a3), a3 = this.extendAnnotations(a3);
        var o3 = s2.init(), n3 = {};
        if (a3 && "object" === i2(a3)) {
          var l3 = {};
          l3 = -1 !== ["line", "area", "bar", "candlestick", "boxPlot", "rangeBar", "rangeArea", "bubble", "scatter", "heatmap", "treemap", "pie", "polarArea", "donut", "radar", "radialBar"].indexOf(a3.chart.type) ? r3[a3.chart.type]() : r3.line(), a3.chart.stacked && "bar" === a3.chart.type && (l3 = r3.stackedBars()), a3.chart.brush && a3.chart.brush.enabled && (l3 = r3.brush(l3)), a3.chart.stacked && "100%" === a3.chart.stackType && (a3 = r3.stacked100(a3)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(a3), a3.xaxis = a3.xaxis || window.Apex.xaxis || {}, e3 || (a3.xaxis.convertedCatToNumeric = false), ((a3 = this.checkForCatToNumericXAxis(this.chartType, l3, a3)).chart.sparkline && a3.chart.sparkline.enabled || window.Apex.chart && window.Apex.chart.sparkline && window.Apex.chart.sparkline.enabled) && (l3 = r3.sparkline(l3)), n3 = x2.extend(o3, l3);
        }
        var h3 = x2.extend(n3, window.Apex);
        return o3 = x2.extend(h3, a3), o3 = this.handleUserInputErrors(o3);
      } }, { key: "checkForCatToNumericXAxis", value: function(t4, e3, i3) {
        var a3 = new X2(i3), s2 = ("bar" === t4 || "boxPlot" === t4) && i3.plotOptions && i3.plotOptions.bar && i3.plotOptions.bar.horizontal, r3 = "pie" === t4 || "polarArea" === t4 || "donut" === t4 || "radar" === t4 || "radialBar" === t4 || "heatmap" === t4, o3 = "datetime" !== i3.xaxis.type && "numeric" !== i3.xaxis.type, n3 = i3.xaxis.tickPlacement ? i3.xaxis.tickPlacement : e3.xaxis && e3.xaxis.tickPlacement;
        return s2 || r3 || !o3 || "between" === n3 || (i3 = a3.convertCatToNumeric(i3)), i3;
      } }, { key: "extendYAxis", value: function(t4, e3) {
        var i3 = new L2();
        (void 0 === t4.yaxis || !t4.yaxis || Array.isArray(t4.yaxis) && 0 === t4.yaxis.length) && (t4.yaxis = {}), t4.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t4.yaxis = x2.extend(t4.yaxis, window.Apex.yaxis)), t4.yaxis.constructor !== Array ? t4.yaxis = [x2.extend(i3.yAxis, t4.yaxis)] : t4.yaxis = x2.extendArray(t4.yaxis, i3.yAxis);
        var a3 = false;
        t4.yaxis.forEach(function(t5) {
          t5.logarithmic && (a3 = true);
        });
        var s2 = t4.series;
        return e3 && !s2 && (s2 = e3.config.series), a3 && s2.length !== t4.yaxis.length && s2.length && (t4.yaxis = s2.map(function(e4, a4) {
          if (e4.name || (s2[a4].name = "series-".concat(a4 + 1)), t4.yaxis[a4])
            return t4.yaxis[a4].seriesName = s2[a4].name, t4.yaxis[a4];
          var r3 = x2.extend(i3.yAxis, t4.yaxis[0]);
          return r3.show = false, r3;
        })), a3 && s2.length > 1 && s2.length !== t4.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."), t4;
      } }, { key: "extendAnnotations", value: function(t4) {
        return void 0 === t4.annotations && (t4.annotations = {}, t4.annotations.yaxis = [], t4.annotations.xaxis = [], t4.annotations.points = []), t4 = this.extendYAxisAnnotations(t4), t4 = this.extendXAxisAnnotations(t4), t4 = this.extendPointAnnotations(t4);
      } }, { key: "extendYAxisAnnotations", value: function(t4) {
        var e3 = new L2();
        return t4.annotations.yaxis = x2.extendArray(void 0 !== t4.annotations.yaxis ? t4.annotations.yaxis : [], e3.yAxisAnnotation), t4;
      } }, { key: "extendXAxisAnnotations", value: function(t4) {
        var e3 = new L2();
        return t4.annotations.xaxis = x2.extendArray(void 0 !== t4.annotations.xaxis ? t4.annotations.xaxis : [], e3.xAxisAnnotation), t4;
      } }, { key: "extendPointAnnotations", value: function(t4) {
        var e3 = new L2();
        return t4.annotations.points = x2.extendArray(void 0 !== t4.annotations.points ? t4.annotations.points : [], e3.pointAnnotation), t4;
      } }, { key: "checkForDarkTheme", value: function(t4) {
        t4.theme && "dark" === t4.theme.mode && (t4.tooltip || (t4.tooltip = {}), "light" !== t4.tooltip.theme && (t4.tooltip.theme = "dark"), t4.chart.foreColor || (t4.chart.foreColor = "#f6f7f8"), t4.chart.background || (t4.chart.background = "#424242"), t4.theme.palette || (t4.theme.palette = "palette4"));
      } }, { key: "handleUserInputErrors", value: function(t4) {
        var e3 = t4;
        if (e3.tooltip.shared && e3.tooltip.intersect)
          throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
        if ("bar" === e3.chart.type && e3.plotOptions.bar.horizontal) {
          if (e3.yaxis.length > 1)
            throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
          e3.yaxis[0].reversed && (e3.yaxis[0].opposite = true), e3.xaxis.tooltip.enabled = false, e3.yaxis[0].tooltip.enabled = false, e3.chart.zoom.enabled = false;
        }
        return "bar" !== e3.chart.type && "rangeBar" !== e3.chart.type || e3.tooltip.shared && "barWidth" === e3.xaxis.crosshairs.width && e3.series.length > 1 && (e3.xaxis.crosshairs.width = "tickWidth"), "candlestick" !== e3.chart.type && "boxPlot" !== e3.chart.type || e3.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e3.chart.type, " chart is not supported.")), e3.yaxis[0].reversed = false), e3;
      } }]), t3;
    }(), Y2 = function() {
      function t3() {
        a2(this, t3);
      }
      return r2(t3, [{ key: "initGlobalVars", value: function(t4) {
        t4.series = [], t4.seriesCandleO = [], t4.seriesCandleH = [], t4.seriesCandleM = [], t4.seriesCandleL = [], t4.seriesCandleC = [], t4.seriesRangeStart = [], t4.seriesRangeEnd = [], t4.seriesRange = [], t4.seriesPercent = [], t4.seriesGoals = [], t4.seriesX = [], t4.seriesZ = [], t4.seriesNames = [], t4.seriesTotals = [], t4.seriesLog = [], t4.seriesColors = [], t4.stackedSeriesTotals = [], t4.seriesXvalues = [], t4.seriesYvalues = [], t4.labels = [], t4.hasGroups = false, t4.groups = [], t4.categoryLabels = [], t4.timescaleLabels = [], t4.noLabelsProvided = false, t4.resizeTimer = null, t4.selectionResizeTimer = null, t4.delayedElements = [], t4.pointsArray = [], t4.dataLabelsRects = [], t4.isXNumeric = false, t4.skipLastTimelinelabel = false, t4.skipFirstTimelinelabel = false, t4.isDataXYZ = false, t4.isMultiLineX = false, t4.isMultipleYAxis = false, t4.maxY = -Number.MAX_VALUE, t4.minY = Number.MIN_VALUE, t4.minYArr = [], t4.maxYArr = [], t4.maxX = -Number.MAX_VALUE, t4.minX = Number.MAX_VALUE, t4.initialMaxX = -Number.MAX_VALUE, t4.initialMinX = Number.MAX_VALUE, t4.maxDate = 0, t4.minDate = Number.MAX_VALUE, t4.minZ = Number.MAX_VALUE, t4.maxZ = -Number.MAX_VALUE, t4.minXDiff = Number.MAX_VALUE, t4.yAxisScale = [], t4.xAxisScale = null, t4.xAxisTicksPositions = [], t4.yLabelsCoords = [], t4.yTitleCoords = [], t4.barPadForNumericAxis = 0, t4.padHorizontal = 0, t4.xRange = 0, t4.yRange = [], t4.zRange = 0, t4.dataPoints = 0, t4.xTickAmount = 0;
      } }, { key: "globalVars", value: function(t4) {
        return { chartID: null, cuid: null, events: { beforeMount: [], mounted: [], updated: [], clicked: [], selection: [], dataPointSelection: [], zoomed: [], scrolled: [] }, colors: [], clientX: null, clientY: null, fill: { colors: [] }, stroke: { colors: [] }, dataLabels: { style: { colors: [] } }, radarPolygons: { fill: { colors: [] } }, markers: { colors: [], size: t4.markers.size, largestSize: 0 }, animationEnded: false, isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints, isDirty: false, isExecCalled: false, initialConfig: null, initialSeries: [], lastXAxis: [], lastYAxis: [], columnSeries: null, labels: [], timescaleLabels: [], noLabelsProvided: false, allSeriesCollapsed: false, collapsedSeries: [], collapsedSeriesIndices: [], ancillaryCollapsedSeries: [], ancillaryCollapsedSeriesIndices: [], risingSeries: [], dataFormatXNumeric: false, capturedSeriesIndex: -1, capturedDataPointIndex: -1, selectedDataPoints: [], goldenPadding: 35, invalidLogScale: false, ignoreYAxisIndexes: [], yAxisSameScaleIndices: [], maxValsInArrayIndex: 0, radialSize: 0, selection: void 0, zoomEnabled: "zoom" === t4.chart.toolbar.autoSelected && t4.chart.toolbar.tools.zoom && t4.chart.zoom.enabled, panEnabled: "pan" === t4.chart.toolbar.autoSelected && t4.chart.toolbar.tools.pan, selectionEnabled: "selection" === t4.chart.toolbar.autoSelected && t4.chart.toolbar.tools.selection, yaxis: null, mousedown: false, lastClientPosition: {}, visibleXRange: void 0, yValueDecimal: 0, total: 0, SVGNS: "http://www.w3.org/2000/svg", svgWidth: 0, svgHeight: 0, noData: false, locale: {}, dom: {}, memory: { methodsToExec: [] }, shouldAnimate: true, skipLastTimelinelabel: false, skipFirstTimelinelabel: false, delayedElements: [], axisCharts: true, isDataXYZ: false, resized: false, resizeTimer: null, comboCharts: false, dataChanged: false, previousPaths: [], allSeriesHasEqualX: true, pointsArray: [], dataLabelsRects: [], lastDrawnDataLabelsIndexes: [], hasNullValues: false, easing: null, zoomed: false, gridWidth: 0, gridHeight: 0, rotateXLabels: false, defaultLabels: false, xLabelFormatter: void 0, yLabelFormatters: [], xaxisTooltipFormatter: void 0, ttKeyFormatter: void 0, ttVal: void 0, ttZFormatter: void 0, LINE_HEIGHT_RATIO: 1.618, xAxisLabelsHeight: 0, xAxisGroupLabelsHeight: 0, xAxisLabelsWidth: 0, yAxisLabelsWidth: 0, scaleX: 1, scaleY: 1, translateX: 0, translateY: 0, translateYAxisX: [], yAxisWidths: [], translateXAxisY: 0, translateXAxisX: 0, tooltip: null };
      } }, { key: "init", value: function(t4) {
        var e3 = this.globalVars(t4);
        return this.initGlobalVars(e3), e3.initialConfig = x2.extend({}, t4), e3.initialSeries = x2.clone(t4.series), e3.lastXAxis = x2.clone(e3.initialConfig.xaxis), e3.lastYAxis = x2.clone(e3.initialConfig.yaxis), e3;
      } }]), t3;
    }(), F2 = function() {
      function t3(e3) {
        a2(this, t3), this.opts = e3;
      }
      return r2(t3, [{ key: "init", value: function() {
        var t4 = new E2(this.opts).init({ responsiveOverride: false });
        return { config: t4, globals: new Y2().init(t4) };
      } }]), t3;
    }(), R2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.opts = null, this.seriesIndex = 0;
      }
      return r2(t3, [{ key: "clippedImgArea", value: function(t4) {
        var e3 = this.w, i3 = e3.config, a3 = parseInt(e3.globals.gridWidth, 10), s2 = parseInt(e3.globals.gridHeight, 10), r3 = a3 > s2 ? a3 : s2, o3 = t4.image, n3 = 0, l3 = 0;
        void 0 === t4.width && void 0 === t4.height ? void 0 !== i3.fill.image.width && void 0 !== i3.fill.image.height ? (n3 = i3.fill.image.width + 1, l3 = i3.fill.image.height) : (n3 = r3 + 1, l3 = r3) : (n3 = t4.width, l3 = t4.height);
        var h3 = document.createElementNS(e3.globals.SVGNS, "pattern");
        m2.setAttrs(h3, { id: t4.patternID, patternUnits: t4.patternUnits ? t4.patternUnits : "userSpaceOnUse", width: n3 + "px", height: l3 + "px" });
        var c3 = document.createElementNS(e3.globals.SVGNS, "image");
        h3.appendChild(c3), c3.setAttributeNS(window.SVG.xlink, "href", o3), m2.setAttrs(c3, { x: 0, y: 0, preserveAspectRatio: "none", width: n3 + "px", height: l3 + "px" }), c3.style.opacity = t4.opacity, e3.globals.dom.elDefs.node.appendChild(h3);
      } }, { key: "getSeriesIndex", value: function(t4) {
        var e3 = this.w;
        return ("bar" === e3.config.chart.type || "rangeBar" === e3.config.chart.type) && e3.config.plotOptions.bar.distributed || "heatmap" === e3.config.chart.type || "treemap" === e3.config.chart.type ? this.seriesIndex = t4.seriesNumber : this.seriesIndex = t4.seriesNumber % e3.globals.series.length, this.seriesIndex;
      } }, { key: "fillPath", value: function(t4) {
        var e3 = this.w;
        this.opts = t4;
        var i3, a3, s2, r3 = this.w.config;
        this.seriesIndex = this.getSeriesIndex(t4);
        var o3 = this.getFillColors()[this.seriesIndex];
        void 0 !== e3.globals.seriesColors[this.seriesIndex] && (o3 = e3.globals.seriesColors[this.seriesIndex]), "function" == typeof o3 && (o3 = o3({ seriesIndex: this.seriesIndex, dataPointIndex: t4.dataPointIndex, value: t4.value, w: e3 }));
        var n3 = t4.fillType ? t4.fillType : this.getFillType(this.seriesIndex), l3 = Array.isArray(r3.fill.opacity) ? r3.fill.opacity[this.seriesIndex] : r3.fill.opacity;
        t4.color && (o3 = t4.color);
        var h3 = o3;
        if (-1 === o3.indexOf("rgb") ? o3.length < 9 && (h3 = x2.hexToRgba(o3, l3)) : o3.indexOf("rgba") > -1 && (l3 = x2.getOpacityFromRGBA(o3)), t4.opacity && (l3 = t4.opacity), "pattern" === n3 && (a3 = this.handlePatternFill({ fillConfig: t4.fillConfig, patternFill: a3, fillColor: o3, fillOpacity: l3, defaultColor: h3 })), "gradient" === n3 && (s2 = this.handleGradientFill({ fillConfig: t4.fillConfig, fillColor: o3, fillOpacity: l3, i: this.seriesIndex })), "image" === n3) {
          var c3 = r3.fill.image.src, d3 = t4.patternID ? t4.patternID : "";
          this.clippedImgArea({ opacity: l3, image: Array.isArray(c3) ? t4.seriesNumber < c3.length ? c3[t4.seriesNumber] : c3[0] : c3, width: t4.width ? t4.width : void 0, height: t4.height ? t4.height : void 0, patternUnits: t4.patternUnits, patternID: "pattern".concat(e3.globals.cuid).concat(t4.seriesNumber + 1).concat(d3) }), i3 = "url(#pattern".concat(e3.globals.cuid).concat(t4.seriesNumber + 1).concat(d3, ")");
        } else
          i3 = "gradient" === n3 ? s2 : "pattern" === n3 ? a3 : h3;
        return t4.solid && (i3 = h3), i3;
      } }, { key: "getFillType", value: function(t4) {
        var e3 = this.w;
        return Array.isArray(e3.config.fill.type) ? e3.config.fill.type[t4] : e3.config.fill.type;
      } }, { key: "getFillColors", value: function() {
        var t4 = this.w, e3 = t4.config, i3 = this.opts, a3 = [];
        return t4.globals.comboCharts ? "line" === t4.config.series[this.seriesIndex].type ? Array.isArray(t4.globals.stroke.colors) ? a3 = t4.globals.stroke.colors : a3.push(t4.globals.stroke.colors) : Array.isArray(t4.globals.fill.colors) ? a3 = t4.globals.fill.colors : a3.push(t4.globals.fill.colors) : "line" === e3.chart.type ? Array.isArray(t4.globals.stroke.colors) ? a3 = t4.globals.stroke.colors : a3.push(t4.globals.stroke.colors) : Array.isArray(t4.globals.fill.colors) ? a3 = t4.globals.fill.colors : a3.push(t4.globals.fill.colors), void 0 !== i3.fillColors && (a3 = [], Array.isArray(i3.fillColors) ? a3 = i3.fillColors.slice() : a3.push(i3.fillColors)), a3;
      } }, { key: "handlePatternFill", value: function(t4) {
        var e3 = t4.fillConfig, i3 = t4.patternFill, a3 = t4.fillColor, s2 = t4.fillOpacity, r3 = t4.defaultColor, o3 = this.w.config.fill;
        e3 && (o3 = e3);
        var n3 = this.opts, l3 = new m2(this.ctx), h3 = Array.isArray(o3.pattern.strokeWidth) ? o3.pattern.strokeWidth[this.seriesIndex] : o3.pattern.strokeWidth, c3 = a3;
        Array.isArray(o3.pattern.style) ? i3 = void 0 !== o3.pattern.style[n3.seriesNumber] ? l3.drawPattern(o3.pattern.style[n3.seriesNumber], o3.pattern.width, o3.pattern.height, c3, h3, s2) : r3 : i3 = l3.drawPattern(o3.pattern.style, o3.pattern.width, o3.pattern.height, c3, h3, s2);
        return i3;
      } }, { key: "handleGradientFill", value: function(t4) {
        var i3 = t4.fillColor, a3 = t4.fillOpacity, s2 = t4.fillConfig, r3 = t4.i, o3 = this.w.config.fill;
        s2 && (o3 = e2(e2({}, o3), s2));
        var n3, l3 = this.opts, h3 = new m2(this.ctx), c3 = new x2(), d3 = o3.gradient.type, g3 = i3, u3 = void 0 === o3.gradient.opacityFrom ? a3 : Array.isArray(o3.gradient.opacityFrom) ? o3.gradient.opacityFrom[r3] : o3.gradient.opacityFrom;
        g3.indexOf("rgba") > -1 && (u3 = x2.getOpacityFromRGBA(g3));
        var f3 = void 0 === o3.gradient.opacityTo ? a3 : Array.isArray(o3.gradient.opacityTo) ? o3.gradient.opacityTo[r3] : o3.gradient.opacityTo;
        if (void 0 === o3.gradient.gradientToColors || 0 === o3.gradient.gradientToColors.length)
          n3 = "dark" === o3.gradient.shade ? c3.shadeColor(-1 * parseFloat(o3.gradient.shadeIntensity), i3.indexOf("rgb") > -1 ? x2.rgb2hex(i3) : i3) : c3.shadeColor(parseFloat(o3.gradient.shadeIntensity), i3.indexOf("rgb") > -1 ? x2.rgb2hex(i3) : i3);
        else if (o3.gradient.gradientToColors[l3.seriesNumber]) {
          var p3 = o3.gradient.gradientToColors[l3.seriesNumber];
          n3 = p3, p3.indexOf("rgba") > -1 && (f3 = x2.getOpacityFromRGBA(p3));
        } else
          n3 = i3;
        if (o3.gradient.gradientFrom && (g3 = o3.gradient.gradientFrom), o3.gradient.gradientTo && (n3 = o3.gradient.gradientTo), o3.gradient.inverseColors) {
          var b3 = g3;
          g3 = n3, n3 = b3;
        }
        return g3.indexOf("rgb") > -1 && (g3 = x2.rgb2hex(g3)), n3.indexOf("rgb") > -1 && (n3 = x2.rgb2hex(n3)), h3.drawGradient(d3, g3, n3, u3, f3, l3.size, o3.gradient.stops, o3.gradient.colorStops, r3);
      } }]), t3;
    }(), D2 = function() {
      function t3(e3, i3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "setGlobalMarkerSize", value: function() {
        var t4 = this.w;
        if (t4.globals.markers.size = Array.isArray(t4.config.markers.size) ? t4.config.markers.size : [t4.config.markers.size], t4.globals.markers.size.length > 0) {
          if (t4.globals.markers.size.length < t4.globals.series.length + 1)
            for (var e3 = 0; e3 <= t4.globals.series.length; e3++)
              void 0 === t4.globals.markers.size[e3] && t4.globals.markers.size.push(t4.globals.markers.size[0]);
        } else
          t4.globals.markers.size = t4.config.series.map(function(e4) {
            return t4.config.markers.size;
          });
      } }, { key: "plotChartMarkers", value: function(t4, e3, i3, a3) {
        var s2, r3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], o3 = this.w, n3 = e3, l3 = t4, h3 = null, c3 = new m2(this.ctx), d3 = o3.config.markers.discrete && o3.config.markers.discrete.length;
        if ((o3.globals.markers.size[e3] > 0 || r3 || d3) && (h3 = c3.group({ class: r3 || d3 ? "" : "apexcharts-series-markers" })).attr("clip-path", "url(#gridRectMarkerMask".concat(o3.globals.cuid, ")")), Array.isArray(l3.x))
          for (var g3 = 0; g3 < l3.x.length; g3++) {
            var u3 = i3;
            1 === i3 && 0 === g3 && (u3 = 0), 1 === i3 && 1 === g3 && (u3 = 1);
            var f3 = "apexcharts-marker";
            "line" !== o3.config.chart.type && "area" !== o3.config.chart.type || o3.globals.comboCharts || o3.config.tooltip.intersect || (f3 += " no-pointer-events");
            var p3 = Array.isArray(o3.config.markers.size) ? o3.globals.markers.size[e3] > 0 : o3.config.markers.size > 0;
            if (p3 || r3 || d3) {
              x2.isNumber(l3.y[g3]) ? f3 += " w".concat(x2.randomId()) : f3 = "apexcharts-nullpoint";
              var b3 = this.getMarkerConfig({ cssClass: f3, seriesIndex: e3, dataPointIndex: u3 });
              o3.config.series[n3].data[u3] && (o3.config.series[n3].data[u3].fillColor && (b3.pointFillColor = o3.config.series[n3].data[u3].fillColor), o3.config.series[n3].data[u3].strokeColor && (b3.pointStrokeColor = o3.config.series[n3].data[u3].strokeColor)), a3 && (b3.pSize = a3), (s2 = c3.drawMarker(l3.x[g3], l3.y[g3], b3)).attr("rel", u3), s2.attr("j", u3), s2.attr("index", e3), s2.node.setAttribute("default-marker-size", b3.pSize);
              var y2 = new v2(this.ctx);
              y2.setSelectionFilter(s2, e3, u3), this.addEvents(s2), h3 && h3.add(s2);
            } else
              void 0 === o3.globals.pointsArray[e3] && (o3.globals.pointsArray[e3] = []), o3.globals.pointsArray[e3].push([l3.x[g3], l3.y[g3]]);
          }
        return h3;
      } }, { key: "getMarkerConfig", value: function(t4) {
        var e3 = t4.cssClass, i3 = t4.seriesIndex, a3 = t4.dataPointIndex, s2 = void 0 === a3 ? null : a3, r3 = t4.finishRadius, o3 = void 0 === r3 ? null : r3, n3 = this.w, l3 = this.getMarkerStyle(i3), h3 = n3.globals.markers.size[i3], c3 = n3.config.markers;
        return null !== s2 && c3.discrete.length && c3.discrete.map(function(t5) {
          t5.seriesIndex === i3 && t5.dataPointIndex === s2 && (l3.pointStrokeColor = t5.strokeColor, l3.pointFillColor = t5.fillColor, h3 = t5.size, l3.pointShape = t5.shape);
        }), { pSize: null === o3 ? h3 : o3, pRadius: c3.radius, width: Array.isArray(c3.width) ? c3.width[i3] : c3.width, height: Array.isArray(c3.height) ? c3.height[i3] : c3.height, pointStrokeWidth: Array.isArray(c3.strokeWidth) ? c3.strokeWidth[i3] : c3.strokeWidth, pointStrokeColor: l3.pointStrokeColor, pointFillColor: l3.pointFillColor, shape: l3.pointShape || (Array.isArray(c3.shape) ? c3.shape[i3] : c3.shape), class: e3, pointStrokeOpacity: Array.isArray(c3.strokeOpacity) ? c3.strokeOpacity[i3] : c3.strokeOpacity, pointStrokeDashArray: Array.isArray(c3.strokeDashArray) ? c3.strokeDashArray[i3] : c3.strokeDashArray, pointFillOpacity: Array.isArray(c3.fillOpacity) ? c3.fillOpacity[i3] : c3.fillOpacity, seriesIndex: i3 };
      } }, { key: "addEvents", value: function(t4) {
        var e3 = this.w, i3 = new m2(this.ctx);
        t4.node.addEventListener("mouseenter", i3.pathMouseEnter.bind(this.ctx, t4)), t4.node.addEventListener("mouseleave", i3.pathMouseLeave.bind(this.ctx, t4)), t4.node.addEventListener("mousedown", i3.pathMouseDown.bind(this.ctx, t4)), t4.node.addEventListener("click", e3.config.markers.onClick), t4.node.addEventListener("dblclick", e3.config.markers.onDblClick), t4.node.addEventListener("touchstart", i3.pathMouseDown.bind(this.ctx, t4), { passive: true });
      } }, { key: "getMarkerStyle", value: function(t4) {
        var e3 = this.w, i3 = e3.globals.markers.colors, a3 = e3.config.markers.strokeColor || e3.config.markers.strokeColors;
        return { pointStrokeColor: Array.isArray(a3) ? a3[t4] : a3, pointFillColor: Array.isArray(i3) ? i3[t4] : i3 };
      } }]), t3;
    }(), H = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
      }
      return r2(t3, [{ key: "draw", value: function(t4, e3, i3) {
        var a3 = this.w, s2 = new m2(this.ctx), r3 = i3.realIndex, o3 = i3.pointsPos, n3 = i3.zRatio, l3 = i3.elParent, h3 = s2.group({ class: "apexcharts-series-markers apexcharts-series-".concat(a3.config.chart.type) });
        if (h3.attr("clip-path", "url(#gridRectMarkerMask".concat(a3.globals.cuid, ")")), Array.isArray(o3.x))
          for (var c3 = 0; c3 < o3.x.length; c3++) {
            var d3 = e3 + 1, g3 = true;
            0 === e3 && 0 === c3 && (d3 = 0), 0 === e3 && 1 === c3 && (d3 = 1);
            var u3 = 0, f3 = a3.globals.markers.size[r3];
            if (n3 !== 1 / 0) {
              var p3 = a3.config.plotOptions.bubble;
              f3 = a3.globals.seriesZ[r3][d3], p3.zScaling && (f3 /= n3), p3.minBubbleRadius && f3 < p3.minBubbleRadius && (f3 = p3.minBubbleRadius), p3.maxBubbleRadius && f3 > p3.maxBubbleRadius && (f3 = p3.maxBubbleRadius);
            }
            a3.config.chart.animations.enabled || (u3 = f3);
            var x3 = o3.x[c3], b3 = o3.y[c3];
            if (u3 = u3 || 0, null !== b3 && void 0 !== a3.globals.series[r3][d3] || (g3 = false), g3) {
              var v3 = this.drawPoint(x3, b3, u3, f3, r3, d3, e3);
              h3.add(v3);
            }
            l3.add(h3);
          }
      } }, { key: "drawPoint", value: function(t4, e3, i3, a3, s2, r3, o3) {
        var n3 = this.w, l3 = s2, h3 = new b2(this.ctx), c3 = new v2(this.ctx), d3 = new R2(this.ctx), g3 = new D2(this.ctx), u3 = new m2(this.ctx), f3 = g3.getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: l3, dataPointIndex: r3, finishRadius: "bubble" === n3.config.chart.type || n3.globals.comboCharts && n3.config.series[s2] && "bubble" === n3.config.series[s2].type ? a3 : null });
        a3 = f3.pSize;
        var p3, x3 = d3.fillPath({ seriesNumber: s2, dataPointIndex: r3, color: f3.pointFillColor, patternUnits: "objectBoundingBox", value: n3.globals.series[s2][o3] });
        if ("circle" === f3.shape ? p3 = u3.drawCircle(i3) : "square" !== f3.shape && "rect" !== f3.shape || (p3 = u3.drawRect(0, 0, f3.width - f3.pointStrokeWidth / 2, f3.height - f3.pointStrokeWidth / 2, f3.pRadius)), n3.config.series[l3].data[r3] && n3.config.series[l3].data[r3].fillColor && (x3 = n3.config.series[l3].data[r3].fillColor), p3.attr({ x: t4 - f3.width / 2 - f3.pointStrokeWidth / 2, y: e3 - f3.height / 2 - f3.pointStrokeWidth / 2, cx: t4, cy: e3, fill: x3, "fill-opacity": f3.pointFillOpacity, stroke: f3.pointStrokeColor, r: a3, "stroke-width": f3.pointStrokeWidth, "stroke-dasharray": f3.pointStrokeDashArray, "stroke-opacity": f3.pointStrokeOpacity }), n3.config.chart.dropShadow.enabled) {
          var y2 = n3.config.chart.dropShadow;
          c3.dropShadow(p3, y2, s2);
        }
        if (!this.initialAnim || n3.globals.dataChanged || n3.globals.resized)
          n3.globals.animationEnded = true;
        else {
          var w2 = n3.config.chart.animations.speed;
          h3.animateMarker(p3, 0, "circle" === f3.shape ? a3 : { width: f3.width, height: f3.height }, w2, n3.globals.easing, function() {
            window.setTimeout(function() {
              h3.animationCompleted(p3);
            }, 100);
          });
        }
        if (n3.globals.dataChanged && "circle" === f3.shape)
          if (this.dynamicAnim) {
            var k3, A3, S3, C3, L3 = n3.config.chart.animations.dynamicAnimation.speed;
            null != (C3 = n3.globals.previousPaths[s2] && n3.globals.previousPaths[s2][o3]) && (k3 = C3.x, A3 = C3.y, S3 = void 0 !== C3.r ? C3.r : a3);
            for (var P3 = 0; P3 < n3.globals.collapsedSeries.length; P3++)
              n3.globals.collapsedSeries[P3].index === s2 && (L3 = 1, a3 = 0);
            0 === t4 && 0 === e3 && (a3 = 0), h3.animateCircle(p3, { cx: k3, cy: A3, r: S3 }, { cx: t4, cy: e3, r: a3 }, L3, n3.globals.easing);
          } else
            p3.attr({ r: a3 });
        return p3.attr({ rel: r3, j: r3, index: s2, "default-marker-size": a3 }), c3.setSelectionFilter(p3, s2, r3), g3.addEvents(p3), p3.node.classList.add("apexcharts-marker"), p3;
      } }, { key: "centerTextInBubble", value: function(t4) {
        var e3 = this.w;
        return { y: t4 += parseInt(e3.config.dataLabels.style.fontSize, 10) / 4 };
      } }]), t3;
    }(), O2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "dataLabelsCorrection", value: function(t4, e3, i3, a3, s2, r3, o3) {
        var n3 = this.w, l3 = false, h3 = new m2(this.ctx).getTextRects(i3, o3), c3 = h3.width, d3 = h3.height;
        e3 < 0 && (e3 = 0), e3 > n3.globals.gridHeight + d3 && (e3 = n3.globals.gridHeight + d3 / 2), void 0 === n3.globals.dataLabelsRects[a3] && (n3.globals.dataLabelsRects[a3] = []), n3.globals.dataLabelsRects[a3].push({ x: t4, y: e3, width: c3, height: d3 });
        var g3 = n3.globals.dataLabelsRects[a3].length - 2, u3 = void 0 !== n3.globals.lastDrawnDataLabelsIndexes[a3] ? n3.globals.lastDrawnDataLabelsIndexes[a3][n3.globals.lastDrawnDataLabelsIndexes[a3].length - 1] : 0;
        if (void 0 !== n3.globals.dataLabelsRects[a3][g3]) {
          var f3 = n3.globals.dataLabelsRects[a3][u3];
          (t4 > f3.x + f3.width + 2 || e3 > f3.y + f3.height + 2 || t4 + c3 < f3.x) && (l3 = true);
        }
        return (0 === s2 || r3) && (l3 = true), { x: t4, y: e3, textRects: h3, drawnextLabel: l3 };
      } }, { key: "drawDataLabel", value: function(t4) {
        var e3 = this, i3 = t4.type, a3 = t4.pos, s2 = t4.i, r3 = t4.j, o3 = t4.isRangeStart, n3 = t4.strokeWidth, l3 = void 0 === n3 ? 2 : n3, h3 = this.w, c3 = new m2(this.ctx), d3 = h3.config.dataLabels, g3 = 0, u3 = 0, f3 = r3, p3 = null;
        if (!d3.enabled || !Array.isArray(a3.x))
          return p3;
        p3 = c3.group({ class: "apexcharts-data-labels" });
        for (var x3 = 0; x3 < a3.x.length; x3++)
          if (g3 = a3.x[x3] + d3.offsetX, u3 = a3.y[x3] + d3.offsetY + l3, !isNaN(g3)) {
            1 === r3 && 0 === x3 && (f3 = 0), 1 === r3 && 1 === x3 && (f3 = 1);
            var b3 = h3.globals.series[s2][f3];
            "rangeArea" === i3 && (b3 = o3 ? h3.globals.seriesRangeStart[s2][f3] : h3.globals.seriesRangeEnd[s2][f3]);
            var v3 = "", y2 = function(t5) {
              return h3.config.dataLabels.formatter(t5, { ctx: e3.ctx, seriesIndex: s2, dataPointIndex: f3, w: h3 });
            };
            if ("bubble" === h3.config.chart.type)
              v3 = y2(b3 = h3.globals.seriesZ[s2][f3]), u3 = a3.y[x3], u3 = new H(this.ctx).centerTextInBubble(u3, s2, f3).y;
            else
              void 0 !== b3 && (v3 = y2(b3));
            this.plotDataLabelsText({ x: g3, y: u3, text: v3, i: s2, j: f3, parent: p3, offsetCorrection: true, dataLabelsConfig: h3.config.dataLabels });
          }
        return p3;
      } }, { key: "plotDataLabelsText", value: function(t4) {
        var e3 = this.w, i3 = new m2(this.ctx), a3 = t4.x, s2 = t4.y, r3 = t4.i, o3 = t4.j, n3 = t4.text, l3 = t4.textAnchor, h3 = t4.fontSize, c3 = t4.parent, d3 = t4.dataLabelsConfig, g3 = t4.color, u3 = t4.alwaysDrawDataLabel, f3 = t4.offsetCorrection;
        if (!(Array.isArray(e3.config.dataLabels.enabledOnSeries) && e3.config.dataLabels.enabledOnSeries.indexOf(r3) < 0)) {
          var p3 = { x: a3, y: s2, drawnextLabel: true, textRects: null };
          f3 && (p3 = this.dataLabelsCorrection(a3, s2, n3, r3, o3, u3, parseInt(d3.style.fontSize, 10))), e3.globals.zoomed || (a3 = p3.x, s2 = p3.y), p3.textRects && (a3 < -10 - p3.textRects.width || a3 > e3.globals.gridWidth + p3.textRects.width + 10) && (n3 = "");
          var x3 = e3.globals.dataLabels.style.colors[r3];
          (("bar" === e3.config.chart.type || "rangeBar" === e3.config.chart.type) && e3.config.plotOptions.bar.distributed || e3.config.dataLabels.distributed) && (x3 = e3.globals.dataLabels.style.colors[o3]), "function" == typeof x3 && (x3 = x3({ series: e3.globals.series, seriesIndex: r3, dataPointIndex: o3, w: e3 })), g3 && (x3 = g3);
          var b3 = d3.offsetX, y2 = d3.offsetY;
          if ("bar" !== e3.config.chart.type && "rangeBar" !== e3.config.chart.type || (b3 = 0, y2 = 0), p3.drawnextLabel) {
            var w2 = i3.drawText({ width: 100, height: parseInt(d3.style.fontSize, 10), x: a3 + b3, y: s2 + y2, foreColor: x3, textAnchor: l3 || d3.textAnchor, text: n3, fontSize: h3 || d3.style.fontSize, fontFamily: d3.style.fontFamily, fontWeight: d3.style.fontWeight || "normal" });
            if (w2.attr({ class: "apexcharts-datalabel", cx: a3, cy: s2 }), d3.dropShadow.enabled) {
              var k3 = d3.dropShadow;
              new v2(this.ctx).dropShadow(w2, k3);
            }
            c3.add(w2), void 0 === e3.globals.lastDrawnDataLabelsIndexes[r3] && (e3.globals.lastDrawnDataLabelsIndexes[r3] = []), e3.globals.lastDrawnDataLabelsIndexes[r3].push(o3);
          }
        }
      } }, { key: "addBackgroundToDataLabel", value: function(t4, e3) {
        var i3 = this.w, a3 = i3.config.dataLabels.background, s2 = a3.padding, r3 = a3.padding / 2, o3 = e3.width, n3 = e3.height, l3 = new m2(this.ctx).drawRect(e3.x - s2, e3.y - r3 / 2, o3 + 2 * s2, n3 + r3, a3.borderRadius, "transparent" === i3.config.chart.background ? "#fff" : i3.config.chart.background, a3.opacity, a3.borderWidth, a3.borderColor);
        a3.dropShadow.enabled && new v2(this.ctx).dropShadow(l3, a3.dropShadow);
        return l3;
      } }, { key: "dataLabelsBackground", value: function() {
        var t4 = this.w;
        if ("bubble" !== t4.config.chart.type)
          for (var e3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), i3 = 0; i3 < e3.length; i3++) {
            var a3 = e3[i3], s2 = a3.getBBox(), r3 = null;
            if (s2.width && s2.height && (r3 = this.addBackgroundToDataLabel(a3, s2)), r3) {
              a3.parentNode.insertBefore(r3.node, a3);
              var o3 = a3.getAttribute("fill");
              t4.config.chart.animations.enabled && !t4.globals.resized && !t4.globals.dataChanged ? r3.animate().attr({ fill: o3 }) : r3.attr({ fill: o3 }), a3.setAttribute("fill", t4.config.dataLabels.background.foreColor);
            }
          }
      } }, { key: "bringForward", value: function() {
        for (var t4 = this.w, e3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i3 = t4.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a3 = 0; a3 < e3.length; a3++)
          i3 && i3.insertBefore(e3[a3], i3.nextSibling);
      } }]), t3;
    }(), N2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.legendInactiveClass = "legend-mouseover-inactive";
      }
      return r2(t3, [{ key: "getAllSeriesEls", value: function() {
        return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");
      } }, { key: "getSeriesByName", value: function(t4) {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(x2.escapeString(t4), "']"));
      } }, { key: "isSeriesHidden", value: function(t4) {
        var e3 = this.getSeriesByName(t4), i3 = parseInt(e3.getAttribute("data:realIndex"), 10);
        return { isHidden: e3.classList.contains("apexcharts-series-collapsed"), realIndex: i3 };
      } }, { key: "addCollapsedClassToSeries", value: function(t4, e3) {
        var i3 = this.w;
        function a3(i4) {
          for (var a4 = 0; a4 < i4.length; a4++)
            i4[a4].index === e3 && t4.node.classList.add("apexcharts-series-collapsed");
        }
        a3(i3.globals.collapsedSeries), a3(i3.globals.ancillaryCollapsedSeries);
      } }, { key: "toggleSeries", value: function(t4) {
        var e3 = this.isSeriesHidden(t4);
        return this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, e3.isHidden), e3.isHidden;
      } }, { key: "showSeries", value: function(t4) {
        var e3 = this.isSeriesHidden(t4);
        e3.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, true);
      } }, { key: "hideSeries", value: function(t4) {
        var e3 = this.isSeriesHidden(t4);
        e3.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e3.realIndex, false);
      } }, { key: "resetSeries", value: function() {
        var t4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a3 = this.w, s2 = x2.clone(a3.globals.initialSeries);
        a3.globals.previousPaths = [], i3 ? (a3.globals.collapsedSeries = [], a3.globals.ancillaryCollapsedSeries = [], a3.globals.collapsedSeriesIndices = [], a3.globals.ancillaryCollapsedSeriesIndices = []) : s2 = this.emptyCollapsedSeries(s2), a3.config.series = s2, t4 && (e3 && (a3.globals.zoomed = false, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s2, a3.config.chart.animations.dynamicAnimation.enabled));
      } }, { key: "emptyCollapsedSeries", value: function(t4) {
        for (var e3 = this.w, i3 = 0; i3 < t4.length; i3++)
          e3.globals.collapsedSeriesIndices.indexOf(i3) > -1 && (t4[i3].data = []);
        return t4;
      } }, { key: "toggleSeriesOnHover", value: function(t4, e3) {
        var i3 = this.w;
        e3 || (e3 = t4.target);
        var a3 = i3.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels");
        if ("mousemove" === t4.type) {
          var s2 = parseInt(e3.getAttribute("rel"), 10) - 1, r3 = null, o3 = null;
          i3.globals.axisCharts || "radialBar" === i3.config.chart.type ? i3.globals.axisCharts ? (r3 = i3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(s2, "']")), o3 = i3.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(s2, "']"))) : r3 = i3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s2 + 1, "']")) : r3 = i3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s2 + 1, "'] path"));
          for (var n3 = 0; n3 < a3.length; n3++)
            a3[n3].classList.add(this.legendInactiveClass);
          null !== r3 && (i3.globals.axisCharts || r3.parentNode.classList.remove(this.legendInactiveClass), r3.classList.remove(this.legendInactiveClass), null !== o3 && o3.classList.remove(this.legendInactiveClass));
        } else if ("mouseout" === t4.type)
          for (var l3 = 0; l3 < a3.length; l3++)
            a3[l3].classList.remove(this.legendInactiveClass);
      } }, { key: "highlightRangeInSeries", value: function(t4, e3) {
        var i3 = this, a3 = this.w, s2 = a3.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"), r3 = function(t5) {
          for (var e4 = 0; e4 < s2.length; e4++)
            s2[e4].classList[t5](i3.legendInactiveClass);
        };
        if ("mousemove" === t4.type) {
          var o3 = parseInt(e3.getAttribute("rel"), 10) - 1;
          r3("add"), function(t5) {
            for (var e4 = 0; e4 < s2.length; e4++) {
              var a4 = parseInt(s2[e4].getAttribute("val"), 10);
              a4 >= t5.from && a4 <= t5.to && s2[e4].classList.remove(i3.legendInactiveClass);
            }
          }(a3.config.plotOptions.heatmap.colorScale.ranges[o3]);
        } else
          "mouseout" === t4.type && r3("remove");
      } }, { key: "getActiveConfigSeriesIndex", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "asc", e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i3 = this.w, a3 = 0;
        if (i3.config.series.length > 1) {
          for (var s2 = i3.config.series.map(function(t5, a4) {
            return t5.data && t5.data.length > 0 && -1 === i3.globals.collapsedSeriesIndices.indexOf(a4) && (!i3.globals.comboCharts || 0 === e3.length || e3.length && e3.indexOf(i3.config.series[a4].type) > -1) ? a4 : -1;
          }), r3 = "asc" === t4 ? 0 : s2.length - 1; "asc" === t4 ? r3 < s2.length : r3 >= 0; "asc" === t4 ? r3++ : r3--)
            if (-1 !== s2[r3]) {
              a3 = s2[r3];
              break;
            }
        }
        return a3;
      } }, { key: "getBarSeriesIndices", value: function() {
        return this.w.globals.comboCharts ? this.w.config.series.map(function(t4, e3) {
          return "bar" === t4.type || "column" === t4.type ? e3 : -1;
        }).filter(function(t4) {
          return -1 !== t4;
        }) : this.w.config.series.map(function(t4, e3) {
          return e3;
        });
      } }, { key: "getPreviousPaths", value: function() {
        var t4 = this.w;
        function e3(e4, i4, a4) {
          for (var s3 = e4[i4].childNodes, r3 = { type: a4, paths: [], realIndex: e4[i4].getAttribute("data:realIndex") }, o3 = 0; o3 < s3.length; o3++)
            if (s3[o3].hasAttribute("pathTo")) {
              var n3 = s3[o3].getAttribute("pathTo");
              r3.paths.push({ d: n3 });
            }
          t4.globals.previousPaths.push(r3);
        }
        t4.globals.previousPaths = [];
        ["line", "area", "bar", "rangebar", "rangeArea", "candlestick", "radar"].forEach(function(i4) {
          for (var a4, s3 = (a4 = i4, t4.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(a4, "-series .apexcharts-series"))), r3 = 0; r3 < s3.length; r3++)
            e3(s3, r3, i4);
        }), this.handlePrevBubbleScatterPaths("bubble"), this.handlePrevBubbleScatterPaths("scatter");
        var i3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4.config.chart.type, " .apexcharts-series"));
        if (i3.length > 0)
          for (var a3 = function(e4) {
            for (var i4 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(e4, "'] rect")), a4 = [], s3 = function(t5) {
              var e5 = function(e6) {
                return i4[t5].getAttribute(e6);
              }, s4 = { x: parseFloat(e5("x")), y: parseFloat(e5("y")), width: parseFloat(e5("width")), height: parseFloat(e5("height")) };
              a4.push({ rect: s4, color: i4[t5].getAttribute("color") });
            }, r3 = 0; r3 < i4.length; r3++)
              s3(r3);
            t4.globals.previousPaths.push(a4);
          }, s2 = 0; s2 < i3.length; s2++)
            a3(s2);
        t4.globals.axisCharts || (t4.globals.previousPaths = t4.globals.series);
      } }, { key: "handlePrevBubbleScatterPaths", value: function(t4) {
        var e3 = this.w, i3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4, "-series .apexcharts-series"));
        if (i3.length > 0)
          for (var a3 = 0; a3 < i3.length; a3++) {
            for (var s2 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t4, "-series .apexcharts-series[data\\:realIndex='").concat(a3, "'] circle")), r3 = [], o3 = 0; o3 < s2.length; o3++)
              r3.push({ x: s2[o3].getAttribute("cx"), y: s2[o3].getAttribute("cy"), r: s2[o3].getAttribute("r") });
            e3.globals.previousPaths.push(r3);
          }
      } }, { key: "clearPreviousPaths", value: function() {
        var t4 = this.w;
        t4.globals.previousPaths = [], t4.globals.allSeriesCollapsed = false;
      } }, { key: "handleNoData", value: function() {
        var t4 = this.w, e3 = t4.config.noData, i3 = new m2(this.ctx), a3 = t4.globals.svgWidth / 2, s2 = t4.globals.svgHeight / 2, r3 = "middle";
        if (t4.globals.noData = true, t4.globals.animationEnded = true, "left" === e3.align ? (a3 = 10, r3 = "start") : "right" === e3.align && (a3 = t4.globals.svgWidth - 10, r3 = "end"), "top" === e3.verticalAlign ? s2 = 50 : "bottom" === e3.verticalAlign && (s2 = t4.globals.svgHeight - 50), a3 += e3.offsetX, s2 = s2 + parseInt(e3.style.fontSize, 10) + 2 + e3.offsetY, void 0 !== e3.text && "" !== e3.text) {
          var o3 = i3.drawText({ x: a3, y: s2, text: e3.text, textAnchor: r3, fontSize: e3.style.fontSize, fontFamily: e3.style.fontFamily, foreColor: e3.style.color, opacity: 1, class: "apexcharts-text-nodata" });
          t4.globals.dom.Paper.add(o3);
        }
      } }, { key: "setNullSeriesToZeroValues", value: function(t4) {
        for (var e3 = this.w, i3 = 0; i3 < t4.length; i3++)
          if (0 === t4[i3].length)
            for (var a3 = 0; a3 < t4[e3.globals.maxValsInArrayIndex].length; a3++)
              t4[i3].push(0);
        return t4;
      } }, { key: "hasAllSeriesEqualX", value: function() {
        for (var t4 = true, e3 = this.w, i3 = this.filteredSeriesX(), a3 = 0; a3 < i3.length - 1; a3++)
          if (i3[a3][0] !== i3[a3 + 1][0]) {
            t4 = false;
            break;
          }
        return e3.globals.allSeriesHasEqualX = t4, t4;
      } }, { key: "filteredSeriesX", value: function() {
        var t4 = this.w.globals.seriesX.map(function(t5) {
          return t5.length > 0 ? t5 : [];
        });
        return t4;
      } }]), t3;
    }(), W2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new y(this.ctx);
      }
      return r2(t3, [{ key: "isMultiFormat", value: function() {
        return this.isFormatXY() || this.isFormat2DArray();
      } }, { key: "isFormatXY", value: function() {
        var t4 = this.w.config.series.slice(), e3 = new N2(this.ctx);
        if (this.activeSeriesIndex = e3.getActiveConfigSeriesIndex(), void 0 !== t4[this.activeSeriesIndex].data && t4[this.activeSeriesIndex].data.length > 0 && null !== t4[this.activeSeriesIndex].data[0] && void 0 !== t4[this.activeSeriesIndex].data[0].x && null !== t4[this.activeSeriesIndex].data[0])
          return true;
      } }, { key: "isFormat2DArray", value: function() {
        var t4 = this.w.config.series.slice(), e3 = new N2(this.ctx);
        if (this.activeSeriesIndex = e3.getActiveConfigSeriesIndex(), void 0 !== t4[this.activeSeriesIndex].data && t4[this.activeSeriesIndex].data.length > 0 && void 0 !== t4[this.activeSeriesIndex].data[0] && null !== t4[this.activeSeriesIndex].data[0] && t4[this.activeSeriesIndex].data[0].constructor === Array)
          return true;
      } }, { key: "handleFormat2DArray", value: function(t4, e3) {
        for (var i3 = this.w.config, a3 = this.w.globals, s2 = "boxPlot" === i3.chart.type || "boxPlot" === i3.series[e3].type, r3 = 0; r3 < t4[e3].data.length; r3++)
          if (void 0 !== t4[e3].data[r3][1] && (Array.isArray(t4[e3].data[r3][1]) && 4 === t4[e3].data[r3][1].length && !s2 ? this.twoDSeries.push(x2.parseNumber(t4[e3].data[r3][1][3])) : t4[e3].data[r3].length >= 5 ? this.twoDSeries.push(x2.parseNumber(t4[e3].data[r3][4])) : this.twoDSeries.push(x2.parseNumber(t4[e3].data[r3][1])), a3.dataFormatXNumeric = true), "datetime" === i3.xaxis.type) {
            var o3 = new Date(t4[e3].data[r3][0]);
            o3 = new Date(o3).getTime(), this.twoDSeriesX.push(o3);
          } else
            this.twoDSeriesX.push(t4[e3].data[r3][0]);
        for (var n3 = 0; n3 < t4[e3].data.length; n3++)
          void 0 !== t4[e3].data[n3][2] && (this.threeDSeries.push(t4[e3].data[n3][2]), a3.isDataXYZ = true);
      } }, { key: "handleFormatXY", value: function(t4, e3) {
        var i3 = this.w.config, a3 = this.w.globals, s2 = new T2(this.ctx), r3 = e3;
        a3.collapsedSeriesIndices.indexOf(e3) > -1 && (r3 = this.activeSeriesIndex);
        for (var o3 = 0; o3 < t4[e3].data.length; o3++)
          void 0 !== t4[e3].data[o3].y && (Array.isArray(t4[e3].data[o3].y) ? this.twoDSeries.push(x2.parseNumber(t4[e3].data[o3].y[t4[e3].data[o3].y.length - 1])) : this.twoDSeries.push(x2.parseNumber(t4[e3].data[o3].y))), void 0 !== t4[e3].data[o3].goals && Array.isArray(t4[e3].data[o3].goals) ? (void 0 === this.seriesGoals[e3] && (this.seriesGoals[e3] = []), this.seriesGoals[e3].push(t4[e3].data[o3].goals)) : (void 0 === this.seriesGoals[e3] && (this.seriesGoals[e3] = []), this.seriesGoals[e3].push(null));
        for (var n3 = 0; n3 < t4[r3].data.length; n3++) {
          var l3 = "string" == typeof t4[r3].data[n3].x, h3 = Array.isArray(t4[r3].data[n3].x), c3 = !h3 && !!s2.isValidDate(t4[r3].data[n3].x.toString());
          if (l3 || c3)
            if (l3 || i3.xaxis.convertedCatToNumeric) {
              var d3 = a3.isBarHorizontal && a3.isRangeData;
              "datetime" !== i3.xaxis.type || d3 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t4[r3].data[n3].x)) : this.twoDSeriesX.push(s2.parseDate(t4[r3].data[n3].x));
            } else
              "datetime" === i3.xaxis.type ? this.twoDSeriesX.push(s2.parseDate(t4[r3].data[n3].x.toString())) : (a3.dataFormatXNumeric = true, a3.isXNumeric = true, this.twoDSeriesX.push(parseFloat(t4[r3].data[n3].x)));
          else
            h3 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t4[r3].data[n3].x)) : (a3.isXNumeric = true, a3.dataFormatXNumeric = true, this.twoDSeriesX.push(t4[r3].data[n3].x));
        }
        if (t4[e3].data[0] && void 0 !== t4[e3].data[0].z) {
          for (var g3 = 0; g3 < t4[e3].data.length; g3++)
            this.threeDSeries.push(t4[e3].data[g3].z);
          a3.isDataXYZ = true;
        }
      } }, { key: "handleRangeData", value: function(t4, e3) {
        var i3 = this.w.globals, a3 = {};
        return this.isFormat2DArray() ? a3 = this.handleRangeDataFormat("array", t4, e3) : this.isFormatXY() && (a3 = this.handleRangeDataFormat("xy", t4, e3)), i3.seriesRangeStart.push(a3.start), i3.seriesRangeEnd.push(a3.end), i3.seriesRange.push(a3.rangeUniques), i3.seriesRange.forEach(function(t5, e4) {
          t5 && t5.forEach(function(t6, e5) {
            t6.y.forEach(function(e6, i4) {
              for (var a4 = 0; a4 < t6.y.length; a4++)
                if (i4 !== a4) {
                  var s2 = e6.y1, r3 = e6.y2, o3 = t6.y[a4].y1;
                  s2 <= t6.y[a4].y2 && o3 <= r3 && (t6.overlaps.indexOf(e6.rangeName) < 0 && t6.overlaps.push(e6.rangeName), t6.overlaps.indexOf(t6.y[a4].rangeName) < 0 && t6.overlaps.push(t6.y[a4].rangeName));
                }
            });
          });
        }), a3;
      } }, { key: "handleCandleStickBoxData", value: function(t4, e3) {
        var i3 = this.w.globals, a3 = {};
        return this.isFormat2DArray() ? a3 = this.handleCandleStickBoxDataFormat("array", t4, e3) : this.isFormatXY() && (a3 = this.handleCandleStickBoxDataFormat("xy", t4, e3)), i3.seriesCandleO[e3] = a3.o, i3.seriesCandleH[e3] = a3.h, i3.seriesCandleM[e3] = a3.m, i3.seriesCandleL[e3] = a3.l, i3.seriesCandleC[e3] = a3.c, a3;
      } }, { key: "handleRangeDataFormat", value: function(t4, e3, i3) {
        var a3 = [], s2 = [], r3 = e3[i3].data.filter(function(t5, e4, i4) {
          return e4 === i4.findIndex(function(e5) {
            return e5.x === t5.x;
          });
        }).map(function(t5, e4) {
          return { x: t5.x, overlaps: [], y: [] };
        });
        if ("array" === t4)
          for (var o3 = 0; o3 < e3[i3].data.length; o3++)
            Array.isArray(e3[i3].data[o3]) ? (a3.push(e3[i3].data[o3][1][0]), s2.push(e3[i3].data[o3][1][1])) : (a3.push(e3[i3].data[o3]), s2.push(e3[i3].data[o3]));
        else if ("xy" === t4)
          for (var n3 = function(t5) {
            var o4 = Array.isArray(e3[i3].data[t5].y), n4 = x2.randomId(), l4 = e3[i3].data[t5].x, h3 = { y1: o4 ? e3[i3].data[t5].y[0] : e3[i3].data[t5].y, y2: o4 ? e3[i3].data[t5].y[1] : e3[i3].data[t5].y, rangeName: n4 };
            e3[i3].data[t5].rangeName = n4;
            var c3 = r3.findIndex(function(t6) {
              return t6.x === l4;
            });
            r3[c3].y.push(h3), a3.push(h3.y1), s2.push(h3.y2);
          }, l3 = 0; l3 < e3[i3].data.length; l3++)
            n3(l3);
        return { start: a3, end: s2, rangeUniques: r3 };
      } }, { key: "handleCandleStickBoxDataFormat", value: function(t4, e3, i3) {
        var a3 = this.w, s2 = "boxPlot" === a3.config.chart.type || "boxPlot" === a3.config.series[i3].type, r3 = [], o3 = [], n3 = [], l3 = [], h3 = [];
        if ("array" === t4)
          if (s2 && 6 === e3[i3].data[0].length || !s2 && 5 === e3[i3].data[0].length)
            for (var c3 = 0; c3 < e3[i3].data.length; c3++)
              r3.push(e3[i3].data[c3][1]), o3.push(e3[i3].data[c3][2]), s2 ? (n3.push(e3[i3].data[c3][3]), l3.push(e3[i3].data[c3][4]), h3.push(e3[i3].data[c3][5])) : (l3.push(e3[i3].data[c3][3]), h3.push(e3[i3].data[c3][4]));
          else
            for (var d3 = 0; d3 < e3[i3].data.length; d3++)
              Array.isArray(e3[i3].data[d3][1]) && (r3.push(e3[i3].data[d3][1][0]), o3.push(e3[i3].data[d3][1][1]), s2 ? (n3.push(e3[i3].data[d3][1][2]), l3.push(e3[i3].data[d3][1][3]), h3.push(e3[i3].data[d3][1][4])) : (l3.push(e3[i3].data[d3][1][2]), h3.push(e3[i3].data[d3][1][3])));
        else if ("xy" === t4)
          for (var g3 = 0; g3 < e3[i3].data.length; g3++)
            Array.isArray(e3[i3].data[g3].y) && (r3.push(e3[i3].data[g3].y[0]), o3.push(e3[i3].data[g3].y[1]), s2 ? (n3.push(e3[i3].data[g3].y[2]), l3.push(e3[i3].data[g3].y[3]), h3.push(e3[i3].data[g3].y[4])) : (l3.push(e3[i3].data[g3].y[2]), h3.push(e3[i3].data[g3].y[3])));
        return { o: r3, h: o3, m: n3, l: l3, c: h3 };
      } }, { key: "parseDataAxisCharts", value: function(t4) {
        var e3 = this, i3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, a3 = this.w.config, s2 = this.w.globals, r3 = new T2(i3), o3 = a3.labels.length > 0 ? a3.labels.slice() : a3.xaxis.categories.slice();
        s2.isRangeBar = "rangeBar" === a3.chart.type && s2.isBarHorizontal, s2.hasGroups = "category" === a3.xaxis.type && a3.xaxis.group.groups.length > 0, s2.hasGroups && (s2.groups = a3.xaxis.group.groups);
        for (var n3 = function() {
          for (var t5 = 0; t5 < o3.length; t5++)
            if ("string" == typeof o3[t5]) {
              if (!r3.isValidDate(o3[t5]))
                throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
              e3.twoDSeriesX.push(r3.parseDate(o3[t5]));
            } else
              e3.twoDSeriesX.push(o3[t5]);
        }, l3 = 0; l3 < t4.length; l3++) {
          if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t4[l3].data)
            return void console.error("It is a possibility that you may have not included 'data' property in series.");
          if ("rangeBar" !== a3.chart.type && "rangeArea" !== a3.chart.type && "rangeBar" !== t4[l3].type && "rangeArea" !== t4[l3].type || (s2.isRangeData = true, s2.isComboCharts ? "rangeBar" !== t4[l3].type && "rangeArea" !== t4[l3].type || this.handleRangeData(t4, l3) : "rangeBar" !== a3.chart.type && "rangeArea" !== a3.chart.type || this.handleRangeData(t4, l3)), this.isMultiFormat())
            this.isFormat2DArray() ? this.handleFormat2DArray(t4, l3) : this.isFormatXY() && this.handleFormatXY(t4, l3), "candlestick" !== a3.chart.type && "candlestick" !== t4[l3].type && "boxPlot" !== a3.chart.type && "boxPlot" !== t4[l3].type || this.handleCandleStickBoxData(t4, l3), s2.series.push(this.twoDSeries), s2.labels.push(this.twoDSeriesX), s2.seriesX.push(this.twoDSeriesX), s2.seriesGoals = this.seriesGoals, l3 !== this.activeSeriesIndex || this.fallbackToCategory || (s2.isXNumeric = true);
          else {
            "datetime" === a3.xaxis.type ? (s2.isXNumeric = true, n3(), s2.seriesX.push(this.twoDSeriesX)) : "numeric" === a3.xaxis.type && (s2.isXNumeric = true, o3.length > 0 && (this.twoDSeriesX = o3, s2.seriesX.push(this.twoDSeriesX))), s2.labels.push(this.twoDSeriesX);
            var h3 = t4[l3].data.map(function(t5) {
              return x2.parseNumber(t5);
            });
            s2.series.push(h3);
          }
          s2.seriesZ.push(this.threeDSeries), void 0 !== t4[l3].name ? s2.seriesNames.push(t4[l3].name) : s2.seriesNames.push("series-" + parseInt(l3 + 1, 10)), void 0 !== t4[l3].color ? s2.seriesColors.push(t4[l3].color) : s2.seriesColors.push(void 0);
        }
        return this.w;
      } }, { key: "parseDataNonAxisCharts", value: function(t4) {
        var e3 = this.w.globals, i3 = this.w.config;
        e3.series = t4.slice(), e3.seriesNames = i3.labels.slice();
        for (var a3 = 0; a3 < e3.series.length; a3++)
          void 0 === e3.seriesNames[a3] && e3.seriesNames.push("series-" + (a3 + 1));
        return this.w;
      } }, { key: "handleExternalLabelsData", value: function(t4) {
        var e3 = this.w.config, i3 = this.w.globals;
        if (e3.xaxis.categories.length > 0)
          i3.labels = e3.xaxis.categories;
        else if (e3.labels.length > 0)
          i3.labels = e3.labels.slice();
        else if (this.fallbackToCategory) {
          if (i3.labels = i3.labels[0], i3.seriesRange.length && (i3.seriesRange.map(function(t5) {
            t5.forEach(function(t6) {
              i3.labels.indexOf(t6.x) < 0 && t6.x && i3.labels.push(t6.x);
            });
          }), i3.labels = i3.labels.filter(function(t5, e4, i4) {
            return i4.indexOf(t5) === e4;
          })), e3.xaxis.convertedCatToNumeric)
            new X2(e3).convertCatToNumericXaxis(e3, this.ctx, i3.seriesX[0]), this._generateExternalLabels(t4);
        } else
          this._generateExternalLabels(t4);
      } }, { key: "_generateExternalLabels", value: function(t4) {
        var e3 = this.w.globals, i3 = this.w.config, a3 = [];
        if (e3.axisCharts) {
          if (e3.series.length > 0)
            if (this.isFormatXY())
              for (var s2 = i3.series.map(function(t5, e4) {
                return t5.data.filter(function(t6, e5, i4) {
                  return i4.findIndex(function(e6) {
                    return e6.x === t6.x;
                  }) === e5;
                });
              }), r3 = s2.reduce(function(t5, e4, i4, a4) {
                return a4[t5].length > e4.length ? t5 : i4;
              }, 0), o3 = 0; o3 < s2[r3].length; o3++)
                a3.push(o3 + 1);
            else
              for (var n3 = 0; n3 < e3.series[e3.maxValsInArrayIndex].length; n3++)
                a3.push(n3 + 1);
          e3.seriesX = [];
          for (var l3 = 0; l3 < t4.length; l3++)
            e3.seriesX.push(a3);
          e3.isXNumeric = true;
        }
        if (0 === a3.length) {
          a3 = e3.axisCharts ? [] : e3.series.map(function(t5, e4) {
            return e4 + 1;
          });
          for (var h3 = 0; h3 < t4.length; h3++)
            e3.seriesX.push(a3);
        }
        e3.labels = a3, i3.xaxis.convertedCatToNumeric && (e3.categoryLabels = a3.map(function(t5) {
          return i3.xaxis.labels.formatter(t5);
        })), e3.noLabelsProvided = true;
      } }, { key: "parseData", value: function(t4) {
        var e3 = this.w, i3 = e3.config, a3 = e3.globals;
        if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = false, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a3.axisCharts ? (this.parseDataAxisCharts(t4), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t4), "bar" === i3.chart.type && i3.chart.stacked) {
          var s2 = new N2(this.ctx);
          a3.series = s2.setNullSeriesToZeroValues(a3.series);
        }
        this.coreUtils.getSeriesTotals(), a3.axisCharts && (a3.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals()), this.coreUtils.getPercentSeries(), a3.dataFormatXNumeric || a3.isXNumeric && ("numeric" !== i3.xaxis.type || 0 !== i3.labels.length || 0 !== i3.xaxis.categories.length) || this.handleExternalLabelsData(t4);
        for (var r3 = this.coreUtils.getCategoryLabels(a3.labels), o3 = 0; o3 < r3.length; o3++)
          if (Array.isArray(r3[o3])) {
            a3.isMultiLineX = true;
            break;
          }
      } }, { key: "excludeCollapsedSeriesInYAxis", value: function() {
        var t4 = this, e3 = this.w;
        e3.globals.ignoreYAxisIndexes = e3.globals.collapsedSeries.map(function(i3, a3) {
          if (t4.w.globals.isMultipleYAxis && !e3.config.chart.stacked)
            return i3.index;
        });
      } }]), t3;
    }(), B = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "getLabel", value: function(t4, e3, i3, a3) {
        var s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [], r3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px", o3 = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6], n3 = this.w, l3 = void 0 === t4[a3] ? "" : t4[a3], h3 = l3, c3 = n3.globals.xLabelFormatter, d3 = n3.config.xaxis.labels.formatter, g3 = false, u3 = new M2(this.ctx), f3 = l3;
        o3 && (h3 = u3.xLabelFormat(c3, l3, f3, { i: a3, dateFormatter: new T2(this.ctx).formatDate, w: n3 }), void 0 !== d3 && (h3 = d3(l3, t4[a3], { i: a3, dateFormatter: new T2(this.ctx).formatDate, w: n3 })));
        var p3 = function(t5) {
          var i4 = null;
          return e3.forEach(function(t6) {
            "month" === t6.unit ? i4 = "year" : "day" === t6.unit ? i4 = "month" : "hour" === t6.unit ? i4 = "day" : "minute" === t6.unit && (i4 = "hour");
          }), i4 === t5;
        };
        e3.length > 0 ? (g3 = p3(e3[a3].unit), i3 = e3[a3].position, h3 = e3[a3].value) : "datetime" === n3.config.xaxis.type && void 0 === d3 && (h3 = ""), void 0 === h3 && (h3 = ""), h3 = Array.isArray(h3) ? h3 : h3.toString();
        var x3 = new m2(this.ctx), b3 = {};
        b3 = n3.globals.rotateXLabels && o3 ? x3.getTextRects(h3, parseInt(r3, 10), null, "rotate(".concat(n3.config.xaxis.labels.rotate, " 0 0)"), false) : x3.getTextRects(h3, parseInt(r3, 10));
        var v3 = !n3.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
        return !Array.isArray(h3) && (0 === h3.indexOf("NaN") || 0 === h3.toLowerCase().indexOf("invalid") || h3.toLowerCase().indexOf("infinity") >= 0 || s2.indexOf(h3) >= 0 && v3) && (h3 = ""), { x: i3, text: h3, textRect: b3, isBold: g3 };
      } }, { key: "checkLabelBasedOnTickamount", value: function(t4, e3, i3) {
        var a3 = this.w, s2 = a3.config.xaxis.tickAmount;
        return "dataPoints" === s2 && (s2 = Math.round(a3.globals.gridWidth / 120)), s2 > i3 || t4 % Math.round(i3 / (s2 + 1)) == 0 || (e3.text = ""), e3;
      } }, { key: "checkForOverflowingLabels", value: function(t4, e3, i3, a3, s2) {
        var r3 = this.w;
        if (0 === t4 && r3.globals.skipFirstTimelinelabel && (e3.text = ""), t4 === i3 - 1 && r3.globals.skipLastTimelinelabel && (e3.text = ""), r3.config.xaxis.labels.hideOverlappingLabels && a3.length > 0) {
          var o3 = s2[s2.length - 1];
          e3.x < o3.textRect.width / (r3.globals.rotateXLabels ? Math.abs(r3.config.xaxis.labels.rotate) / 12 : 1.01) + o3.x && (e3.text = "");
        }
        return e3;
      } }, { key: "checkForReversedLabels", value: function(t4, e3) {
        var i3 = this.w;
        return i3.config.yaxis[t4] && i3.config.yaxis[t4].reversed && e3.reverse(), e3;
      } }, { key: "isYAxisHidden", value: function(t4) {
        var e3 = this.w, i3 = new y(this.ctx);
        return !e3.config.yaxis[t4].show || !e3.config.yaxis[t4].showForNullSeries && i3.isSeriesNull(t4) && -1 === e3.globals.collapsedSeriesIndices.indexOf(t4);
      } }, { key: "getYAxisForeColor", value: function(t4, e3) {
        var i3 = this.w;
        return Array.isArray(t4) && i3.globals.yAxisScale[e3] && this.ctx.theme.pushExtraColors(t4, i3.globals.yAxisScale[e3].result.length, false), t4;
      } }, { key: "drawYAxisTicks", value: function(t4, e3, i3, a3, s2, r3, o3) {
        var n3 = this.w, l3 = new m2(this.ctx), h3 = n3.globals.translateY;
        if (a3.show && e3 > 0) {
          true === n3.config.yaxis[s2].opposite && (t4 += a3.width);
          for (var c3 = e3; c3 >= 0; c3--) {
            var d3 = h3 + e3 / 10 + n3.config.yaxis[s2].labels.offsetY - 1;
            n3.globals.isBarHorizontal && (d3 = r3 * c3), "heatmap" === n3.config.chart.type && (d3 += r3 / 2);
            var g3 = l3.drawLine(t4 + i3.offsetX - a3.width + a3.offsetX, d3 + a3.offsetY, t4 + i3.offsetX + a3.offsetX, d3 + a3.offsetY, a3.color);
            o3.add(g3), h3 += r3;
          }
        }
      } }]), t3;
    }(), G2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "scaleSvgNode", value: function(t4, e3) {
        var i3 = parseFloat(t4.getAttributeNS(null, "width")), a3 = parseFloat(t4.getAttributeNS(null, "height"));
        t4.setAttributeNS(null, "width", i3 * e3), t4.setAttributeNS(null, "height", a3 * e3), t4.setAttributeNS(null, "viewBox", "0 0 " + i3 + " " + a3);
      } }, { key: "fixSvgStringForIe11", value: function(t4) {
        if (!x2.isIE11())
          return t4.replace(/&nbsp;/g, "&#160;");
        var e3 = 0, i3 = t4.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g, function(t5) {
          return 2 === ++e3 ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"' : t5;
        });
        return i3 = (i3 = i3.replace(/xmlns:NS\d+=""/g, "")).replace(/NS\d+:(\w+:\w+=")/g, "$1");
      } }, { key: "getSvgString", value: function(t4) {
        null == t4 && (t4 = 1);
        var e3 = this.w.globals.dom.Paper.svg();
        if (1 !== t4) {
          var i3 = this.w.globals.dom.Paper.node.cloneNode(true);
          this.scaleSvgNode(i3, t4), e3 = new XMLSerializer().serializeToString(i3);
        }
        return this.fixSvgStringForIe11(e3);
      } }, { key: "cleanup", value: function() {
        var t4 = this.w, e3 = t4.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"), i3 = t4.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"), a3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");
        Array.prototype.forEach.call(a3, function(t5) {
          t5.setAttribute("width", 0);
        }), e3 && e3[0] && (e3[0].setAttribute("x", -500), e3[0].setAttribute("x1", -500), e3[0].setAttribute("x2", -500)), i3 && i3[0] && (i3[0].setAttribute("y", -100), i3[0].setAttribute("y1", -100), i3[0].setAttribute("y2", -100));
      } }, { key: "svgUrl", value: function() {
        this.cleanup();
        var t4 = this.getSvgString(), e3 = new Blob([t4], { type: "image/svg+xml;charset=utf-8" });
        return URL.createObjectURL(e3);
      } }, { key: "dataURI", value: function(t4) {
        var e3 = this;
        return new Promise(function(i3) {
          var a3 = e3.w, s2 = t4 ? t4.scale || t4.width / a3.globals.svgWidth : 1;
          e3.cleanup();
          var r3 = document.createElement("canvas");
          r3.width = a3.globals.svgWidth * s2, r3.height = parseInt(a3.globals.dom.elWrap.style.height, 10) * s2;
          var o3 = "transparent" === a3.config.chart.background ? "#fff" : a3.config.chart.background, n3 = r3.getContext("2d");
          n3.fillStyle = o3, n3.fillRect(0, 0, r3.width * s2, r3.height * s2);
          var l3 = e3.getSvgString(s2);
          if (window.canvg && x2.isIE11()) {
            var h3 = window.canvg.Canvg.fromString(n3, l3, { ignoreClear: true, ignoreDimensions: true });
            h3.start();
            var c3 = r3.msToBlob();
            h3.stop(), i3({ blob: c3 });
          } else {
            var d3 = "data:image/svg+xml," + encodeURIComponent(l3), g3 = new Image();
            g3.crossOrigin = "anonymous", g3.onload = function() {
              if (n3.drawImage(g3, 0, 0), r3.msToBlob) {
                var t5 = r3.msToBlob();
                i3({ blob: t5 });
              } else {
                var e4 = r3.toDataURL("image/png");
                i3({ imgURI: e4 });
              }
            }, g3.src = d3;
          }
        });
      } }, { key: "exportToSVG", value: function() {
        this.triggerDownload(this.svgUrl(), this.w.config.chart.toolbar.export.svg.filename, ".svg");
      } }, { key: "exportToPng", value: function() {
        var t4 = this;
        this.dataURI().then(function(e3) {
          var i3 = e3.imgURI, a3 = e3.blob;
          a3 ? navigator.msSaveOrOpenBlob(a3, t4.w.globals.chartID + ".png") : t4.triggerDownload(i3, t4.w.config.chart.toolbar.export.png.filename, ".png");
        });
      } }, { key: "exportToCSV", value: function(t4) {
        var e3 = this, i3 = t4.series, a3 = t4.fileName, s2 = t4.columnDelimiter, r3 = void 0 === s2 ? "," : s2, o3 = t4.lineDelimiter, n3 = void 0 === o3 ? "\n" : o3, l3 = this.w;
        i3 || (i3 = l3.config.series);
        var h3 = [], c3 = [], d3 = "", g3 = l3.globals.series.map(function(t5, e4) {
          return -1 === l3.globals.collapsedSeriesIndices.indexOf(e4) ? t5 : [];
        }), f3 = Math.max.apply(Math, u2(i3.map(function(t5) {
          return t5.data ? t5.data.length : 0;
        }))), p3 = new W2(this.ctx), b3 = new B(this.ctx), v3 = function(t5) {
          var i4 = "";
          if (l3.globals.axisCharts) {
            if ("category" === l3.config.xaxis.type || l3.config.xaxis.convertedCatToNumeric)
              if (l3.globals.isBarHorizontal) {
                var a4 = l3.globals.yLabelFormatters[0], s3 = new N2(e3.ctx).getActiveConfigSeriesIndex();
                i4 = a4(l3.globals.labels[t5], { seriesIndex: s3, dataPointIndex: t5, w: l3 });
              } else
                i4 = b3.getLabel(l3.globals.labels, l3.globals.timescaleLabels, 0, t5).text;
            "datetime" === l3.config.xaxis.type && (l3.config.xaxis.categories.length ? i4 = l3.config.xaxis.categories[t5] : l3.config.labels.length && (i4 = l3.config.labels[t5]));
          } else
            i4 = l3.config.labels[t5];
          return Array.isArray(i4) && (i4 = i4.join(" ")), x2.isNumber(i4) ? i4 : i4.split(r3).join("");
        }, m3 = function(t5, e4) {
          if (h3.length && 0 === e4 && c3.push(h3.join(r3)), t5.data) {
            t5.data = t5.data.length && t5.data || u2(Array(f3)).map(function() {
              return "";
            });
            for (var a4 = 0; a4 < t5.data.length; a4++) {
              h3 = [];
              var s3 = v3(a4);
              if (s3 || (p3.isFormatXY() ? s3 = i3[e4].data[a4].x : p3.isFormat2DArray() && (s3 = i3[e4].data[a4] ? i3[e4].data[a4][0] : "")), 0 === e4) {
                h3.push((n4 = s3, "datetime" === l3.config.xaxis.type && String(n4).length >= 10 ? l3.config.chart.toolbar.export.csv.dateFormatter(s3) : x2.isNumber(s3) ? s3 : s3.split(r3).join("")));
                for (var o4 = 0; o4 < l3.globals.series.length; o4++)
                  p3.isFormatXY() ? h3.push(i3[o4].data[a4].y) : h3.push(g3[o4][a4]);
              }
              ("candlestick" === l3.config.chart.type || t5.type && "candlestick" === t5.type) && (h3.pop(), h3.push(l3.globals.seriesCandleO[e4][a4]), h3.push(l3.globals.seriesCandleH[e4][a4]), h3.push(l3.globals.seriesCandleL[e4][a4]), h3.push(l3.globals.seriesCandleC[e4][a4])), ("boxPlot" === l3.config.chart.type || t5.type && "boxPlot" === t5.type) && (h3.pop(), h3.push(l3.globals.seriesCandleO[e4][a4]), h3.push(l3.globals.seriesCandleH[e4][a4]), h3.push(l3.globals.seriesCandleM[e4][a4]), h3.push(l3.globals.seriesCandleL[e4][a4]), h3.push(l3.globals.seriesCandleC[e4][a4])), "rangeBar" === l3.config.chart.type && (h3.pop(), h3.push(l3.globals.seriesRangeStart[e4][a4]), h3.push(l3.globals.seriesRangeEnd[e4][a4])), h3.length && c3.push(h3.join(r3));
            }
          }
          var n4;
        };
        h3.push(l3.config.chart.toolbar.export.csv.headerCategory), "boxPlot" === l3.config.chart.type ? (h3.push("minimum"), h3.push("q1"), h3.push("median"), h3.push("q3"), h3.push("maximum")) : "candlestick" === l3.config.chart.type ? (h3.push("open"), h3.push("high"), h3.push("low"), h3.push("close")) : "rangeBar" === l3.config.chart.type ? (h3.push("minimum"), h3.push("maximum")) : i3.map(function(t5, e4) {
          var i4 = t5.name ? t5.name : "series-".concat(e4);
          l3.globals.axisCharts && h3.push(i4.split(r3).join("") ? i4.split(r3).join("") : "series-".concat(e4));
        }), l3.globals.axisCharts || (h3.push(l3.config.chart.toolbar.export.csv.headerValue), c3.push(h3.join(r3))), i3.map(function(t5, e4) {
          l3.globals.axisCharts ? m3(t5, e4) : ((h3 = []).push(l3.globals.labels[e4].split(r3).join("")), h3.push(g3[e4]), c3.push(h3.join(r3)));
        }), d3 += c3.join(n3), this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\uFEFF" + d3), a3 || l3.config.chart.toolbar.export.csv.filename, ".csv");
      } }, { key: "triggerDownload", value: function(t4, e3, i3) {
        var a3 = document.createElement("a");
        a3.href = t4, a3.download = (e3 || this.w.globals.chartID) + i3, document.body.appendChild(a3), a3.click(), document.body.removeChild(a3);
      } }]), t3;
    }(), V2 = function() {
      function t3(e3, i3) {
        a2(this, t3), this.ctx = e3, this.elgrid = i3, this.w = e3.w;
        var s2 = this.w;
        this.axesUtils = new B(e3), this.xaxisLabels = s2.globals.labels.slice(), s2.globals.timescaleLabels.length > 0 && !s2.globals.isBarHorizontal && (this.xaxisLabels = s2.globals.timescaleLabels.slice()), s2.config.xaxis.overwriteCategories && (this.xaxisLabels = s2.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === s2.config.xaxis.position ? this.offY = 0 : this.offY = s2.globals.gridHeight + 1, this.offY = this.offY + s2.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === s2.config.chart.type && s2.config.plotOptions.bar.horizontal, this.xaxisFontSize = s2.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s2.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s2.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s2.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = s2.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = s2.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = s2.config.xaxis.axisBorder.height, this.yaxis = s2.config.yaxis[0];
      }
      return r2(t3, [{ key: "drawXaxis", value: function() {
        var t4 = this.w, e3 = new m2(this.ctx), i3 = e3.group({ class: "apexcharts-xaxis", transform: "translate(".concat(t4.config.xaxis.offsetX, ", ").concat(t4.config.xaxis.offsetY, ")") }), a3 = e3.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(t4.globals.translateXAxisX, ", ").concat(t4.globals.translateXAxisY, ")") });
        i3.add(a3);
        for (var s2 = [], r3 = 0; r3 < this.xaxisLabels.length; r3++)
          s2.push(this.xaxisLabels[r3]);
        if (this.drawXAxisLabelAndGroup(true, e3, a3, s2, t4.globals.isXNumeric, function(t5, e4) {
          return e4;
        }), t4.globals.hasGroups) {
          var o3 = t4.globals.groups;
          s2 = [];
          for (var n3 = 0; n3 < o3.length; n3++)
            s2.push(o3[n3].title);
          var l3 = {};
          t4.config.xaxis.group.style && (l3.xaxisFontSize = t4.config.xaxis.group.style.fontSize, l3.xaxisFontFamily = t4.config.xaxis.group.style.fontFamily, l3.xaxisForeColors = t4.config.xaxis.group.style.colors, l3.fontWeight = t4.config.xaxis.group.style.fontWeight, l3.cssClass = t4.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(false, e3, a3, s2, false, function(t5, e4) {
            return o3[t5].cols * e4;
          }, l3);
        }
        if (void 0 !== t4.config.xaxis.title.text) {
          var h3 = e3.group({ class: "apexcharts-xaxis-title" }), c3 = e3.drawText({ x: t4.globals.gridWidth / 2 + t4.config.xaxis.title.offsetX, y: this.offY + parseFloat(this.xaxisFontSize) + ("bottom" === t4.config.xaxis.position ? t4.globals.xAxisLabelsHeight : -t4.globals.xAxisLabelsHeight - 10) + t4.config.xaxis.title.offsetY, text: t4.config.xaxis.title.text, textAnchor: "middle", fontSize: t4.config.xaxis.title.style.fontSize, fontFamily: t4.config.xaxis.title.style.fontFamily, fontWeight: t4.config.xaxis.title.style.fontWeight, foreColor: t4.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + t4.config.xaxis.title.style.cssClass });
          h3.add(c3), i3.add(h3);
        }
        if (t4.config.xaxis.axisBorder.show) {
          var d3 = t4.globals.barPadForNumericAxis, g3 = e3.drawLine(t4.globals.padHorizontal + t4.config.xaxis.axisBorder.offsetX - d3, this.offY, this.xaxisBorderWidth + d3, this.offY, t4.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
          this.elgrid && this.elgrid.elGridBorders ? this.elgrid.elGridBorders.add(g3) : i3.add(g3);
        }
        return i3;
      } }, { key: "drawXAxisLabelAndGroup", value: function(t4, e3, i3, a3, s2, r3) {
        var o3, n3 = this, l3 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}, h3 = [], c3 = [], d3 = this.w, g3 = l3.xaxisFontSize || this.xaxisFontSize, u3 = l3.xaxisFontFamily || this.xaxisFontFamily, f3 = l3.xaxisForeColors || this.xaxisForeColors, p3 = l3.fontWeight || d3.config.xaxis.labels.style.fontWeight, x3 = l3.cssClass || d3.config.xaxis.labels.style.cssClass, b3 = d3.globals.padHorizontal, v3 = a3.length, m3 = "category" === d3.config.xaxis.type ? d3.globals.dataPoints : v3;
        if (0 === m3 && v3 > m3 && (m3 = v3), s2) {
          var y2 = m3 > 1 ? m3 - 1 : m3;
          o3 = d3.globals.gridWidth / y2, b3 = b3 + r3(0, o3) / 2 + d3.config.xaxis.labels.offsetX;
        } else
          o3 = d3.globals.gridWidth / m3, b3 = b3 + r3(0, o3) + d3.config.xaxis.labels.offsetX;
        for (var w2 = function(s3) {
          var l4 = b3 - r3(s3, o3) / 2 + d3.config.xaxis.labels.offsetX;
          0 === s3 && 1 === v3 && o3 / 2 === b3 && 1 === m3 && (l4 = d3.globals.gridWidth / 2);
          var y3 = n3.axesUtils.getLabel(a3, d3.globals.timescaleLabels, l4, s3, h3, g3, t4), w3 = 28;
          d3.globals.rotateXLabels && t4 && (w3 = 22), d3.config.xaxis.title.text && "top" === d3.config.xaxis.position && (w3 += parseFloat(d3.config.xaxis.title.style.fontSize) + 2), t4 || (w3 = w3 + parseFloat(g3) + (d3.globals.xAxisLabelsHeight - d3.globals.xAxisGroupLabelsHeight) + (d3.globals.rotateXLabels ? 10 : 0)), y3 = void 0 !== d3.config.xaxis.tickAmount && "dataPoints" !== d3.config.xaxis.tickAmount && "datetime" !== d3.config.xaxis.type ? n3.axesUtils.checkLabelBasedOnTickamount(s3, y3, v3) : n3.axesUtils.checkForOverflowingLabels(s3, y3, v3, h3, c3);
          if (d3.config.xaxis.labels.show) {
            var k4 = e3.drawText({ x: y3.x, y: n3.offY + d3.config.xaxis.labels.offsetY + w3 - ("top" === d3.config.xaxis.position ? d3.globals.xAxisHeight + d3.config.xaxis.axisTicks.height - 2 : 0), text: y3.text, textAnchor: "middle", fontWeight: y3.isBold ? 600 : p3, fontSize: g3, fontFamily: u3, foreColor: Array.isArray(f3) ? t4 && d3.config.xaxis.convertedCatToNumeric ? f3[d3.globals.minX + s3 - 1] : f3[s3] : f3, isPlainText: false, cssClass: (t4 ? "apexcharts-xaxis-label " : "apexcharts-xaxis-group-label ") + x3 });
            if (i3.add(k4), k4.on("click", function(t5) {
              if ("function" == typeof d3.config.chart.events.xAxisLabelClick) {
                var e4 = Object.assign({}, d3, { labelIndex: s3 });
                d3.config.chart.events.xAxisLabelClick(t5, n3.ctx, e4);
              }
            }), t4) {
              var A3 = document.createElementNS(d3.globals.SVGNS, "title");
              A3.textContent = Array.isArray(y3.text) ? y3.text.join(" ") : y3.text, k4.node.appendChild(A3), "" !== y3.text && (h3.push(y3.text), c3.push(y3));
            }
          }
          s3 < v3 - 1 && (b3 += r3(s3 + 1, o3));
        }, k3 = 0; k3 <= v3 - 1; k3++)
          w2(k3);
      } }, { key: "drawXaxisInversed", value: function(t4) {
        var e3, i3, a3 = this, s2 = this.w, r3 = new m2(this.ctx), o3 = s2.config.yaxis[0].opposite ? s2.globals.translateYAxisX[t4] : 0, n3 = r3.group({ class: "apexcharts-yaxis apexcharts-xaxis-inversed", rel: t4 }), l3 = r3.group({ class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g", transform: "translate(" + o3 + ", 0)" });
        n3.add(l3);
        var h3 = [];
        if (s2.config.yaxis[t4].show)
          for (var c3 = 0; c3 < this.xaxisLabels.length; c3++)
            h3.push(this.xaxisLabels[c3]);
        e3 = s2.globals.gridHeight / h3.length, i3 = -e3 / 2.2;
        var d3 = s2.globals.yLabelFormatters[0], g3 = s2.config.yaxis[0].labels;
        if (g3.show)
          for (var u3 = function(o4) {
            var n4 = void 0 === h3[o4] ? "" : h3[o4];
            n4 = d3(n4, { seriesIndex: t4, dataPointIndex: o4, w: s2 });
            var c4 = a3.axesUtils.getYAxisForeColor(g3.style.colors, t4), u4 = 0;
            Array.isArray(n4) && (u4 = n4.length / 2 * parseInt(g3.style.fontSize, 10));
            var f4 = g3.offsetX - 15, p4 = "end";
            a3.yaxis.opposite && (p4 = "start"), "left" === s2.config.yaxis[0].labels.align ? (f4 = g3.offsetX, p4 = "start") : "center" === s2.config.yaxis[0].labels.align ? (f4 = g3.offsetX, p4 = "middle") : "right" === s2.config.yaxis[0].labels.align && (p4 = "end");
            var x4 = r3.drawText({ x: f4, y: i3 + e3 + g3.offsetY - u4, text: n4, textAnchor: p4, foreColor: Array.isArray(c4) ? c4[o4] : c4, fontSize: g3.style.fontSize, fontFamily: g3.style.fontFamily, fontWeight: g3.style.fontWeight, isPlainText: false, cssClass: "apexcharts-yaxis-label " + g3.style.cssClass, maxWidth: g3.maxWidth });
            l3.add(x4), x4.on("click", function(t5) {
              if ("function" == typeof s2.config.chart.events.xAxisLabelClick) {
                var e4 = Object.assign({}, s2, { labelIndex: o4 });
                s2.config.chart.events.xAxisLabelClick(t5, a3.ctx, e4);
              }
            });
            var b4 = document.createElementNS(s2.globals.SVGNS, "title");
            if (b4.textContent = Array.isArray(n4) ? n4.join(" ") : n4, x4.node.appendChild(b4), 0 !== s2.config.yaxis[t4].labels.rotate) {
              var v4 = r3.rotateAroundCenter(x4.node);
              x4.node.setAttribute("transform", "rotate(".concat(s2.config.yaxis[t4].labels.rotate, " 0 ").concat(v4.y, ")"));
            }
            i3 += e3;
          }, f3 = 0; f3 <= h3.length - 1; f3++)
            u3(f3);
        if (void 0 !== s2.config.yaxis[0].title.text) {
          var p3 = r3.group({ class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed", transform: "translate(" + o3 + ", 0)" }), x3 = r3.drawText({ x: s2.config.yaxis[0].title.offsetX, y: s2.globals.gridHeight / 2 + s2.config.yaxis[0].title.offsetY, text: s2.config.yaxis[0].title.text, textAnchor: "middle", foreColor: s2.config.yaxis[0].title.style.color, fontSize: s2.config.yaxis[0].title.style.fontSize, fontWeight: s2.config.yaxis[0].title.style.fontWeight, fontFamily: s2.config.yaxis[0].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + s2.config.yaxis[0].title.style.cssClass });
          p3.add(x3), n3.add(p3);
        }
        var b3 = 0;
        this.isCategoryBarHorizontal && s2.config.yaxis[0].opposite && (b3 = s2.globals.gridWidth);
        var v3 = s2.config.xaxis.axisBorder;
        if (v3.show) {
          var y2 = r3.drawLine(s2.globals.padHorizontal + v3.offsetX + b3, 1 + v3.offsetY, s2.globals.padHorizontal + v3.offsetX + b3, s2.globals.gridHeight + v3.offsetY, v3.color, 0);
          this.elgrid && this.elgrid.elGridBorders ? this.elgrid.elGridBorders.add(y2) : n3.add(y2);
        }
        return s2.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b3, h3.length, s2.config.yaxis[0].axisBorder, s2.config.yaxis[0].axisTicks, 0, e3, n3), n3;
      } }, { key: "drawXaxisTicks", value: function(t4, e3, i3) {
        var a3 = this.w, s2 = t4;
        if (!(t4 < 0 || t4 - 2 > a3.globals.gridWidth)) {
          var r3 = this.offY + a3.config.xaxis.axisTicks.offsetY;
          if (e3 = e3 + r3 + a3.config.xaxis.axisTicks.height, "top" === a3.config.xaxis.position && (e3 = r3 - a3.config.xaxis.axisTicks.height), a3.config.xaxis.axisTicks.show) {
            var o3 = new m2(this.ctx).drawLine(t4 + a3.config.xaxis.axisTicks.offsetX, r3 + a3.config.xaxis.offsetY, s2 + a3.config.xaxis.axisTicks.offsetX, e3 + a3.config.xaxis.offsetY, a3.config.xaxis.axisTicks.color);
            i3.add(o3), o3.node.classList.add("apexcharts-xaxis-tick");
          }
        }
      } }, { key: "getXAxisTicksPositions", value: function() {
        var t4 = this.w, e3 = [], i3 = this.xaxisLabels.length, a3 = t4.globals.padHorizontal;
        if (t4.globals.timescaleLabels.length > 0)
          for (var s2 = 0; s2 < i3; s2++)
            a3 = this.xaxisLabels[s2].position, e3.push(a3);
        else
          for (var r3 = i3, o3 = 0; o3 < r3; o3++) {
            var n3 = r3;
            t4.globals.isXNumeric && "bar" !== t4.config.chart.type && (n3 -= 1), a3 += t4.globals.gridWidth / n3, e3.push(a3);
          }
        return e3;
      } }, { key: "xAxisLabelCorrections", value: function() {
        var t4 = this.w, e3 = new m2(this.ctx), i3 = t4.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"), a3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"), s2 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"), r3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
        if (t4.globals.rotateXLabels || t4.config.xaxis.labels.rotateAlways)
          for (var o3 = 0; o3 < a3.length; o3++) {
            var n3 = e3.rotateAroundCenter(a3[o3]);
            n3.y = n3.y - 1, n3.x = n3.x + 1, a3[o3].setAttribute("transform", "rotate(".concat(t4.config.xaxis.labels.rotate, " ").concat(n3.x, " ").concat(n3.y, ")")), a3[o3].setAttribute("text-anchor", "end");
            i3.setAttribute("transform", "translate(0, ".concat(-10, ")"));
            var l3 = a3[o3].childNodes;
            t4.config.xaxis.labels.trim && Array.prototype.forEach.call(l3, function(i4) {
              e3.placeTextWithEllipsis(i4, i4.textContent, t4.globals.xAxisLabelsHeight - ("bottom" === t4.config.legend.position ? 20 : 10));
            });
          }
        else
          !function() {
            for (var i4 = t4.globals.gridWidth / (t4.globals.labels.length + 1), s3 = 0; s3 < a3.length; s3++) {
              var r4 = a3[s3].childNodes;
              t4.config.xaxis.labels.trim && "datetime" !== t4.config.xaxis.type && Array.prototype.forEach.call(r4, function(t5) {
                e3.placeTextWithEllipsis(t5, t5.textContent, i4);
              });
            }
          }();
        if (s2.length > 0) {
          var h3 = s2[s2.length - 1].getBBox(), c3 = s2[0].getBBox();
          h3.x < -20 && s2[s2.length - 1].parentNode.removeChild(s2[s2.length - 1]), c3.x + c3.width > t4.globals.gridWidth && !t4.globals.isBarHorizontal && s2[0].parentNode.removeChild(s2[0]);
          for (var d3 = 0; d3 < r3.length; d3++)
            e3.placeTextWithEllipsis(r3[d3], r3[d3].textContent, t4.config.yaxis[0].labels.maxWidth - (t4.config.yaxis[0].title.text ? 2 * parseFloat(t4.config.yaxis[0].title.style.fontSize) : 0) - 15);
        }
      } }]), t3;
    }(), j2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
        var i3 = this.w;
        this.xaxisLabels = i3.globals.labels.slice(), this.axesUtils = new B(e3), this.isRangeBar = i3.globals.seriesRange.length, i3.globals.timescaleLabels.length > 0 && (this.xaxisLabels = i3.globals.timescaleLabels.slice());
      }
      return r2(t3, [{ key: "drawGridArea", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e3 = this.w, i3 = new m2(this.ctx);
        null === t4 && (t4 = i3.group({ class: "apexcharts-grid" }));
        var a3 = i3.drawLine(e3.globals.padHorizontal, 1, e3.globals.padHorizontal, e3.globals.gridHeight, "transparent"), s2 = i3.drawLine(e3.globals.padHorizontal, e3.globals.gridHeight, e3.globals.gridWidth, e3.globals.gridHeight, "transparent");
        return t4.add(s2), t4.add(a3), t4;
      } }, { key: "drawGrid", value: function() {
        var t4 = null;
        return this.w.globals.axisCharts && (t4 = this.renderGrid(), this.drawGridArea(t4.el)), t4;
      } }, { key: "createGridMask", value: function() {
        var t4 = this.w, e3 = t4.globals, i3 = new m2(this.ctx), a3 = Array.isArray(t4.config.stroke.width) ? 0 : t4.config.stroke.width;
        if (Array.isArray(t4.config.stroke.width)) {
          var s2 = 0;
          t4.config.stroke.width.forEach(function(t5) {
            s2 = Math.max(s2, t5);
          }), a3 = s2;
        }
        e3.dom.elGridRectMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e3.cuid)), e3.dom.elGridRectMarkerMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e3.cuid)), e3.dom.elForecastMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elForecastMask.setAttribute("id", "forecastMask".concat(e3.cuid)), e3.dom.elNonForecastMask = document.createElementNS(e3.SVGNS, "clipPath"), e3.dom.elNonForecastMask.setAttribute("id", "nonForecastMask".concat(e3.cuid));
        var r3 = t4.config.chart.type, o3 = 0, n3 = 0;
        ("bar" === r3 || "rangeBar" === r3 || "candlestick" === r3 || "boxPlot" === r3 || t4.globals.comboBarCount > 0) && t4.globals.isXNumeric && !t4.globals.isBarHorizontal && (o3 = t4.config.grid.padding.left, n3 = t4.config.grid.padding.right, e3.barPadForNumericAxis > o3 && (o3 = e3.barPadForNumericAxis, n3 = e3.barPadForNumericAxis)), e3.dom.elGridRect = i3.drawRect(-a3 / 2 - o3 - 2, -a3 / 2, e3.gridWidth + a3 + n3 + o3 + 4, e3.gridHeight + a3, 0, "#fff");
        var l3 = t4.globals.markers.largestSize + 1;
        e3.dom.elGridRectMarker = i3.drawRect(2 * -l3, 2 * -l3, e3.gridWidth + 4 * l3, e3.gridHeight + 4 * l3, 0, "#fff"), e3.dom.elGridRectMask.appendChild(e3.dom.elGridRect.node), e3.dom.elGridRectMarkerMask.appendChild(e3.dom.elGridRectMarker.node);
        var h3 = e3.dom.baseEl.querySelector("defs");
        h3.appendChild(e3.dom.elGridRectMask), h3.appendChild(e3.dom.elForecastMask), h3.appendChild(e3.dom.elNonForecastMask), h3.appendChild(e3.dom.elGridRectMarkerMask);
      } }, { key: "_drawGridLines", value: function(t4) {
        var e3 = t4.i, i3 = t4.x1, a3 = t4.y1, s2 = t4.x2, r3 = t4.y2, o3 = t4.xCount, n3 = t4.parent, l3 = this.w;
        if (!(0 === e3 && l3.globals.skipFirstTimelinelabel || e3 === o3 - 1 && l3.globals.skipLastTimelinelabel && !l3.config.xaxis.labels.formatter || "radar" === l3.config.chart.type)) {
          l3.config.grid.xaxis.lines.show && this._drawGridLine({ i: e3, x1: i3, y1: a3, x2: s2, y2: r3, xCount: o3, parent: n3 });
          var h3 = 0;
          if (l3.globals.hasGroups && "between" === l3.config.xaxis.tickPlacement) {
            var c3 = l3.globals.groups;
            if (c3) {
              for (var d3 = 0, g3 = 0; d3 < e3 && g3 < c3.length; g3++)
                d3 += c3[g3].cols;
              d3 === e3 && (h3 = 0.6 * l3.globals.xAxisLabelsHeight);
            }
          }
          new V2(this.ctx).drawXaxisTicks(i3, h3, l3.globals.dom.elGraphical);
        }
      } }, { key: "_drawGridLine", value: function(t4) {
        var e3 = t4.i, i3 = t4.x1, a3 = t4.y1, s2 = t4.x2, r3 = t4.y2, o3 = t4.xCount, n3 = t4.parent, l3 = this.w, h3 = false, c3 = n3.node.classList.contains("apexcharts-gridlines-horizontal"), d3 = l3.config.grid.strokeDashArray, g3 = l3.globals.barPadForNumericAxis;
        (0 === a3 && 0 === r3 || 0 === i3 && 0 === s2) && (h3 = true), a3 === l3.globals.gridHeight && r3 === l3.globals.gridHeight && (h3 = true), !l3.globals.isBarHorizontal || 0 !== e3 && e3 !== o3 - 1 || (h3 = true);
        var u3 = new m2(this).drawLine(i3 - (c3 ? g3 : 0), a3, s2 + (c3 ? g3 : 0), r3, l3.config.grid.borderColor, d3);
        u3.node.classList.add("apexcharts-gridline"), h3 ? this.elGridBorders.add(u3) : n3.add(u3);
      } }, { key: "_drawGridBandRect", value: function(t4) {
        var e3 = t4.c, i3 = t4.x1, a3 = t4.y1, s2 = t4.x2, r3 = t4.y2, o3 = t4.type, n3 = this.w, l3 = new m2(this.ctx), h3 = n3.globals.barPadForNumericAxis;
        if ("column" !== o3 || "datetime" !== n3.config.xaxis.type) {
          var c3 = n3.config.grid[o3].colors[e3], d3 = l3.drawRect(i3 - ("row" === o3 ? h3 : 0), a3, s2 + ("row" === o3 ? 2 * h3 : 0), r3, 0, c3, n3.config.grid[o3].opacity);
          this.elg.add(d3), d3.attr("clip-path", "url(#gridRectMask".concat(n3.globals.cuid, ")")), d3.node.classList.add("apexcharts-grid-".concat(o3));
        }
      } }, { key: "_drawXYLines", value: function(t4) {
        var e3 = this, i3 = t4.xCount, a3 = t4.tickAmount, s2 = this.w;
        if (s2.config.grid.xaxis.lines.show || s2.config.xaxis.axisTicks.show) {
          var r3, o3 = s2.globals.padHorizontal, n3 = s2.globals.gridHeight;
          s2.globals.timescaleLabels.length ? function(t5) {
            for (var a4 = t5.xC, s3 = t5.x1, r4 = t5.y1, o4 = t5.x2, n4 = t5.y2, l4 = 0; l4 < a4; l4++)
              s3 = e3.xaxisLabels[l4].position, o4 = e3.xaxisLabels[l4].position, e3._drawGridLines({ i: l4, x1: s3, y1: r4, x2: o4, y2: n4, xCount: i3, parent: e3.elgridLinesV });
          }({ xC: i3, x1: o3, y1: 0, x2: r3, y2: n3 }) : (s2.globals.isXNumeric && (i3 = s2.globals.xAxisScale.result.length), function(t5) {
            for (var a4 = t5.xC, r4 = t5.x1, o4 = t5.y1, n4 = t5.x2, l4 = t5.y2, h4 = 0; h4 < a4 + (s2.globals.isXNumeric ? 0 : 1); h4++)
              0 === h4 && 1 === a4 && 1 === s2.globals.dataPoints && (n4 = r4 = s2.globals.gridWidth / 2), e3._drawGridLines({ i: h4, x1: r4, y1: o4, x2: n4, y2: l4, xCount: i3, parent: e3.elgridLinesV }), n4 = r4 += s2.globals.gridWidth / (s2.globals.isXNumeric ? a4 - 1 : a4);
          }({ xC: i3, x1: o3, y1: 0, x2: r3, y2: n3 }));
        }
        if (s2.config.grid.yaxis.lines.show) {
          var l3 = 0, h3 = 0, c3 = s2.globals.gridWidth, d3 = a3 + 1;
          this.isRangeBar && (d3 = s2.globals.labels.length);
          for (var g3 = 0; g3 < d3 + (this.isRangeBar ? 1 : 0); g3++)
            this._drawGridLine({ i: g3, xCount: d3 + (this.isRangeBar ? 1 : 0), x1: 0, y1: l3, x2: c3, y2: h3, parent: this.elgridLinesH }), h3 = l3 += s2.globals.gridHeight / (this.isRangeBar ? d3 : a3);
        }
      } }, { key: "_drawInvertedXYLines", value: function(t4) {
        var e3 = t4.xCount, i3 = this.w;
        if (i3.config.grid.xaxis.lines.show || i3.config.xaxis.axisTicks.show)
          for (var a3, s2 = i3.globals.padHorizontal, r3 = i3.globals.gridHeight, o3 = 0; o3 < e3 + 1; o3++) {
            i3.config.grid.xaxis.lines.show && this._drawGridLine({ i: o3, xCount: e3 + 1, x1: s2, y1: 0, x2: a3, y2: r3, parent: this.elgridLinesV }), new V2(this.ctx).drawXaxisTicks(s2, 0, i3.globals.dom.elGraphical), a3 = s2 = s2 + i3.globals.gridWidth / e3 + 0.3;
          }
        if (i3.config.grid.yaxis.lines.show)
          for (var n3 = 0, l3 = 0, h3 = i3.globals.gridWidth, c3 = 0; c3 < i3.globals.dataPoints + 1; c3++)
            this._drawGridLine({ i: c3, xCount: i3.globals.dataPoints + 1, x1: 0, y1: n3, x2: h3, y2: l3, parent: this.elgridLinesH }), l3 = n3 += i3.globals.gridHeight / i3.globals.dataPoints;
      } }, { key: "renderGrid", value: function() {
        var t4 = this.w, e3 = new m2(this.ctx);
        this.elg = e3.group({ class: "apexcharts-grid" }), this.elgridLinesH = e3.group({ class: "apexcharts-gridlines-horizontal" }), this.elgridLinesV = e3.group({ class: "apexcharts-gridlines-vertical" }), this.elGridBorders = e3.group({ class: "apexcharts-grid-borders" }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t4.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide(), this.elGridBorders.hide());
        for (var i3, a3 = t4.globals.yAxisScale.length ? t4.globals.yAxisScale[0].result.length - 1 : 5, s2 = 0; s2 < t4.globals.series.length && (void 0 !== t4.globals.yAxisScale[s2] && (a3 = t4.globals.yAxisScale[s2].result.length - 1), !(a3 > 2)); s2++)
          ;
        return !t4.globals.isBarHorizontal || this.isRangeBar ? (i3 = this.xaxisLabels.length, this.isRangeBar && (a3 = t4.globals.labels.length, t4.config.xaxis.tickAmount && t4.config.xaxis.labels.formatter && (i3 = t4.config.xaxis.tickAmount)), this._drawXYLines({ xCount: i3, tickAmount: a3 })) : (i3 = a3, a3 = t4.globals.xTickAmount, this._drawInvertedXYLines({ xCount: i3, tickAmount: a3 })), this.drawGridBands(i3, a3), { el: this.elg, elGridBorders: this.elGridBorders, xAxisTickWidth: t4.globals.gridWidth / i3 };
      } }, { key: "drawGridBands", value: function(t4, e3) {
        var i3 = this.w;
        if (void 0 !== i3.config.grid.row.colors && i3.config.grid.row.colors.length > 0)
          for (var a3 = 0, s2 = i3.globals.gridHeight / e3, r3 = i3.globals.gridWidth, o3 = 0, n3 = 0; o3 < e3; o3++, n3++)
            n3 >= i3.config.grid.row.colors.length && (n3 = 0), this._drawGridBandRect({ c: n3, x1: 0, y1: a3, x2: r3, y2: s2, type: "row" }), a3 += i3.globals.gridHeight / e3;
        if (void 0 !== i3.config.grid.column.colors && i3.config.grid.column.colors.length > 0)
          for (var l3 = i3.globals.isBarHorizontal || "category" !== i3.config.xaxis.type && !i3.config.xaxis.convertedCatToNumeric ? t4 : t4 - 1, h3 = i3.globals.padHorizontal, c3 = i3.globals.padHorizontal + i3.globals.gridWidth / l3, d3 = i3.globals.gridHeight, g3 = 0, u3 = 0; g3 < t4; g3++, u3++)
            u3 >= i3.config.grid.column.colors.length && (u3 = 0), this._drawGridBandRect({ c: u3, x1: h3, y1: 0, x2: c3, y2: d3, type: "column" }), h3 += i3.globals.gridWidth / l3;
      } }]), t3;
    }(), _2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "niceScale", value: function(t4, e3) {
        var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s2 = arguments.length > 4 ? arguments[4] : void 0, r3 = this.w, o3 = Math.abs(e3 - t4);
        if ("dataPoints" === (i3 = this._adjustTicksForSmallRange(i3, a3, o3)) && (i3 = r3.globals.dataPoints - 1), t4 === Number.MIN_VALUE && 0 === e3 || !x2.isNumber(t4) && !x2.isNumber(e3) || t4 === Number.MIN_VALUE && e3 === -Number.MAX_VALUE) {
          t4 = 0, e3 = i3;
          var n3 = this.linearScale(t4, e3, i3);
          return n3;
        }
        t4 > e3 ? (console.warn("axis.min cannot be greater than axis.max"), e3 = t4 + 0.1) : t4 === e3 && (t4 = 0 === t4 ? 0 : t4 - 0.5, e3 = 0 === e3 ? 2 : e3 + 0.5);
        var l3 = [];
        o3 < 1 && s2 && ("candlestick" === r3.config.chart.type || "candlestick" === r3.config.series[a3].type || "boxPlot" === r3.config.chart.type || "boxPlot" === r3.config.series[a3].type || r3.globals.isRangeData) && (e3 *= 1.01);
        var h3 = i3 + 1;
        h3 < 2 ? h3 = 2 : h3 > 2 && (h3 -= 2);
        var c3 = o3 / h3, d3 = Math.floor(x2.log10(c3)), g3 = Math.pow(10, d3), u3 = Math.round(c3 / g3);
        u3 < 1 && (u3 = 1);
        var f3 = u3 * g3, p3 = f3 * Math.floor(t4 / f3), b3 = f3 * Math.ceil(e3 / f3), v3 = p3;
        if (s2 && o3 > 2) {
          for (; l3.push(v3), !((v3 += f3) > b3); )
            ;
          return { result: l3, niceMin: l3[0], niceMax: l3[l3.length - 1] };
        }
        var m3 = t4;
        (l3 = []).push(m3);
        for (var y2 = Math.abs(e3 - t4) / i3, w2 = 0; w2 <= i3; w2++)
          m3 += y2, l3.push(m3);
        return l3[l3.length - 2] >= e3 && l3.pop(), { result: l3, niceMin: l3[0], niceMax: l3[l3.length - 1] };
      } }, { key: "linearScale", value: function(t4, e3) {
        var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a3 = arguments.length > 3 ? arguments[3] : void 0, s2 = Math.abs(e3 - t4);
        "dataPoints" === (i3 = this._adjustTicksForSmallRange(i3, a3, s2)) && (i3 = this.w.globals.dataPoints - 1);
        var r3 = s2 / i3;
        i3 === Number.MAX_VALUE && (i3 = 10, r3 = 1);
        for (var o3 = [], n3 = t4; i3 >= 0; )
          o3.push(n3), n3 += r3, i3 -= 1;
        return { result: o3, niceMin: o3[0], niceMax: o3[o3.length - 1] };
      } }, { key: "logarithmicScaleNice", value: function(t4, e3, i3) {
        e3 <= 0 && (e3 = Math.max(t4, i3)), t4 <= 0 && (t4 = Math.min(e3, i3));
        for (var a3 = [], s2 = Math.ceil(Math.log(e3) / Math.log(i3) + 1), r3 = Math.floor(Math.log(t4) / Math.log(i3)); r3 < s2; r3++)
          a3.push(Math.pow(i3, r3));
        return { result: a3, niceMin: a3[0], niceMax: a3[a3.length - 1] };
      } }, { key: "logarithmicScale", value: function(t4, e3, i3) {
        e3 <= 0 && (e3 = Math.max(t4, i3)), t4 <= 0 && (t4 = Math.min(e3, i3));
        for (var a3 = [], s2 = Math.log(e3) / Math.log(i3), r3 = Math.log(t4) / Math.log(i3), o3 = s2 - r3, n3 = Math.round(o3), l3 = o3 / n3, h3 = 0, c3 = r3; h3 < n3; h3++, c3 += l3)
          a3.push(Math.pow(i3, c3));
        return a3.push(Math.pow(i3, s2)), { result: a3, niceMin: t4, niceMax: e3 };
      } }, { key: "_adjustTicksForSmallRange", value: function(t4, e3, i3) {
        var a3 = t4;
        if (void 0 !== e3 && this.w.config.yaxis[e3].labels.formatter && void 0 === this.w.config.yaxis[e3].tickAmount) {
          var s2 = Number(this.w.config.yaxis[e3].labels.formatter(1));
          x2.isNumber(s2) && 0 === this.w.globals.yValueDecimal && (a3 = Math.ceil(i3));
        }
        return a3 < t4 ? a3 : t4;
      } }, { key: "setYScaleForIndex", value: function(t4, e3, i3) {
        var a3 = this.w.globals, s2 = this.w.config, r3 = a3.isBarHorizontal ? s2.xaxis : s2.yaxis[t4];
        void 0 === a3.yAxisScale[t4] && (a3.yAxisScale[t4] = []);
        var o3 = Math.abs(i3 - e3);
        if (r3.logarithmic && o3 <= 5 && (a3.invalidLogScale = true), r3.logarithmic && o3 > 5)
          a3.allSeriesCollapsed = false, a3.yAxisScale[t4] = this.logarithmicScale(e3, i3, r3.logBase), a3.yAxisScale[t4] = r3.forceNiceScale ? this.logarithmicScaleNice(e3, i3, r3.logBase) : this.logarithmicScale(e3, i3, r3.logBase);
        else if (i3 !== -Number.MAX_VALUE && x2.isNumber(i3))
          if (a3.allSeriesCollapsed = false, void 0 === r3.min && void 0 === r3.max || r3.forceNiceScale) {
            var n3 = void 0 === s2.yaxis[t4].max && void 0 === s2.yaxis[t4].min || s2.yaxis[t4].forceNiceScale;
            a3.yAxisScale[t4] = this.niceScale(e3, i3, r3.tickAmount ? r3.tickAmount : o3 < 5 && o3 > 1 ? o3 + 1 : 5, t4, n3);
          } else
            a3.yAxisScale[t4] = this.linearScale(e3, i3, r3.tickAmount, t4);
        else
          a3.yAxisScale[t4] = this.linearScale(0, 5, 5);
      } }, { key: "setXScale", value: function(t4, e3) {
        var i3 = this.w, a3 = i3.globals, s2 = i3.config.xaxis, r3 = Math.abs(e3 - t4);
        return e3 !== -Number.MAX_VALUE && x2.isNumber(e3) ? a3.xAxisScale = this.linearScale(t4, e3, s2.tickAmount ? s2.tickAmount : r3 < 5 && r3 > 1 ? r3 + 1 : 5, 0) : a3.xAxisScale = this.linearScale(0, 5, 5), a3.xAxisScale;
      } }, { key: "setMultipleYScales", value: function() {
        var t4 = this, e3 = this.w.globals, i3 = this.w.config, a3 = e3.minYArr.concat([]), s2 = e3.maxYArr.concat([]), r3 = [];
        i3.yaxis.forEach(function(e4, o3) {
          var n3 = o3;
          i3.series.forEach(function(t5, i4) {
            t5.name === e4.seriesName && (n3 = i4, o3 !== i4 ? r3.push({ index: i4, similarIndex: o3, alreadyExists: true }) : r3.push({ index: i4 }));
          });
          var l3 = a3[n3], h3 = s2[n3];
          t4.setYScaleForIndex(o3, l3, h3);
        }), this.sameScaleInMultipleAxes(a3, s2, r3);
      } }, { key: "sameScaleInMultipleAxes", value: function(t4, e3, i3) {
        var a3 = this, s2 = this.w.config, r3 = this.w.globals, o3 = [];
        i3.forEach(function(t5) {
          t5.alreadyExists && (void 0 === o3[t5.index] && (o3[t5.index] = []), o3[t5.index].push(t5.index), o3[t5.index].push(t5.similarIndex));
        }), r3.yAxisSameScaleIndices = o3, o3.forEach(function(t5, e4) {
          o3.forEach(function(i4, a4) {
            var s3, r4;
            e4 !== a4 && (s3 = t5, r4 = i4, s3.filter(function(t6) {
              return -1 !== r4.indexOf(t6);
            })).length > 0 && (o3[e4] = o3[e4].concat(o3[a4]));
          });
        });
        var n3 = o3.map(function(t5) {
          return t5.filter(function(e4, i4) {
            return t5.indexOf(e4) === i4;
          });
        }).map(function(t5) {
          return t5.sort();
        });
        o3 = o3.filter(function(t5) {
          return !!t5;
        });
        var l3 = n3.slice(), h3 = l3.map(function(t5) {
          return JSON.stringify(t5);
        });
        l3 = l3.filter(function(t5, e4) {
          return h3.indexOf(JSON.stringify(t5)) === e4;
        });
        var c3 = [], d3 = [];
        t4.forEach(function(t5, i4) {
          l3.forEach(function(a4, s3) {
            a4.indexOf(i4) > -1 && (void 0 === c3[s3] && (c3[s3] = [], d3[s3] = []), c3[s3].push({ key: i4, value: t5 }), d3[s3].push({ key: i4, value: e3[i4] }));
          });
        });
        var g3 = Array.apply(null, Array(l3.length)).map(Number.prototype.valueOf, Number.MIN_VALUE), u3 = Array.apply(null, Array(l3.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);
        c3.forEach(function(t5, e4) {
          t5.forEach(function(t6, i4) {
            g3[e4] = Math.min(t6.value, g3[e4]);
          });
        }), d3.forEach(function(t5, e4) {
          t5.forEach(function(t6, i4) {
            u3[e4] = Math.max(t6.value, u3[e4]);
          });
        }), t4.forEach(function(t5, e4) {
          d3.forEach(function(t6, i4) {
            var o4 = g3[i4], n4 = u3[i4];
            s2.chart.stacked && (n4 = 0, t6.forEach(function(t7, e5) {
              t7.value !== -Number.MAX_VALUE && (n4 += t7.value), o4 !== Number.MIN_VALUE && (o4 += c3[i4][e5].value);
            })), t6.forEach(function(i5, l4) {
              t6[l4].key === e4 && (void 0 !== s2.yaxis[e4].min && (o4 = "function" == typeof s2.yaxis[e4].min ? s2.yaxis[e4].min(r3.minY) : s2.yaxis[e4].min), void 0 !== s2.yaxis[e4].max && (n4 = "function" == typeof s2.yaxis[e4].max ? s2.yaxis[e4].max(r3.maxY) : s2.yaxis[e4].max), a3.setYScaleForIndex(e4, o4, n4));
            });
          });
        });
      } }, { key: "autoScaleY", value: function(t4, e3, i3) {
        t4 || (t4 = this);
        var a3 = t4.w;
        if (a3.globals.isMultipleYAxis || a3.globals.collapsedSeries.length)
          return console.warn("autoScaleYaxis is not supported in a multi-yaxis chart."), e3;
        var s2 = a3.globals.seriesX[0], r3 = a3.config.chart.stacked;
        return e3.forEach(function(t5, o3) {
          for (var n3 = 0, l3 = 0; l3 < s2.length; l3++)
            if (s2[l3] >= i3.xaxis.min) {
              n3 = l3;
              break;
            }
          var h3, c3, d3 = a3.globals.minYArr[o3], g3 = a3.globals.maxYArr[o3], u3 = a3.globals.stackedSeriesTotals;
          a3.globals.series.forEach(function(o4, l4) {
            var f3 = o4[n3];
            r3 ? (f3 = u3[n3], h3 = c3 = f3, u3.forEach(function(t6, e4) {
              s2[e4] <= i3.xaxis.max && s2[e4] >= i3.xaxis.min && (t6 > c3 && null !== t6 && (c3 = t6), o4[e4] < h3 && null !== o4[e4] && (h3 = o4[e4]));
            })) : (h3 = c3 = f3, o4.forEach(function(t6, e4) {
              if (s2[e4] <= i3.xaxis.max && s2[e4] >= i3.xaxis.min) {
                var r4 = t6, o5 = t6;
                a3.globals.series.forEach(function(i4, a4) {
                  null !== t6 && (r4 = Math.min(i4[e4], r4), o5 = Math.max(i4[e4], o5));
                }), o5 > c3 && null !== o5 && (c3 = o5), r4 < h3 && null !== r4 && (h3 = r4);
              }
            })), void 0 === h3 && void 0 === c3 && (h3 = d3, c3 = g3), c3 *= c3 < 0 ? 0.9 : 1.1, 0 === (h3 *= h3 < 0 ? 1.1 : 0.9) && 0 === c3 && (h3 = -1, c3 = 1), c3 < 0 && c3 < g3 && (c3 = g3), h3 < 0 && h3 > d3 && (h3 = d3), e3.length > 1 ? (e3[l4].min = void 0 === t5.min ? h3 : t5.min, e3[l4].max = void 0 === t5.max ? c3 : t5.max) : (e3[0].min = void 0 === t5.min ? h3 : t5.min, e3[0].max = void 0 === t5.max ? c3 : t5.max);
          });
        }), e3;
      } }]), t3;
    }(), U2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.scales = new _2(e3);
      }
      return r2(t3, [{ key: "init", value: function() {
        this.setYRange(), this.setXRange(), this.setZRange();
      } }, { key: "getMinYMaxY", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE, i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s2 = this.w.config, r3 = this.w.globals, o3 = -Number.MAX_VALUE, n3 = Number.MIN_VALUE;
        null === a3 && (a3 = t4 + 1);
        var l3 = r3.series, h3 = l3, c3 = l3;
        "candlestick" === s2.chart.type ? (h3 = r3.seriesCandleL, c3 = r3.seriesCandleH) : "boxPlot" === s2.chart.type ? (h3 = r3.seriesCandleO, c3 = r3.seriesCandleC) : r3.isRangeData && (h3 = r3.seriesRangeStart, c3 = r3.seriesRangeEnd);
        for (var d3 = t4; d3 < a3; d3++) {
          r3.dataPoints = Math.max(r3.dataPoints, l3[d3].length), r3.categoryLabels.length && (r3.dataPoints = r3.categoryLabels.filter(function(t5) {
            return void 0 !== t5;
          }).length);
          for (var g3 = 0; g3 < r3.series[d3].length; g3++) {
            var u3 = l3[d3][g3];
            null !== u3 && x2.isNumber(u3) ? (void 0 !== c3[d3][g3] && (o3 = Math.max(o3, c3[d3][g3]), e3 = Math.min(e3, c3[d3][g3])), void 0 !== h3[d3][g3] && (e3 = Math.min(e3, h3[d3][g3]), i3 = Math.max(i3, h3[d3][g3])), "candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type && "rangeArea" === this.w.config.chart.type && "rangeBar" === this.w.config.chart.type || ("candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type || void 0 !== r3.seriesCandleC[d3][g3] && (o3 = Math.max(o3, r3.seriesCandleO[d3][g3]), o3 = Math.max(o3, r3.seriesCandleH[d3][g3]), o3 = Math.max(o3, r3.seriesCandleL[d3][g3]), o3 = Math.max(o3, r3.seriesCandleC[d3][g3]), "boxPlot" === this.w.config.chart.type && (o3 = Math.max(o3, r3.seriesCandleM[d3][g3]))), !s2.series[d3].type || "candlestick" === s2.series[d3].type && "boxPlot" === s2.series[d3].type && "rangeArea" === s2.series[d3].type && "rangeBar" === s2.series[d3].type || (o3 = Math.max(o3, r3.series[d3][g3]), e3 = Math.min(e3, r3.series[d3][g3])), i3 = o3), r3.seriesGoals[d3] && r3.seriesGoals[d3][g3] && Array.isArray(r3.seriesGoals[d3][g3]) && r3.seriesGoals[d3][g3].forEach(function(t5) {
              n3 !== Number.MIN_VALUE && (n3 = Math.min(n3, t5.value), e3 = n3), o3 = Math.max(o3, t5.value), i3 = o3;
            }), x2.isFloat(u3) && (u3 = x2.noExponents(u3), r3.yValueDecimal = Math.max(r3.yValueDecimal, u3.toString().split(".")[1].length)), n3 > h3[d3][g3] && h3[d3][g3] < 0 && (n3 = h3[d3][g3])) : r3.hasNullValues = true;
          }
        }
        return "rangeBar" === s2.chart.type && r3.seriesRangeStart.length && r3.isBarHorizontal && (n3 = e3), "bar" === s2.chart.type && (n3 < 0 && o3 < 0 && (o3 = 0), n3 === Number.MIN_VALUE && (n3 = 0)), { minY: n3, maxY: o3, lowestY: e3, highestY: i3 };
      } }, { key: "setYRange", value: function() {
        var t4 = this.w.globals, e3 = this.w.config;
        t4.maxY = -Number.MAX_VALUE, t4.minY = Number.MIN_VALUE;
        var i3 = Number.MAX_VALUE;
        if (t4.isMultipleYAxis)
          for (var a3 = 0; a3 < t4.series.length; a3++) {
            var s2 = this.getMinYMaxY(a3, i3, null, a3 + 1);
            t4.minYArr.push(s2.minY), t4.maxYArr.push(s2.maxY), i3 = s2.lowestY;
          }
        var r3 = this.getMinYMaxY(0, i3, null, t4.series.length);
        if (t4.minY = r3.minY, t4.maxY = r3.maxY, i3 = r3.lowestY, e3.chart.stacked && this._setStackedMinMax(), ("line" === e3.chart.type || "area" === e3.chart.type || "candlestick" === e3.chart.type || "boxPlot" === e3.chart.type || "rangeBar" === e3.chart.type && !t4.isBarHorizontal) && t4.minY === Number.MIN_VALUE && i3 !== -Number.MAX_VALUE && i3 !== t4.maxY) {
          var o3 = t4.maxY - i3;
          (i3 >= 0 && i3 <= 10 || void 0 !== e3.yaxis[0].min || void 0 !== e3.yaxis[0].max) && (o3 = 0), t4.minY = i3 - 5 * o3 / 100, i3 > 0 && t4.minY < 0 && (t4.minY = 0), t4.maxY = t4.maxY + 5 * o3 / 100;
        }
        if (e3.yaxis.forEach(function(e4, i4) {
          void 0 !== e4.max && ("number" == typeof e4.max ? t4.maxYArr[i4] = e4.max : "function" == typeof e4.max && (t4.maxYArr[i4] = e4.max(t4.isMultipleYAxis ? t4.maxYArr[i4] : t4.maxY)), t4.maxY = t4.maxYArr[i4]), void 0 !== e4.min && ("number" == typeof e4.min ? t4.minYArr[i4] = e4.min : "function" == typeof e4.min && (t4.minYArr[i4] = e4.min(t4.isMultipleYAxis ? t4.minYArr[i4] === Number.MIN_VALUE ? 0 : t4.minYArr[i4] : t4.minY)), t4.minY = t4.minYArr[i4]);
        }), t4.isBarHorizontal) {
          ["min", "max"].forEach(function(i4) {
            void 0 !== e3.xaxis[i4] && "number" == typeof e3.xaxis[i4] && ("min" === i4 ? t4.minY = e3.xaxis[i4] : t4.maxY = e3.xaxis[i4]);
          });
        }
        return t4.isMultipleYAxis ? (this.scales.setMultipleYScales(), t4.minY = i3, t4.yAxisScale.forEach(function(e4, i4) {
          t4.minYArr[i4] = e4.niceMin, t4.maxYArr[i4] = e4.niceMax;
        })) : (this.scales.setYScaleForIndex(0, t4.minY, t4.maxY), t4.minY = t4.yAxisScale[0].niceMin, t4.maxY = t4.yAxisScale[0].niceMax, t4.minYArr[0] = t4.yAxisScale[0].niceMin, t4.maxYArr[0] = t4.yAxisScale[0].niceMax), { minY: t4.minY, maxY: t4.maxY, minYArr: t4.minYArr, maxYArr: t4.maxYArr, yAxisScale: t4.yAxisScale };
      } }, { key: "setXRange", value: function() {
        var t4 = this.w.globals, e3 = this.w.config, i3 = "numeric" === e3.xaxis.type || "datetime" === e3.xaxis.type || "category" === e3.xaxis.type && !t4.noLabelsProvided || t4.noLabelsProvided || t4.isXNumeric;
        if (t4.isXNumeric && function() {
          for (var e4 = 0; e4 < t4.series.length; e4++)
            if (t4.labels[e4])
              for (var i4 = 0; i4 < t4.labels[e4].length; i4++)
                null !== t4.labels[e4][i4] && x2.isNumber(t4.labels[e4][i4]) && (t4.maxX = Math.max(t4.maxX, t4.labels[e4][i4]), t4.initialMaxX = Math.max(t4.maxX, t4.labels[e4][i4]), t4.minX = Math.min(t4.minX, t4.labels[e4][i4]), t4.initialMinX = Math.min(t4.minX, t4.labels[e4][i4]));
        }(), t4.noLabelsProvided && 0 === e3.xaxis.categories.length && (t4.maxX = t4.labels[t4.labels.length - 1], t4.initialMaxX = t4.labels[t4.labels.length - 1], t4.minX = 1, t4.initialMinX = 1), t4.isXNumeric || t4.noLabelsProvided || t4.dataFormatXNumeric) {
          var a3;
          if (void 0 === e3.xaxis.tickAmount ? (a3 = Math.round(t4.svgWidth / 150), "numeric" === e3.xaxis.type && t4.dataPoints < 30 && (a3 = t4.dataPoints - 1), a3 > t4.dataPoints && 0 !== t4.dataPoints && (a3 = t4.dataPoints - 1)) : "dataPoints" === e3.xaxis.tickAmount ? (t4.series.length > 1 && (a3 = t4.series[t4.maxValsInArrayIndex].length - 1), t4.isXNumeric && (a3 = t4.maxX - t4.minX - 1)) : a3 = e3.xaxis.tickAmount, t4.xTickAmount = a3, void 0 !== e3.xaxis.max && "number" == typeof e3.xaxis.max && (t4.maxX = e3.xaxis.max), void 0 !== e3.xaxis.min && "number" == typeof e3.xaxis.min && (t4.minX = e3.xaxis.min), void 0 !== e3.xaxis.range && (t4.minX = t4.maxX - e3.xaxis.range), t4.minX !== Number.MAX_VALUE && t4.maxX !== -Number.MAX_VALUE)
            if (e3.xaxis.convertedCatToNumeric && !t4.dataFormatXNumeric) {
              for (var s2 = [], r3 = t4.minX - 1; r3 < t4.maxX; r3++)
                s2.push(r3 + 1);
              t4.xAxisScale = { result: s2, niceMin: s2[0], niceMax: s2[s2.length - 1] };
            } else
              t4.xAxisScale = this.scales.setXScale(t4.minX, t4.maxX);
          else
            t4.xAxisScale = this.scales.linearScale(1, a3, a3), t4.noLabelsProvided && t4.labels.length > 0 && (t4.xAxisScale = this.scales.linearScale(1, t4.labels.length, a3 - 1), t4.seriesX = t4.labels.slice());
          i3 && (t4.labels = t4.xAxisScale.result.slice());
        }
        return t4.isBarHorizontal && t4.labels.length && (t4.xTickAmount = t4.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), { minX: t4.minX, maxX: t4.maxX };
      } }, { key: "setZRange", value: function() {
        var t4 = this.w.globals;
        if (t4.isDataXYZ) {
          for (var e3 = 0; e3 < t4.series.length; e3++)
            if (void 0 !== t4.seriesZ[e3])
              for (var i3 = 0; i3 < t4.seriesZ[e3].length; i3++)
                null !== t4.seriesZ[e3][i3] && x2.isNumber(t4.seriesZ[e3][i3]) && (t4.maxZ = Math.max(t4.maxZ, t4.seriesZ[e3][i3]), t4.minZ = Math.min(t4.minZ, t4.seriesZ[e3][i3]));
        }
      } }, { key: "_handleSingleDataPoint", value: function() {
        var t4 = this.w.globals, e3 = this.w.config;
        if (t4.minX === t4.maxX) {
          var i3 = new T2(this.ctx);
          if ("datetime" === e3.xaxis.type) {
            var a3 = i3.getDate(t4.minX);
            e3.xaxis.labels.datetimeUTC ? a3.setUTCDate(a3.getUTCDate() - 2) : a3.setDate(a3.getDate() - 2), t4.minX = new Date(a3).getTime();
            var s2 = i3.getDate(t4.maxX);
            e3.xaxis.labels.datetimeUTC ? s2.setUTCDate(s2.getUTCDate() + 2) : s2.setDate(s2.getDate() + 2), t4.maxX = new Date(s2).getTime();
          } else
            ("numeric" === e3.xaxis.type || "category" === e3.xaxis.type && !t4.noLabelsProvided) && (t4.minX = t4.minX - 2, t4.initialMinX = t4.minX, t4.maxX = t4.maxX + 2, t4.initialMaxX = t4.maxX);
        }
      } }, { key: "_getMinXDiff", value: function() {
        var t4 = this.w.globals;
        t4.isXNumeric && t4.seriesX.forEach(function(e3, i3) {
          1 === e3.length && e3.push(t4.seriesX[t4.maxValsInArrayIndex][t4.seriesX[t4.maxValsInArrayIndex].length - 1]);
          var a3 = e3.slice();
          a3.sort(function(t5, e4) {
            return t5 - e4;
          }), a3.forEach(function(e4, i4) {
            if (i4 > 0) {
              var s2 = e4 - a3[i4 - 1];
              s2 > 0 && (t4.minXDiff = Math.min(s2, t4.minXDiff));
            }
          }), 1 !== t4.dataPoints && t4.minXDiff !== Number.MAX_VALUE || (t4.minXDiff = 0.5);
        });
      } }, { key: "_setStackedMinMax", value: function() {
        var t4 = this.w.globals, e3 = [], i3 = [];
        if (t4.series.length)
          for (var a3 = 0; a3 < t4.series[t4.maxValsInArrayIndex].length; a3++)
            for (var s2 = 0, r3 = 0, o3 = 0; o3 < t4.series.length; o3++)
              null !== t4.series[o3][a3] && x2.isNumber(t4.series[o3][a3]) && (t4.series[o3][a3] > 0 ? s2 = s2 + parseFloat(t4.series[o3][a3]) + 1e-4 : r3 += parseFloat(t4.series[o3][a3])), o3 === t4.series.length - 1 && (e3.push(s2), i3.push(r3));
        for (var n3 = 0; n3 < e3.length; n3++)
          t4.maxY = Math.max(t4.maxY, e3[n3]), t4.minY = Math.min(t4.minY, i3[n3]);
      } }]), t3;
    }(), q2 = function() {
      function t3(e3, i3) {
        a2(this, t3), this.ctx = e3, this.elgrid = i3, this.w = e3.w;
        var s2 = this.w;
        this.xaxisFontSize = s2.config.xaxis.labels.style.fontSize, this.axisFontFamily = s2.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s2.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === s2.config.chart.type && s2.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, "bottom" === s2.config.xaxis.position && (this.xAxisoffX = s2.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new B(e3);
      }
      return r2(t3, [{ key: "drawYaxis", value: function(t4) {
        var e3 = this, i3 = this.w, a3 = new m2(this.ctx), s2 = i3.config.yaxis[t4].labels.style, r3 = s2.fontSize, o3 = s2.fontFamily, n3 = s2.fontWeight, l3 = a3.group({ class: "apexcharts-yaxis", rel: t4, transform: "translate(" + i3.globals.translateYAxisX[t4] + ", 0)" });
        if (this.axesUtils.isYAxisHidden(t4))
          return l3;
        var h3 = a3.group({ class: "apexcharts-yaxis-texts-g" });
        l3.add(h3);
        var c3 = i3.globals.yAxisScale[t4].result.length - 1, d3 = i3.globals.gridHeight / c3, g3 = i3.globals.translateY, u3 = i3.globals.yLabelFormatters[t4], f3 = i3.globals.yAxisScale[t4].result.slice();
        f3 = this.axesUtils.checkForReversedLabels(t4, f3);
        var p3 = "";
        if (i3.config.yaxis[t4].labels.show)
          for (var x3 = function(l4) {
            var x4 = f3[l4];
            x4 = u3(x4, l4, i3);
            var b4 = i3.config.yaxis[t4].labels.padding;
            i3.config.yaxis[t4].opposite && 0 !== i3.config.yaxis.length && (b4 *= -1);
            var v4 = "end";
            i3.config.yaxis[t4].opposite && (v4 = "start"), "left" === i3.config.yaxis[t4].labels.align ? v4 = "start" : "center" === i3.config.yaxis[t4].labels.align ? v4 = "middle" : "right" === i3.config.yaxis[t4].labels.align && (v4 = "end");
            var m3 = e3.axesUtils.getYAxisForeColor(s2.colors, t4), y3 = a3.drawText({ x: b4, y: g3 + c3 / 10 + i3.config.yaxis[t4].labels.offsetY + 1, text: x4, textAnchor: v4, fontSize: r3, fontFamily: o3, fontWeight: n3, maxWidth: i3.config.yaxis[t4].labels.maxWidth, foreColor: Array.isArray(m3) ? m3[l4] : m3, isPlainText: false, cssClass: "apexcharts-yaxis-label " + s2.cssClass });
            l4 === c3 && (p3 = y3), h3.add(y3);
            var w3 = document.createElementNS(i3.globals.SVGNS, "title");
            if (w3.textContent = Array.isArray(x4) ? x4.join(" ") : x4, y3.node.appendChild(w3), 0 !== i3.config.yaxis[t4].labels.rotate) {
              var k4 = a3.rotateAroundCenter(p3.node), A4 = a3.rotateAroundCenter(y3.node);
              y3.node.setAttribute("transform", "rotate(".concat(i3.config.yaxis[t4].labels.rotate, " ").concat(k4.x, " ").concat(A4.y, ")"));
            }
            g3 += d3;
          }, b3 = c3; b3 >= 0; b3--)
            x3(b3);
        if (void 0 !== i3.config.yaxis[t4].title.text) {
          var v3 = a3.group({ class: "apexcharts-yaxis-title" }), y2 = 0;
          i3.config.yaxis[t4].opposite && (y2 = i3.globals.translateYAxisX[t4]);
          var w2 = a3.drawText({ x: y2, y: i3.globals.gridHeight / 2 + i3.globals.translateY + i3.config.yaxis[t4].title.offsetY, text: i3.config.yaxis[t4].title.text, textAnchor: "end", foreColor: i3.config.yaxis[t4].title.style.color, fontSize: i3.config.yaxis[t4].title.style.fontSize, fontWeight: i3.config.yaxis[t4].title.style.fontWeight, fontFamily: i3.config.yaxis[t4].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + i3.config.yaxis[t4].title.style.cssClass });
          v3.add(w2), l3.add(v3);
        }
        var k3 = i3.config.yaxis[t4].axisBorder, A3 = 31 + k3.offsetX;
        if (i3.config.yaxis[t4].opposite && (A3 = -31 - k3.offsetX), k3.show) {
          var S3 = a3.drawLine(A3, i3.globals.translateY + k3.offsetY - 2, A3, i3.globals.gridHeight + i3.globals.translateY + k3.offsetY + 2, k3.color, 0, k3.width);
          l3.add(S3);
        }
        return i3.config.yaxis[t4].axisTicks.show && this.axesUtils.drawYAxisTicks(A3, c3, k3, i3.config.yaxis[t4].axisTicks, t4, d3, l3), l3;
      } }, { key: "drawYaxisInversed", value: function(t4) {
        var e3 = this.w, i3 = new m2(this.ctx), a3 = i3.group({ class: "apexcharts-xaxis apexcharts-yaxis-inversed" }), s2 = i3.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(e3.globals.translateXAxisX, ", ").concat(e3.globals.translateXAxisY, ")") });
        a3.add(s2);
        var r3 = e3.globals.yAxisScale[t4].result.length - 1, o3 = e3.globals.gridWidth / r3 + 0.1, n3 = o3 + e3.config.xaxis.labels.offsetX, l3 = e3.globals.xLabelFormatter, h3 = e3.globals.yAxisScale[t4].result.slice(), c3 = e3.globals.timescaleLabels;
        c3.length > 0 && (this.xaxisLabels = c3.slice(), r3 = (h3 = c3.slice()).length), h3 = this.axesUtils.checkForReversedLabels(t4, h3);
        var d3 = c3.length;
        if (e3.config.xaxis.labels.show)
          for (var g3 = d3 ? 0 : r3; d3 ? g3 < d3 : g3 >= 0; d3 ? g3++ : g3--) {
            var u3 = h3[g3];
            u3 = l3(u3, g3, e3);
            var f3 = e3.globals.gridWidth + e3.globals.padHorizontal - (n3 - o3 + e3.config.xaxis.labels.offsetX);
            if (c3.length) {
              var p3 = this.axesUtils.getLabel(h3, c3, f3, g3, this.drawnLabels, this.xaxisFontSize);
              f3 = p3.x, u3 = p3.text, this.drawnLabels.push(p3.text), 0 === g3 && e3.globals.skipFirstTimelinelabel && (u3 = ""), g3 === h3.length - 1 && e3.globals.skipLastTimelinelabel && (u3 = "");
            }
            var x3 = i3.drawText({ x: f3, y: this.xAxisoffX + e3.config.xaxis.labels.offsetY + 30 - ("top" === e3.config.xaxis.position ? e3.globals.xAxisHeight + e3.config.xaxis.axisTicks.height - 2 : 0), text: u3, textAnchor: "middle", foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t4] : this.xaxisForeColors, fontSize: this.xaxisFontSize, fontFamily: this.xaxisFontFamily, fontWeight: e3.config.xaxis.labels.style.fontWeight, isPlainText: false, cssClass: "apexcharts-xaxis-label " + e3.config.xaxis.labels.style.cssClass });
            s2.add(x3), x3.tspan(u3);
            var b3 = document.createElementNS(e3.globals.SVGNS, "title");
            b3.textContent = u3, x3.node.appendChild(b3), n3 += o3;
          }
        return this.inversedYAxisTitleText(a3), this.inversedYAxisBorder(a3), a3;
      } }, { key: "inversedYAxisBorder", value: function(t4) {
        var e3 = this.w, i3 = new m2(this.ctx), a3 = e3.config.xaxis.axisBorder;
        if (a3.show) {
          var s2 = 0;
          "bar" === e3.config.chart.type && e3.globals.isXNumeric && (s2 -= 15);
          var r3 = i3.drawLine(e3.globals.padHorizontal + s2 + a3.offsetX, this.xAxisoffX, e3.globals.gridWidth, this.xAxisoffX, a3.color, 0, a3.height);
          this.elgrid && this.elgrid.elGridBorders ? this.elgrid.elGridBorders.add(r3) : t4.add(r3);
        }
      } }, { key: "inversedYAxisTitleText", value: function(t4) {
        var e3 = this.w, i3 = new m2(this.ctx);
        if (void 0 !== e3.config.xaxis.title.text) {
          var a3 = i3.group({ class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed" }), s2 = i3.drawText({ x: e3.globals.gridWidth / 2 + e3.config.xaxis.title.offsetX, y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e3.config.xaxis.title.style.fontSize) + e3.config.xaxis.title.offsetY + 20, text: e3.config.xaxis.title.text, textAnchor: "middle", fontSize: e3.config.xaxis.title.style.fontSize, fontFamily: e3.config.xaxis.title.style.fontFamily, fontWeight: e3.config.xaxis.title.style.fontWeight, foreColor: e3.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + e3.config.xaxis.title.style.cssClass });
          a3.add(s2), t4.add(a3);
        }
      } }, { key: "yAxisTitleRotate", value: function(t4, e3) {
        var i3 = this.w, a3 = new m2(this.ctx), s2 = { width: 0, height: 0 }, r3 = { width: 0, height: 0 }, o3 = i3.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t4, "'] .apexcharts-yaxis-texts-g"));
        null !== o3 && (s2 = o3.getBoundingClientRect());
        var n3 = i3.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t4, "'] .apexcharts-yaxis-title text"));
        if (null !== n3 && (r3 = n3.getBoundingClientRect()), null !== n3) {
          var l3 = this.xPaddingForYAxisTitle(t4, s2, r3, e3);
          n3.setAttribute("x", l3.xPos - (e3 ? 10 : 0));
        }
        if (null !== n3) {
          var h3 = a3.rotateAroundCenter(n3);
          n3.setAttribute("transform", "rotate(".concat(e3 ? -1 * i3.config.yaxis[t4].title.rotate : i3.config.yaxis[t4].title.rotate, " ").concat(h3.x, " ").concat(h3.y, ")"));
        }
      } }, { key: "xPaddingForYAxisTitle", value: function(t4, e3, i3, a3) {
        var s2 = this.w, r3 = 0, o3 = 0, n3 = 10;
        return void 0 === s2.config.yaxis[t4].title.text || t4 < 0 ? { xPos: o3, padd: 0 } : (a3 ? (o3 = e3.width + s2.config.yaxis[t4].title.offsetX + i3.width / 2 + n3 / 2, 0 === (r3 += 1) && (o3 -= n3 / 2)) : (o3 = -1 * e3.width + s2.config.yaxis[t4].title.offsetX + n3 / 2 + i3.width / 2, s2.globals.isBarHorizontal && (n3 = 25, o3 = -1 * e3.width - s2.config.yaxis[t4].title.offsetX - n3)), { xPos: o3, padd: n3 });
      } }, { key: "setYAxisXPosition", value: function(t4, e3) {
        var i3 = this.w, a3 = 0, s2 = 0, r3 = 18, o3 = 1;
        i3.config.yaxis.length > 1 && (this.multipleYs = true), i3.config.yaxis.map(function(n3, l3) {
          var h3 = i3.globals.ignoreYAxisIndexes.indexOf(l3) > -1 || !n3.show || n3.floating || 0 === t4[l3].width, c3 = t4[l3].width + e3[l3].width;
          n3.opposite ? i3.globals.isBarHorizontal ? (s2 = i3.globals.gridWidth + i3.globals.translateX - 1, i3.globals.translateYAxisX[l3] = s2 - n3.labels.offsetX) : (s2 = i3.globals.gridWidth + i3.globals.translateX + o3, h3 || (o3 = o3 + c3 + 20), i3.globals.translateYAxisX[l3] = s2 - n3.labels.offsetX + 20) : (a3 = i3.globals.translateX - r3, h3 || (r3 = r3 + c3 + 20), i3.globals.translateYAxisX[l3] = a3 + n3.labels.offsetX);
        });
      } }, { key: "setYAxisTextAlignments", value: function() {
        var t4 = this.w, e3 = t4.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");
        (e3 = x2.listToArray(e3)).forEach(function(e4, i3) {
          var a3 = t4.config.yaxis[i3];
          if (a3 && !a3.floating && void 0 !== a3.labels.align) {
            var s2 = t4.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i3, "'] .apexcharts-yaxis-texts-g")), r3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i3, "'] .apexcharts-yaxis-label"));
            r3 = x2.listToArray(r3);
            var o3 = s2.getBoundingClientRect();
            "left" === a3.labels.align ? (r3.forEach(function(t5, e5) {
              t5.setAttribute("text-anchor", "start");
            }), a3.opposite || s2.setAttribute("transform", "translate(-".concat(o3.width, ", 0)"))) : "center" === a3.labels.align ? (r3.forEach(function(t5, e5) {
              t5.setAttribute("text-anchor", "middle");
            }), s2.setAttribute("transform", "translate(".concat(o3.width / 2 * (a3.opposite ? 1 : -1), ", 0)"))) : "right" === a3.labels.align && (r3.forEach(function(t5, e5) {
              t5.setAttribute("text-anchor", "end");
            }), a3.opposite && s2.setAttribute("transform", "translate(".concat(o3.width, ", 0)")));
          }
        });
      } }]), t3;
    }(), Z2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.documentEvent = x2.bind(this.documentEvent, this);
      }
      return r2(t3, [{ key: "addEventListener", value: function(t4, e3) {
        var i3 = this.w;
        i3.globals.events.hasOwnProperty(t4) ? i3.globals.events[t4].push(e3) : i3.globals.events[t4] = [e3];
      } }, { key: "removeEventListener", value: function(t4, e3) {
        var i3 = this.w;
        if (i3.globals.events.hasOwnProperty(t4)) {
          var a3 = i3.globals.events[t4].indexOf(e3);
          -1 !== a3 && i3.globals.events[t4].splice(a3, 1);
        }
      } }, { key: "fireEvent", value: function(t4, e3) {
        var i3 = this.w;
        if (i3.globals.events.hasOwnProperty(t4)) {
          e3 && e3.length || (e3 = []);
          for (var a3 = i3.globals.events[t4], s2 = a3.length, r3 = 0; r3 < s2; r3++)
            a3[r3].apply(null, e3);
        }
      } }, { key: "setupEventHandlers", value: function() {
        var t4 = this, e3 = this.w, i3 = this.ctx, a3 = e3.globals.dom.baseEl.querySelector(e3.globals.chartClass);
        this.ctx.eventList.forEach(function(t5) {
          a3.addEventListener(t5, function(t6) {
            var a4 = Object.assign({}, e3, { seriesIndex: e3.globals.capturedSeriesIndex, dataPointIndex: e3.globals.capturedDataPointIndex });
            "mousemove" === t6.type || "touchmove" === t6.type ? "function" == typeof e3.config.chart.events.mouseMove && e3.config.chart.events.mouseMove(t6, i3, a4) : "mouseleave" === t6.type || "touchleave" === t6.type ? "function" == typeof e3.config.chart.events.mouseLeave && e3.config.chart.events.mouseLeave(t6, i3, a4) : ("mouseup" === t6.type && 1 === t6.which || "touchend" === t6.type) && ("function" == typeof e3.config.chart.events.click && e3.config.chart.events.click(t6, i3, a4), i3.ctx.events.fireEvent("click", [t6, i3, a4]));
          }, { capture: false, passive: true });
        }), this.ctx.eventList.forEach(function(i4) {
          e3.globals.dom.baseEl.addEventListener(i4, t4.documentEvent, { passive: true });
        }), this.ctx.core.setupBrushHandler();
      } }, { key: "documentEvent", value: function(t4) {
        var e3 = this.w, i3 = t4.target.className;
        if ("click" === t4.type) {
          var a3 = e3.globals.dom.baseEl.querySelector(".apexcharts-menu");
          a3 && a3.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i3 && a3.classList.remove("apexcharts-menu-open");
        }
        e3.globals.clientX = "touchmove" === t4.type ? t4.touches[0].clientX : t4.clientX, e3.globals.clientY = "touchmove" === t4.type ? t4.touches[0].clientY : t4.clientY;
      } }]), t3;
    }(), $2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "setCurrentLocaleValues", value: function(t4) {
        var e3 = this.w.config.chart.locales;
        window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e3 = this.w.config.chart.locales.concat(window.Apex.chart.locales));
        var i3 = e3.filter(function(e4) {
          return e4.name === t4;
        })[0];
        if (!i3)
          throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
        var a3 = x2.extend(C2, i3);
        this.w.globals.locale = a3.options;
      } }]), t3;
    }(), J2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "drawAxis", value: function(t4, e3) {
        var i3, a3, s2 = this, r3 = this.w.globals, o3 = this.w.config, n3 = new V2(this.ctx, e3), l3 = new q2(this.ctx, e3);
        r3.axisCharts && "radar" !== t4 && (r3.isBarHorizontal ? (a3 = l3.drawYaxisInversed(0), i3 = n3.drawXaxisInversed(0), r3.dom.elGraphical.add(i3), r3.dom.elGraphical.add(a3)) : (i3 = n3.drawXaxis(), r3.dom.elGraphical.add(i3), o3.yaxis.map(function(t5, e4) {
          if (-1 === r3.ignoreYAxisIndexes.indexOf(e4) && (a3 = l3.drawYaxis(e4), r3.dom.Paper.add(a3), "back" === s2.w.config.grid.position)) {
            var i4 = r3.dom.Paper.children()[1];
            i4.remove(), r3.dom.Paper.add(i4);
          }
        })));
      } }]), t3;
    }(), Q2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "drawXCrosshairs", value: function() {
        var t4 = this.w, e3 = new m2(this.ctx), i3 = new v2(this.ctx), a3 = t4.config.xaxis.crosshairs.fill.gradient, s2 = t4.config.xaxis.crosshairs.dropShadow, r3 = t4.config.xaxis.crosshairs.fill.type, o3 = a3.colorFrom, n3 = a3.colorTo, l3 = a3.opacityFrom, h3 = a3.opacityTo, c3 = a3.stops, d3 = s2.enabled, g3 = s2.left, u3 = s2.top, f3 = s2.blur, p3 = s2.color, b3 = s2.opacity, y2 = t4.config.xaxis.crosshairs.fill.color;
        if (t4.config.xaxis.crosshairs.show) {
          "gradient" === r3 && (y2 = e3.drawGradient("vertical", o3, n3, l3, h3, null, c3, null));
          var w2 = e3.drawRect();
          1 === t4.config.xaxis.crosshairs.width && (w2 = e3.drawLine());
          var k3 = t4.globals.gridHeight;
          (!x2.isNumber(k3) || k3 < 0) && (k3 = 0);
          var A3 = t4.config.xaxis.crosshairs.width;
          (!x2.isNumber(A3) || A3 < 0) && (A3 = 0), w2.attr({ class: "apexcharts-xcrosshairs", x: 0, y: 0, y2: k3, width: A3, height: k3, fill: y2, filter: "none", "fill-opacity": t4.config.xaxis.crosshairs.opacity, stroke: t4.config.xaxis.crosshairs.stroke.color, "stroke-width": t4.config.xaxis.crosshairs.stroke.width, "stroke-dasharray": t4.config.xaxis.crosshairs.stroke.dashArray }), d3 && (w2 = i3.dropShadow(w2, { left: g3, top: u3, blur: f3, color: p3, opacity: b3 })), t4.globals.dom.elGraphical.add(w2);
        }
      } }, { key: "drawYCrosshairs", value: function() {
        var t4 = this.w, e3 = new m2(this.ctx), i3 = t4.config.yaxis[0].crosshairs, a3 = t4.globals.barPadForNumericAxis;
        if (t4.config.yaxis[0].crosshairs.show) {
          var s2 = e3.drawLine(-a3, 0, t4.globals.gridWidth + a3, 0, i3.stroke.color, i3.stroke.dashArray, i3.stroke.width);
          s2.attr({ class: "apexcharts-ycrosshairs" }), t4.globals.dom.elGraphical.add(s2);
        }
        var r3 = e3.drawLine(-a3, 0, t4.globals.gridWidth + a3, 0, i3.stroke.color, 0, 0);
        r3.attr({ class: "apexcharts-ycrosshairs-hidden" }), t4.globals.dom.elGraphical.add(r3);
      } }]), t3;
    }(), K2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "checkResponsiveConfig", value: function(t4) {
        var e3 = this, i3 = this.w, a3 = i3.config;
        if (0 !== a3.responsive.length) {
          var s2 = a3.responsive.slice();
          s2.sort(function(t5, e4) {
            return t5.breakpoint > e4.breakpoint ? 1 : e4.breakpoint > t5.breakpoint ? -1 : 0;
          }).reverse();
          var r3 = new E2({}), o3 = function() {
            var t5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a4 = s2[0].breakpoint, o4 = window.innerWidth > 0 ? window.innerWidth : screen.width;
            if (o4 > a4) {
              var n4 = y.extendArrayProps(r3, i3.globals.initialConfig, i3);
              t5 = x2.extend(n4, t5), t5 = x2.extend(i3.config, t5), e3.overrideResponsiveOptions(t5);
            } else
              for (var l3 = 0; l3 < s2.length; l3++)
                o4 < s2[l3].breakpoint && (t5 = y.extendArrayProps(r3, s2[l3].options, i3), t5 = x2.extend(i3.config, t5), e3.overrideResponsiveOptions(t5));
          };
          if (t4) {
            var n3 = y.extendArrayProps(r3, t4, i3);
            n3 = x2.extend(i3.config, n3), o3(n3 = x2.extend(n3, t4));
          } else
            o3({});
        }
      } }, { key: "overrideResponsiveOptions", value: function(t4) {
        var e3 = new E2(t4).init({ responsiveOverride: true });
        this.w.config = e3;
      } }]), t3;
    }(), tt = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.colors = [], this.w = e3.w;
        var i3 = this.w;
        this.isColorFn = false, this.isHeatmapDistributed = "treemap" === i3.config.chart.type && i3.config.plotOptions.treemap.distributed || "heatmap" === i3.config.chart.type && i3.config.plotOptions.heatmap.distributed, this.isBarDistributed = i3.config.plotOptions.bar.distributed && ("bar" === i3.config.chart.type || "rangeBar" === i3.config.chart.type);
      }
      return r2(t3, [{ key: "init", value: function() {
        this.setDefaultColors();
      } }, { key: "setDefaultColors", value: function() {
        var t4 = this, e3 = this.w, i3 = new x2();
        if (e3.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(e3.config.theme.mode)), void 0 === e3.config.colors ? e3.globals.colors = this.predefined() : (e3.globals.colors = e3.config.colors, Array.isArray(e3.config.colors) && e3.config.colors.length > 0 && "function" == typeof e3.config.colors[0] && (e3.globals.colors = e3.config.series.map(function(i4, a4) {
          var s3 = e3.config.colors[a4];
          return s3 || (s3 = e3.config.colors[0]), "function" == typeof s3 ? (t4.isColorFn = true, s3({ value: e3.globals.axisCharts ? e3.globals.series[a4][0] ? e3.globals.series[a4][0] : 0 : e3.globals.series[a4], seriesIndex: a4, dataPointIndex: a4, w: e3 })) : s3;
        }))), e3.globals.seriesColors.map(function(t5, i4) {
          t5 && (e3.globals.colors[i4] = t5);
        }), e3.config.theme.monochrome.enabled) {
          var a3 = [], s2 = e3.globals.series.length;
          (this.isBarDistributed || this.isHeatmapDistributed) && (s2 = e3.globals.series[0].length * e3.globals.series.length);
          for (var r3 = e3.config.theme.monochrome.color, o3 = 1 / (s2 / e3.config.theme.monochrome.shadeIntensity), n3 = e3.config.theme.monochrome.shadeTo, l3 = 0, h3 = 0; h3 < s2; h3++) {
            var c3 = void 0;
            "dark" === n3 ? (c3 = i3.shadeColor(-1 * l3, r3), l3 += o3) : (c3 = i3.shadeColor(l3, r3), l3 += o3), a3.push(c3);
          }
          e3.globals.colors = a3.slice();
        }
        var d3 = e3.globals.colors.slice();
        this.pushExtraColors(e3.globals.colors);
        ["fill", "stroke"].forEach(function(i4) {
          void 0 === e3.config[i4].colors ? e3.globals[i4].colors = t4.isColorFn ? e3.config.colors : d3 : e3.globals[i4].colors = e3.config[i4].colors.slice(), t4.pushExtraColors(e3.globals[i4].colors);
        }), void 0 === e3.config.dataLabels.style.colors ? e3.globals.dataLabels.style.colors = d3 : e3.globals.dataLabels.style.colors = e3.config.dataLabels.style.colors.slice(), this.pushExtraColors(e3.globals.dataLabels.style.colors, 50), void 0 === e3.config.plotOptions.radar.polygons.fill.colors ? e3.globals.radarPolygons.fill.colors = ["dark" === e3.config.theme.mode ? "#424242" : "none"] : e3.globals.radarPolygons.fill.colors = e3.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(e3.globals.radarPolygons.fill.colors, 20), void 0 === e3.config.markers.colors ? e3.globals.markers.colors = d3 : e3.globals.markers.colors = e3.config.markers.colors.slice(), this.pushExtraColors(e3.globals.markers.colors);
      } }, { key: "pushExtraColors", value: function(t4, e3) {
        var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = this.w, s2 = e3 || a3.globals.series.length;
        if (null === i3 && (i3 = this.isBarDistributed || this.isHeatmapDistributed || "heatmap" === a3.config.chart.type && a3.config.plotOptions.heatmap.colorScale.inverse), i3 && a3.globals.series.length && (s2 = a3.globals.series[a3.globals.maxValsInArrayIndex].length * a3.globals.series.length), t4.length < s2)
          for (var r3 = s2 - t4.length, o3 = 0; o3 < r3; o3++)
            t4.push(t4[o3]);
      } }, { key: "updateThemeOptions", value: function(t4) {
        t4.chart = t4.chart || {}, t4.tooltip = t4.tooltip || {};
        var e3 = t4.theme.mode || "light", i3 = t4.theme.palette ? t4.theme.palette : "dark" === e3 ? "palette4" : "palette1", a3 = t4.chart.foreColor ? t4.chart.foreColor : "dark" === e3 ? "#f6f7f8" : "#373d3f";
        return t4.tooltip.theme = e3, t4.chart.foreColor = a3, t4.theme.palette = i3, t4;
      } }, { key: "predefined", value: function() {
        switch (this.w.config.theme.palette) {
          case "palette1":
          default:
            this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
            break;
          case "palette2":
            this.colors = ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"];
            break;
          case "palette3":
            this.colors = ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"];
            break;
          case "palette4":
            this.colors = ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"];
            break;
          case "palette5":
            this.colors = ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"];
            break;
          case "palette6":
            this.colors = ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"];
            break;
          case "palette7":
            this.colors = ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"];
            break;
          case "palette8":
            this.colors = ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"];
            break;
          case "palette9":
            this.colors = ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"];
            break;
          case "palette10":
            this.colors = ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"];
        }
        return this.colors;
      } }]), t3;
    }(), et = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "draw", value: function() {
        this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
      } }, { key: "drawTitleSubtitle", value: function(t4) {
        var e3 = this.w, i3 = "title" === t4 ? e3.config.title : e3.config.subtitle, a3 = e3.globals.svgWidth / 2, s2 = i3.offsetY, r3 = "middle";
        if ("left" === i3.align ? (a3 = 10, r3 = "start") : "right" === i3.align && (a3 = e3.globals.svgWidth - 10, r3 = "end"), a3 += i3.offsetX, s2 = s2 + parseInt(i3.style.fontSize, 10) + i3.margin / 2, void 0 !== i3.text) {
          var o3 = new m2(this.ctx).drawText({ x: a3, y: s2, text: i3.text, textAnchor: r3, fontSize: i3.style.fontSize, fontFamily: i3.style.fontFamily, fontWeight: i3.style.fontWeight, foreColor: i3.style.color, opacity: 1 });
          o3.node.setAttribute("class", "apexcharts-".concat(t4, "-text")), e3.globals.dom.Paper.add(o3);
        }
      } }]), t3;
    }(), it2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.dCtx = e3;
      }
      return r2(t3, [{ key: "getTitleSubtitleCoords", value: function(t4) {
        var e3 = this.w, i3 = 0, a3 = 0, s2 = "title" === t4 ? e3.config.title.floating : e3.config.subtitle.floating, r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-".concat(t4, "-text"));
        if (null !== r3 && !s2) {
          var o3 = r3.getBoundingClientRect();
          i3 = o3.width, a3 = e3.globals.axisCharts ? o3.height + 5 : o3.height;
        }
        return { width: i3, height: a3 };
      } }, { key: "getLegendsRect", value: function() {
        var t4 = this.w, e3 = t4.globals.dom.baseEl.querySelector(".apexcharts-legend");
        t4.config.legend.height || "top" !== t4.config.legend.position && "bottom" !== t4.config.legend.position || (e3.style.maxHeight = t4.globals.svgHeight / 2 + "px");
        var i3 = Object.assign({}, x2.getBoundingClientRect(e3));
        return null !== e3 && !t4.config.legend.floating && t4.config.legend.show ? this.dCtx.lgRect = { x: i3.x, y: i3.y, height: i3.height, width: 0 === i3.height ? 0 : i3.width } : this.dCtx.lgRect = { x: 0, y: 0, height: 0, width: 0 }, "left" !== t4.config.legend.position && "right" !== t4.config.legend.position || 1.5 * this.dCtx.lgRect.width > t4.globals.svgWidth && (this.dCtx.lgRect.width = t4.globals.svgWidth / 1.5), this.dCtx.lgRect;
      } }, { key: "getLargestStringFromMultiArr", value: function(t4, e3) {
        var i3 = t4;
        if (this.w.globals.isMultiLineX) {
          var a3 = e3.map(function(t5, e4) {
            return Array.isArray(t5) ? t5.length : 1;
          }), s2 = Math.max.apply(Math, u2(a3));
          i3 = e3[a3.indexOf(s2)];
        }
        return i3;
      } }]), t3;
    }(), at = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.dCtx = e3;
      }
      return r2(t3, [{ key: "getxAxisLabelsCoords", value: function() {
        var t4, e3 = this.w, i3 = e3.globals.labels.slice();
        if (e3.config.xaxis.convertedCatToNumeric && 0 === i3.length && (i3 = e3.globals.categoryLabels), e3.globals.timescaleLabels.length > 0) {
          var a3 = this.getxAxisTimeScaleLabelsCoords();
          t4 = { width: a3.width, height: a3.height }, e3.globals.rotateXLabels = false;
        } else {
          this.dCtx.lgWidthForSideLegends = "left" !== e3.config.legend.position && "right" !== e3.config.legend.position || e3.config.legend.floating ? 0 : this.dCtx.lgRect.width;
          var s2 = e3.globals.xLabelFormatter, r3 = x2.getLargestStringFromArr(i3), o3 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r3, i3);
          e3.globals.isBarHorizontal && (o3 = r3 = e3.globals.yAxisScale[0].result.reduce(function(t5, e4) {
            return t5.length > e4.length ? t5 : e4;
          }, 0));
          var n3 = new M2(this.dCtx.ctx), l3 = r3;
          r3 = n3.xLabelFormat(s2, r3, l3, { i: void 0, dateFormatter: new T2(this.dCtx.ctx).formatDate, w: e3 }), o3 = n3.xLabelFormat(s2, o3, l3, { i: void 0, dateFormatter: new T2(this.dCtx.ctx).formatDate, w: e3 }), (e3.config.xaxis.convertedCatToNumeric && void 0 === r3 || "" === String(r3).trim()) && (o3 = r3 = "1");
          var h3 = new m2(this.dCtx.ctx), c3 = h3.getTextRects(r3, e3.config.xaxis.labels.style.fontSize), d3 = c3;
          if (r3 !== o3 && (d3 = h3.getTextRects(o3, e3.config.xaxis.labels.style.fontSize)), (t4 = { width: c3.width >= d3.width ? c3.width : d3.width, height: c3.height >= d3.height ? c3.height : d3.height }).width * i3.length > e3.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e3.config.xaxis.labels.rotate || e3.config.xaxis.labels.rotateAlways) {
            if (!e3.globals.isBarHorizontal) {
              e3.globals.rotateXLabels = true;
              var g3 = function(t5) {
                return h3.getTextRects(t5, e3.config.xaxis.labels.style.fontSize, e3.config.xaxis.labels.style.fontFamily, "rotate(".concat(e3.config.xaxis.labels.rotate, " 0 0)"), false);
              };
              c3 = g3(r3), r3 !== o3 && (d3 = g3(o3)), t4.height = (c3.height > d3.height ? c3.height : d3.height) / 1.5, t4.width = c3.width > d3.width ? c3.width : d3.width;
            }
          } else
            e3.globals.rotateXLabels = false;
        }
        return e3.config.xaxis.labels.show || (t4 = { width: 0, height: 0 }), { width: t4.width, height: t4.height };
      } }, { key: "getxAxisGroupLabelsCoords", value: function() {
        var t4, e3 = this.w;
        if (!e3.globals.hasGroups)
          return { width: 0, height: 0 };
        var i3, a3 = (null === (t4 = e3.config.xaxis.group.style) || void 0 === t4 ? void 0 : t4.fontSize) || e3.config.xaxis.labels.style.fontSize, s2 = e3.globals.groups.map(function(t5) {
          return t5.title;
        }), r3 = x2.getLargestStringFromArr(s2), o3 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r3, s2), n3 = new m2(this.dCtx.ctx), l3 = n3.getTextRects(r3, a3), h3 = l3;
        return r3 !== o3 && (h3 = n3.getTextRects(o3, a3)), i3 = { width: l3.width >= h3.width ? l3.width : h3.width, height: l3.height >= h3.height ? l3.height : h3.height }, e3.config.xaxis.labels.show || (i3 = { width: 0, height: 0 }), { width: i3.width, height: i3.height };
      } }, { key: "getxAxisTitleCoords", value: function() {
        var t4 = this.w, e3 = 0, i3 = 0;
        if (void 0 !== t4.config.xaxis.title.text) {
          var a3 = new m2(this.dCtx.ctx).getTextRects(t4.config.xaxis.title.text, t4.config.xaxis.title.style.fontSize);
          e3 = a3.width, i3 = a3.height;
        }
        return { width: e3, height: i3 };
      } }, { key: "getxAxisTimeScaleLabelsCoords", value: function() {
        var t4, e3 = this.w;
        this.dCtx.timescaleLabels = e3.globals.timescaleLabels.slice();
        var i3 = this.dCtx.timescaleLabels.map(function(t5) {
          return t5.value;
        }), a3 = i3.reduce(function(t5, e4) {
          return void 0 === t5 ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t5.length > e4.length ? t5 : e4;
        }, 0);
        return 1.05 * (t4 = new m2(this.dCtx.ctx).getTextRects(a3, e3.config.xaxis.labels.style.fontSize)).width * i3.length > e3.globals.gridWidth && 0 !== e3.config.xaxis.labels.rotate && (e3.globals.overlappingXLabels = true), t4;
      } }, { key: "additionalPaddingXLabels", value: function(t4) {
        var e3 = this, i3 = this.w, a3 = i3.globals, s2 = i3.config, r3 = s2.xaxis.type, o3 = t4.width;
        a3.skipLastTimelinelabel = false, a3.skipFirstTimelinelabel = false;
        var n3 = i3.config.yaxis[0].opposite && i3.globals.isBarHorizontal, l3 = function(t5, n4) {
          (function(t6) {
            return -1 !== a3.collapsedSeriesIndices.indexOf(t6);
          })(n4) || function(t6) {
            if (e3.dCtx.timescaleLabels && e3.dCtx.timescaleLabels.length) {
              var n5 = e3.dCtx.timescaleLabels[0], l4 = e3.dCtx.timescaleLabels[e3.dCtx.timescaleLabels.length - 1].position + o3 / 1.75 - e3.dCtx.yAxisWidthRight, h3 = n5.position - o3 / 1.75 + e3.dCtx.yAxisWidthLeft, c3 = "right" === i3.config.legend.position && e3.dCtx.lgRect.width > 0 ? e3.dCtx.lgRect.width : 0;
              l4 > a3.svgWidth - a3.translateX - c3 && (a3.skipLastTimelinelabel = true), h3 < -(t6.show && !t6.floating || "bar" !== s2.chart.type && "candlestick" !== s2.chart.type && "rangeBar" !== s2.chart.type && "boxPlot" !== s2.chart.type ? 10 : o3 / 1.75) && (a3.skipFirstTimelinelabel = true);
            } else
              "datetime" === r3 ? e3.dCtx.gridPad.right < o3 && !a3.rotateXLabels && (a3.skipLastTimelinelabel = true) : "datetime" !== r3 && e3.dCtx.gridPad.right < o3 / 2 - e3.dCtx.yAxisWidthRight && !a3.rotateXLabels && !i3.config.xaxis.labels.trim && ("between" !== i3.config.xaxis.tickPlacement || i3.globals.isBarHorizontal) && (e3.dCtx.xPadRight = o3 / 2 + 1);
          }(t5);
        };
        s2.yaxis.forEach(function(t5, i4) {
          n3 ? (e3.dCtx.gridPad.left < o3 && (e3.dCtx.xPadLeft = o3 / 2 + 1), e3.dCtx.xPadRight = o3 / 2 + 1) : l3(t5, i4);
        });
      } }]), t3;
    }(), st2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.dCtx = e3;
      }
      return r2(t3, [{ key: "getyAxisLabelsCoords", value: function() {
        var t4 = this, e3 = this.w, i3 = [], a3 = 10, s2 = new B(this.dCtx.ctx);
        return e3.config.yaxis.map(function(r3, o3) {
          var n3 = e3.globals.yAxisScale[o3], l3 = 0;
          if (!s2.isYAxisHidden(o3) && r3.labels.show && void 0 !== r3.labels.minWidth && (l3 = r3.labels.minWidth), !s2.isYAxisHidden(o3) && r3.labels.show && n3.result.length) {
            var h3 = e3.globals.yLabelFormatters[o3], c3 = n3.niceMin === Number.MIN_VALUE ? 0 : n3.niceMin, d3 = String(c3).length > String(n3.niceMax).length ? c3 : n3.niceMax, g3 = h3(d3, { seriesIndex: o3, dataPointIndex: -1, w: e3 }), u3 = g3;
            if (void 0 !== g3 && 0 !== g3.length || (g3 = d3), e3.globals.isBarHorizontal) {
              a3 = 0;
              var f3 = e3.globals.labels.slice();
              g3 = h3(g3 = x2.getLargestStringFromArr(f3), { seriesIndex: o3, dataPointIndex: -1, w: e3 }), u3 = t4.dCtx.dimHelpers.getLargestStringFromMultiArr(g3, f3);
            }
            var p3 = new m2(t4.dCtx.ctx), b3 = "rotate(".concat(r3.labels.rotate, " 0 0)"), v3 = p3.getTextRects(g3, r3.labels.style.fontSize, r3.labels.style.fontFamily, b3, false), y2 = v3;
            g3 !== u3 && (y2 = p3.getTextRects(u3, r3.labels.style.fontSize, r3.labels.style.fontFamily, b3, false)), i3.push({ width: (l3 > y2.width || l3 > v3.width ? l3 : y2.width > v3.width ? y2.width : v3.width) + a3, height: y2.height > v3.height ? y2.height : v3.height });
          } else
            i3.push({ width: 0, height: 0 });
        }), i3;
      } }, { key: "getyAxisTitleCoords", value: function() {
        var t4 = this, e3 = this.w, i3 = [];
        return e3.config.yaxis.map(function(e4, a3) {
          if (e4.show && void 0 !== e4.title.text) {
            var s2 = new m2(t4.dCtx.ctx), r3 = "rotate(".concat(e4.title.rotate, " 0 0)"), o3 = s2.getTextRects(e4.title.text, e4.title.style.fontSize, e4.title.style.fontFamily, r3, false);
            i3.push({ width: o3.width, height: o3.height });
          } else
            i3.push({ width: 0, height: 0 });
        }), i3;
      } }, { key: "getTotalYAxisWidth", value: function() {
        var t4 = this.w, e3 = 0, i3 = 0, a3 = 0, s2 = t4.globals.yAxisScale.length > 1 ? 10 : 0, r3 = new B(this.dCtx.ctx), o3 = function(o4, n3) {
          var l3 = t4.config.yaxis[n3].floating, h3 = 0;
          o4.width > 0 && !l3 ? (h3 = o4.width + s2, function(e4) {
            return t4.globals.ignoreYAxisIndexes.indexOf(e4) > -1;
          }(n3) && (h3 = h3 - o4.width - s2)) : h3 = l3 || r3.isYAxisHidden(n3) ? 0 : 5, t4.config.yaxis[n3].opposite ? a3 += h3 : i3 += h3, e3 += h3;
        };
        return t4.globals.yLabelsCoords.map(function(t5, e4) {
          o3(t5, e4);
        }), t4.globals.yTitleCoords.map(function(t5, e4) {
          o3(t5, e4);
        }), t4.globals.isBarHorizontal && !t4.config.yaxis[0].floating && (e3 = t4.globals.yLabelsCoords[0].width + t4.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i3, this.dCtx.yAxisWidthRight = a3, e3;
      } }]), t3;
    }(), rt = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.dCtx = e3;
      }
      return r2(t3, [{ key: "gridPadForColumnsInNumericAxis", value: function(t4) {
        var e3 = this.w;
        if (e3.globals.noData || e3.globals.allSeriesCollapsed)
          return 0;
        var i3 = function(t5) {
          return "bar" === t5 || "rangeBar" === t5 || "candlestick" === t5 || "boxPlot" === t5;
        }, a3 = e3.config.chart.type, s2 = 0, r3 = i3(a3) ? e3.config.series.length : 1;
        if (e3.globals.comboBarCount > 0 && (r3 = e3.globals.comboBarCount), e3.globals.collapsedSeries.forEach(function(t5) {
          i3(t5.type) && (r3 -= 1);
        }), e3.config.chart.stacked && (r3 = 1), (i3(a3) || e3.globals.comboBarCount > 0) && e3.globals.isXNumeric && !e3.globals.isBarHorizontal && r3 > 0) {
          var o3, n3, l3 = Math.abs(e3.globals.initialMaxX - e3.globals.initialMinX);
          l3 <= 3 && (l3 = e3.globals.dataPoints), o3 = l3 / t4, e3.globals.minXDiff && e3.globals.minXDiff / o3 > 0 && (n3 = e3.globals.minXDiff / o3), n3 > t4 / 2 && (n3 /= 2), (s2 = n3 / r3 * parseInt(e3.config.plotOptions.bar.columnWidth, 10) / 100) < 1 && (s2 = 1), s2 = s2 / (r3 > 1 ? 1 : 1.5) + 5, e3.globals.barPadForNumericAxis = s2;
        }
        return s2;
      } }, { key: "gridPadFortitleSubtitle", value: function() {
        var t4 = this, e3 = this.w, i3 = e3.globals, a3 = this.dCtx.isSparkline || !e3.globals.axisCharts ? 0 : 10;
        ["title", "subtitle"].forEach(function(i4) {
          void 0 !== e3.config[i4].text ? a3 += e3.config[i4].margin : a3 += t4.dCtx.isSparkline || !e3.globals.axisCharts ? 0 : 5;
        }), !e3.config.legend.show || "bottom" !== e3.config.legend.position || e3.config.legend.floating || e3.globals.axisCharts || (a3 += 10);
        var s2 = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"), r3 = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
        i3.gridHeight = i3.gridHeight - s2.height - r3.height - a3, i3.translateY = i3.translateY + s2.height + r3.height + a3;
      } }, { key: "setGridXPosForDualYAxis", value: function(t4, e3) {
        var i3 = this.w, a3 = new B(this.dCtx.ctx);
        i3.config.yaxis.map(function(s2, r3) {
          -1 !== i3.globals.ignoreYAxisIndexes.indexOf(r3) || s2.floating || a3.isYAxisHidden(r3) || (s2.opposite && (i3.globals.translateX = i3.globals.translateX - (e3[r3].width + t4[r3].width) - parseInt(i3.config.yaxis[r3].labels.style.fontSize, 10) / 1.2 - 12), i3.globals.translateX < 2 && (i3.globals.translateX = 2));
        });
      } }]), t3;
    }(), ot2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new it2(this), this.dimYAxis = new st2(this), this.dimXAxis = new at(this), this.dimGrid = new rt(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;
      }
      return r2(t3, [{ key: "plotCoords", value: function() {
        var t4 = this, e3 = this.w, i3 = e3.globals;
        this.lgRect = this.dimHelpers.getLegendsRect(), this.isSparkline && (e3.config.markers.discrete.length > 0 || e3.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function(e4) {
          var i4 = g2(e4, 2), a4 = i4[0], s2 = i4[1];
          t4.gridPad[a4] = Math.max(s2, t4.w.globals.markers.largestSize / 1.5);
        }), i3.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i3.gridHeight = i3.gridHeight - this.gridPad.top - this.gridPad.bottom, i3.gridWidth = i3.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
        var a3 = this.dimGrid.gridPadForColumnsInNumericAxis(i3.gridWidth);
        i3.gridWidth = i3.gridWidth - 2 * a3, i3.translateX = i3.translateX + this.gridPad.left + this.xPadLeft + (a3 > 0 ? a3 + 4 : 0), i3.translateY = i3.translateY + this.gridPad.top;
      } }, { key: "setDimensionsForAxisCharts", value: function() {
        var t4 = this, e3 = this.w, i3 = e3.globals, a3 = this.dimYAxis.getyAxisLabelsCoords(), s2 = this.dimYAxis.getyAxisTitleCoords();
        e3.globals.yLabelsCoords = [], e3.globals.yTitleCoords = [], e3.config.yaxis.map(function(t5, i4) {
          e3.globals.yLabelsCoords.push({ width: a3[i4].width, index: i4 }), e3.globals.yTitleCoords.push({ width: s2[i4].width, index: i4 });
        }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
        var r3 = this.dimXAxis.getxAxisLabelsCoords(), o3 = this.dimXAxis.getxAxisGroupLabelsCoords(), n3 = this.dimXAxis.getxAxisTitleCoords();
        this.conditionalChecksForAxisCoords(r3, n3, o3), i3.translateXAxisY = e3.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i3.translateXAxisX = e3.globals.rotateXLabels && e3.globals.isXNumeric && e3.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e3.globals.isBarHorizontal && (i3.rotateXLabels = false, i3.translateXAxisY = parseInt(e3.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i3.translateXAxisY = i3.translateXAxisY + e3.config.xaxis.labels.offsetY, i3.translateXAxisX = i3.translateXAxisX + e3.config.xaxis.labels.offsetX;
        var l3 = this.yAxisWidth, h3 = this.xAxisHeight;
        i3.xAxisLabelsHeight = this.xAxisHeight - n3.height, i3.xAxisGroupLabelsHeight = i3.xAxisLabelsHeight - r3.height, i3.xAxisLabelsWidth = this.xAxisWidth, i3.xAxisHeight = this.xAxisHeight;
        var c3 = 10;
        ("radar" === e3.config.chart.type || this.isSparkline) && (l3 = 0, h3 = i3.goldenPadding), this.isSparkline && (this.lgRect = { height: 0, width: 0 }), (this.isSparkline || "treemap" === e3.config.chart.type) && (l3 = 0, h3 = 0, c3 = 0), this.isSparkline || this.dimXAxis.additionalPaddingXLabels(r3);
        var d3 = function() {
          i3.translateX = l3, i3.gridHeight = i3.svgHeight - t4.lgRect.height - h3 - (t4.isSparkline || "treemap" === e3.config.chart.type ? 0 : e3.globals.rotateXLabels ? 10 : 15), i3.gridWidth = i3.svgWidth - l3;
        };
        switch ("top" === e3.config.xaxis.position && (c3 = i3.xAxisHeight - e3.config.xaxis.axisTicks.height - 5), e3.config.legend.position) {
          case "bottom":
            i3.translateY = c3, d3();
            break;
          case "top":
            i3.translateY = this.lgRect.height + c3, d3();
            break;
          case "left":
            i3.translateY = c3, i3.translateX = this.lgRect.width + l3, i3.gridHeight = i3.svgHeight - h3 - 12, i3.gridWidth = i3.svgWidth - this.lgRect.width - l3;
            break;
          case "right":
            i3.translateY = c3, i3.translateX = l3, i3.gridHeight = i3.svgHeight - h3 - 12, i3.gridWidth = i3.svgWidth - this.lgRect.width - l3 - 5;
            break;
          default:
            throw new Error("Legend position not supported");
        }
        this.dimGrid.setGridXPosForDualYAxis(s2, a3), new q2(this.ctx).setYAxisXPosition(a3, s2);
      } }, { key: "setDimensionsForNonAxisCharts", value: function() {
        var t4 = this.w, e3 = t4.globals, i3 = t4.config, a3 = 0;
        t4.config.legend.show && !t4.config.legend.floating && (a3 = 20);
        var s2 = "pie" === i3.chart.type || "polarArea" === i3.chart.type || "donut" === i3.chart.type ? "pie" : "radialBar", r3 = i3.plotOptions[s2].offsetY, o3 = i3.plotOptions[s2].offsetX;
        if (!i3.legend.show || i3.legend.floating)
          return e3.gridHeight = e3.svgHeight - i3.grid.padding.left + i3.grid.padding.right, e3.gridWidth = e3.gridHeight, e3.translateY = r3, void (e3.translateX = o3 + (e3.svgWidth - e3.gridWidth) / 2);
        switch (i3.legend.position) {
          case "bottom":
            e3.gridHeight = e3.svgHeight - this.lgRect.height - e3.goldenPadding, e3.gridWidth = e3.svgWidth, e3.translateY = r3 - 10, e3.translateX = o3 + (e3.svgWidth - e3.gridWidth) / 2;
            break;
          case "top":
            e3.gridHeight = e3.svgHeight - this.lgRect.height - e3.goldenPadding, e3.gridWidth = e3.svgWidth, e3.translateY = this.lgRect.height + r3 + 10, e3.translateX = o3 + (e3.svgWidth - e3.gridWidth) / 2;
            break;
          case "left":
            e3.gridWidth = e3.svgWidth - this.lgRect.width - a3, e3.gridHeight = "auto" !== i3.chart.height ? e3.svgHeight : e3.gridWidth, e3.translateY = r3, e3.translateX = o3 + this.lgRect.width + a3;
            break;
          case "right":
            e3.gridWidth = e3.svgWidth - this.lgRect.width - a3 - 5, e3.gridHeight = "auto" !== i3.chart.height ? e3.svgHeight : e3.gridWidth, e3.translateY = r3, e3.translateX = o3 + 10;
            break;
          default:
            throw new Error("Legend position not supported");
        }
      } }, { key: "conditionalChecksForAxisCoords", value: function(t4, e3, i3) {
        var a3 = this.w, s2 = a3.globals.hasGroups ? 2 : 1, r3 = i3.height + t4.height + e3.height, o3 = a3.globals.isMultiLineX ? 1.2 : a3.globals.LINE_HEIGHT_RATIO, n3 = a3.globals.rotateXLabels ? 22 : 10, l3 = a3.globals.rotateXLabels && "bottom" === a3.config.legend.position ? 10 : 0;
        this.xAxisHeight = r3 * o3 + s2 * n3 + l3, this.xAxisWidth = t4.width, this.xAxisHeight - e3.height > a3.config.xaxis.labels.maxHeight && (this.xAxisHeight = a3.config.xaxis.labels.maxHeight), a3.config.xaxis.labels.minHeight && this.xAxisHeight < a3.config.xaxis.labels.minHeight && (this.xAxisHeight = a3.config.xaxis.labels.minHeight), a3.config.xaxis.floating && (this.xAxisHeight = 0);
        var h3 = 0, c3 = 0;
        a3.config.yaxis.forEach(function(t5) {
          h3 += t5.labels.minWidth, c3 += t5.labels.maxWidth;
        }), this.yAxisWidth < h3 && (this.yAxisWidth = h3), this.yAxisWidth > c3 && (this.yAxisWidth = c3);
      } }]), t3;
    }(), nt2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.lgCtx = e3;
      }
      return r2(t3, [{ key: "getLegendBBox", value: function() {
        var t4 = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(), e3 = t4.width;
        return { clwh: t4.height, clww: e3 };
      } }, { key: "toggleDataSeries", value: function(t4, e3) {
        var i3 = this, a3 = this.w;
        if (a3.globals.axisCharts || "radialBar" === a3.config.chart.type) {
          a3.globals.resized = true;
          var s2 = null, r3 = null;
          if (a3.globals.risingSeries = [], a3.globals.axisCharts ? (s2 = a3.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t4, "']")), r3 = parseInt(s2.getAttribute("data:realIndex"), 10)) : (s2 = a3.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t4 + 1, "']")), r3 = parseInt(s2.getAttribute("rel"), 10) - 1), e3)
            [{ cs: a3.globals.collapsedSeries, csi: a3.globals.collapsedSeriesIndices }, { cs: a3.globals.ancillaryCollapsedSeries, csi: a3.globals.ancillaryCollapsedSeriesIndices }].forEach(function(t5) {
              i3.riseCollapsedSeries(t5.cs, t5.csi, r3);
            });
          else
            this.hideSeries({ seriesEl: s2, realIndex: r3 });
        } else {
          var o3 = a3.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t4 + 1, "'] path")), n3 = a3.config.chart.type;
          if ("pie" === n3 || "polarArea" === n3 || "donut" === n3) {
            var l3 = a3.config.plotOptions.pie.donut.labels;
            new m2(this.lgCtx.ctx).pathMouseDown(o3.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o3.members[0].node, l3);
          }
          o3.fire("click");
        }
      } }, { key: "hideSeries", value: function(t4) {
        var e3 = t4.seriesEl, i3 = t4.realIndex, a3 = this.w, s2 = x2.clone(a3.config.series);
        if (a3.globals.axisCharts) {
          var r3 = false;
          if (a3.config.yaxis[i3] && a3.config.yaxis[i3].show && a3.config.yaxis[i3].showAlways && (r3 = true, a3.globals.ancillaryCollapsedSeriesIndices.indexOf(i3) < 0 && (a3.globals.ancillaryCollapsedSeries.push({ index: i3, data: s2[i3].data.slice(), type: e3.parentNode.className.baseVal.split("-")[1] }), a3.globals.ancillaryCollapsedSeriesIndices.push(i3))), !r3) {
            a3.globals.collapsedSeries.push({ index: i3, data: s2[i3].data.slice(), type: e3.parentNode.className.baseVal.split("-")[1] }), a3.globals.collapsedSeriesIndices.push(i3);
            var o3 = a3.globals.risingSeries.indexOf(i3);
            a3.globals.risingSeries.splice(o3, 1);
          }
        } else
          a3.globals.collapsedSeries.push({ index: i3, data: s2[i3] }), a3.globals.collapsedSeriesIndices.push(i3);
        for (var n3 = e3.childNodes, l3 = 0; l3 < n3.length; l3++)
          n3[l3].classList.contains("apexcharts-series-markers-wrap") && (n3[l3].classList.contains("apexcharts-hide") ? n3[l3].classList.remove("apexcharts-hide") : n3[l3].classList.add("apexcharts-hide"));
        a3.globals.allSeriesCollapsed = a3.globals.collapsedSeries.length === a3.config.series.length, s2 = this._getSeriesBasedOnCollapsedState(s2), this.lgCtx.ctx.updateHelpers._updateSeries(s2, a3.config.chart.animations.dynamicAnimation.enabled);
      } }, { key: "riseCollapsedSeries", value: function(t4, e3, i3) {
        var a3 = this.w, s2 = x2.clone(a3.config.series);
        if (t4.length > 0) {
          for (var r3 = 0; r3 < t4.length; r3++)
            t4[r3].index === i3 && (a3.globals.axisCharts ? (s2[i3].data = t4[r3].data.slice(), t4.splice(r3, 1), e3.splice(r3, 1), a3.globals.risingSeries.push(i3)) : (s2[i3] = t4[r3].data, t4.splice(r3, 1), e3.splice(r3, 1), a3.globals.risingSeries.push(i3)));
          s2 = this._getSeriesBasedOnCollapsedState(s2), this.lgCtx.ctx.updateHelpers._updateSeries(s2, a3.config.chart.animations.dynamicAnimation.enabled);
        }
      } }, { key: "_getSeriesBasedOnCollapsedState", value: function(t4) {
        var e3 = this.w;
        return e3.globals.axisCharts ? t4.forEach(function(i3, a3) {
          e3.globals.collapsedSeriesIndices.indexOf(a3) > -1 && (t4[a3].data = []);
        }) : t4.forEach(function(i3, a3) {
          e3.globals.collapsedSeriesIndices.indexOf(a3) > -1 && (t4[a3] = 0);
        }), t4;
      } }]), t3;
    }(), lt2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new nt2(this);
      }
      return r2(t3, [{ key: "init", value: function() {
        var t4 = this.w, e3 = t4.globals, i3 = t4.config;
        if ((i3.legend.showForSingleSeries && 1 === e3.series.length || this.isBarsDistributed || e3.series.length > 1 || !e3.axisCharts) && i3.legend.show) {
          for (; e3.dom.elLegendWrap.firstChild; )
            e3.dom.elLegendWrap.removeChild(e3.dom.elLegendWrap.firstChild);
          this.drawLegends(), "bottom" === i3.legend.position || "top" === i3.legend.position ? this.legendAlignHorizontal() : "right" !== i3.legend.position && "left" !== i3.legend.position || this.legendAlignVertical();
        }
      } }, { key: "drawLegends", value: function() {
        var t4 = this, e3 = this.w, i3 = e3.config.legend.fontFamily, a3 = e3.globals.seriesNames, s2 = e3.globals.colors.slice();
        if ("heatmap" === e3.config.chart.type) {
          var r3 = e3.config.plotOptions.heatmap.colorScale.ranges;
          a3 = r3.map(function(t5) {
            return t5.name ? t5.name : t5.from + " - " + t5.to;
          }), s2 = r3.map(function(t5) {
            return t5.color;
          });
        } else
          this.isBarsDistributed && (a3 = e3.globals.labels.slice());
        e3.config.legend.customLegendItems.length && (a3 = e3.config.legend.customLegendItems);
        for (var o3 = e3.globals.legendFormatter, n3 = e3.config.legend.inverseOrder, l3 = n3 ? a3.length - 1 : 0; n3 ? l3 >= 0 : l3 <= a3.length - 1; n3 ? l3-- : l3++) {
          var h3 = o3(a3[l3], { seriesIndex: l3, w: e3 }), c3 = false, d3 = false;
          if (e3.globals.collapsedSeries.length > 0)
            for (var g3 = 0; g3 < e3.globals.collapsedSeries.length; g3++)
              e3.globals.collapsedSeries[g3].index === l3 && (c3 = true);
          if (e3.globals.ancillaryCollapsedSeriesIndices.length > 0)
            for (var u3 = 0; u3 < e3.globals.ancillaryCollapsedSeriesIndices.length; u3++)
              e3.globals.ancillaryCollapsedSeriesIndices[u3] === l3 && (d3 = true);
          var f3 = document.createElement("span");
          f3.classList.add("apexcharts-legend-marker");
          var p3 = e3.config.legend.markers.offsetX, b3 = e3.config.legend.markers.offsetY, v3 = e3.config.legend.markers.height, w2 = e3.config.legend.markers.width, k3 = e3.config.legend.markers.strokeWidth, A3 = e3.config.legend.markers.strokeColor, S3 = e3.config.legend.markers.radius, C3 = f3.style;
          C3.background = s2[l3], C3.color = s2[l3], C3.setProperty("background", s2[l3], "important"), e3.config.legend.markers.fillColors && e3.config.legend.markers.fillColors[l3] && (C3.background = e3.config.legend.markers.fillColors[l3]), void 0 !== e3.globals.seriesColors[l3] && (C3.background = e3.globals.seriesColors[l3], C3.color = e3.globals.seriesColors[l3]), C3.height = Array.isArray(v3) ? parseFloat(v3[l3]) + "px" : parseFloat(v3) + "px", C3.width = Array.isArray(w2) ? parseFloat(w2[l3]) + "px" : parseFloat(w2) + "px", C3.left = (Array.isArray(p3) ? parseFloat(p3[l3]) : parseFloat(p3)) + "px", C3.top = (Array.isArray(b3) ? parseFloat(b3[l3]) : parseFloat(b3)) + "px", C3.borderWidth = Array.isArray(k3) ? k3[l3] : k3, C3.borderColor = Array.isArray(A3) ? A3[l3] : A3, C3.borderRadius = Array.isArray(S3) ? parseFloat(S3[l3]) + "px" : parseFloat(S3) + "px", e3.config.legend.markers.customHTML && (Array.isArray(e3.config.legend.markers.customHTML) ? e3.config.legend.markers.customHTML[l3] && (f3.innerHTML = e3.config.legend.markers.customHTML[l3]()) : f3.innerHTML = e3.config.legend.markers.customHTML()), m2.setAttrs(f3, { rel: l3 + 1, "data:collapsed": c3 || d3 }), (c3 || d3) && f3.classList.add("apexcharts-inactive-legend");
          var L3 = document.createElement("div"), P3 = document.createElement("span");
          P3.classList.add("apexcharts-legend-text"), P3.innerHTML = Array.isArray(h3) ? h3.join(" ") : h3;
          var T3 = e3.config.legend.labels.useSeriesColors ? e3.globals.colors[l3] : e3.config.legend.labels.colors;
          T3 || (T3 = e3.config.chart.foreColor), P3.style.color = T3, P3.style.fontSize = parseFloat(e3.config.legend.fontSize) + "px", P3.style.fontWeight = e3.config.legend.fontWeight, P3.style.fontFamily = i3 || e3.config.chart.fontFamily, m2.setAttrs(P3, { rel: l3 + 1, i: l3, "data:default-text": encodeURIComponent(h3), "data:collapsed": c3 || d3 }), L3.appendChild(f3), L3.appendChild(P3);
          var M3 = new y(this.ctx);
          if (!e3.config.legend.showForZeroSeries)
            0 === M3.getSeriesTotalByIndex(l3) && M3.seriesHaveSameValues(l3) && !M3.isSeriesNull(l3) && -1 === e3.globals.collapsedSeriesIndices.indexOf(l3) && -1 === e3.globals.ancillaryCollapsedSeriesIndices.indexOf(l3) && L3.classList.add("apexcharts-hidden-zero-series");
          e3.config.legend.showForNullSeries || M3.isSeriesNull(l3) && -1 === e3.globals.collapsedSeriesIndices.indexOf(l3) && -1 === e3.globals.ancillaryCollapsedSeriesIndices.indexOf(l3) && L3.classList.add("apexcharts-hidden-null-series"), e3.globals.dom.elLegendWrap.appendChild(L3), e3.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(e3.config.legend.horizontalAlign)), e3.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + e3.config.legend.position), L3.classList.add("apexcharts-legend-series"), L3.style.margin = "".concat(e3.config.legend.itemMargin.vertical, "px ").concat(e3.config.legend.itemMargin.horizontal, "px"), e3.globals.dom.elLegendWrap.style.width = e3.config.legend.width ? e3.config.legend.width + "px" : "", e3.globals.dom.elLegendWrap.style.height = e3.config.legend.height ? e3.config.legend.height + "px" : "", m2.setAttrs(L3, { rel: l3 + 1, seriesName: x2.escapeString(a3[l3]), "data:collapsed": c3 || d3 }), (c3 || d3) && L3.classList.add("apexcharts-inactive-legend"), e3.config.legend.onItemClick.toggleDataSeries || L3.classList.add("apexcharts-no-click");
        }
        e3.globals.dom.elWrap.addEventListener("click", t4.onLegendClick, true), e3.globals.dom.elWrap.appendChild(e3.globals.dom.elLegendWrap), e3.config.legend.onItemHover.highlightDataSeries && 0 === e3.config.legend.customLegendItems.length && (e3.globals.dom.elWrap.addEventListener("mousemove", t4.onLegendHovered, true), e3.globals.dom.elWrap.addEventListener("mouseout", t4.onLegendHovered, true));
      } }, { key: "setLegendWrapXY", value: function(t4, e3) {
        var i3 = this.w, a3 = i3.globals.dom.elLegendWrap, s2 = a3.getBoundingClientRect(), r3 = 0, o3 = 0;
        if ("bottom" === i3.config.legend.position)
          o3 += i3.globals.svgHeight - s2.height / 2;
        else if ("top" === i3.config.legend.position) {
          var n3 = new ot2(this.ctx), l3 = n3.dimHelpers.getTitleSubtitleCoords("title").height, h3 = n3.dimHelpers.getTitleSubtitleCoords("subtitle").height;
          o3 = o3 + (l3 > 0 ? l3 - 10 : 0) + (h3 > 0 ? h3 - 10 : 0);
        }
        a3.style.position = "absolute", r3 = r3 + t4 + i3.config.legend.offsetX, o3 = o3 + e3 + i3.config.legend.offsetY, a3.style.left = r3 + "px", a3.style.top = o3 + "px", "bottom" === i3.config.legend.position ? (a3.style.top = "auto", a3.style.bottom = 5 - i3.config.legend.offsetY + "px") : "right" === i3.config.legend.position && (a3.style.left = "auto", a3.style.right = 25 + i3.config.legend.offsetX + "px");
        ["width", "height"].forEach(function(t5) {
          a3.style[t5] && (a3.style[t5] = parseInt(i3.config.legend[t5], 10) + "px");
        });
      } }, { key: "legendAlignHorizontal", value: function() {
        var t4 = this.w;
        t4.globals.dom.elLegendWrap.style.right = 0;
        var e3 = this.legendHelpers.getLegendBBox(), i3 = new ot2(this.ctx), a3 = i3.dimHelpers.getTitleSubtitleCoords("title"), s2 = i3.dimHelpers.getTitleSubtitleCoords("subtitle"), r3 = 0;
        "bottom" === t4.config.legend.position ? r3 = -e3.clwh / 1.8 : "top" === t4.config.legend.position && (r3 = a3.height + s2.height + t4.config.title.margin + t4.config.subtitle.margin - 10), this.setLegendWrapXY(20, r3);
      } }, { key: "legendAlignVertical", value: function() {
        var t4 = this.w, e3 = this.legendHelpers.getLegendBBox(), i3 = 0;
        "left" === t4.config.legend.position && (i3 = 20), "right" === t4.config.legend.position && (i3 = t4.globals.svgWidth - e3.clww - 10), this.setLegendWrapXY(i3, 20);
      } }, { key: "onLegendHovered", value: function(t4) {
        var e3 = this.w, i3 = t4.target.classList.contains("apexcharts-legend-text") || t4.target.classList.contains("apexcharts-legend-marker");
        if ("heatmap" === e3.config.chart.type || this.isBarsDistributed) {
          if (i3) {
            var a3 = parseInt(t4.target.getAttribute("rel"), 10) - 1;
            this.ctx.events.fireEvent("legendHover", [this.ctx, a3, this.w]), new N2(this.ctx).highlightRangeInSeries(t4, t4.target);
          }
        } else
          !t4.target.classList.contains("apexcharts-inactive-legend") && i3 && new N2(this.ctx).toggleSeriesOnHover(t4, t4.target);
      } }, { key: "onLegendClick", value: function(t4) {
        var e3 = this.w;
        if (!e3.config.legend.customLegendItems.length && (t4.target.classList.contains("apexcharts-legend-text") || t4.target.classList.contains("apexcharts-legend-marker"))) {
          var i3 = parseInt(t4.target.getAttribute("rel"), 10) - 1, a3 = "true" === t4.target.getAttribute("data:collapsed"), s2 = this.w.config.chart.events.legendClick;
          "function" == typeof s2 && s2(this.ctx, i3, this.w), this.ctx.events.fireEvent("legendClick", [this.ctx, i3, this.w]);
          var r3 = this.w.config.legend.markers.onClick;
          "function" == typeof r3 && t4.target.classList.contains("apexcharts-legend-marker") && (r3(this.ctx, i3, this.w), this.ctx.events.fireEvent("legendMarkerClick", [this.ctx, i3, this.w])), "treemap" !== e3.config.chart.type && "heatmap" !== e3.config.chart.type && !this.isBarsDistributed && e3.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i3, a3);
        }
      } }]), t3;
    }(), ht2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
        var i3 = this.w;
        this.ev = this.w.config.chart.events, this.selectedClass = "apexcharts-selected", this.localeValues = this.w.globals.locale.toolbar, this.minX = i3.globals.minX, this.maxX = i3.globals.maxX;
      }
      return r2(t3, [{ key: "createToolbar", value: function() {
        var t4 = this, e3 = this.w, i3 = function() {
          return document.createElement("div");
        }, a3 = i3();
        if (a3.setAttribute("class", "apexcharts-toolbar"), a3.style.top = e3.config.chart.toolbar.offsetY + "px", a3.style.right = 3 - e3.config.chart.toolbar.offsetX + "px", e3.globals.dom.elWrap.appendChild(a3), this.elZoom = i3(), this.elZoomIn = i3(), this.elZoomOut = i3(), this.elPan = i3(), this.elSelection = i3(), this.elZoomReset = i3(), this.elMenuIcon = i3(), this.elMenu = i3(), this.elCustomIcons = [], this.t = e3.config.chart.toolbar.tools, Array.isArray(this.t.customIcons))
          for (var s2 = 0; s2 < this.t.customIcons.length; s2++)
            this.elCustomIcons.push(i3());
        var r3 = [], o3 = function(i4, a4, s3) {
          var o4 = i4.toLowerCase();
          t4.t[o4] && e3.config.chart.zoom.enabled && r3.push({ el: a4, icon: "string" == typeof t4.t[o4] ? t4.t[o4] : s3, title: t4.localeValues[i4], class: "apexcharts-".concat(o4, "-icon") });
        };
        o3("zoomIn", this.elZoomIn, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'), o3("zoomOut", this.elZoomOut, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');
        var n3 = function(i4) {
          t4.t[i4] && e3.config.chart[i4].enabled && r3.push({ el: "zoom" === i4 ? t4.elZoom : t4.elSelection, icon: "string" == typeof t4.t[i4] ? t4.t[i4] : "zoom" === i4 ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>' : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>', title: t4.localeValues["zoom" === i4 ? "selectionZoom" : "selection"], class: e3.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(i4, "-icon") });
        };
        n3("zoom"), n3("selection"), this.t.pan && e3.config.chart.zoom.enabled && r3.push({ el: this.elPan, icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>', title: this.localeValues.pan, class: e3.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon" }), o3("reset", this.elZoomReset, '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'), this.t.download && r3.push({ el: this.elMenuIcon, icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>', title: this.localeValues.menu, class: "apexcharts-menu-icon" });
        for (var l3 = 0; l3 < this.elCustomIcons.length; l3++)
          r3.push({ el: this.elCustomIcons[l3], icon: this.t.customIcons[l3].icon, title: this.t.customIcons[l3].title, index: this.t.customIcons[l3].index, class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[l3].class });
        r3.forEach(function(t5, e4) {
          t5.index && x2.moveIndexInArray(r3, e4, t5.index);
        });
        for (var h3 = 0; h3 < r3.length; h3++)
          m2.setAttrs(r3[h3].el, { class: r3[h3].class, title: r3[h3].title }), r3[h3].el.innerHTML = r3[h3].icon, a3.appendChild(r3[h3].el);
        this._createHamburgerMenu(a3), e3.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e3.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e3.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();
      } }, { key: "_createHamburgerMenu", value: function(t4) {
        this.elMenuItems = [], t4.appendChild(this.elMenu), m2.setAttrs(this.elMenu, { class: "apexcharts-menu" });
        var e3 = [{ name: "exportSVG", title: this.localeValues.exportToSVG }, { name: "exportPNG", title: this.localeValues.exportToPNG }, { name: "exportCSV", title: this.localeValues.exportToCSV }];
        this.w.globals.allSeriesHasEqualX || e3.splice(2, 1);
        for (var i3 = 0; i3 < e3.length; i3++)
          this.elMenuItems.push(document.createElement("div")), this.elMenuItems[i3].innerHTML = e3[i3].title, m2.setAttrs(this.elMenuItems[i3], { class: "apexcharts-menu-item ".concat(e3[i3].name), title: e3[i3].title }), this.elMenu.appendChild(this.elMenuItems[i3]);
      } }, { key: "addToolbarEventListeners", value: function() {
        var t4 = this;
        this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")), this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function(e4) {
          e4.classList.contains("exportSVG") ? e4.addEventListener("click", t4.handleDownload.bind(t4, "svg")) : e4.classList.contains("exportPNG") ? e4.addEventListener("click", t4.handleDownload.bind(t4, "png")) : e4.classList.contains("exportCSV") && e4.addEventListener("click", t4.handleDownload.bind(t4, "csv"));
        });
        for (var e3 = 0; e3 < this.t.customIcons.length; e3++)
          this.elCustomIcons[e3].addEventListener("click", this.t.customIcons[e3].click.bind(this, this.ctx, this.ctx.w));
      } }, { key: "toggleZoomSelection", value: function(t4) {
        this.ctx.getSyncedCharts().forEach(function(e3) {
          e3.ctx.toolbar.toggleOtherControls();
          var i3 = "selection" === t4 ? e3.ctx.toolbar.elSelection : e3.ctx.toolbar.elZoom, a3 = "selection" === t4 ? "selectionEnabled" : "zoomEnabled";
          e3.w.globals[a3] = !e3.w.globals[a3], i3.classList.contains(e3.ctx.toolbar.selectedClass) ? i3.classList.remove(e3.ctx.toolbar.selectedClass) : i3.classList.add(e3.ctx.toolbar.selectedClass);
        });
      } }, { key: "getToolbarIconsReference", value: function() {
        var t4 = this.w;
        this.elZoom || (this.elZoom = t4.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t4.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t4.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
      } }, { key: "enableZoomPanFromToolbar", value: function(t4) {
        this.toggleOtherControls(), "pan" === t4 ? this.w.globals.panEnabled = true : this.w.globals.zoomEnabled = true;
        var e3 = "pan" === t4 ? this.elPan : this.elZoom, i3 = "pan" === t4 ? this.elZoom : this.elPan;
        e3 && e3.classList.add(this.selectedClass), i3 && i3.classList.remove(this.selectedClass);
      } }, { key: "togglePanning", value: function() {
        this.ctx.getSyncedCharts().forEach(function(t4) {
          t4.ctx.toolbar.toggleOtherControls(), t4.w.globals.panEnabled = !t4.w.globals.panEnabled, t4.ctx.toolbar.elPan.classList.contains(t4.ctx.toolbar.selectedClass) ? t4.ctx.toolbar.elPan.classList.remove(t4.ctx.toolbar.selectedClass) : t4.ctx.toolbar.elPan.classList.add(t4.ctx.toolbar.selectedClass);
        });
      } }, { key: "toggleOtherControls", value: function() {
        var t4 = this, e3 = this.w;
        e3.globals.panEnabled = false, e3.globals.zoomEnabled = false, e3.globals.selectionEnabled = false, this.getToolbarIconsReference(), [this.elPan, this.elSelection, this.elZoom].forEach(function(e4) {
          e4 && e4.classList.remove(t4.selectedClass);
        });
      } }, { key: "handleZoomIn", value: function() {
        var t4 = this.w;
        t4.globals.isRangeBar && (this.minX = t4.globals.minY, this.maxX = t4.globals.maxY);
        var e3 = (this.minX + this.maxX) / 2, i3 = (this.minX + e3) / 2, a3 = (this.maxX + e3) / 2, s2 = this._getNewMinXMaxX(i3, a3);
        t4.globals.disableZoomIn || this.zoomUpdateOptions(s2.minX, s2.maxX);
      } }, { key: "handleZoomOut", value: function() {
        var t4 = this.w;
        if (t4.globals.isRangeBar && (this.minX = t4.globals.minY, this.maxX = t4.globals.maxY), !("datetime" === t4.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {
          var e3 = (this.minX + this.maxX) / 2, i3 = this.minX - (e3 - this.minX), a3 = this.maxX - (e3 - this.maxX), s2 = this._getNewMinXMaxX(i3, a3);
          t4.globals.disableZoomOut || this.zoomUpdateOptions(s2.minX, s2.maxX);
        }
      } }, { key: "_getNewMinXMaxX", value: function(t4, e3) {
        var i3 = this.w.config.xaxis.convertedCatToNumeric;
        return { minX: i3 ? Math.floor(t4) : t4, maxX: i3 ? Math.floor(e3) : e3 };
      } }, { key: "zoomUpdateOptions", value: function(t4, e3) {
        var i3 = this.w;
        if (void 0 !== t4 || void 0 !== e3) {
          if (!(i3.config.xaxis.convertedCatToNumeric && (t4 < 1 && (t4 = 1, e3 = i3.globals.dataPoints), e3 - t4 < 2))) {
            var a3 = { min: t4, max: e3 }, s2 = this.getBeforeZoomRange(a3);
            s2 && (a3 = s2.xaxis);
            var r3 = { xaxis: a3 }, o3 = x2.clone(i3.globals.initialConfig.yaxis);
            if (i3.config.chart.zoom.autoScaleYaxis)
              o3 = new _2(this.ctx).autoScaleY(this.ctx, o3, { xaxis: a3 });
            i3.config.chart.group || (r3.yaxis = o3), this.w.globals.zoomed = true, this.ctx.updateHelpers._updateOptions(r3, false, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a3, o3);
          }
        } else
          this.handleZoomReset();
      } }, { key: "zoomCallback", value: function(t4, e3) {
        "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, { xaxis: t4, yaxis: e3 });
      } }, { key: "getBeforeZoomRange", value: function(t4, e3) {
        var i3 = null;
        return "function" == typeof this.ev.beforeZoom && (i3 = this.ev.beforeZoom(this, { xaxis: t4, yaxis: e3 })), i3;
      } }, { key: "toggleMenu", value: function() {
        var t4 = this;
        window.setTimeout(function() {
          t4.elMenu.classList.contains("apexcharts-menu-open") ? t4.elMenu.classList.remove("apexcharts-menu-open") : t4.elMenu.classList.add("apexcharts-menu-open");
        }, 0);
      } }, { key: "handleDownload", value: function(t4) {
        var e3 = this.w, i3 = new G2(this.ctx);
        switch (t4) {
          case "svg":
            i3.exportToSVG(this.ctx);
            break;
          case "png":
            i3.exportToPng(this.ctx);
            break;
          case "csv":
            i3.exportToCSV({ series: e3.config.series, columnDelimiter: e3.config.chart.toolbar.export.csv.columnDelimiter });
        }
      } }, { key: "handleZoomReset", value: function(t4) {
        this.ctx.getSyncedCharts().forEach(function(t5) {
          var e3 = t5.w;
          if (e3.globals.lastXAxis.min = void 0, e3.globals.lastXAxis.max = void 0, t5.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof e3.config.chart.events.beforeResetZoom) {
            var i3 = e3.config.chart.events.beforeResetZoom(t5, e3);
            i3 && t5.updateHelpers.revertDefaultAxisMinMax(i3);
          }
          "function" == typeof e3.config.chart.events.zoomed && t5.ctx.toolbar.zoomCallback({ min: e3.config.xaxis.min, max: e3.config.xaxis.max }), e3.globals.zoomed = false;
          var a3 = t5.ctx.series.emptyCollapsedSeries(x2.clone(e3.globals.initialSeries));
          t5.updateHelpers._updateSeries(a3, e3.config.chart.animations.dynamicAnimation.enabled);
        });
      } }, { key: "destroy", value: function() {
        this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
      } }]), t3;
    }(), ct = function(t3) {
      n2(i3, ht2);
      var e3 = d2(i3);
      function i3(t4) {
        var s2;
        return a2(this, i3), (s2 = e3.call(this, t4)).ctx = t4, s2.w = t4.w, s2.dragged = false, s2.graphics = new m2(s2.ctx), s2.eventList = ["mousedown", "mouseleave", "mousemove", "touchstart", "touchmove", "mouseup", "touchend"], s2.clientX = 0, s2.clientY = 0, s2.startX = 0, s2.endX = 0, s2.dragX = 0, s2.startY = 0, s2.endY = 0, s2.dragY = 0, s2.moveDirection = "none", s2;
      }
      return r2(i3, [{ key: "init", value: function(t4) {
        var e4 = this, i4 = t4.xyRatios, a3 = this.w, s2 = this;
        this.xyRatios = i4, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a3.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), a3.globals.dom.elGraphical.add(this.zoomRect), a3.globals.dom.elGraphical.add(this.selectionRect), "x" === a3.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, minY: 0, maxX: a3.globals.gridWidth, maxY: a3.globals.gridHeight }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === a3.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, maxX: a3.globals.gridWidth }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = a3.globals.dom.baseEl.querySelector("".concat(a3.globals.chartClass, " .apexcharts-svg")), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach(function(t5) {
          e4.hoverArea.addEventListener(t5, s2.svgMouseEvents.bind(s2, i4), { capture: false, passive: true });
        });
      } }, { key: "destroy", value: function() {
        this.slDraggableRect && (this.slDraggableRect.draggable(false), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
      } }, { key: "svgMouseEvents", value: function(t4, e4) {
        var i4 = this.w, a3 = this, s2 = this.ctx.toolbar, r3 = i4.globals.zoomEnabled ? i4.config.chart.zoom.type : i4.config.chart.selection.type, o3 = i4.config.chart.toolbar.autoSelected;
        if (e4.shiftKey ? (this.shiftWasPressed = true, s2.enableZoomPanFromToolbar("pan" === o3 ? "zoom" : "pan")) : this.shiftWasPressed && (s2.enableZoomPanFromToolbar(o3), this.shiftWasPressed = false), e4.target) {
          var n3, l3 = e4.target.classList;
          if (e4.target.parentNode && null !== e4.target.parentNode && (n3 = e4.target.parentNode.classList), !(l3.contains("apexcharts-selection-rect") || l3.contains("apexcharts-legend-marker") || l3.contains("apexcharts-legend-text") || n3 && n3.contains("apexcharts-toolbar"))) {
            if (a3.clientX = "touchmove" === e4.type || "touchstart" === e4.type ? e4.touches[0].clientX : "touchend" === e4.type ? e4.changedTouches[0].clientX : e4.clientX, a3.clientY = "touchmove" === e4.type || "touchstart" === e4.type ? e4.touches[0].clientY : "touchend" === e4.type ? e4.changedTouches[0].clientY : e4.clientY, "mousedown" === e4.type && 1 === e4.which) {
              var h3 = a3.gridRect.getBoundingClientRect();
              a3.startX = a3.clientX - h3.left, a3.startY = a3.clientY - h3.top, a3.dragged = false, a3.w.globals.mousedown = true;
            }
            if (("mousemove" === e4.type && 1 === e4.which || "touchmove" === e4.type) && (a3.dragged = true, i4.globals.panEnabled ? (i4.globals.selection = null, a3.w.globals.mousedown && a3.panDragging({ context: a3, zoomtype: r3, xyRatios: t4 })) : (a3.w.globals.mousedown && i4.globals.zoomEnabled || a3.w.globals.mousedown && i4.globals.selectionEnabled) && (a3.selection = a3.selectionDrawing({ context: a3, zoomtype: r3 }))), "mouseup" === e4.type || "touchend" === e4.type || "mouseleave" === e4.type) {
              var c3 = a3.gridRect.getBoundingClientRect();
              a3.w.globals.mousedown && (a3.endX = a3.clientX - c3.left, a3.endY = a3.clientY - c3.top, a3.dragX = Math.abs(a3.endX - a3.startX), a3.dragY = Math.abs(a3.endY - a3.startY), (i4.globals.zoomEnabled || i4.globals.selectionEnabled) && a3.selectionDrawn({ context: a3, zoomtype: r3 }), i4.globals.panEnabled && i4.config.xaxis.convertedCatToNumeric && a3.delayedPanScrolled()), i4.globals.zoomEnabled && a3.hideSelectionRect(this.selectionRect), a3.dragged = false, a3.w.globals.mousedown = false;
            }
            this.makeSelectionRectDraggable();
          }
        }
      } }, { key: "makeSelectionRectDraggable", value: function() {
        var t4 = this.w;
        if (this.selectionRect) {
          var e4 = this.selectionRect.node.getBoundingClientRect();
          e4.width > 0 && e4.height > 0 && this.slDraggableRect.selectize({ points: "l, r", pointSize: 8, pointType: "rect" }).resize({ constraint: { minX: 0, minY: 0, maxX: t4.globals.gridWidth, maxY: t4.globals.gridHeight } }).on("resizing", this.selectionDragging.bind(this, "resizing"));
        }
      } }, { key: "preselectedSelection", value: function() {
        var t4 = this.w, e4 = this.xyRatios;
        if (!t4.globals.zoomEnabled) {
          if (void 0 !== t4.globals.selection && null !== t4.globals.selection)
            this.drawSelectionRect(t4.globals.selection);
          else if (void 0 !== t4.config.chart.selection.xaxis.min && void 0 !== t4.config.chart.selection.xaxis.max) {
            var i4 = (t4.config.chart.selection.xaxis.min - t4.globals.minX) / e4.xRatio, a3 = { x: i4, y: 0, width: t4.globals.gridWidth - (t4.globals.maxX - t4.config.chart.selection.xaxis.max) / e4.xRatio - i4, height: t4.globals.gridHeight, translateX: 0, translateY: 0, selectionEnabled: true };
            this.drawSelectionRect(a3), this.makeSelectionRectDraggable(), "function" == typeof t4.config.chart.events.selection && t4.config.chart.events.selection(this.ctx, { xaxis: { min: t4.config.chart.selection.xaxis.min, max: t4.config.chart.selection.xaxis.max }, yaxis: {} });
          }
        }
      } }, { key: "drawSelectionRect", value: function(t4) {
        var e4 = t4.x, i4 = t4.y, a3 = t4.width, s2 = t4.height, r3 = t4.translateX, o3 = void 0 === r3 ? 0 : r3, n3 = t4.translateY, l3 = void 0 === n3 ? 0 : n3, h3 = this.w, c3 = this.zoomRect, d3 = this.selectionRect;
        if (this.dragged || null !== h3.globals.selection) {
          var g3 = { transform: "translate(" + o3 + ", " + l3 + ")" };
          h3.globals.zoomEnabled && this.dragged && (a3 < 0 && (a3 = 1), c3.attr({ x: e4, y: i4, width: a3, height: s2, fill: h3.config.chart.zoom.zoomedArea.fill.color, "fill-opacity": h3.config.chart.zoom.zoomedArea.fill.opacity, stroke: h3.config.chart.zoom.zoomedArea.stroke.color, "stroke-width": h3.config.chart.zoom.zoomedArea.stroke.width, "stroke-opacity": h3.config.chart.zoom.zoomedArea.stroke.opacity }), m2.setAttrs(c3.node, g3)), h3.globals.selectionEnabled && (d3.attr({ x: e4, y: i4, width: a3 > 0 ? a3 : 0, height: s2 > 0 ? s2 : 0, fill: h3.config.chart.selection.fill.color, "fill-opacity": h3.config.chart.selection.fill.opacity, stroke: h3.config.chart.selection.stroke.color, "stroke-width": h3.config.chart.selection.stroke.width, "stroke-dasharray": h3.config.chart.selection.stroke.dashArray, "stroke-opacity": h3.config.chart.selection.stroke.opacity }), m2.setAttrs(d3.node, g3));
        }
      } }, { key: "hideSelectionRect", value: function(t4) {
        t4 && t4.attr({ x: 0, y: 0, width: 0, height: 0 });
      } }, { key: "selectionDrawing", value: function(t4) {
        var e4 = t4.context, i4 = t4.zoomtype, a3 = this.w, s2 = e4, r3 = this.gridRect.getBoundingClientRect(), o3 = s2.startX - 1, n3 = s2.startY, l3 = false, h3 = false, c3 = s2.clientX - r3.left - o3, d3 = s2.clientY - r3.top - n3, g3 = {};
        return Math.abs(c3 + o3) > a3.globals.gridWidth ? c3 = a3.globals.gridWidth - o3 : s2.clientX - r3.left < 0 && (c3 = o3), o3 > s2.clientX - r3.left && (l3 = true, c3 = Math.abs(c3)), n3 > s2.clientY - r3.top && (h3 = true, d3 = Math.abs(d3)), g3 = "x" === i4 ? { x: l3 ? o3 - c3 : o3, y: 0, width: c3, height: a3.globals.gridHeight } : "y" === i4 ? { x: 0, y: h3 ? n3 - d3 : n3, width: a3.globals.gridWidth, height: d3 } : { x: l3 ? o3 - c3 : o3, y: h3 ? n3 - d3 : n3, width: c3, height: d3 }, s2.drawSelectionRect(g3), s2.selectionDragging("resizing"), g3;
      } }, { key: "selectionDragging", value: function(t4, e4) {
        var i4 = this, a3 = this.w, s2 = this.xyRatios, r3 = this.selectionRect, o3 = 0;
        "resizing" === t4 && (o3 = 30);
        var n3 = function(t5) {
          return parseFloat(r3.node.getAttribute(t5));
        }, l3 = { x: n3("x"), y: n3("y"), width: n3("width"), height: n3("height") };
        a3.globals.selection = l3, "function" == typeof a3.config.chart.events.selection && a3.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function() {
          var t5 = i4.gridRect.getBoundingClientRect(), e5 = r3.node.getBoundingClientRect(), o4 = { xaxis: { min: a3.globals.xAxisScale.niceMin + (e5.left - t5.left) * s2.xRatio, max: a3.globals.xAxisScale.niceMin + (e5.right - t5.left) * s2.xRatio }, yaxis: { min: a3.globals.yAxisScale[0].niceMin + (t5.bottom - e5.bottom) * s2.yRatio[0], max: a3.globals.yAxisScale[0].niceMax - (e5.top - t5.top) * s2.yRatio[0] } };
          a3.config.chart.events.selection(i4.ctx, o4), a3.config.chart.brush.enabled && void 0 !== a3.config.chart.events.brushScrolled && a3.config.chart.events.brushScrolled(i4.ctx, o4);
        }, o3));
      } }, { key: "selectionDrawn", value: function(t4) {
        var e4 = t4.context, i4 = t4.zoomtype, a3 = this.w, s2 = e4, r3 = this.xyRatios, o3 = this.ctx.toolbar;
        if (s2.startX > s2.endX) {
          var n3 = s2.startX;
          s2.startX = s2.endX, s2.endX = n3;
        }
        if (s2.startY > s2.endY) {
          var l3 = s2.startY;
          s2.startY = s2.endY, s2.endY = l3;
        }
        var h3 = void 0, c3 = void 0;
        a3.globals.isRangeBar ? (h3 = a3.globals.yAxisScale[0].niceMin + s2.startX * r3.invertedYRatio, c3 = a3.globals.yAxisScale[0].niceMin + s2.endX * r3.invertedYRatio) : (h3 = a3.globals.xAxisScale.niceMin + s2.startX * r3.xRatio, c3 = a3.globals.xAxisScale.niceMin + s2.endX * r3.xRatio);
        var d3 = [], g3 = [];
        if (a3.config.yaxis.forEach(function(t5, e5) {
          d3.push(a3.globals.yAxisScale[e5].niceMax - r3.yRatio[e5] * s2.startY), g3.push(a3.globals.yAxisScale[e5].niceMax - r3.yRatio[e5] * s2.endY);
        }), s2.dragged && (s2.dragX > 10 || s2.dragY > 10) && h3 !== c3) {
          if (a3.globals.zoomEnabled) {
            var u3 = x2.clone(a3.globals.initialConfig.yaxis), f3 = x2.clone(a3.globals.initialConfig.xaxis);
            if (a3.globals.zoomed = true, a3.config.xaxis.convertedCatToNumeric && (h3 = Math.floor(h3), c3 = Math.floor(c3), h3 < 1 && (h3 = 1, c3 = a3.globals.dataPoints), c3 - h3 < 2 && (c3 = h3 + 1)), "xy" !== i4 && "x" !== i4 || (f3 = { min: h3, max: c3 }), "xy" !== i4 && "y" !== i4 || u3.forEach(function(t5, e5) {
              u3[e5].min = g3[e5], u3[e5].max = d3[e5];
            }), a3.config.chart.zoom.autoScaleYaxis) {
              var p3 = new _2(s2.ctx);
              u3 = p3.autoScaleY(s2.ctx, u3, { xaxis: f3 });
            }
            if (o3) {
              var b3 = o3.getBeforeZoomRange(f3, u3);
              b3 && (f3 = b3.xaxis ? b3.xaxis : f3, u3 = b3.yaxis ? b3.yaxis : u3);
            }
            var v3 = { xaxis: f3 };
            a3.config.chart.group || (v3.yaxis = u3), s2.ctx.updateHelpers._updateOptions(v3, false, s2.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof a3.config.chart.events.zoomed && o3.zoomCallback(f3, u3);
          } else if (a3.globals.selectionEnabled) {
            var m3, y2 = null;
            m3 = { min: h3, max: c3 }, "xy" !== i4 && "y" !== i4 || (y2 = x2.clone(a3.config.yaxis)).forEach(function(t5, e5) {
              y2[e5].min = g3[e5], y2[e5].max = d3[e5];
            }), a3.globals.selection = s2.selection, "function" == typeof a3.config.chart.events.selection && a3.config.chart.events.selection(s2.ctx, { xaxis: m3, yaxis: y2 });
          }
        }
      } }, { key: "panDragging", value: function(t4) {
        var e4 = t4.context, i4 = this.w, a3 = e4;
        if (void 0 !== i4.globals.lastClientPosition.x) {
          var s2 = i4.globals.lastClientPosition.x - a3.clientX, r3 = i4.globals.lastClientPosition.y - a3.clientY;
          Math.abs(s2) > Math.abs(r3) && s2 > 0 ? this.moveDirection = "left" : Math.abs(s2) > Math.abs(r3) && s2 < 0 ? this.moveDirection = "right" : Math.abs(r3) > Math.abs(s2) && r3 > 0 ? this.moveDirection = "up" : Math.abs(r3) > Math.abs(s2) && r3 < 0 && (this.moveDirection = "down");
        }
        i4.globals.lastClientPosition = { x: a3.clientX, y: a3.clientY };
        var o3 = i4.globals.isRangeBar ? i4.globals.minY : i4.globals.minX, n3 = i4.globals.isRangeBar ? i4.globals.maxY : i4.globals.maxX;
        i4.config.xaxis.convertedCatToNumeric || a3.panScrolled(o3, n3);
      } }, { key: "delayedPanScrolled", value: function() {
        var t4 = this.w, e4 = t4.globals.minX, i4 = t4.globals.maxX, a3 = (t4.globals.maxX - t4.globals.minX) / 2;
        "left" === this.moveDirection ? (e4 = t4.globals.minX + a3, i4 = t4.globals.maxX + a3) : "right" === this.moveDirection && (e4 = t4.globals.minX - a3, i4 = t4.globals.maxX - a3), e4 = Math.floor(e4), i4 = Math.floor(i4), this.updateScrolledChart({ xaxis: { min: e4, max: i4 } }, e4, i4);
      } }, { key: "panScrolled", value: function(t4, e4) {
        var i4 = this.w, a3 = this.xyRatios, s2 = x2.clone(i4.globals.initialConfig.yaxis), r3 = a3.xRatio, o3 = i4.globals.minX, n3 = i4.globals.maxX;
        i4.globals.isRangeBar && (r3 = a3.invertedYRatio, o3 = i4.globals.minY, n3 = i4.globals.maxY), "left" === this.moveDirection ? (t4 = o3 + i4.globals.gridWidth / 15 * r3, e4 = n3 + i4.globals.gridWidth / 15 * r3) : "right" === this.moveDirection && (t4 = o3 - i4.globals.gridWidth / 15 * r3, e4 = n3 - i4.globals.gridWidth / 15 * r3), i4.globals.isRangeBar || (t4 < i4.globals.initialMinX || e4 > i4.globals.initialMaxX) && (t4 = o3, e4 = n3);
        var l3 = { min: t4, max: e4 };
        i4.config.chart.zoom.autoScaleYaxis && (s2 = new _2(this.ctx).autoScaleY(this.ctx, s2, { xaxis: l3 }));
        var h3 = { xaxis: { min: t4, max: e4 } };
        i4.config.chart.group || (h3.yaxis = s2), this.updateScrolledChart(h3, t4, e4);
      } }, { key: "updateScrolledChart", value: function(t4, e4, i4) {
        var a3 = this.w;
        this.ctx.updateHelpers._updateOptions(t4, false, false), "function" == typeof a3.config.chart.events.scrolled && a3.config.chart.events.scrolled(this.ctx, { xaxis: { min: e4, max: i4 } });
      } }]), i3;
    }(), dt2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.ttCtx = e3, this.ctx = e3.ctx;
      }
      return r2(t3, [{ key: "getNearestValues", value: function(t4) {
        var e3 = t4.hoverArea, i3 = t4.elGrid, a3 = t4.clientX, s2 = t4.clientY, r3 = this.w, o3 = i3.getBoundingClientRect(), n3 = o3.width, l3 = o3.height, h3 = n3 / (r3.globals.dataPoints - 1), c3 = l3 / r3.globals.dataPoints, d3 = this.hasBars();
        !r3.globals.comboCharts && !d3 || r3.config.xaxis.convertedCatToNumeric || (h3 = n3 / r3.globals.dataPoints);
        var g3 = a3 - o3.left - r3.globals.barPadForNumericAxis, u3 = s2 - o3.top;
        g3 < 0 || u3 < 0 || g3 > n3 || u3 > l3 ? (e3.classList.remove("hovering-zoom"), e3.classList.remove("hovering-pan")) : r3.globals.zoomEnabled ? (e3.classList.remove("hovering-pan"), e3.classList.add("hovering-zoom")) : r3.globals.panEnabled && (e3.classList.remove("hovering-zoom"), e3.classList.add("hovering-pan"));
        var f3 = Math.round(g3 / h3), p3 = Math.floor(u3 / c3);
        d3 && !r3.config.xaxis.convertedCatToNumeric && (f3 = Math.ceil(g3 / h3), f3 -= 1);
        var b3 = null, v3 = null, m3 = [], y2 = [];
        if (r3.globals.seriesXvalues.forEach(function(t5) {
          m3.push([t5[0] + 1e-6].concat(t5));
        }), r3.globals.seriesYvalues.forEach(function(t5) {
          y2.push([t5[0] + 1e-6].concat(t5));
        }), m3 = m3.map(function(t5) {
          return t5.filter(function(t6) {
            return x2.isNumber(t6);
          });
        }), y2 = y2.map(function(t5) {
          return t5.filter(function(t6) {
            return x2.isNumber(t6);
          });
        }), r3.globals.isXNumeric) {
          var w2 = this.ttCtx.getElGrid().getBoundingClientRect(), k3 = g3 * (w2.width / n3), A3 = u3 * (w2.height / l3);
          b3 = (v3 = this.closestInMultiArray(k3, A3, m3, y2)).index, f3 = v3.j, null !== b3 && (m3 = r3.globals.seriesXvalues[b3], f3 = (v3 = this.closestInArray(k3, m3)).index);
        }
        return r3.globals.capturedSeriesIndex = null === b3 ? -1 : b3, (!f3 || f3 < 1) && (f3 = 0), r3.globals.isBarHorizontal ? r3.globals.capturedDataPointIndex = p3 : r3.globals.capturedDataPointIndex = f3, { capturedSeries: b3, j: r3.globals.isBarHorizontal ? p3 : f3, hoverX: g3, hoverY: u3 };
      } }, { key: "closestInMultiArray", value: function(t4, e3, i3, a3) {
        var s2 = this.w, r3 = 0, o3 = null, n3 = -1;
        s2.globals.series.length > 1 ? r3 = this.getFirstActiveXArray(i3) : o3 = 0;
        var l3 = i3[r3][0], h3 = Math.abs(t4 - l3);
        if (i3.forEach(function(e4) {
          e4.forEach(function(e5, i4) {
            var a4 = Math.abs(t4 - e5);
            a4 < h3 && (h3 = a4, n3 = i4);
          });
        }), -1 !== n3) {
          var c3 = a3[r3][n3], d3 = Math.abs(e3 - c3);
          o3 = r3, a3.forEach(function(t5, i4) {
            var a4 = Math.abs(e3 - t5[n3]);
            a4 < d3 && (d3 = a4, o3 = i4);
          });
        }
        return { index: o3, j: n3 };
      } }, { key: "getFirstActiveXArray", value: function(t4) {
        for (var e3 = this.w, i3 = 0, a3 = t4.map(function(t5, e4) {
          return t5.length > 0 ? e4 : -1;
        }), s2 = 0; s2 < a3.length; s2++)
          if (-1 !== a3[s2] && -1 === e3.globals.collapsedSeriesIndices.indexOf(s2) && -1 === e3.globals.ancillaryCollapsedSeriesIndices.indexOf(s2)) {
            i3 = a3[s2];
            break;
          }
        return i3;
      } }, { key: "closestInArray", value: function(t4, e3) {
        for (var i3 = e3[0], a3 = null, s2 = Math.abs(t4 - i3), r3 = 0; r3 < e3.length; r3++) {
          var o3 = Math.abs(t4 - e3[r3]);
          o3 < s2 && (s2 = o3, a3 = r3);
        }
        return { index: a3 };
      } }, { key: "isXoverlap", value: function(t4) {
        var e3 = [], i3 = this.w.globals.seriesX.filter(function(t5) {
          return void 0 !== t5[0];
        });
        if (i3.length > 0)
          for (var a3 = 0; a3 < i3.length - 1; a3++)
            void 0 !== i3[a3][t4] && void 0 !== i3[a3 + 1][t4] && i3[a3][t4] !== i3[a3 + 1][t4] && e3.push("unEqual");
        return 0 === e3.length;
      } }, { key: "isInitialSeriesSameLen", value: function() {
        for (var t4 = true, e3 = this.w.globals.initialSeries, i3 = 0; i3 < e3.length - 1; i3++)
          if (e3[i3].data.length !== e3[i3 + 1].data.length) {
            t4 = false;
            break;
          }
        return t4;
      } }, { key: "getBarsHeight", value: function(t4) {
        return u2(t4).reduce(function(t5, e3) {
          return t5 + e3.getBBox().height;
        }, 0);
      } }, { key: "getElMarkers", value: function() {
        return this.w.globals.dom.baseEl.querySelectorAll(" .apexcharts-series-markers");
      } }, { key: "getAllMarkers", value: function() {
        var t4 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
        (t4 = u2(t4)).sort(function(t5, e4) {
          var i3 = Number(t5.getAttribute("data:realIndex")), a3 = Number(e4.getAttribute("data:realIndex"));
          return a3 < i3 ? 1 : a3 > i3 ? -1 : 0;
        });
        var e3 = [];
        return t4.forEach(function(t5) {
          e3.push(t5.querySelector(".apexcharts-marker"));
        }), e3;
      } }, { key: "hasMarkers", value: function() {
        return this.getElMarkers().length > 0;
      } }, { key: "getElBars", value: function() {
        return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series");
      } }, { key: "hasBars", value: function() {
        return this.getElBars().length > 0;
      } }, { key: "getHoverMarkerSize", value: function(t4) {
        var e3 = this.w, i3 = e3.config.markers.hover.size;
        return void 0 === i3 && (i3 = e3.globals.markers.size[t4] + e3.config.markers.hover.sizeOffset), i3;
      } }, { key: "toggleAllTooltipSeriesGroups", value: function(t4) {
        var e3 = this.w, i3 = this.ttCtx;
        0 === i3.allTooltipSeriesGroups.length && (i3.allTooltipSeriesGroups = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
        for (var a3 = i3.allTooltipSeriesGroups, s2 = 0; s2 < a3.length; s2++)
          "enable" === t4 ? (a3[s2].classList.add("apexcharts-active"), a3[s2].style.display = e3.config.tooltip.items.display) : (a3[s2].classList.remove("apexcharts-active"), a3[s2].style.display = "none");
      } }]), t3;
    }(), gt2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.ctx = e3.ctx, this.ttCtx = e3, this.tooltipUtil = new dt2(e3);
      }
      return r2(t3, [{ key: "drawSeriesTexts", value: function(t4) {
        var e3 = t4.shared, i3 = void 0 === e3 || e3, a3 = t4.ttItems, s2 = t4.i, r3 = void 0 === s2 ? 0 : s2, o3 = t4.j, n3 = void 0 === o3 ? null : o3, l3 = t4.y1, h3 = t4.y2, c3 = t4.e, d3 = this.w;
        void 0 !== d3.config.tooltip.custom ? this.handleCustomTooltip({ i: r3, j: n3, y1: l3, y2: h3, w: d3 }) : this.toggleActiveInactiveSeries(i3);
        var g3 = this.getValuesToPrint({ i: r3, j: n3 });
        this.printLabels({ i: r3, j: n3, values: g3, ttItems: a3, shared: i3, e: c3 });
        var u3 = this.ttCtx.getElTooltip();
        this.ttCtx.tooltipRect.ttWidth = u3.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u3.getBoundingClientRect().height;
      } }, { key: "printLabels", value: function(t4) {
        var i3, a3 = this, s2 = t4.i, r3 = t4.j, o3 = t4.values, n3 = t4.ttItems, l3 = t4.shared, h3 = t4.e, c3 = this.w, d3 = [], g3 = function(t5) {
          return c3.globals.seriesGoals[t5] && c3.globals.seriesGoals[t5][r3] && Array.isArray(c3.globals.seriesGoals[t5][r3]);
        }, u3 = o3.xVal, f3 = o3.zVal, p3 = o3.xAxisTTVal, x3 = "", b3 = c3.globals.colors[s2];
        null !== r3 && c3.config.plotOptions.bar.distributed && (b3 = c3.globals.colors[r3]);
        for (var v3 = function(t5, o4) {
          var v4 = a3.getFormatters(s2);
          x3 = a3.getSeriesName({ fn: v4.yLbTitleFormatter, index: s2, seriesIndex: s2, j: r3 }), "treemap" === c3.config.chart.type && (x3 = v4.yLbTitleFormatter(String(c3.config.series[s2].data[r3].x), { series: c3.globals.series, seriesIndex: s2, dataPointIndex: r3, w: c3 }));
          var m4 = c3.config.tooltip.inverseOrder ? o4 : t5;
          if (c3.globals.axisCharts) {
            var y3 = function(t6) {
              var e3, i4, a4 = "";
              c3.globals.isRangeData && (a4 += v4.yLbFormatter(null === (e3 = c3.globals.seriesRangeStart) || void 0 === e3 || null === (i4 = e3[t6]) || void 0 === i4 ? void 0 : i4[r3], { series: c3.globals.seriesRangeStart, seriesIndex: t6, dataPointIndex: r3, w: c3 }) + " - ");
              return a4 += v4.yLbFormatter(c3.globals.series[t6][r3], { series: c3.globals.series, seriesIndex: t6, dataPointIndex: r3, w: c3 });
            };
            if (l3)
              v4 = a3.getFormatters(m4), x3 = a3.getSeriesName({ fn: v4.yLbTitleFormatter, index: m4, seriesIndex: s2, j: r3 }), b3 = c3.globals.colors[m4], i3 = y3(m4), g3(m4) && (d3 = c3.globals.seriesGoals[m4][r3].map(function(t6) {
                return { attrs: t6, val: v4.yLbFormatter(t6.value, { seriesIndex: m4, dataPointIndex: r3, w: c3 }) };
              }));
            else {
              var w2, k3 = null == h3 || null === (w2 = h3.target) || void 0 === w2 ? void 0 : w2.getAttribute("fill");
              k3 && (b3 = -1 !== k3.indexOf("url") ? document.querySelector(k3.substr(4).slice(0, -1)).childNodes[0].getAttribute("stroke") : k3), i3 = y3(s2), g3(s2) && Array.isArray(c3.globals.seriesGoals[s2][r3]) && (d3 = c3.globals.seriesGoals[s2][r3].map(function(t6) {
                return { attrs: t6, val: v4.yLbFormatter(t6.value, { seriesIndex: s2, dataPointIndex: r3, w: c3 }) };
              }));
            }
          }
          null === r3 && (i3 = v4.yLbFormatter(c3.globals.series[s2], e2(e2({}, c3), {}, { seriesIndex: s2, dataPointIndex: s2 }))), a3.DOMHandling({ i: s2, t: m4, j: r3, ttItems: n3, values: { val: i3, goalVals: d3, xVal: u3, xAxisTTVal: p3, zVal: f3 }, seriesName: x3, shared: l3, pColor: b3 });
        }, m3 = 0, y2 = c3.globals.series.length - 1; m3 < c3.globals.series.length; m3++, y2--)
          v3(m3, y2);
      } }, { key: "getFormatters", value: function(t4) {
        var e3, i3 = this.w, a3 = i3.globals.yLabelFormatters[t4];
        return void 0 !== i3.globals.ttVal ? Array.isArray(i3.globals.ttVal) ? (a3 = i3.globals.ttVal[t4] && i3.globals.ttVal[t4].formatter, e3 = i3.globals.ttVal[t4] && i3.globals.ttVal[t4].title && i3.globals.ttVal[t4].title.formatter) : (a3 = i3.globals.ttVal.formatter, "function" == typeof i3.globals.ttVal.title.formatter && (e3 = i3.globals.ttVal.title.formatter)) : e3 = i3.config.tooltip.y.title.formatter, "function" != typeof a3 && (a3 = i3.globals.yLabelFormatters[0] ? i3.globals.yLabelFormatters[0] : function(t5) {
          return t5;
        }), "function" != typeof e3 && (e3 = function(t5) {
          return t5;
        }), { yLbFormatter: a3, yLbTitleFormatter: e3 };
      } }, { key: "getSeriesName", value: function(t4) {
        var e3 = t4.fn, i3 = t4.index, a3 = t4.seriesIndex, s2 = t4.j, r3 = this.w;
        return e3(String(r3.globals.seriesNames[i3]), { series: r3.globals.series, seriesIndex: a3, dataPointIndex: s2, w: r3 });
      } }, { key: "DOMHandling", value: function(t4) {
        t4.i;
        var e3 = t4.t, i3 = t4.j, a3 = t4.ttItems, s2 = t4.values, r3 = t4.seriesName, o3 = t4.shared, n3 = t4.pColor, l3 = this.w, h3 = this.ttCtx, c3 = s2.val, d3 = s2.goalVals, g3 = s2.xVal, u3 = s2.xAxisTTVal, f3 = s2.zVal, p3 = null;
        p3 = a3[e3].children, l3.config.tooltip.fillSeriesColor && (a3[e3].style.backgroundColor = n3, p3[0].style.display = "none"), h3.showTooltipTitle && (null === h3.tooltipTitle && (h3.tooltipTitle = l3.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h3.tooltipTitle.innerHTML = g3), h3.isXAxisTooltipEnabled && (h3.xaxisTooltipText.innerHTML = "" !== u3 ? u3 : g3);
        var x3 = a3[e3].querySelector(".apexcharts-tooltip-text-y-label");
        x3 && (x3.innerHTML = r3 || "");
        var b3 = a3[e3].querySelector(".apexcharts-tooltip-text-y-value");
        b3 && (b3.innerHTML = void 0 !== c3 ? c3 : ""), p3[0] && p3[0].classList.contains("apexcharts-tooltip-marker") && (l3.config.tooltip.marker.fillColors && Array.isArray(l3.config.tooltip.marker.fillColors) && (n3 = l3.config.tooltip.marker.fillColors[e3]), p3[0].style.backgroundColor = n3), l3.config.tooltip.marker.show || (p3[0].style.display = "none");
        var v3 = a3[e3].querySelector(".apexcharts-tooltip-text-goals-label"), m3 = a3[e3].querySelector(".apexcharts-tooltip-text-goals-value");
        if (d3.length && l3.globals.seriesGoals[e3]) {
          var y2 = function() {
            var t5 = "<div >", e4 = "<div>";
            d3.forEach(function(i4, a4) {
              t5 += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(i4.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(i4.attrs.name, "</div>"), e4 += "<div>".concat(i4.val, "</div>");
            }), v3.innerHTML = t5 + "</div>", m3.innerHTML = e4 + "</div>";
          };
          o3 ? l3.globals.seriesGoals[e3][i3] && Array.isArray(l3.globals.seriesGoals[e3][i3]) ? y2() : (v3.innerHTML = "", m3.innerHTML = "") : y2();
        } else
          v3.innerHTML = "", m3.innerHTML = "";
        null !== f3 && (a3[e3].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = l3.config.tooltip.z.title, a3[e3].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== f3 ? f3 : "");
        o3 && p3[0] && (null == c3 || l3.globals.ancillaryCollapsedSeriesIndices.indexOf(e3) > -1 || l3.globals.collapsedSeriesIndices.indexOf(e3) > -1 ? p3[0].parentNode.style.display = "none" : p3[0].parentNode.style.display = l3.config.tooltip.items.display);
      } }, { key: "toggleActiveInactiveSeries", value: function(t4) {
        var e3 = this.w;
        if (t4)
          this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
        else {
          this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
          var i3 = e3.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");
          i3 && (i3.classList.add("apexcharts-active"), i3.style.display = e3.config.tooltip.items.display);
        }
      } }, { key: "getValuesToPrint", value: function(t4) {
        var e3 = t4.i, i3 = t4.j, a3 = this.w, s2 = this.ctx.series.filteredSeriesX(), r3 = "", o3 = "", n3 = null, l3 = null, h3 = { series: a3.globals.series, seriesIndex: e3, dataPointIndex: i3, w: a3 }, c3 = a3.globals.ttZFormatter;
        null === i3 ? l3 = a3.globals.series[e3] : a3.globals.isXNumeric && "treemap" !== a3.config.chart.type ? (r3 = s2[e3][i3], 0 === s2[e3].length && (r3 = s2[this.tooltipUtil.getFirstActiveXArray(s2)][i3])) : r3 = void 0 !== a3.globals.labels[i3] ? a3.globals.labels[i3] : "";
        var d3 = r3;
        a3.globals.isXNumeric && "datetime" === a3.config.xaxis.type ? r3 = new M2(this.ctx).xLabelFormat(a3.globals.ttKeyFormatter, d3, d3, { i: void 0, dateFormatter: new T2(this.ctx).formatDate, w: this.w }) : r3 = a3.globals.isBarHorizontal ? a3.globals.yLabelFormatters[0](d3, h3) : a3.globals.xLabelFormatter(d3, h3);
        return void 0 !== a3.config.tooltip.x.formatter && (r3 = a3.globals.ttKeyFormatter(d3, h3)), a3.globals.seriesZ.length > 0 && a3.globals.seriesZ[e3].length > 0 && (n3 = c3(a3.globals.seriesZ[e3][i3], a3)), o3 = "function" == typeof a3.config.xaxis.tooltip.formatter ? a3.globals.xaxisTooltipFormatter(d3, h3) : r3, { val: Array.isArray(l3) ? l3.join(" ") : l3, xVal: Array.isArray(r3) ? r3.join(" ") : r3, xAxisTTVal: Array.isArray(o3) ? o3.join(" ") : o3, zVal: n3 };
      } }, { key: "handleCustomTooltip", value: function(t4) {
        var e3 = t4.i, i3 = t4.j, a3 = t4.y1, s2 = t4.y2, r3 = t4.w, o3 = this.ttCtx.getElTooltip(), n3 = r3.config.tooltip.custom;
        Array.isArray(n3) && n3[e3] && (n3 = n3[e3]), o3.innerHTML = n3({ ctx: this.ctx, series: r3.globals.series, seriesIndex: e3, dataPointIndex: i3, y1: a3, y2: s2, w: r3 });
      } }]), t3;
    }(), ut2 = function() {
      function t3(e3) {
        a2(this, t3), this.ttCtx = e3, this.ctx = e3.ctx, this.w = e3.w;
      }
      return r2(t3, [{ key: "moveXCrosshairs", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i3 = this.ttCtx, a3 = this.w, s2 = i3.getElXCrosshairs(), r3 = t4 - i3.xcrosshairsWidth / 2, o3 = a3.globals.labels.slice().length;
        if (null !== e3 && (r3 = a3.globals.gridWidth / o3 * e3), null === s2 || a3.globals.isBarHorizontal || (s2.setAttribute("x", r3), s2.setAttribute("x1", r3), s2.setAttribute("x2", r3), s2.setAttribute("y2", a3.globals.gridHeight), s2.classList.add("apexcharts-active")), r3 < 0 && (r3 = 0), r3 > a3.globals.gridWidth && (r3 = a3.globals.gridWidth), i3.isXAxisTooltipEnabled) {
          var n3 = r3;
          "tickWidth" !== a3.config.xaxis.crosshairs.width && "barWidth" !== a3.config.xaxis.crosshairs.width || (n3 = r3 + i3.xcrosshairsWidth / 2), this.moveXAxisTooltip(n3);
        }
      } }, { key: "moveYCrosshairs", value: function(t4) {
        var e3 = this.ttCtx;
        null !== e3.ycrosshairs && m2.setAttrs(e3.ycrosshairs, { y1: t4, y2: t4 }), null !== e3.ycrosshairsHidden && m2.setAttrs(e3.ycrosshairsHidden, { y1: t4, y2: t4 });
      } }, { key: "moveXAxisTooltip", value: function(t4) {
        var e3 = this.w, i3 = this.ttCtx;
        if (null !== i3.xaxisTooltip && 0 !== i3.xcrosshairsWidth) {
          i3.xaxisTooltip.classList.add("apexcharts-active");
          var a3 = i3.xaxisOffY + e3.config.xaxis.tooltip.offsetY + e3.globals.translateY + 1 + e3.config.xaxis.offsetY;
          if (t4 -= i3.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t4)) {
            t4 += e3.globals.translateX;
            var s2;
            s2 = new m2(this.ctx).getTextRects(i3.xaxisTooltipText.innerHTML), i3.xaxisTooltipText.style.minWidth = s2.width + "px", i3.xaxisTooltip.style.left = t4 + "px", i3.xaxisTooltip.style.top = a3 + "px";
          }
        }
      } }, { key: "moveYAxisTooltip", value: function(t4) {
        var e3 = this.w, i3 = this.ttCtx;
        null === i3.yaxisTTEls && (i3.yaxisTTEls = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
        var a3 = parseInt(i3.ycrosshairsHidden.getAttribute("y1"), 10), s2 = e3.globals.translateY + a3, r3 = i3.yaxisTTEls[t4].getBoundingClientRect().height, o3 = e3.globals.translateYAxisX[t4] - 2;
        e3.config.yaxis[t4].opposite && (o3 -= 26), s2 -= r3 / 2, -1 === e3.globals.ignoreYAxisIndexes.indexOf(t4) ? (i3.yaxisTTEls[t4].classList.add("apexcharts-active"), i3.yaxisTTEls[t4].style.top = s2 + "px", i3.yaxisTTEls[t4].style.left = o3 + e3.config.yaxis[t4].tooltip.offsetX + "px") : i3.yaxisTTEls[t4].classList.remove("apexcharts-active");
      } }, { key: "moveTooltip", value: function(t4, e3) {
        var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = this.w, s2 = this.ttCtx, r3 = s2.getElTooltip(), o3 = s2.tooltipRect, n3 = null !== i3 ? parseFloat(i3) : 1, l3 = parseFloat(t4) + n3 + 5, h3 = parseFloat(e3) + n3 / 2;
        if (l3 > a3.globals.gridWidth / 2 && (l3 = l3 - o3.ttWidth - n3 - 10), l3 > a3.globals.gridWidth - o3.ttWidth - 10 && (l3 = a3.globals.gridWidth - o3.ttWidth), l3 < -20 && (l3 = -20), a3.config.tooltip.followCursor) {
          var c3 = s2.getElGrid(), d3 = c3.getBoundingClientRect();
          h3 = s2.e.clientY + a3.globals.translateY - d3.top - o3.ttHeight / 2;
        } else
          a3.globals.isBarHorizontal || o3.ttHeight / 2 + h3 > a3.globals.gridHeight && (h3 = a3.globals.gridHeight - o3.ttHeight + a3.globals.translateY);
        isNaN(l3) || (l3 += a3.globals.translateX, r3.style.left = l3 + "px", r3.style.top = h3 + "px");
      } }, { key: "moveMarkers", value: function(t4, e3) {
        var i3 = this.w, a3 = this.ttCtx;
        if (i3.globals.markers.size[t4] > 0)
          for (var s2 = i3.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t4, "'] .apexcharts-marker")), r3 = 0; r3 < s2.length; r3++)
            parseInt(s2[r3].getAttribute("rel"), 10) === e3 && (a3.marker.resetPointsSize(), a3.marker.enlargeCurrentPoint(e3, s2[r3]));
        else
          a3.marker.resetPointsSize(), this.moveDynamicPointOnHover(e3, t4);
      } }, { key: "moveDynamicPointOnHover", value: function(t4, e3) {
        var i3, a3, s2 = this.w, r3 = this.ttCtx, o3 = s2.globals.pointsArray, n3 = r3.tooltipUtil.getHoverMarkerSize(e3), l3 = s2.config.series[e3].type;
        if (!l3 || "column" !== l3 && "candlestick" !== l3 && "boxPlot" !== l3) {
          i3 = o3[e3][t4][0], a3 = o3[e3][t4][1] ? o3[e3][t4][1] : 0;
          var h3 = s2.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e3, "'] .apexcharts-series-markers circle"));
          h3 && a3 < s2.globals.gridHeight && a3 > 0 && (h3.setAttribute("r", n3), h3.setAttribute("cx", i3), h3.setAttribute("cy", a3)), this.moveXCrosshairs(i3), r3.fixedTooltip || this.moveTooltip(i3, a3, n3);
        }
      } }, { key: "moveDynamicPointsOnHover", value: function(t4) {
        var e3, i3 = this.ttCtx, a3 = i3.w, s2 = 0, r3 = 0, o3 = a3.globals.pointsArray;
        e3 = new N2(this.ctx).getActiveConfigSeriesIndex("asc", ["line", "area", "scatter", "bubble"]);
        var n3 = i3.tooltipUtil.getHoverMarkerSize(e3);
        o3[e3] && (s2 = o3[e3][t4][0], r3 = o3[e3][t4][1]);
        var l3 = i3.tooltipUtil.getAllMarkers();
        if (null !== l3)
          for (var h3 = 0; h3 < a3.globals.series.length; h3++) {
            var c3 = o3[h3];
            if (a3.globals.comboCharts && void 0 === c3 && l3.splice(h3, 0, null), c3 && c3.length) {
              var d3 = o3[h3][t4][1], g3 = void 0;
              if (l3[h3].setAttribute("cx", s2), "rangeArea" === a3.config.chart.type && !a3.globals.comboCharts) {
                var u3 = t4 + a3.globals.series[h3].length;
                g3 = o3[h3][u3][1], d3 -= Math.abs(d3 - g3) / 2;
              }
              null !== d3 && !isNaN(d3) && d3 < a3.globals.gridHeight + n3 && d3 + n3 > 0 ? (l3[h3] && l3[h3].setAttribute("r", n3), l3[h3] && l3[h3].setAttribute("cy", d3)) : l3[h3] && l3[h3].setAttribute("r", 0);
            }
          }
        if (this.moveXCrosshairs(s2), !i3.fixedTooltip) {
          var f3 = r3 || a3.globals.gridHeight;
          this.moveTooltip(s2, f3, n3);
        }
      } }, { key: "moveStickyTooltipOverBars", value: function(t4) {
        var e3 = this.w, i3 = this.ttCtx, a3 = e3.globals.columnSeries ? e3.globals.columnSeries.length : e3.globals.series.length, s2 = a3 >= 2 && a3 % 2 == 0 ? Math.floor(a3 / 2) : Math.floor(a3 / 2) + 1;
        e3.globals.isBarHorizontal && (s2 = new N2(this.ctx).getActiveConfigSeriesIndex("desc") + 1);
        var r3 = e3.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(s2, "'] path[j='").concat(t4, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(s2, "'] path[j='").concat(t4, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(s2, "'] path[j='").concat(t4, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(s2, "'] path[j='").concat(t4, "']")), o3 = r3 ? parseFloat(r3.getAttribute("cx")) : 0, n3 = r3 ? parseFloat(r3.getAttribute("cy")) : 0, l3 = r3 ? parseFloat(r3.getAttribute("barWidth")) : 0, h3 = i3.getElGrid().getBoundingClientRect(), c3 = r3.classList.contains("apexcharts-candlestick-area") || r3.classList.contains("apexcharts-boxPlot-area");
        if (e3.globals.isXNumeric ? (r3 && !c3 && (o3 -= a3 % 2 != 0 ? l3 / 2 : 0), r3 && c3 && e3.globals.comboCharts && (o3 -= l3 / 2)) : e3.globals.isBarHorizontal || (o3 = i3.xAxisTicksPositions[t4 - 1] + i3.dataPointsDividedWidth / 2, isNaN(o3) && (o3 = i3.xAxisTicksPositions[t4] - i3.dataPointsDividedWidth / 2)), e3.globals.isBarHorizontal ? n3 -= i3.tooltipRect.ttHeight : e3.config.tooltip.followCursor ? n3 = i3.e.clientY - h3.top - i3.tooltipRect.ttHeight / 2 : n3 + i3.tooltipRect.ttHeight + 15 > e3.globals.gridHeight && (n3 = e3.globals.gridHeight), e3.globals.isBarHorizontal || this.moveXCrosshairs(o3), !i3.fixedTooltip) {
          var d3 = n3 || e3.globals.gridHeight;
          this.moveTooltip(o3, d3);
        }
      } }]), t3;
    }(), ft2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.ttCtx = e3, this.ctx = e3.ctx, this.tooltipPosition = new ut2(e3);
      }
      return r2(t3, [{ key: "drawDynamicPoints", value: function() {
        var t4 = this.w, e3 = new m2(this.ctx), i3 = new D2(this.ctx), a3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
        a3 = u2(a3), t4.config.chart.stacked && a3.sort(function(t5, e4) {
          return parseFloat(t5.getAttribute("data:realIndex")) - parseFloat(e4.getAttribute("data:realIndex"));
        });
        for (var s2 = 0; s2 < a3.length; s2++) {
          var r3 = a3[s2].querySelector(".apexcharts-series-markers-wrap");
          if (null !== r3) {
            var o3 = void 0, n3 = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
            "line" !== t4.config.chart.type && "area" !== t4.config.chart.type || t4.globals.comboCharts || t4.config.tooltip.intersect || (n3 += " no-pointer-events");
            var l3 = i3.getMarkerConfig({ cssClass: n3, seriesIndex: Number(r3.getAttribute("data:realIndex")) });
            (o3 = e3.drawMarker(0, 0, l3)).node.setAttribute("default-marker-size", 0);
            var h3 = document.createElementNS(t4.globals.SVGNS, "g");
            h3.classList.add("apexcharts-series-markers"), h3.appendChild(o3.node), r3.appendChild(h3);
          }
        }
      } }, { key: "enlargeCurrentPoint", value: function(t4, e3) {
        var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s2 = this.w;
        "bubble" !== s2.config.chart.type && this.newPointSize(t4, e3);
        var r3 = e3.getAttribute("cx"), o3 = e3.getAttribute("cy");
        if (null !== i3 && null !== a3 && (r3 = i3, o3 = a3), this.tooltipPosition.moveXCrosshairs(r3), !this.fixedTooltip) {
          if ("radar" === s2.config.chart.type) {
            var n3 = this.ttCtx.getElGrid(), l3 = n3.getBoundingClientRect();
            r3 = this.ttCtx.e.clientX - l3.left;
          }
          this.tooltipPosition.moveTooltip(r3, o3, s2.config.markers.hover.size);
        }
      } }, { key: "enlargePoints", value: function(t4) {
        for (var e3 = this.w, i3 = this, a3 = this.ttCtx, s2 = t4, r3 = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), o3 = e3.config.markers.hover.size, n3 = 0; n3 < r3.length; n3++) {
          var l3 = r3[n3].getAttribute("rel"), h3 = r3[n3].getAttribute("index");
          if (void 0 === o3 && (o3 = e3.globals.markers.size[h3] + e3.config.markers.hover.sizeOffset), s2 === parseInt(l3, 10)) {
            i3.newPointSize(s2, r3[n3]);
            var c3 = r3[n3].getAttribute("cx"), d3 = r3[n3].getAttribute("cy");
            i3.tooltipPosition.moveXCrosshairs(c3), a3.fixedTooltip || i3.tooltipPosition.moveTooltip(c3, d3, o3);
          } else
            i3.oldPointSize(r3[n3]);
        }
      } }, { key: "newPointSize", value: function(t4, e3) {
        var i3 = this.w, a3 = i3.config.markers.hover.size, s2 = 0 === t4 ? e3.parentNode.firstChild : e3.parentNode.lastChild;
        if ("0" !== s2.getAttribute("default-marker-size")) {
          var r3 = parseInt(s2.getAttribute("index"), 10);
          void 0 === a3 && (a3 = i3.globals.markers.size[r3] + i3.config.markers.hover.sizeOffset), a3 < 0 && (a3 = 0), s2.setAttribute("r", a3);
        }
      } }, { key: "oldPointSize", value: function(t4) {
        var e3 = parseFloat(t4.getAttribute("default-marker-size"));
        t4.setAttribute("r", e3);
      } }, { key: "resetPointsSize", value: function() {
        for (var t4 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e3 = 0; e3 < t4.length; e3++) {
          var i3 = parseFloat(t4[e3].getAttribute("default-marker-size"));
          x2.isNumber(i3) && i3 >= 0 ? t4[e3].setAttribute("r", i3) : t4[e3].setAttribute("r", 0);
        }
      } }]), t3;
    }(), pt = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.ttCtx = e3;
      }
      return r2(t3, [{ key: "getAttr", value: function(t4, e3) {
        return parseFloat(t4.target.getAttribute(e3));
      } }, { key: "handleHeatTreeTooltip", value: function(t4) {
        var e3 = t4.e, i3 = t4.opt, a3 = t4.x, s2 = t4.y, r3 = t4.type, o3 = this.ttCtx, n3 = this.w;
        if (e3.target.classList.contains("apexcharts-".concat(r3, "-rect"))) {
          var l3 = this.getAttr(e3, "i"), h3 = this.getAttr(e3, "j"), c3 = this.getAttr(e3, "cx"), d3 = this.getAttr(e3, "cy"), g3 = this.getAttr(e3, "width"), u3 = this.getAttr(e3, "height");
          if (o3.tooltipLabels.drawSeriesTexts({ ttItems: i3.ttItems, i: l3, j: h3, shared: false, e: e3 }), n3.globals.capturedSeriesIndex = l3, n3.globals.capturedDataPointIndex = h3, a3 = c3 + o3.tooltipRect.ttWidth / 2 + g3, s2 = d3 + o3.tooltipRect.ttHeight / 2 - u3 / 2, o3.tooltipPosition.moveXCrosshairs(c3 + g3 / 2), a3 > n3.globals.gridWidth / 2 && (a3 = c3 - o3.tooltipRect.ttWidth / 2 + g3), o3.w.config.tooltip.followCursor) {
            var f3 = n3.globals.dom.elWrap.getBoundingClientRect();
            a3 = n3.globals.clientX - f3.left - (a3 > n3.globals.gridWidth / 2 ? o3.tooltipRect.ttWidth : 0), s2 = n3.globals.clientY - f3.top - (s2 > n3.globals.gridHeight / 2 ? o3.tooltipRect.ttHeight : 0);
          }
        }
        return { x: a3, y: s2 };
      } }, { key: "handleMarkerTooltip", value: function(t4) {
        var e3, i3, a3 = t4.e, s2 = t4.opt, r3 = t4.x, o3 = t4.y, n3 = this.w, l3 = this.ttCtx;
        if (a3.target.classList.contains("apexcharts-marker")) {
          var h3 = parseInt(s2.paths.getAttribute("cx"), 10), c3 = parseInt(s2.paths.getAttribute("cy"), 10), d3 = parseFloat(s2.paths.getAttribute("val"));
          if (i3 = parseInt(s2.paths.getAttribute("rel"), 10), e3 = parseInt(s2.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, l3.intersect) {
            var g3 = x2.findAncestor(s2.paths, "apexcharts-series");
            g3 && (e3 = parseInt(g3.getAttribute("data:realIndex"), 10));
          }
          if (l3.tooltipLabels.drawSeriesTexts({ ttItems: s2.ttItems, i: e3, j: i3, shared: !l3.showOnIntersect && n3.config.tooltip.shared, e: a3 }), "mouseup" === a3.type && l3.markerClick(a3, e3, i3), n3.globals.capturedSeriesIndex = e3, n3.globals.capturedDataPointIndex = i3, r3 = h3, o3 = c3 + n3.globals.translateY - 1.4 * l3.tooltipRect.ttHeight, l3.w.config.tooltip.followCursor) {
            var u3 = l3.getElGrid().getBoundingClientRect();
            o3 = l3.e.clientY + n3.globals.translateY - u3.top;
          }
          d3 < 0 && (o3 = c3), l3.marker.enlargeCurrentPoint(i3, s2.paths, r3, o3);
        }
        return { x: r3, y: o3 };
      } }, { key: "handleBarTooltip", value: function(t4) {
        var e3, i3, a3 = t4.e, s2 = t4.opt, r3 = this.w, o3 = this.ttCtx, n3 = o3.getElTooltip(), l3 = 0, h3 = 0, c3 = 0, d3 = this.getBarTooltipXY({ e: a3, opt: s2 });
        e3 = d3.i;
        var g3 = d3.barHeight, u3 = d3.j;
        r3.globals.capturedSeriesIndex = e3, r3.globals.capturedDataPointIndex = u3, r3.globals.isBarHorizontal && o3.tooltipUtil.hasBars() || !r3.config.tooltip.shared ? (h3 = d3.x, c3 = d3.y, i3 = Array.isArray(r3.config.stroke.width) ? r3.config.stroke.width[e3] : r3.config.stroke.width, l3 = h3) : r3.globals.comboCharts || r3.config.tooltip.shared || (l3 /= 2), isNaN(c3) && (c3 = r3.globals.svgHeight - o3.tooltipRect.ttHeight);
        var f3 = parseInt(s2.paths.parentNode.getAttribute("data:realIndex"), 10), p3 = r3.globals.isMultipleYAxis ? r3.config.yaxis[f3] && r3.config.yaxis[f3].reversed : r3.config.yaxis[0].reversed;
        if (h3 + o3.tooltipRect.ttWidth > r3.globals.gridWidth && !p3 ? h3 -= o3.tooltipRect.ttWidth : h3 < 0 && (h3 = 0), o3.w.config.tooltip.followCursor) {
          var x3 = o3.getElGrid().getBoundingClientRect();
          c3 = o3.e.clientY - x3.top;
        }
        null === o3.tooltip && (o3.tooltip = r3.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), r3.config.tooltip.shared || (r3.globals.comboBarCount > 0 ? o3.tooltipPosition.moveXCrosshairs(l3 + i3 / 2) : o3.tooltipPosition.moveXCrosshairs(l3)), !o3.fixedTooltip && (!r3.config.tooltip.shared || r3.globals.isBarHorizontal && o3.tooltipUtil.hasBars()) && (p3 && (h3 -= o3.tooltipRect.ttWidth) < 0 && (h3 = 0), !p3 || r3.globals.isBarHorizontal && o3.tooltipUtil.hasBars() || (c3 = c3 + g3 - 2 * (r3.globals.series[e3][u3] < 0 ? g3 : 0)), c3 = c3 + r3.globals.translateY - o3.tooltipRect.ttHeight / 2, n3.style.left = h3 + r3.globals.translateX + "px", n3.style.top = c3 + "px");
      } }, { key: "getBarTooltipXY", value: function(t4) {
        var e3 = t4.e, i3 = t4.opt, a3 = this.w, s2 = null, r3 = this.ttCtx, o3 = 0, n3 = 0, l3 = 0, h3 = 0, c3 = 0, d3 = e3.target.classList;
        if (d3.contains("apexcharts-bar-area") || d3.contains("apexcharts-candlestick-area") || d3.contains("apexcharts-boxPlot-area") || d3.contains("apexcharts-rangebar-area")) {
          var g3 = e3.target, u3 = g3.getBoundingClientRect(), f3 = i3.elGrid.getBoundingClientRect(), p3 = u3.height;
          c3 = u3.height;
          var x3 = u3.width, b3 = parseInt(g3.getAttribute("cx"), 10), v3 = parseInt(g3.getAttribute("cy"), 10);
          h3 = parseFloat(g3.getAttribute("barWidth"));
          var m3 = "touchmove" === e3.type ? e3.touches[0].clientX : e3.clientX;
          s2 = parseInt(g3.getAttribute("j"), 10), o3 = parseInt(g3.parentNode.getAttribute("rel"), 10) - 1;
          var y2 = g3.getAttribute("data-range-y1"), w2 = g3.getAttribute("data-range-y2");
          a3.globals.comboCharts && (o3 = parseInt(g3.parentNode.getAttribute("data:realIndex"), 10)), r3.tooltipLabels.drawSeriesTexts({ ttItems: i3.ttItems, i: o3, j: s2, y1: y2 ? parseInt(y2, 10) : null, y2: w2 ? parseInt(w2, 10) : null, shared: !r3.showOnIntersect && a3.config.tooltip.shared, e: e3 }), a3.config.tooltip.followCursor ? a3.globals.isBarHorizontal ? (n3 = m3 - f3.left + 15, l3 = v3 - r3.dataPointsDividedHeight + p3 / 2 - r3.tooltipRect.ttHeight / 2) : (n3 = a3.globals.isXNumeric ? b3 - x3 / 2 : b3 - r3.dataPointsDividedWidth + x3 / 2, l3 = e3.clientY - f3.top - r3.tooltipRect.ttHeight / 2 - 15) : a3.globals.isBarHorizontal ? ((n3 = b3) < r3.xyRatios.baseLineInvertedY && (n3 = b3 - r3.tooltipRect.ttWidth), l3 = v3 - r3.dataPointsDividedHeight + p3 / 2 - r3.tooltipRect.ttHeight / 2) : (n3 = a3.globals.isXNumeric ? b3 - x3 / 2 : b3 - r3.dataPointsDividedWidth + x3 / 2, l3 = v3);
        }
        return { x: n3, y: l3, barHeight: c3, barWidth: h3, i: o3, j: s2 };
      } }]), t3;
    }(), xt2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.ttCtx = e3;
      }
      return r2(t3, [{ key: "drawXaxisTooltip", value: function() {
        var t4 = this.w, e3 = this.ttCtx, i3 = "bottom" === t4.config.xaxis.position;
        e3.xaxisOffY = i3 ? t4.globals.gridHeight + 1 : -t4.globals.xAxisHeight - t4.config.xaxis.axisTicks.height + 3;
        var a3 = i3 ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top", s2 = t4.globals.dom.elWrap;
        e3.isXAxisTooltipEnabled && (null === t4.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e3.xaxisTooltip = document.createElement("div"), e3.xaxisTooltip.setAttribute("class", a3 + " apexcharts-theme-" + t4.config.tooltip.theme), s2.appendChild(e3.xaxisTooltip), e3.xaxisTooltipText = document.createElement("div"), e3.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e3.xaxisTooltipText.style.fontFamily = t4.config.xaxis.tooltip.style.fontFamily || t4.config.chart.fontFamily, e3.xaxisTooltipText.style.fontSize = t4.config.xaxis.tooltip.style.fontSize, e3.xaxisTooltip.appendChild(e3.xaxisTooltipText)));
      } }, { key: "drawYaxisTooltip", value: function() {
        for (var t4 = this.w, e3 = this.ttCtx, i3 = function(i4) {
          var a4 = t4.config.yaxis[i4].opposite || t4.config.yaxis[i4].crosshairs.opposite;
          e3.yaxisOffX = a4 ? t4.globals.gridWidth + 1 : 1;
          var s2 = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i4, a4 ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left");
          t4.globals.yAxisSameScaleIndices.map(function(e4, a5) {
            e4.map(function(e5, a6) {
              a6 === i4 && (s2 += t4.config.yaxis[a6].show ? " " : " apexcharts-yaxistooltip-hidden");
            });
          });
          var r3 = t4.globals.dom.elWrap;
          null === t4.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i4)) && (e3.yaxisTooltip = document.createElement("div"), e3.yaxisTooltip.setAttribute("class", s2 + " apexcharts-theme-" + t4.config.tooltip.theme), r3.appendChild(e3.yaxisTooltip), 0 === i4 && (e3.yaxisTooltipText = []), e3.yaxisTooltipText[i4] = document.createElement("div"), e3.yaxisTooltipText[i4].classList.add("apexcharts-yaxistooltip-text"), e3.yaxisTooltip.appendChild(e3.yaxisTooltipText[i4]));
        }, a3 = 0; a3 < t4.config.yaxis.length; a3++)
          i3(a3);
      } }, { key: "setXCrosshairWidth", value: function() {
        var t4 = this.w, e3 = this.ttCtx, i3 = e3.getElXCrosshairs();
        if (e3.xcrosshairsWidth = parseInt(t4.config.xaxis.crosshairs.width, 10), t4.globals.comboCharts) {
          var a3 = t4.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
          if (null !== a3 && "barWidth" === t4.config.xaxis.crosshairs.width) {
            var s2 = parseFloat(a3.getAttribute("barWidth"));
            e3.xcrosshairsWidth = s2;
          } else if ("tickWidth" === t4.config.xaxis.crosshairs.width) {
            var r3 = t4.globals.labels.length;
            e3.xcrosshairsWidth = t4.globals.gridWidth / r3;
          }
        } else if ("tickWidth" === t4.config.xaxis.crosshairs.width) {
          var o3 = t4.globals.labels.length;
          e3.xcrosshairsWidth = t4.globals.gridWidth / o3;
        } else if ("barWidth" === t4.config.xaxis.crosshairs.width) {
          var n3 = t4.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
          if (null !== n3) {
            var l3 = parseFloat(n3.getAttribute("barWidth"));
            e3.xcrosshairsWidth = l3;
          } else
            e3.xcrosshairsWidth = 1;
        }
        t4.globals.isBarHorizontal && (e3.xcrosshairsWidth = 0), null !== i3 && e3.xcrosshairsWidth > 0 && i3.setAttribute("width", e3.xcrosshairsWidth);
      } }, { key: "handleYCrosshair", value: function() {
        var t4 = this.w, e3 = this.ttCtx;
        e3.ycrosshairs = t4.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e3.ycrosshairsHidden = t4.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
      } }, { key: "drawYaxisTooltipText", value: function(t4, e3, i3) {
        var a3 = this.ttCtx, s2 = this.w, r3 = s2.globals.yLabelFormatters[t4];
        if (a3.yaxisTooltips[t4]) {
          var o3 = a3.getElGrid().getBoundingClientRect(), n3 = (e3 - o3.top) * i3.yRatio[t4], l3 = s2.globals.maxYArr[t4] - s2.globals.minYArr[t4], h3 = s2.globals.minYArr[t4] + (l3 - n3);
          a3.tooltipPosition.moveYCrosshairs(e3 - o3.top), a3.yaxisTooltipText[t4].innerHTML = r3(h3), a3.tooltipPosition.moveYAxisTooltip(t4);
        }
      } }]), t3;
    }(), bt2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
        var i3 = this.w;
        this.tConfig = i3.config.tooltip, this.tooltipUtil = new dt2(this), this.tooltipLabels = new gt2(this), this.tooltipPosition = new ut2(this), this.marker = new ft2(this), this.intersect = new pt(this), this.axesTooltip = new xt2(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !i3.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();
      }
      return r2(t3, [{ key: "getElTooltip", value: function(t4) {
        return t4 || (t4 = this), t4.w.globals.dom.baseEl ? t4.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip") : null;
      } }, { key: "getElXCrosshairs", value: function() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
      } }, { key: "getElGrid", value: function() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
      } }, { key: "drawTooltip", value: function(t4) {
        var e3 = this.w;
        this.xyRatios = t4, this.isXAxisTooltipEnabled = e3.config.xaxis.tooltip.enabled && e3.globals.axisCharts, this.yaxisTooltips = e3.config.yaxis.map(function(t5, i4) {
          return !!(t5.show && t5.tooltip.enabled && e3.globals.axisCharts);
        }), this.allTooltipSeriesGroups = [], e3.globals.axisCharts || (this.showTooltipTitle = false);
        var i3 = document.createElement("div");
        if (i3.classList.add("apexcharts-tooltip"), e3.config.tooltip.cssClass && i3.classList.add(e3.config.tooltip.cssClass), i3.classList.add("apexcharts-theme-".concat(this.tConfig.theme)), e3.globals.dom.elWrap.appendChild(i3), e3.globals.axisCharts) {
          this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
          var a3 = new V2(this.ctx);
          this.xAxisTicksPositions = a3.getXAxisTicksPositions();
        }
        if (!e3.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e3.config.chart.type || this.tConfig.shared || (this.showOnIntersect = true), 0 !== e3.config.markers.size && 0 !== e3.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e3.globals.collapsedSeries.length !== e3.globals.series.length) {
          this.dataPointsDividedHeight = e3.globals.gridHeight / e3.globals.dataPoints, this.dataPointsDividedWidth = e3.globals.gridWidth / e3.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e3.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i3.appendChild(this.tooltipTitle));
          var s2 = e3.globals.series.length;
          (e3.globals.xyCharts || e3.globals.comboCharts) && this.tConfig.shared && (s2 = this.showOnIntersect ? 1 : e3.globals.series.length), this.legendLabels = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(s2), this.addSVGEvents();
        }
      } }, { key: "createTTElements", value: function(t4) {
        for (var e3 = this, i3 = this.w, a3 = [], s2 = this.getElTooltip(), r3 = function(r4) {
          var o4 = document.createElement("div");
          o4.classList.add("apexcharts-tooltip-series-group"), o4.style.order = i3.config.tooltip.inverseOrder ? t4 - r4 : r4 + 1, e3.tConfig.shared && e3.tConfig.enabledOnSeries && Array.isArray(e3.tConfig.enabledOnSeries) && e3.tConfig.enabledOnSeries.indexOf(r4) < 0 && o4.classList.add("apexcharts-tooltip-series-group-hidden");
          var n3 = document.createElement("span");
          n3.classList.add("apexcharts-tooltip-marker"), n3.style.backgroundColor = i3.globals.colors[r4], o4.appendChild(n3);
          var l3 = document.createElement("div");
          l3.classList.add("apexcharts-tooltip-text"), l3.style.fontFamily = e3.tConfig.style.fontFamily || i3.config.chart.fontFamily, l3.style.fontSize = e3.tConfig.style.fontSize, ["y", "goals", "z"].forEach(function(t5) {
            var e4 = document.createElement("div");
            e4.classList.add("apexcharts-tooltip-".concat(t5, "-group"));
            var i4 = document.createElement("span");
            i4.classList.add("apexcharts-tooltip-text-".concat(t5, "-label")), e4.appendChild(i4);
            var a4 = document.createElement("span");
            a4.classList.add("apexcharts-tooltip-text-".concat(t5, "-value")), e4.appendChild(a4), l3.appendChild(e4);
          }), o4.appendChild(l3), s2.appendChild(o4), a3.push(o4);
        }, o3 = 0; o3 < t4; o3++)
          r3(o3);
        return a3;
      } }, { key: "addSVGEvents", value: function() {
        var t4 = this.w, e3 = t4.config.chart.type, i3 = this.getElTooltip(), a3 = !("bar" !== e3 && "candlestick" !== e3 && "boxPlot" !== e3 && "rangeBar" !== e3), s2 = "area" === e3 || "line" === e3 || "scatter" === e3 || "bubble" === e3 || "radar" === e3, r3 = t4.globals.dom.Paper.node, o3 = this.getElGrid();
        o3 && (this.seriesBound = o3.getBoundingClientRect());
        var n3, l3 = [], h3 = [], c3 = { hoverArea: r3, elGrid: o3, tooltipEl: i3, tooltipY: l3, tooltipX: h3, ttItems: this.ttItems };
        if (t4.globals.axisCharts && (s2 ? n3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : a3 ? n3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" !== e3 && "treemap" !== e3 || (n3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")), n3 && n3.length))
          for (var d3 = 0; d3 < n3.length; d3++)
            l3.push(n3[d3].getAttribute("cy")), h3.push(n3[d3].getAttribute("cx"));
        if (t4.globals.xyCharts && !this.showOnIntersect || t4.globals.comboCharts && !this.showOnIntersect || a3 && this.tooltipUtil.hasBars() && this.tConfig.shared)
          this.addPathsEventListeners([r3], c3);
        else if (a3 && !t4.globals.comboCharts || s2 && this.showOnIntersect)
          this.addDatapointEventsListeners(c3);
        else if (!t4.globals.axisCharts || "heatmap" === e3 || "treemap" === e3) {
          var g3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
          this.addPathsEventListeners(g3, c3);
        }
        if (this.showOnIntersect) {
          var u3 = t4.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
          u3.length > 0 && this.addPathsEventListeners(u3, c3), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c3);
        }
      } }, { key: "drawFixedTooltipRect", value: function() {
        var t4 = this.w, e3 = this.getElTooltip(), i3 = e3.getBoundingClientRect(), a3 = i3.width + 10, s2 = i3.height + 10, r3 = this.tConfig.fixed.offsetX, o3 = this.tConfig.fixed.offsetY, n3 = this.tConfig.fixed.position.toLowerCase();
        return n3.indexOf("right") > -1 && (r3 = r3 + t4.globals.svgWidth - a3 + 10), n3.indexOf("bottom") > -1 && (o3 = o3 + t4.globals.svgHeight - s2 - 10), e3.style.left = r3 + "px", e3.style.top = o3 + "px", { x: r3, y: o3, ttWidth: a3, ttHeight: s2 };
      } }, { key: "addDatapointEventsListeners", value: function(t4) {
        var e3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");
        this.addPathsEventListeners(e3, t4);
      } }, { key: "addPathsEventListeners", value: function(t4, e3) {
        for (var i3 = this, a3 = function(a4) {
          var s3 = { paths: t4[a4], tooltipEl: e3.tooltipEl, tooltipY: e3.tooltipY, tooltipX: e3.tooltipX, elGrid: e3.elGrid, hoverArea: e3.hoverArea, ttItems: e3.ttItems };
          ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map(function(e4) {
            return t4[a4].addEventListener(e4, i3.onSeriesHover.bind(i3, s3), { capture: false, passive: true });
          });
        }, s2 = 0; s2 < t4.length; s2++)
          a3(s2);
      } }, { key: "onSeriesHover", value: function(t4, e3) {
        var i3 = this, a3 = Date.now() - this.lastHoverTime;
        a3 >= 100 ? this.seriesHover(t4, e3) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function() {
          i3.seriesHover(t4, e3);
        }, 100 - a3));
      } }, { key: "seriesHover", value: function(t4, e3) {
        var i3 = this;
        this.lastHoverTime = Date.now();
        var a3 = [], s2 = this.w;
        s2.config.chart.group && (a3 = this.ctx.getGroupedCharts()), s2.globals.axisCharts && (s2.globals.minX === -1 / 0 && s2.globals.maxX === 1 / 0 || 0 === s2.globals.dataPoints) || (a3.length ? a3.forEach(function(a4) {
          var s3 = i3.getElTooltip(a4), r3 = { paths: t4.paths, tooltipEl: s3, tooltipY: t4.tooltipY, tooltipX: t4.tooltipX, elGrid: t4.elGrid, hoverArea: t4.hoverArea, ttItems: a4.w.globals.tooltip.ttItems };
          a4.w.globals.minX === i3.w.globals.minX && a4.w.globals.maxX === i3.w.globals.maxX && a4.w.globals.tooltip.seriesHoverByContext({ chartCtx: a4, ttCtx: a4.w.globals.tooltip, opt: r3, e: e3 });
        }) : this.seriesHoverByContext({ chartCtx: this.ctx, ttCtx: this.w.globals.tooltip, opt: t4, e: e3 }));
      } }, { key: "seriesHoverByContext", value: function(t4) {
        var e3 = t4.chartCtx, i3 = t4.ttCtx, a3 = t4.opt, s2 = t4.e, r3 = e3.w, o3 = this.getElTooltip();
        if (o3) {
          if (i3.tooltipRect = { x: 0, y: 0, ttWidth: o3.getBoundingClientRect().width, ttHeight: o3.getBoundingClientRect().height }, i3.e = s2, i3.tooltipUtil.hasBars() && !r3.globals.comboCharts && !i3.isBarShared) {
            if (this.tConfig.onDatasetHover.highlightDataSeries)
              new N2(e3).toggleSeriesOnHover(s2, s2.target.parentNode);
          }
          i3.fixedTooltip && i3.drawFixedTooltipRect(), r3.globals.axisCharts ? i3.axisChartsTooltips({ e: s2, opt: a3, tooltipRect: i3.tooltipRect }) : i3.nonAxisChartsTooltips({ e: s2, opt: a3, tooltipRect: i3.tooltipRect });
        }
      } }, { key: "axisChartsTooltips", value: function(t4) {
        var e3, i3, a3 = t4.e, s2 = t4.opt, r3 = this.w, o3 = s2.elGrid.getBoundingClientRect(), n3 = "touchmove" === a3.type ? a3.touches[0].clientX : a3.clientX, l3 = "touchmove" === a3.type ? a3.touches[0].clientY : a3.clientY;
        if (this.clientY = l3, this.clientX = n3, r3.globals.capturedSeriesIndex = -1, r3.globals.capturedDataPointIndex = -1, l3 < o3.top || l3 > o3.top + o3.height)
          this.handleMouseOut(s2);
        else {
          if (Array.isArray(this.tConfig.enabledOnSeries) && !r3.config.tooltip.shared) {
            var h3 = parseInt(s2.paths.getAttribute("index"), 10);
            if (this.tConfig.enabledOnSeries.indexOf(h3) < 0)
              return void this.handleMouseOut(s2);
          }
          var c3 = this.getElTooltip(), d3 = this.getElXCrosshairs(), g3 = r3.globals.xyCharts || "bar" === r3.config.chart.type && !r3.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r3.globals.comboCharts && this.tooltipUtil.hasBars();
          if ("mousemove" === a3.type || "touchmove" === a3.type || "mouseup" === a3.type) {
            if (r3.globals.collapsedSeries.length + r3.globals.ancillaryCollapsedSeries.length === r3.globals.series.length)
              return;
            null !== d3 && d3.classList.add("apexcharts-active");
            var u3 = this.yaxisTooltips.filter(function(t5) {
              return true === t5;
            });
            if (null !== this.ycrosshairs && u3.length && this.ycrosshairs.classList.add("apexcharts-active"), g3 && !this.showOnIntersect)
              this.handleStickyTooltip(a3, n3, l3, s2);
            else if ("heatmap" === r3.config.chart.type || "treemap" === r3.config.chart.type) {
              var f3 = this.intersect.handleHeatTreeTooltip({ e: a3, opt: s2, x: e3, y: i3, type: r3.config.chart.type });
              e3 = f3.x, i3 = f3.y, c3.style.left = e3 + "px", c3.style.top = i3 + "px";
            } else
              this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({ e: a3, opt: s2 }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({ e: a3, opt: s2, x: e3, y: i3 });
            if (this.yaxisTooltips.length)
              for (var p3 = 0; p3 < r3.config.yaxis.length; p3++)
                this.axesTooltip.drawYaxisTooltipText(p3, l3, this.xyRatios);
            s2.tooltipEl.classList.add("apexcharts-active");
          } else
            "mouseout" !== a3.type && "touchend" !== a3.type || this.handleMouseOut(s2);
        }
      } }, { key: "nonAxisChartsTooltips", value: function(t4) {
        var e3 = t4.e, i3 = t4.opt, a3 = t4.tooltipRect, s2 = this.w, r3 = i3.paths.getAttribute("rel"), o3 = this.getElTooltip(), n3 = s2.globals.dom.elWrap.getBoundingClientRect();
        if ("mousemove" === e3.type || "touchmove" === e3.type) {
          o3.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({ ttItems: i3.ttItems, i: parseInt(r3, 10) - 1, shared: false });
          var l3 = s2.globals.clientX - n3.left - a3.ttWidth / 2, h3 = s2.globals.clientY - n3.top - a3.ttHeight - 10;
          if (o3.style.left = l3 + "px", o3.style.top = h3 + "px", s2.config.legend.tooltipHoverFormatter) {
            var c3 = r3 - 1, d3 = (0, s2.config.legend.tooltipHoverFormatter)(this.legendLabels[c3].getAttribute("data:default-text"), { seriesIndex: c3, dataPointIndex: c3, w: s2 });
            this.legendLabels[c3].innerHTML = d3;
          }
        } else
          "mouseout" !== e3.type && "touchend" !== e3.type || (o3.classList.remove("apexcharts-active"), s2.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t5) {
            var e4 = t5.getAttribute("data:default-text");
            t5.innerHTML = decodeURIComponent(e4);
          }));
      } }, { key: "handleStickyTooltip", value: function(t4, e3, i3, a3) {
        var s2 = this.w, r3 = this.tooltipUtil.getNearestValues({ context: this, hoverArea: a3.hoverArea, elGrid: a3.elGrid, clientX: e3, clientY: i3 }), o3 = r3.j, n3 = r3.capturedSeries, l3 = a3.elGrid.getBoundingClientRect();
        r3.hoverX < 0 || r3.hoverX > l3.width ? this.handleMouseOut(a3) : null !== n3 ? this.handleStickyCapturedSeries(t4, n3, a3, o3) : (this.tooltipUtil.isXoverlap(o3) || s2.globals.isBarHorizontal) && this.create(t4, this, 0, o3, a3.ttItems);
      } }, { key: "handleStickyCapturedSeries", value: function(t4, e3, i3, a3) {
        var s2 = this.w;
        if (!this.tConfig.shared && null === s2.globals.series[e3][a3])
          return void this.handleMouseOut(i3);
        void 0 !== s2.globals.series[e3][a3] ? this.tConfig.shared && this.tooltipUtil.isXoverlap(a3) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t4, this, e3, a3, i3.ttItems) : this.create(t4, this, e3, a3, i3.ttItems, false) : this.tooltipUtil.isXoverlap(a3) && this.create(t4, this, 0, a3, i3.ttItems);
      } }, { key: "deactivateHoverFilter", value: function() {
        for (var t4 = this.w, e3 = new m2(this.ctx), i3 = t4.globals.dom.Paper.select(".apexcharts-bar-area"), a3 = 0; a3 < i3.length; a3++)
          e3.pathMouseLeave(i3[a3]);
      } }, { key: "handleMouseOut", value: function(t4) {
        var e3 = this.w, i3 = this.getElXCrosshairs();
        if (t4.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e3.config.chart.type && this.marker.resetPointsSize(), null !== i3 && i3.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"), this.yaxisTooltips.length) {
          null === this.yaxisTTEls && (this.yaxisTTEls = e3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
          for (var a3 = 0; a3 < this.yaxisTTEls.length; a3++)
            this.yaxisTTEls[a3].classList.remove("apexcharts-active");
        }
        e3.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t5) {
          var e4 = t5.getAttribute("data:default-text");
          t5.innerHTML = decodeURIComponent(e4);
        });
      } }, { key: "markerClick", value: function(t4, e3, i3) {
        var a3 = this.w;
        "function" == typeof a3.config.chart.events.markerClick && a3.config.chart.events.markerClick(t4, this.ctx, { seriesIndex: e3, dataPointIndex: i3, w: a3 }), this.ctx.events.fireEvent("markerClick", [t4, this.ctx, { seriesIndex: e3, dataPointIndex: i3, w: a3 }]);
      } }, { key: "create", value: function(t4, i3, a3, s2, r3) {
        var o3, n3, l3, h3, c3, d3, g3, u3, f3, p3, x3, b3, v3, y2, w2, k3, A3 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, S3 = this.w, C3 = i3;
        "mouseup" === t4.type && this.markerClick(t4, a3, s2), null === A3 && (A3 = this.tConfig.shared);
        var L3 = this.tooltipUtil.hasMarkers(), P3 = this.tooltipUtil.getElBars();
        if (S3.config.legend.tooltipHoverFormatter) {
          var T3 = S3.config.legend.tooltipHoverFormatter, M3 = Array.from(this.legendLabels);
          M3.forEach(function(t5) {
            var e3 = t5.getAttribute("data:default-text");
            t5.innerHTML = decodeURIComponent(e3);
          });
          for (var I3 = 0; I3 < M3.length; I3++) {
            var z3 = M3[I3], X3 = parseInt(z3.getAttribute("i"), 10), E3 = decodeURIComponent(z3.getAttribute("data:default-text")), Y3 = T3(E3, { seriesIndex: A3 ? X3 : a3, dataPointIndex: s2, w: S3 });
            if (A3)
              z3.innerHTML = S3.globals.collapsedSeriesIndices.indexOf(X3) < 0 ? Y3 : E3;
            else if (z3.innerHTML = X3 === a3 ? Y3 : E3, a3 === X3)
              break;
          }
        }
        var F3 = e2(e2({ ttItems: r3, i: a3, j: s2 }, void 0 !== (null === (o3 = S3.globals.seriesRange) || void 0 === o3 || null === (n3 = o3[a3]) || void 0 === n3 || null === (l3 = n3[s2]) || void 0 === l3 || null === (h3 = l3.y[0]) || void 0 === h3 ? void 0 : h3.y1) && { y1: null === (c3 = S3.globals.seriesRange) || void 0 === c3 || null === (d3 = c3[a3]) || void 0 === d3 || null === (g3 = d3[s2]) || void 0 === g3 || null === (u3 = g3.y[0]) || void 0 === u3 ? void 0 : u3.y1 }), void 0 !== (null === (f3 = S3.globals.seriesRange) || void 0 === f3 || null === (p3 = f3[a3]) || void 0 === p3 || null === (x3 = p3[s2]) || void 0 === x3 || null === (b3 = x3.y[0]) || void 0 === b3 ? void 0 : b3.y2) && { y2: null === (v3 = S3.globals.seriesRange) || void 0 === v3 || null === (y2 = v3[a3]) || void 0 === y2 || null === (w2 = y2[s2]) || void 0 === w2 || null === (k3 = w2.y[0]) || void 0 === k3 ? void 0 : k3.y2 });
        if (A3) {
          if (C3.tooltipLabels.drawSeriesTexts(e2(e2({}, F3), {}, { shared: !this.showOnIntersect && this.tConfig.shared })), L3 && (S3.globals.markers.largestSize > 0 ? C3.marker.enlargePoints(s2) : C3.tooltipPosition.moveDynamicPointsOnHover(s2)), this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(P3), this.barSeriesHeight > 0)) {
            var R3 = new m2(this.ctx), D3 = S3.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(s2, "']"));
            this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(s2);
            for (var H2 = 0; H2 < D3.length; H2++)
              R3.pathMouseEnter(D3[H2]);
          }
        } else
          C3.tooltipLabels.drawSeriesTexts(e2({ shared: false }, F3)), this.tooltipUtil.hasBars() && C3.tooltipPosition.moveStickyTooltipOverBars(s2), L3 && C3.tooltipPosition.moveMarkers(a3, s2);
      } }]), t3;
    }(), vt2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.barCtx = e3, this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter, this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);
      }
      return r2(t3, [{ key: "handleBarDataLabels", value: function(t4) {
        var e3 = t4.x, i3 = t4.y, a3 = t4.y1, s2 = t4.y2, r3 = t4.i, o3 = t4.j, n3 = t4.realIndex, l3 = t4.series, h3 = t4.barHeight, c3 = t4.barWidth, d3 = t4.barYPosition, g3 = t4.visibleSeries, u3 = t4.renderedPath, f3 = this.w, p3 = new m2(this.barCtx.ctx), x3 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[n3] : this.barCtx.strokeWidth, b3 = e3 + parseFloat(c3 * g3), v3 = i3 + parseFloat(h3 * g3);
        f3.globals.isXNumeric && !f3.globals.isBarHorizontal && (b3 = e3 + parseFloat(c3 * (g3 + 1)), v3 = i3 + parseFloat(h3 * (g3 + 1)) - x3);
        var y2, w2 = null, k3 = e3, A3 = i3, S3 = {}, C3 = f3.config.dataLabels, L3 = this.barCtx.barOptions.dataLabels, P3 = this.barCtx.barOptions.dataLabels.total;
        void 0 !== d3 && this.barCtx.isRangeBar && (v3 = d3, A3 = d3);
        var T3 = C3.offsetX, M3 = C3.offsetY, I3 = { width: 0, height: 0 };
        if (f3.config.dataLabels.enabled) {
          var z3 = this.barCtx.series[r3][o3];
          I3 = p3.getTextRects(f3.globals.yLabelFormatters[0](z3), parseFloat(C3.style.fontSize));
        }
        var X3 = { x: e3, y: i3, i: r3, j: o3, realIndex: n3, renderedPath: u3, bcx: b3, bcy: v3, barHeight: h3, barWidth: c3, textRects: I3, strokeWidth: x3, dataLabelsX: k3, dataLabelsY: A3, dataLabelsConfig: C3, barDataLabelsConfig: L3, barTotalDataLabelsConfig: P3, offX: T3, offY: M3 };
        return S3 = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(X3) : this.calculateColumnsDataLabelsPosition(X3), u3.attr({ cy: S3.bcy, cx: S3.bcx, j: o3, val: l3[r3][o3], barHeight: h3, barWidth: c3 }), y2 = this.drawCalculatedDataLabels({ x: S3.dataLabelsX, y: S3.dataLabelsY, val: this.barCtx.isRangeBar ? [a3, s2] : l3[r3][o3], i: n3, j: o3, barWidth: c3, barHeight: h3, textRects: I3, dataLabelsConfig: C3 }), f3.config.chart.stacked && P3.enabled && (w2 = this.drawTotalDataLabels({ x: S3.totalDataLabelsX, y: S3.totalDataLabelsY, realIndex: n3, textAnchor: S3.totalDataLabelsAnchor, val: this.getStackedTotalDataLabel({ realIndex: n3, j: o3 }), dataLabelsConfig: C3, barTotalDataLabelsConfig: P3 })), { dataLabels: y2, totalDataLabels: w2 };
      } }, { key: "getStackedTotalDataLabel", value: function(t4) {
        var i3 = t4.realIndex, a3 = t4.j, s2 = this.w, r3 = this.barCtx.stackedSeriesTotals[a3];
        return this.totalFormatter && (r3 = this.totalFormatter(r3, e2(e2({}, s2), {}, { seriesIndex: i3, dataPointIndex: a3, w: s2 }))), r3;
      } }, { key: "calculateColumnsDataLabelsPosition", value: function(t4) {
        var e3, i3, a3, s2 = this.w, r3 = t4.i, o3 = t4.j, n3 = t4.realIndex, l3 = t4.y, h3 = t4.bcx, c3 = t4.barWidth, d3 = t4.barHeight, g3 = t4.textRects, u3 = t4.dataLabelsY, f3 = t4.dataLabelsConfig, p3 = t4.barDataLabelsConfig, x3 = t4.barTotalDataLabelsConfig, b3 = t4.strokeWidth, v3 = t4.offX, y2 = t4.offY;
        d3 = Math.abs(d3);
        var w2 = "vertical" === s2.config.plotOptions.bar.dataLabels.orientation;
        h3 -= b3 / 2;
        var k3 = s2.globals.gridWidth / s2.globals.dataPoints;
        if (e3 = s2.globals.isXNumeric ? h3 - c3 / 2 + v3 : h3 - k3 + c3 / 2 + v3, w2) {
          e3 = e3 + g3.height / 2 - b3 / 2 - 2;
        }
        var A3 = this.barCtx.series[r3][o3] < 0, S3 = l3;
        switch (this.barCtx.isReversed && (S3 = l3 - d3 + (A3 ? 2 * d3 : 0), l3 -= d3), p3.position) {
          case "center":
            u3 = w2 ? A3 ? S3 + d3 / 2 + y2 : S3 + d3 / 2 - y2 : A3 ? S3 - d3 / 2 + g3.height / 2 + y2 : S3 + d3 / 2 + g3.height / 2 - y2;
            break;
          case "bottom":
            u3 = w2 ? A3 ? S3 + d3 + y2 : S3 + d3 - y2 : A3 ? S3 - d3 + g3.height + b3 + y2 : S3 + d3 - g3.height / 2 + b3 - y2;
            break;
          case "top":
            u3 = w2 ? A3 ? S3 + y2 : S3 - y2 : A3 ? S3 - g3.height / 2 - y2 : S3 + g3.height + y2;
        }
        if (this.barCtx.lastActiveBarSerieIndex === n3 && x3.enabled) {
          var C3 = new m2(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: n3, j: o3 }), f3.fontSize);
          i3 = A3 ? S3 - C3.height / 2 - y2 - x3.offsetY + 18 : S3 + C3.height + y2 + x3.offsetY - 18, a3 = e3 + x3.offsetX;
        }
        return s2.config.chart.stacked || (u3 < 0 ? u3 = 0 + b3 : u3 + g3.height / 3 > s2.globals.gridHeight && (u3 = s2.globals.gridHeight - b3)), { bcx: h3, bcy: l3, dataLabelsX: e3, dataLabelsY: u3, totalDataLabelsX: a3, totalDataLabelsY: i3, totalDataLabelsAnchor: "middle" };
      } }, { key: "calculateBarsDataLabelsPosition", value: function(t4) {
        var e3 = this.w, i3 = t4.x, a3 = t4.i, s2 = t4.j, r3 = t4.realIndex, o3 = t4.bcy, n3 = t4.barHeight, l3 = t4.barWidth, h3 = t4.textRects, c3 = t4.dataLabelsX, d3 = t4.strokeWidth, g3 = t4.dataLabelsConfig, u3 = t4.barDataLabelsConfig, f3 = t4.barTotalDataLabelsConfig, p3 = t4.offX, x3 = t4.offY, b3 = e3.globals.gridHeight / e3.globals.dataPoints;
        l3 = Math.abs(l3);
        var v3, y2, w2 = o3 - (this.barCtx.isRangeBar ? 0 : b3) + n3 / 2 + h3.height / 2 + x3 - 3, k3 = "start", A3 = this.barCtx.series[a3][s2] < 0, S3 = i3;
        switch (this.barCtx.isReversed && (S3 = i3 + l3 - (A3 ? 2 * l3 : 0), i3 = e3.globals.gridWidth - l3), u3.position) {
          case "center":
            c3 = A3 ? S3 + l3 / 2 - p3 : Math.max(h3.width / 2, S3 - l3 / 2) + p3;
            break;
          case "bottom":
            c3 = A3 ? S3 + l3 - d3 - Math.round(h3.width / 2) - p3 : S3 - l3 + d3 + Math.round(h3.width / 2) + p3;
            break;
          case "top":
            c3 = A3 ? S3 - d3 + Math.round(h3.width / 2) - p3 : S3 - d3 - Math.round(h3.width / 2) + p3;
        }
        if (this.barCtx.lastActiveBarSerieIndex === r3 && f3.enabled) {
          var C3 = new m2(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: r3, j: s2 }), g3.fontSize);
          A3 ? (v3 = S3 - d3 + Math.round(C3.width / 2) - p3 - f3.offsetX - 15, k3 = "end") : v3 = S3 - d3 - Math.round(C3.width / 2) + p3 + f3.offsetX + 15, y2 = w2 + f3.offsetY;
        }
        return e3.config.chart.stacked || (c3 < 0 ? c3 = c3 + h3.width + d3 : c3 + h3.width / 2 > e3.globals.gridWidth && (c3 = e3.globals.gridWidth - h3.width - d3)), { bcx: i3, bcy: o3, dataLabelsX: c3, dataLabelsY: w2, totalDataLabelsX: v3, totalDataLabelsY: y2, totalDataLabelsAnchor: k3 };
      } }, { key: "drawCalculatedDataLabels", value: function(t4) {
        var i3 = t4.x, a3 = t4.y, s2 = t4.val, r3 = t4.i, o3 = t4.j, n3 = t4.textRects, l3 = t4.barHeight, h3 = t4.barWidth, c3 = t4.dataLabelsConfig, d3 = this.w, g3 = "rotate(0)";
        "vertical" === d3.config.plotOptions.bar.dataLabels.orientation && (g3 = "rotate(-90, ".concat(i3, ", ").concat(a3, ")"));
        var u3 = new O2(this.barCtx.ctx), f3 = new m2(this.barCtx.ctx), p3 = c3.formatter, x3 = null, b3 = d3.globals.collapsedSeriesIndices.indexOf(r3) > -1;
        if (c3.enabled && !b3) {
          x3 = f3.group({ class: "apexcharts-data-labels", transform: g3 });
          var v3 = "";
          void 0 !== s2 && (v3 = p3(s2, e2(e2({}, d3), {}, { seriesIndex: r3, dataPointIndex: o3, w: d3 })));
          var y2 = d3.globals.series[r3][o3] < 0, w2 = d3.config.plotOptions.bar.dataLabels.position;
          if ("vertical" === d3.config.plotOptions.bar.dataLabels.orientation && ("top" === w2 && (c3.textAnchor = y2 ? "end" : "start"), "center" === w2 && (c3.textAnchor = "middle"), "bottom" === w2 && (c3.textAnchor = y2 ? "end" : "start")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels)
            h3 < f3.getTextRects(v3, parseFloat(c3.style.fontSize)).width && (v3 = "");
          d3.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? n3.width / 1.6 > Math.abs(h3) && (v3 = "") : n3.height / 1.6 > Math.abs(l3) && (v3 = ""));
          var k3 = e2({}, c3);
          this.barCtx.isHorizontal && s2 < 0 && ("start" === c3.textAnchor ? k3.textAnchor = "end" : "end" === c3.textAnchor && (k3.textAnchor = "start")), u3.plotDataLabelsText({ x: i3, y: a3, text: v3, i: r3, j: o3, parent: x3, dataLabelsConfig: k3, alwaysDrawDataLabel: true, offsetCorrection: true });
        }
        return x3;
      } }, { key: "drawTotalDataLabels", value: function(t4) {
        var e3, i3 = t4.x, a3 = t4.y, s2 = t4.val, r3 = t4.realIndex, o3 = t4.textAnchor, n3 = t4.barTotalDataLabelsConfig, l3 = new m2(this.barCtx.ctx);
        return n3.enabled && void 0 !== i3 && void 0 !== a3 && this.barCtx.lastActiveBarSerieIndex === r3 && (e3 = l3.drawText({ x: i3, y: a3, foreColor: n3.style.color, text: s2, textAnchor: o3, fontFamily: n3.style.fontFamily, fontSize: n3.style.fontSize, fontWeight: n3.style.fontWeight })), e3;
      } }]), t3;
    }(), mt = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.barCtx = e3;
      }
      return r2(t3, [{ key: "initVariables", value: function(t4) {
        var e3 = this.w;
        this.barCtx.series = t4, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;
        for (var i3 = 0; i3 < t4.length; i3++)
          if (t4[i3].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t4[i3].length), e3.globals.isXNumeric)
            for (var a3 = 0; a3 < t4[i3].length; a3++)
              e3.globals.seriesX[i3][a3] > e3.globals.minX && e3.globals.seriesX[i3][a3] < e3.globals.maxX && this.barCtx.visibleItems++;
          else
            this.barCtx.visibleItems = e3.globals.dataPoints;
        0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], this.barCtx.radiusOnSeriesNumber = t4.length - 1, e3.globals.comboCharts || this.checkZeroSeries({ series: t4 });
      } }, { key: "initialPositions", value: function() {
        var t4, e3, i3, a3, s2, r3, o3, n3, l3 = this.w, h3 = l3.globals.dataPoints;
        this.barCtx.isRangeBar && (h3 = l3.globals.labels.length);
        var c3 = this.barCtx.seriesLen;
        if (l3.config.plotOptions.bar.rangeBarGroupRows && (c3 = 1), this.barCtx.isHorizontal)
          s2 = (i3 = l3.globals.gridHeight / h3) / c3, l3.globals.isXNumeric && (s2 = (i3 = l3.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s2 = s2 * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, n3 = this.barCtx.baseLineInvertedY + l3.globals.padHorizontal + (this.barCtx.isReversed ? l3.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), e3 = (i3 - s2 * this.barCtx.seriesLen) / 2;
        else {
          if (a3 = l3.globals.gridWidth / this.barCtx.visibleItems, l3.config.xaxis.convertedCatToNumeric && (a3 = l3.globals.gridWidth / l3.globals.dataPoints), r3 = a3 / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l3.globals.isXNumeric) {
            var d3 = this.barCtx.xRatio;
            l3.config.xaxis.convertedCatToNumeric && (d3 = this.barCtx.initialXRatio), l3.globals.minXDiff && 0.5 !== l3.globals.minXDiff && l3.globals.minXDiff / d3 > 0 && (a3 = l3.globals.minXDiff / d3), (r3 = a3 / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r3 = 1);
          }
          o3 = l3.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.yaxisIndex] - (this.barCtx.isReversed ? l3.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex] : 0), t4 = l3.globals.padHorizontal + (a3 - r3 * this.barCtx.seriesLen) / 2;
        }
        return { x: t4, y: e3, yDivision: i3, xDivision: a3, barHeight: s2, barWidth: r3, zeroH: o3, zeroW: n3 };
      } }, { key: "getPathFillColor", value: function(t4, e3, i3, a3) {
        var s2, r3, o3, n3, l3 = this.w, h3 = new R2(this.barCtx.ctx), c3 = null, d3 = this.barCtx.barOptions.distributed ? i3 : e3;
        this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function(a4) {
          t4[e3][i3] >= a4.from && t4[e3][i3] <= a4.to && (c3 = a4.color);
        });
        return l3.config.series[e3].data[i3] && l3.config.series[e3].data[i3].fillColor && (c3 = l3.config.series[e3].data[i3].fillColor), h3.fillPath({ seriesNumber: this.barCtx.barOptions.distributed ? d3 : a3, dataPointIndex: i3, color: c3, value: t4[e3][i3], fillConfig: null === (s2 = l3.config.series[e3].data[i3]) || void 0 === s2 ? void 0 : s2.fill, fillType: null !== (r3 = l3.config.series[e3].data[i3]) && void 0 !== r3 && null !== (o3 = r3.fill) && void 0 !== o3 && o3.type ? null === (n3 = l3.config.series[e3].data[i3]) || void 0 === n3 ? void 0 : n3.fill.type : l3.config.fill.type });
      } }, { key: "getStrokeWidth", value: function(t4, e3, i3) {
        var a3 = 0, s2 = this.w;
        return this.barCtx.series[t4][e3] ? this.barCtx.isNullValue = false : this.barCtx.isNullValue = true, s2.config.stroke.show && (this.barCtx.isNullValue || (a3 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i3] : this.barCtx.strokeWidth)), a3;
      } }, { key: "shouldApplyRadius", value: function(t4) {
        var e3 = this.w, i3 = false;
        return e3.config.plotOptions.bar.borderRadius > 0 && (e3.config.chart.stacked && "last" === e3.config.plotOptions.bar.borderRadiusWhenStacked ? this.barCtx.lastActiveBarSerieIndex === t4 && (i3 = true) : i3 = true), i3;
      } }, { key: "barBackground", value: function(t4) {
        var e3 = t4.j, i3 = t4.i, a3 = t4.x1, s2 = t4.x2, r3 = t4.y1, o3 = t4.y2, n3 = t4.elSeries, l3 = this.w, h3 = new m2(this.barCtx.ctx), c3 = new N2(this.barCtx.ctx).getActiveConfigSeriesIndex();
        if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c3 === i3) {
          e3 >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e3 %= this.barCtx.barOptions.colors.backgroundBarColors.length);
          var d3 = this.barCtx.barOptions.colors.backgroundBarColors[e3], g3 = h3.drawRect(void 0 !== a3 ? a3 : 0, void 0 !== r3 ? r3 : 0, void 0 !== s2 ? s2 : l3.globals.gridWidth, void 0 !== o3 ? o3 : l3.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d3, this.barCtx.barOptions.colors.backgroundBarOpacity);
          n3.add(g3), g3.node.classList.add("apexcharts-backgroundBar");
        }
      } }, { key: "getColumnPaths", value: function(t4) {
        var e3, i3 = t4.barWidth, a3 = t4.barXPosition, s2 = t4.y1, r3 = t4.y2, o3 = t4.strokeWidth, n3 = t4.realIndex, l3 = t4.i, h3 = t4.j, c3 = t4.w, d3 = new m2(this.barCtx.ctx);
        (o3 = Array.isArray(o3) ? o3[n3] : o3) || (o3 = 0);
        var g3 = i3, u3 = a3;
        null !== (e3 = c3.config.series[n3].data[h3]) && void 0 !== e3 && e3.columnWidthOffset && (u3 = a3 - c3.config.series[n3].data[h3].columnWidthOffset / 2, g3 = i3 + c3.config.series[n3].data[h3].columnWidthOffset);
        var f3 = u3, p3 = u3 + g3;
        s2 += 1e-3, r3 += 1e-3;
        var x3 = d3.move(f3, s2), b3 = d3.move(f3, s2), v3 = d3.line(p3 - o3, s2);
        return c3.globals.previousPaths.length > 0 && (b3 = this.barCtx.getPreviousPath(n3, h3, false)), x3 = x3 + d3.line(f3, r3) + d3.line(p3 - o3, r3) + d3.line(p3 - o3, s2) + ("around" === c3.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), b3 = b3 + d3.line(f3, s2) + v3 + v3 + v3 + v3 + v3 + d3.line(f3, s2) + ("around" === c3.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), this.shouldApplyRadius(n3) && (x3 = d3.roundPathCorners(x3, c3.config.plotOptions.bar.borderRadius)), c3.config.chart.stacked && (this.barCtx.yArrj.push(r3), this.barCtx.yArrjF.push(Math.abs(s2 - r3)), this.barCtx.yArrjVal.push(this.barCtx.series[l3][h3])), { pathTo: x3, pathFrom: b3 };
      } }, { key: "getBarpaths", value: function(t4) {
        var e3, i3 = t4.barYPosition, a3 = t4.barHeight, s2 = t4.x1, r3 = t4.x2, o3 = t4.strokeWidth, n3 = t4.realIndex, l3 = t4.i, h3 = t4.j, c3 = t4.w, d3 = new m2(this.barCtx.ctx);
        (o3 = Array.isArray(o3) ? o3[n3] : o3) || (o3 = 0);
        var g3 = i3, u3 = a3;
        null !== (e3 = c3.config.series[n3].data[h3]) && void 0 !== e3 && e3.barHeightOffset && (g3 = i3 - c3.config.series[n3].data[h3].barHeightOffset / 2, u3 = a3 + c3.config.series[n3].data[h3].barHeightOffset);
        var f3 = g3, p3 = g3 + u3;
        s2 += 1e-3, r3 += 1e-3;
        var x3 = d3.move(s2, f3), b3 = d3.move(s2, f3);
        c3.globals.previousPaths.length > 0 && (b3 = this.barCtx.getPreviousPath(n3, h3, false));
        var v3 = d3.line(s2, p3 - o3);
        return x3 = x3 + d3.line(r3, f3) + d3.line(r3, p3 - o3) + v3 + ("around" === c3.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), b3 = b3 + d3.line(s2, f3) + v3 + v3 + v3 + v3 + v3 + d3.line(s2, f3) + ("around" === c3.config.plotOptions.bar.borderRadiusApplication ? " Z" : " z"), this.shouldApplyRadius(n3) && (x3 = d3.roundPathCorners(x3, c3.config.plotOptions.bar.borderRadius)), c3.config.chart.stacked && (this.barCtx.xArrj.push(r3), this.barCtx.xArrjF.push(Math.abs(s2 - r3)), this.barCtx.xArrjVal.push(this.barCtx.series[l3][h3])), { pathTo: x3, pathFrom: b3 };
      } }, { key: "checkZeroSeries", value: function(t4) {
        for (var e3 = t4.series, i3 = this.w, a3 = 0; a3 < e3.length; a3++) {
          for (var s2 = 0, r3 = 0; r3 < e3[i3.globals.maxValsInArrayIndex].length; r3++)
            s2 += e3[a3][r3];
          0 === s2 && this.barCtx.zeroSerieses.push(a3);
        }
        for (var o3 = e3.length - 1; o3 >= 0; o3--)
          this.barCtx.zeroSerieses.indexOf(o3) > -1 && o3 === this.radiusOnSeriesNumber && (this.barCtx.radiusOnSeriesNumber -= 1);
        for (var n3 = e3.length - 1; n3 >= 0; n3--)
          i3.globals.collapsedSeriesIndices.indexOf(this.barCtx.radiusOnSeriesNumber) > -1 && (this.barCtx.radiusOnSeriesNumber -= 1);
      } }, { key: "getXForValue", value: function(t4, e3) {
        var i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a3 = i3 ? e3 : null;
        return null != t4 && (a3 = e3 + t4 / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t4 / this.barCtx.invertedYRatio : 0)), a3;
      } }, { key: "getYForValue", value: function(t4, e3) {
        var i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a3 = i3 ? e3 : null;
        return null != t4 && (a3 = e3 - t4 / this.barCtx.yRatio[this.barCtx.yaxisIndex] + 2 * (this.barCtx.isReversed ? t4 / this.barCtx.yRatio[this.barCtx.yaxisIndex] : 0)), a3;
      } }, { key: "getGoalValues", value: function(t4, e3, i3, a3, s2) {
        var r3 = this, n3 = this.w, l3 = [];
        return n3.globals.seriesGoals[a3] && n3.globals.seriesGoals[a3][s2] && Array.isArray(n3.globals.seriesGoals[a3][s2]) && n3.globals.seriesGoals[a3][s2].forEach(function(a4) {
          var s3;
          l3.push((o2(s3 = {}, t4, "x" === t4 ? r3.getXForValue(a4.value, e3, false) : r3.getYForValue(a4.value, i3, false)), o2(s3, "attrs", a4), s3));
        }), l3;
      } }, { key: "drawGoalLine", value: function(t4) {
        var e3 = t4.barXPosition, i3 = t4.barYPosition, a3 = t4.goalX, s2 = t4.goalY, r3 = t4.barWidth, o3 = t4.barHeight, n3 = new m2(this.barCtx.ctx), l3 = n3.group({ className: "apexcharts-bar-goals-groups" }), h3 = null;
        return this.barCtx.isHorizontal ? Array.isArray(a3) && a3.forEach(function(t5) {
          var e4 = void 0 !== t5.attrs.strokeHeight ? t5.attrs.strokeHeight : o3 / 2, a4 = i3 + e4 + o3 / 2;
          h3 = n3.drawLine(t5.x, a4 - 2 * e4, t5.x, a4, t5.attrs.strokeColor ? t5.attrs.strokeColor : void 0, t5.attrs.strokeDashArray, t5.attrs.strokeWidth ? t5.attrs.strokeWidth : 2, t5.attrs.strokeLineCap), l3.add(h3);
        }) : Array.isArray(s2) && s2.forEach(function(t5) {
          var i4 = void 0 !== t5.attrs.strokeWidth ? t5.attrs.strokeWidth : r3 / 2, a4 = e3 + i4 + r3 / 2;
          h3 = n3.drawLine(a4 - 2 * i4, t5.y, a4, t5.y, t5.attrs.strokeColor ? t5.attrs.strokeColor : void 0, t5.attrs.strokeDashArray, t5.attrs.strokeHeight ? t5.attrs.strokeHeight : 2, t5.attrs.strokeLineCap), l3.add(h3);
        }), l3;
      } }]), t3;
    }(), yt2 = function() {
      function t3(e3, i3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
        var s2 = this.w;
        this.barOptions = s2.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s2.config.stroke.width, this.isNullValue = false, this.isRangeBar = s2.globals.seriesRange.length && this.isHorizontal, this.xyRatios = i3, null !== this.xyRatios && (this.xRatio = i3.xRatio, this.initialXRatio = i3.initialXRatio, this.yRatio = i3.yRatio, this.invertedXRatio = i3.invertedXRatio, this.invertedYRatio = i3.invertedYRatio, this.baseLineY = i3.baseLineY, this.baseLineInvertedY = i3.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0;
        var r3 = new N2(this.ctx);
        this.lastActiveBarSerieIndex = r3.getActiveConfigSeriesIndex("desc", ["bar", "column"]);
        var o3 = r3.getBarSeriesIndices(), n3 = new y(this.ctx);
        this.stackedSeriesTotals = n3.getStackedSeriesTotals(this.w.config.series.map(function(t4, e4) {
          return -1 === o3.indexOf(e4) ? e4 : -1;
        }).filter(function(t4) {
          return -1 !== t4;
        })), this.barHelpers = new mt(this);
      }
      return r2(t3, [{ key: "draw", value: function(t4, i3) {
        var a3 = this.w, s2 = new m2(this.ctx), r3 = new y(this.ctx, a3);
        t4 = r3.getLogSeries(t4), this.series = t4, this.yRatio = r3.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t4);
        var o3 = s2.group({ class: "apexcharts-bar-series apexcharts-plot-series" });
        a3.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.");
        for (var n3 = 0, l3 = 0; n3 < t4.length; n3++, l3++) {
          var h3, c3, d3, g3, u3 = void 0, f3 = void 0, p3 = [], b3 = [], v3 = a3.globals.comboCharts ? i3[n3] : n3, w2 = s2.group({ class: "apexcharts-series", rel: n3 + 1, seriesName: x2.escapeString(a3.globals.seriesNames[v3]), "data:realIndex": v3 });
          this.ctx.series.addCollapsedClassToSeries(w2, v3), t4[n3].length > 0 && (this.visibleI = this.visibleI + 1);
          var k3 = 0, A3 = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = v3), this.isReversed = a3.config.yaxis[this.yaxisIndex] && a3.config.yaxis[this.yaxisIndex].reversed;
          var S3 = this.barHelpers.initialPositions();
          f3 = S3.y, k3 = S3.barHeight, c3 = S3.yDivision, g3 = S3.zeroW, u3 = S3.x, A3 = S3.barWidth, h3 = S3.xDivision, d3 = S3.zeroH, this.horizontal || b3.push(u3 + A3 / 2);
          for (var C3 = s2.group({ class: "apexcharts-datalabels", "data:realIndex": v3 }), L3 = s2.group({ class: "apexcharts-bar-goals-markers", style: "pointer-events: none" }), P3 = 0; P3 < a3.globals.dataPoints; P3++) {
            var T3 = this.barHelpers.getStrokeWidth(n3, P3, v3), M3 = null, I3 = { indexes: { i: n3, j: P3, realIndex: v3, bc: l3 }, x: u3, y: f3, strokeWidth: T3, elSeries: w2 };
            this.isHorizontal ? (M3 = this.drawBarPaths(e2(e2({}, I3), {}, { barHeight: k3, zeroW: g3, yDivision: c3 })), A3 = this.series[n3][P3] / this.invertedYRatio) : (M3 = this.drawColumnPaths(e2(e2({}, I3), {}, { xDivision: h3, barWidth: A3, zeroH: d3 })), k3 = this.series[n3][P3] / this.yRatio[this.yaxisIndex]);
            var z3 = this.barHelpers.drawGoalLine({ barXPosition: M3.barXPosition, barYPosition: M3.barYPosition, goalX: M3.goalX, goalY: M3.goalY, barHeight: k3, barWidth: A3 });
            z3 && L3.add(z3), f3 = M3.y, u3 = M3.x, P3 > 0 && b3.push(u3 + A3 / 2), p3.push(f3);
            var X3 = this.barHelpers.getPathFillColor(t4, n3, P3, v3);
            this.renderSeries({ realIndex: v3, pathFill: X3, j: P3, i: n3, pathFrom: M3.pathFrom, pathTo: M3.pathTo, strokeWidth: T3, elSeries: w2, x: u3, y: f3, series: t4, barHeight: k3, barWidth: A3, elDataLabelsWrap: C3, elGoalsMarkers: L3, visibleSeries: this.visibleI, type: "bar" });
          }
          a3.globals.seriesXvalues[v3] = b3, a3.globals.seriesYvalues[v3] = p3, o3.add(w2);
        }
        return o3;
      } }, { key: "renderSeries", value: function(t4) {
        var e3 = t4.realIndex, i3 = t4.pathFill, a3 = t4.lineFill, s2 = t4.j, r3 = t4.i, o3 = t4.pathFrom, n3 = t4.pathTo, l3 = t4.strokeWidth, h3 = t4.elSeries, c3 = t4.x, d3 = t4.y, g3 = t4.y1, u3 = t4.y2, f3 = t4.series, p3 = t4.barHeight, x3 = t4.barWidth, b3 = t4.barYPosition, y2 = t4.elDataLabelsWrap, w2 = t4.elGoalsMarkers, k3 = t4.visibleSeries, A3 = t4.type, S3 = this.w, C3 = new m2(this.ctx);
        a3 || (a3 = this.barOptions.distributed ? S3.globals.stroke.colors[s2] : S3.globals.stroke.colors[e3]), S3.config.series[r3].data[s2] && S3.config.series[r3].data[s2].strokeColor && (a3 = S3.config.series[r3].data[s2].strokeColor), this.isNullValue && (i3 = "none");
        var L3 = s2 / S3.config.chart.animations.animateGradually.delay * (S3.config.chart.animations.speed / S3.globals.dataPoints) / 2.4, P3 = C3.renderPaths({ i: r3, j: s2, realIndex: e3, pathFrom: o3, pathTo: n3, stroke: a3, strokeWidth: l3, strokeLineCap: S3.config.stroke.lineCap, fill: i3, animationDelay: L3, initialSpeed: S3.config.chart.animations.speed, dataChangeSpeed: S3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(A3, "-area") });
        P3.attr("clip-path", "url(#gridRectMask".concat(S3.globals.cuid, ")"));
        var T3 = S3.config.forecastDataPoints;
        T3.count > 0 && s2 >= S3.globals.dataPoints - T3.count && (P3.node.setAttribute("stroke-dasharray", T3.dashArray), P3.node.setAttribute("stroke-width", T3.strokeWidth), P3.node.setAttribute("fill-opacity", T3.fillOpacity)), void 0 !== g3 && void 0 !== u3 && (P3.attr("data-range-y1", g3), P3.attr("data-range-y2", u3)), new v2(this.ctx).setSelectionFilter(P3, e3, s2), h3.add(P3);
        var M3 = new vt2(this).handleBarDataLabels({ x: c3, y: d3, y1: g3, y2: u3, i: r3, j: s2, series: f3, realIndex: e3, barHeight: p3, barWidth: x3, barYPosition: b3, renderedPath: P3, visibleSeries: k3 });
        return null !== M3.dataLabels && y2.add(M3.dataLabels), M3.totalDataLabels && y2.add(M3.totalDataLabels), h3.add(y2), w2 && h3.add(w2), h3;
      } }, { key: "drawBarPaths", value: function(t4) {
        var e3, i3 = t4.indexes, a3 = t4.barHeight, s2 = t4.strokeWidth, r3 = t4.zeroW, o3 = t4.x, n3 = t4.y, l3 = t4.yDivision, h3 = t4.elSeries, c3 = this.w, d3 = i3.i, g3 = i3.j;
        if (c3.globals.isXNumeric)
          e3 = (n3 = (c3.globals.seriesX[d3][g3] - c3.globals.minX) / this.invertedXRatio - a3) + a3 * this.visibleI;
        else if (c3.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
          var u3 = 0, f3 = 0;
          c3.globals.seriesPercent.forEach(function(t5, e4) {
            t5[g3] && u3++, e4 < d3 && 0 === t5[g3] && f3++;
          }), e3 = n3 + (a3 = this.seriesLen * a3 / u3) * this.visibleI, e3 -= a3 * f3;
        }
        o3 = this.barHelpers.getXForValue(this.series[d3][g3], r3);
        var p3 = this.barHelpers.getBarpaths({ barYPosition: e3, barHeight: a3, x1: r3, x2: o3, strokeWidth: s2, series: this.series, realIndex: i3.realIndex, i: d3, j: g3, w: c3 });
        return c3.globals.isXNumeric || (n3 += l3), this.barHelpers.barBackground({ j: g3, i: d3, y1: e3 - a3 * this.visibleI, y2: a3 * this.seriesLen, elSeries: h3 }), { pathTo: p3.pathTo, pathFrom: p3.pathFrom, x: o3, y: n3, goalX: this.barHelpers.getGoalValues("x", r3, null, d3, g3), barYPosition: e3 };
      } }, { key: "drawColumnPaths", value: function(t4) {
        var e3, i3 = t4.indexes, a3 = t4.x, s2 = t4.y, r3 = t4.xDivision, o3 = t4.barWidth, n3 = t4.zeroH, l3 = t4.strokeWidth, h3 = t4.elSeries, c3 = this.w, d3 = i3.realIndex, g3 = i3.i, u3 = i3.j, f3 = i3.bc;
        if (c3.globals.isXNumeric) {
          var p3 = d3;
          c3.globals.seriesX[d3].length || (p3 = c3.globals.maxValsInArrayIndex), c3.globals.seriesX[p3][u3] && (a3 = (c3.globals.seriesX[p3][u3] - c3.globals.minX) / this.xRatio - o3 * this.seriesLen / 2), e3 = a3 + o3 * this.visibleI;
        } else if (c3.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
          var x3 = 0, b3 = 0;
          c3.globals.seriesPercent.forEach(function(t5, e4) {
            t5[u3] && x3++, e4 < g3 && 0 === t5[u3] && b3++;
          }), e3 = a3 + (o3 = this.seriesLen * o3 / x3) * this.visibleI, e3 -= o3 * b3;
        }
        s2 = this.barHelpers.getYForValue(this.series[g3][u3], n3);
        var v3 = this.barHelpers.getColumnPaths({ barXPosition: e3, barWidth: o3, y1: n3, y2: s2, strokeWidth: l3, series: this.series, realIndex: i3.realIndex, i: g3, j: u3, w: c3 });
        return c3.globals.isXNumeric || (a3 += r3), this.barHelpers.barBackground({ bc: f3, j: u3, i: g3, x1: e3 - l3 / 2 - o3 * this.visibleI, x2: o3 * this.seriesLen + l3 / 2, elSeries: h3 }), { pathTo: v3.pathTo, pathFrom: v3.pathFrom, x: a3, y: s2, goalY: this.barHelpers.getGoalValues("y", null, n3, g3, u3), barXPosition: e3 };
      } }, { key: "getPreviousPath", value: function(t4, e3) {
        for (var i3, a3 = this.w, s2 = 0; s2 < a3.globals.previousPaths.length; s2++) {
          var r3 = a3.globals.previousPaths[s2];
          r3.paths && r3.paths.length > 0 && parseInt(r3.realIndex, 10) === parseInt(t4, 10) && void 0 !== a3.globals.previousPaths[s2].paths[e3] && (i3 = a3.globals.previousPaths[s2].paths[e3].d);
        }
        return i3;
      } }]), t3;
    }(), wt2 = function(t3) {
      n2(s2, yt2);
      var i3 = d2(s2);
      function s2() {
        return a2(this, s2), i3.apply(this, arguments);
      }
      return r2(s2, [{ key: "draw", value: function(t4, i4) {
        var a3 = this, s3 = this.w;
        this.graphics = new m2(this.ctx), this.bar = new yt2(this.ctx, this.xyRatios);
        var r3 = new y(this.ctx, s3);
        t4 = r3.getLogSeries(t4), this.yRatio = r3.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t4), "100%" === s3.config.chart.stackType && (t4 = s3.globals.seriesPercent.slice()), this.series = t4, this.totalItems = 0, this.prevY = [], this.prevX = [], this.prevYF = [], this.prevXF = [], this.prevYVal = [], this.prevXVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [], this.yArrj = [], this.yArrjF = [], this.yArrjVal = [];
        for (var o3 = 0; o3 < t4.length; o3++)
          t4[o3].length > 0 && (this.totalItems += t4[o3].length);
        for (var n3 = this.graphics.group({ class: "apexcharts-bar-series apexcharts-plot-series" }), l3 = 0, h3 = 0, c3 = function(r4, o4) {
          var c4 = void 0, d4 = void 0, g4 = void 0, u3 = void 0, f3 = [], p3 = [], b3 = s3.globals.comboCharts ? i4[r4] : r4;
          a3.yRatio.length > 1 && (a3.yaxisIndex = b3), a3.isReversed = s3.config.yaxis[a3.yaxisIndex] && s3.config.yaxis[a3.yaxisIndex].reversed;
          var v3 = a3.graphics.group({ class: "apexcharts-series", seriesName: x2.escapeString(s3.globals.seriesNames[b3]), rel: r4 + 1, "data:realIndex": b3 });
          a3.ctx.series.addCollapsedClassToSeries(v3, b3);
          var m3 = a3.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": b3 }), y2 = a3.graphics.group({ class: "apexcharts-bar-goals-markers", style: "pointer-events: none" }), w2 = 0, k3 = 0, A3 = a3.initialPositions(l3, h3, c4, d4, g4, u3);
          h3 = A3.y, w2 = A3.barHeight, d4 = A3.yDivision, u3 = A3.zeroW, l3 = A3.x, k3 = A3.barWidth, c4 = A3.xDivision, g4 = A3.zeroH, a3.yArrj = [], a3.yArrjF = [], a3.yArrjVal = [], a3.xArrj = [], a3.xArrjF = [], a3.xArrjVal = [], 1 === a3.prevY.length && a3.prevY[0].every(function(t5) {
            return isNaN(t5);
          }) && (a3.prevY[0] = a3.prevY[0].map(function(t5) {
            return g4;
          }), a3.prevYF[0] = a3.prevYF[0].map(function(t5) {
            return 0;
          }));
          for (var S3 = 0; S3 < s3.globals.dataPoints; S3++) {
            var C3 = a3.barHelpers.getStrokeWidth(r4, S3, b3), L3 = { indexes: { i: r4, j: S3, realIndex: b3, bc: o4 }, strokeWidth: C3, x: l3, y: h3, elSeries: v3 }, P3 = null;
            a3.isHorizontal ? (P3 = a3.drawStackedBarPaths(e2(e2({}, L3), {}, { zeroW: u3, barHeight: w2, yDivision: d4 })), k3 = a3.series[r4][S3] / a3.invertedYRatio) : (P3 = a3.drawStackedColumnPaths(e2(e2({}, L3), {}, { xDivision: c4, barWidth: k3, zeroH: g4 })), w2 = a3.series[r4][S3] / a3.yRatio[a3.yaxisIndex]);
            var T3 = a3.barHelpers.drawGoalLine({ barXPosition: P3.barXPosition, barYPosition: P3.barYPosition, goalX: P3.goalX, goalY: P3.goalY, barHeight: w2, barWidth: k3 });
            T3 && y2.add(T3), h3 = P3.y, l3 = P3.x, f3.push(l3), p3.push(h3);
            var M3 = a3.barHelpers.getPathFillColor(t4, r4, S3, b3);
            v3 = a3.renderSeries({ realIndex: b3, pathFill: M3, j: S3, i: r4, pathFrom: P3.pathFrom, pathTo: P3.pathTo, strokeWidth: C3, elSeries: v3, x: l3, y: h3, series: t4, barHeight: w2, barWidth: k3, elDataLabelsWrap: m3, elGoalsMarkers: y2, type: "bar", visibleSeries: 0 });
          }
          s3.globals.seriesXvalues[b3] = f3, s3.globals.seriesYvalues[b3] = p3, a3.prevY.push(a3.yArrj), a3.prevYF.push(a3.yArrjF), a3.prevYVal.push(a3.yArrjVal), a3.prevX.push(a3.xArrj), a3.prevXF.push(a3.xArrjF), a3.prevXVal.push(a3.xArrjVal), n3.add(v3);
        }, d3 = 0, g3 = 0; d3 < t4.length; d3++, g3++)
          c3(d3, g3);
        return n3;
      } }, { key: "initialPositions", value: function(t4, e3, i4, a3, s3, r3) {
        var o3, n3, l3 = this.w;
        return this.isHorizontal ? (o3 = (o3 = a3 = l3.globals.gridHeight / l3.globals.dataPoints) * parseInt(l3.config.plotOptions.bar.barHeight, 10) / 100, r3 = this.baseLineInvertedY + l3.globals.padHorizontal + (this.isReversed ? l3.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e3 = (a3 - o3) / 2) : (n3 = i4 = l3.globals.gridWidth / l3.globals.dataPoints, n3 = l3.globals.isXNumeric && l3.globals.dataPoints > 1 ? (i4 = l3.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : n3 * parseInt(l3.config.plotOptions.bar.columnWidth, 10) / 100, s3 = l3.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? l3.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t4 = l3.globals.padHorizontal + (i4 - n3) / 2), { x: t4, y: e3, yDivision: a3, xDivision: i4, barHeight: o3, barWidth: n3, zeroH: s3, zeroW: r3 };
      } }, { key: "drawStackedBarPaths", value: function(t4) {
        for (var e3, i4 = t4.indexes, a3 = t4.barHeight, s3 = t4.strokeWidth, r3 = t4.zeroW, o3 = t4.x, n3 = t4.y, l3 = t4.yDivision, h3 = t4.elSeries, c3 = this.w, d3 = n3, g3 = i4.i, u3 = i4.j, f3 = 0, p3 = 0; p3 < this.prevXF.length; p3++)
          f3 += this.prevXF[p3][u3];
        if (g3 > 0) {
          var x3 = r3;
          this.prevXVal[g3 - 1][u3] < 0 ? x3 = this.series[g3][u3] >= 0 ? this.prevX[g3 - 1][u3] + f3 - 2 * (this.isReversed ? f3 : 0) : this.prevX[g3 - 1][u3] : this.prevXVal[g3 - 1][u3] >= 0 && (x3 = this.series[g3][u3] >= 0 ? this.prevX[g3 - 1][u3] : this.prevX[g3 - 1][u3] - f3 + 2 * (this.isReversed ? f3 : 0)), e3 = x3;
        } else
          e3 = r3;
        o3 = null === this.series[g3][u3] ? e3 : e3 + this.series[g3][u3] / this.invertedYRatio - 2 * (this.isReversed ? this.series[g3][u3] / this.invertedYRatio : 0);
        var b3 = this.barHelpers.getBarpaths({ barYPosition: d3, barHeight: a3, x1: e3, x2: o3, strokeWidth: s3, series: this.series, realIndex: i4.realIndex, i: g3, j: u3, w: c3 });
        return this.barHelpers.barBackground({ j: u3, i: g3, y1: d3, y2: a3, elSeries: h3 }), n3 += l3, { pathTo: b3.pathTo, pathFrom: b3.pathFrom, goalX: this.barHelpers.getGoalValues("x", r3, null, g3, u3), barYPosition: d3, x: o3, y: n3 };
      } }, { key: "drawStackedColumnPaths", value: function(t4) {
        var e3 = t4.indexes, i4 = t4.x, a3 = t4.y, s3 = t4.xDivision, r3 = t4.barWidth, o3 = t4.zeroH;
        t4.strokeWidth;
        var n3 = t4.elSeries, l3 = this.w, h3 = e3.i, c3 = e3.j, d3 = e3.bc;
        if (l3.globals.isXNumeric) {
          var g3 = l3.globals.seriesX[h3][c3];
          g3 || (g3 = 0), i4 = (g3 - l3.globals.minX) / this.xRatio - r3 / 2;
        }
        for (var u3, f3 = i4, p3 = 0, x3 = 0; x3 < this.prevYF.length; x3++)
          p3 += isNaN(this.prevYF[x3][c3]) ? 0 : this.prevYF[x3][c3];
        if (h3 > 0 && !l3.globals.isXNumeric || h3 > 0 && l3.globals.isXNumeric && l3.globals.seriesX[h3 - 1][c3] === l3.globals.seriesX[h3][c3]) {
          var b3, v3, m3 = Math.min(this.yRatio.length + 1, h3 + 1);
          if (void 0 !== this.prevY[h3 - 1]) {
            for (var y2 = 1; y2 < m3; y2++)
              if (!isNaN(this.prevY[h3 - y2][c3])) {
                v3 = this.prevY[h3 - y2][c3];
                break;
              }
          }
          for (var w2 = 1; w2 < m3; w2++) {
            if (this.prevYVal[h3 - w2][c3] < 0) {
              b3 = this.series[h3][c3] >= 0 ? v3 - p3 + 2 * (this.isReversed ? p3 : 0) : v3;
              break;
            }
            if (this.prevYVal[h3 - w2][c3] >= 0) {
              b3 = this.series[h3][c3] >= 0 ? v3 : v3 + p3 - 2 * (this.isReversed ? p3 : 0);
              break;
            }
          }
          void 0 === b3 && (b3 = l3.globals.gridHeight), u3 = this.prevYF[0].every(function(t5) {
            return 0 === t5;
          }) && this.prevYF.slice(1, h3).every(function(t5) {
            return t5.every(function(t6) {
              return isNaN(t6);
            });
          }) ? o3 : b3;
        } else
          u3 = o3;
        a3 = this.series[h3][c3] ? u3 - this.series[h3][c3] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[h3][c3] / this.yRatio[this.yaxisIndex] : 0) : u3;
        var k3 = this.barHelpers.getColumnPaths({ barXPosition: f3, barWidth: r3, y1: u3, y2: a3, yRatio: this.yRatio[this.yaxisIndex], strokeWidth: this.strokeWidth, series: this.series, realIndex: e3.realIndex, i: h3, j: c3, w: l3 });
        return this.barHelpers.barBackground({ bc: d3, j: c3, i: h3, x1: f3, x2: r3, elSeries: n3 }), i4 += s3, { pathTo: k3.pathTo, pathFrom: k3.pathFrom, goalY: this.barHelpers.getGoalValues("y", null, o3, h3, c3), barXPosition: f3, x: l3.globals.isXNumeric ? i4 - s3 : i4, y: a3 };
      } }]), s2;
    }(), kt2 = function(t3) {
      n2(s2, yt2);
      var i3 = d2(s2);
      function s2() {
        return a2(this, s2), i3.apply(this, arguments);
      }
      return r2(s2, [{ key: "draw", value: function(t4, i4) {
        var a3 = this, s3 = this.w, r3 = new m2(this.ctx), o3 = new R2(this.ctx);
        this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = s3.config.plotOptions.bar.horizontal;
        var n3 = new y(this.ctx, s3);
        t4 = n3.getLogSeries(t4), this.series = t4, this.yRatio = n3.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t4);
        for (var l3 = r3.group({ class: "apexcharts-".concat(s3.config.chart.type, "-series apexcharts-plot-series") }), h3 = function(n4) {
          a3.isBoxPlot = "boxPlot" === s3.config.chart.type || "boxPlot" === s3.config.series[n4].type;
          var h4, c4, d3, g3, u3 = void 0, f3 = void 0, p3 = [], b3 = [], v3 = s3.globals.comboCharts ? i4[n4] : n4, m3 = r3.group({ class: "apexcharts-series", seriesName: x2.escapeString(s3.globals.seriesNames[v3]), rel: n4 + 1, "data:realIndex": v3 });
          a3.ctx.series.addCollapsedClassToSeries(m3, v3), t4[n4].length > 0 && (a3.visibleI = a3.visibleI + 1);
          var y2, w2;
          a3.yRatio.length > 1 && (a3.yaxisIndex = v3);
          var k3 = a3.barHelpers.initialPositions();
          f3 = k3.y, y2 = k3.barHeight, c4 = k3.yDivision, g3 = k3.zeroW, u3 = k3.x, w2 = k3.barWidth, h4 = k3.xDivision, d3 = k3.zeroH, b3.push(u3 + w2 / 2);
          for (var A3 = r3.group({ class: "apexcharts-datalabels", "data:realIndex": v3 }), S3 = function(i5) {
            var r4 = a3.barHelpers.getStrokeWidth(n4, i5, v3), l4 = null, x3 = { indexes: { i: n4, j: i5, realIndex: v3 }, x: u3, y: f3, strokeWidth: r4, elSeries: m3 };
            l4 = a3.isHorizontal ? a3.drawHorizontalBoxPaths(e2(e2({}, x3), {}, { yDivision: c4, barHeight: y2, zeroW: g3 })) : a3.drawVerticalBoxPaths(e2(e2({}, x3), {}, { xDivision: h4, barWidth: w2, zeroH: d3 })), f3 = l4.y, u3 = l4.x, i5 > 0 && b3.push(u3 + w2 / 2), p3.push(f3), l4.pathTo.forEach(function(e3, h5) {
              var c5 = !a3.isBoxPlot && a3.candlestickOptions.wick.useFillColor ? l4.color[h5] : s3.globals.stroke.colors[n4], d4 = o3.fillPath({ seriesNumber: v3, dataPointIndex: i5, color: l4.color[h5], value: t4[n4][i5] });
              a3.renderSeries({ realIndex: v3, pathFill: d4, lineFill: c5, j: i5, i: n4, pathFrom: l4.pathFrom, pathTo: e3, strokeWidth: r4, elSeries: m3, x: u3, y: f3, series: t4, barHeight: y2, barWidth: w2, elDataLabelsWrap: A3, visibleSeries: a3.visibleI, type: s3.config.chart.type });
            });
          }, C3 = 0; C3 < s3.globals.dataPoints; C3++)
            S3(C3);
          s3.globals.seriesXvalues[v3] = b3, s3.globals.seriesYvalues[v3] = p3, l3.add(m3);
        }, c3 = 0; c3 < t4.length; c3++)
          h3(c3);
        return l3;
      } }, { key: "drawVerticalBoxPaths", value: function(t4) {
        var e3 = t4.indexes, i4 = t4.x;
        t4.y;
        var a3 = t4.xDivision, s3 = t4.barWidth, r3 = t4.zeroH, o3 = t4.strokeWidth, n3 = this.w, l3 = new m2(this.ctx), h3 = e3.i, c3 = e3.j, d3 = true, g3 = n3.config.plotOptions.candlestick.colors.upward, u3 = n3.config.plotOptions.candlestick.colors.downward, f3 = "";
        this.isBoxPlot && (f3 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
        var p3 = this.yRatio[this.yaxisIndex], x3 = e3.realIndex, b3 = this.getOHLCValue(x3, c3), v3 = r3, y2 = r3;
        b3.o > b3.c && (d3 = false);
        var w2 = Math.min(b3.o, b3.c), k3 = Math.max(b3.o, b3.c), A3 = b3.m;
        n3.globals.isXNumeric && (i4 = (n3.globals.seriesX[x3][c3] - n3.globals.minX) / this.xRatio - s3 / 2);
        var S3 = i4 + s3 * this.visibleI;
        void 0 === this.series[h3][c3] || null === this.series[h3][c3] ? (w2 = r3, k3 = r3) : (w2 = r3 - w2 / p3, k3 = r3 - k3 / p3, v3 = r3 - b3.h / p3, y2 = r3 - b3.l / p3, A3 = r3 - b3.m / p3);
        var C3 = l3.move(S3, r3), L3 = l3.move(S3 + s3 / 2, w2);
        return n3.globals.previousPaths.length > 0 && (L3 = this.getPreviousPath(x3, c3, true)), C3 = this.isBoxPlot ? [l3.move(S3, w2) + l3.line(S3 + s3 / 2, w2) + l3.line(S3 + s3 / 2, v3) + l3.line(S3 + s3 / 4, v3) + l3.line(S3 + s3 - s3 / 4, v3) + l3.line(S3 + s3 / 2, v3) + l3.line(S3 + s3 / 2, w2) + l3.line(S3 + s3, w2) + l3.line(S3 + s3, A3) + l3.line(S3, A3) + l3.line(S3, w2 + o3 / 2), l3.move(S3, A3) + l3.line(S3 + s3, A3) + l3.line(S3 + s3, k3) + l3.line(S3 + s3 / 2, k3) + l3.line(S3 + s3 / 2, y2) + l3.line(S3 + s3 - s3 / 4, y2) + l3.line(S3 + s3 / 4, y2) + l3.line(S3 + s3 / 2, y2) + l3.line(S3 + s3 / 2, k3) + l3.line(S3, k3) + l3.line(S3, A3) + "z"] : [l3.move(S3, k3) + l3.line(S3 + s3 / 2, k3) + l3.line(S3 + s3 / 2, v3) + l3.line(S3 + s3 / 2, k3) + l3.line(S3 + s3, k3) + l3.line(S3 + s3, w2) + l3.line(S3 + s3 / 2, w2) + l3.line(S3 + s3 / 2, y2) + l3.line(S3 + s3 / 2, w2) + l3.line(S3, w2) + l3.line(S3, k3 - o3 / 2)], L3 += l3.move(S3, w2), n3.globals.isXNumeric || (i4 += a3), { pathTo: C3, pathFrom: L3, x: i4, y: k3, barXPosition: S3, color: this.isBoxPlot ? f3 : d3 ? [g3] : [u3] };
      } }, { key: "drawHorizontalBoxPaths", value: function(t4) {
        var e3 = t4.indexes;
        t4.x;
        var i4 = t4.y, a3 = t4.yDivision, s3 = t4.barHeight, r3 = t4.zeroW, o3 = t4.strokeWidth, n3 = this.w, l3 = new m2(this.ctx), h3 = e3.i, c3 = e3.j, d3 = this.boxOptions.colors.lower;
        this.isBoxPlot && (d3 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
        var g3 = this.invertedYRatio, u3 = e3.realIndex, f3 = this.getOHLCValue(u3, c3), p3 = r3, x3 = r3, b3 = Math.min(f3.o, f3.c), v3 = Math.max(f3.o, f3.c), y2 = f3.m;
        n3.globals.isXNumeric && (i4 = (n3.globals.seriesX[u3][c3] - n3.globals.minX) / this.invertedXRatio - s3 / 2);
        var w2 = i4 + s3 * this.visibleI;
        void 0 === this.series[h3][c3] || null === this.series[h3][c3] ? (b3 = r3, v3 = r3) : (b3 = r3 + b3 / g3, v3 = r3 + v3 / g3, p3 = r3 + f3.h / g3, x3 = r3 + f3.l / g3, y2 = r3 + f3.m / g3);
        var k3 = l3.move(r3, w2), A3 = l3.move(b3, w2 + s3 / 2);
        return n3.globals.previousPaths.length > 0 && (A3 = this.getPreviousPath(u3, c3, true)), k3 = [l3.move(b3, w2) + l3.line(b3, w2 + s3 / 2) + l3.line(p3, w2 + s3 / 2) + l3.line(p3, w2 + s3 / 2 - s3 / 4) + l3.line(p3, w2 + s3 / 2 + s3 / 4) + l3.line(p3, w2 + s3 / 2) + l3.line(b3, w2 + s3 / 2) + l3.line(b3, w2 + s3) + l3.line(y2, w2 + s3) + l3.line(y2, w2) + l3.line(b3 + o3 / 2, w2), l3.move(y2, w2) + l3.line(y2, w2 + s3) + l3.line(v3, w2 + s3) + l3.line(v3, w2 + s3 / 2) + l3.line(x3, w2 + s3 / 2) + l3.line(x3, w2 + s3 - s3 / 4) + l3.line(x3, w2 + s3 / 4) + l3.line(x3, w2 + s3 / 2) + l3.line(v3, w2 + s3 / 2) + l3.line(v3, w2) + l3.line(y2, w2) + "z"], A3 += l3.move(b3, w2), n3.globals.isXNumeric || (i4 += a3), { pathTo: k3, pathFrom: A3, x: v3, y: i4, barYPosition: w2, color: d3 };
      } }, { key: "getOHLCValue", value: function(t4, e3) {
        var i4 = this.w;
        return { o: this.isBoxPlot ? i4.globals.seriesCandleH[t4][e3] : i4.globals.seriesCandleO[t4][e3], h: this.isBoxPlot ? i4.globals.seriesCandleO[t4][e3] : i4.globals.seriesCandleH[t4][e3], m: i4.globals.seriesCandleM[t4][e3], l: this.isBoxPlot ? i4.globals.seriesCandleC[t4][e3] : i4.globals.seriesCandleL[t4][e3], c: this.isBoxPlot ? i4.globals.seriesCandleL[t4][e3] : i4.globals.seriesCandleC[t4][e3] };
      } }]), s2;
    }(), At2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "checkColorRange", value: function() {
        var t4 = this.w, e3 = false, i3 = t4.config.plotOptions[t4.config.chart.type];
        return i3.colorScale.ranges.length > 0 && i3.colorScale.ranges.map(function(t5, i4) {
          t5.from <= 0 && (e3 = true);
        }), e3;
      } }, { key: "getShadeColor", value: function(t4, e3, i3, a3) {
        var s2 = this.w, r3 = 1, o3 = s2.config.plotOptions[t4].shadeIntensity, n3 = this.determineColor(t4, e3, i3);
        s2.globals.hasNegs || a3 ? r3 = s2.config.plotOptions[t4].reverseNegativeShade ? n3.percent < 0 ? n3.percent / 100 * (1.25 * o3) : (1 - n3.percent / 100) * (1.25 * o3) : n3.percent <= 0 ? 1 - (1 + n3.percent / 100) * o3 : (1 - n3.percent / 100) * o3 : (r3 = 1 - n3.percent / 100, "treemap" === t4 && (r3 = (1 - n3.percent / 100) * (1.25 * o3)));
        var l3 = n3.color, h3 = new x2();
        return s2.config.plotOptions[t4].enableShades && (l3 = "dark" === this.w.config.theme.mode ? x2.hexToRgba(h3.shadeColor(-1 * r3, n3.color), s2.config.fill.opacity) : x2.hexToRgba(h3.shadeColor(r3, n3.color), s2.config.fill.opacity)), { color: l3, colorProps: n3 };
      } }, { key: "determineColor", value: function(t4, e3, i3) {
        var a3 = this.w, s2 = a3.globals.series[e3][i3], r3 = a3.config.plotOptions[t4], o3 = r3.colorScale.inverse ? i3 : e3;
        r3.distributed && "treemap" === a3.config.chart.type && (o3 = i3);
        var n3 = a3.globals.colors[o3], l3 = null, h3 = Math.min.apply(Math, u2(a3.globals.series[e3])), c3 = Math.max.apply(Math, u2(a3.globals.series[e3]));
        r3.distributed || "heatmap" !== t4 || (h3 = a3.globals.minY, c3 = a3.globals.maxY), void 0 !== r3.colorScale.min && (h3 = r3.colorScale.min < a3.globals.minY ? r3.colorScale.min : a3.globals.minY, c3 = r3.colorScale.max > a3.globals.maxY ? r3.colorScale.max : a3.globals.maxY);
        var d3 = Math.abs(c3) + Math.abs(h3), g3 = 100 * s2 / (0 === d3 ? d3 - 1e-6 : d3);
        r3.colorScale.ranges.length > 0 && r3.colorScale.ranges.map(function(t5, e4) {
          if (s2 >= t5.from && s2 <= t5.to) {
            n3 = t5.color, l3 = t5.foreColor ? t5.foreColor : null, h3 = t5.from, c3 = t5.to;
            var i4 = Math.abs(c3) + Math.abs(h3);
            g3 = 100 * s2 / (0 === i4 ? i4 - 1e-6 : i4);
          }
        });
        return { color: n3, foreColor: l3, percent: g3 };
      } }, { key: "calculateDataLabels", value: function(t4) {
        var e3 = t4.text, i3 = t4.x, a3 = t4.y, s2 = t4.i, r3 = t4.j, o3 = t4.colorProps, n3 = t4.fontSize, l3 = this.w.config.dataLabels, h3 = new m2(this.ctx), c3 = new O2(this.ctx), d3 = null;
        if (l3.enabled) {
          d3 = h3.group({ class: "apexcharts-data-labels" });
          var g3 = l3.offsetX, u3 = l3.offsetY, f3 = i3 + g3, p3 = a3 + parseFloat(l3.style.fontSize) / 3 + u3;
          c3.plotDataLabelsText({ x: f3, y: p3, text: e3, i: s2, j: r3, color: o3.foreColor, parent: d3, fontSize: n3, dataLabelsConfig: l3 });
        }
        return d3;
      } }, { key: "addListeners", value: function(t4) {
        var e3 = new m2(this.ctx);
        t4.node.addEventListener("mouseenter", e3.pathMouseEnter.bind(this, t4)), t4.node.addEventListener("mouseleave", e3.pathMouseLeave.bind(this, t4)), t4.node.addEventListener("mousedown", e3.pathMouseDown.bind(this, t4));
      } }]), t3;
    }(), St2 = function() {
      function t3(e3, i3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.xRatio = i3.xRatio, this.yRatio = i3.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new At2(e3), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;
      }
      return r2(t3, [{ key: "draw", value: function(t4) {
        var e3 = this.w, i3 = new m2(this.ctx), a3 = i3.group({ class: "apexcharts-heatmap" });
        a3.attr("clip-path", "url(#gridRectMask".concat(e3.globals.cuid, ")"));
        var s2 = e3.globals.gridWidth / e3.globals.dataPoints, r3 = e3.globals.gridHeight / e3.globals.series.length, o3 = 0, n3 = false;
        this.negRange = this.helpers.checkColorRange();
        var l3 = t4.slice();
        e3.config.yaxis[0].reversed && (n3 = true, l3.reverse());
        for (var h3 = n3 ? 0 : l3.length - 1; n3 ? h3 < l3.length : h3 >= 0; n3 ? h3++ : h3--) {
          var c3 = i3.group({ class: "apexcharts-series apexcharts-heatmap-series", seriesName: x2.escapeString(e3.globals.seriesNames[h3]), rel: h3 + 1, "data:realIndex": h3 });
          if (this.ctx.series.addCollapsedClassToSeries(c3, h3), e3.config.chart.dropShadow.enabled) {
            var d3 = e3.config.chart.dropShadow;
            new v2(this.ctx).dropShadow(c3, d3, h3);
          }
          for (var g3 = 0, u3 = e3.config.plotOptions.heatmap.shadeIntensity, f3 = 0; f3 < l3[h3].length; f3++) {
            var p3 = this.helpers.getShadeColor(e3.config.chart.type, h3, f3, this.negRange), b3 = p3.color, y2 = p3.colorProps;
            if ("image" === e3.config.fill.type)
              b3 = new R2(this.ctx).fillPath({ seriesNumber: h3, dataPointIndex: f3, opacity: e3.globals.hasNegs ? y2.percent < 0 ? 1 - (1 + y2.percent / 100) : u3 + y2.percent / 100 : y2.percent / 100, patternID: x2.randomId(), width: e3.config.fill.image.width ? e3.config.fill.image.width : s2, height: e3.config.fill.image.height ? e3.config.fill.image.height : r3 });
            var w2 = this.rectRadius, k3 = i3.drawRect(g3, o3, s2, r3, w2);
            if (k3.attr({ cx: g3, cy: o3 }), k3.node.classList.add("apexcharts-heatmap-rect"), c3.add(k3), k3.attr({ fill: b3, i: h3, index: h3, j: f3, val: l3[h3][f3], "stroke-width": this.strokeWidth, stroke: e3.config.plotOptions.heatmap.useFillColorAsStroke ? b3 : e3.globals.stroke.colors[0], color: b3 }), this.helpers.addListeners(k3), e3.config.chart.animations.enabled && !e3.globals.dataChanged) {
              var A3 = 1;
              e3.globals.resized || (A3 = e3.config.chart.animations.speed), this.animateHeatMap(k3, g3, o3, s2, r3, A3);
            }
            if (e3.globals.dataChanged) {
              var S3 = 1;
              if (this.dynamicAnim.enabled && e3.globals.shouldAnimate) {
                S3 = this.dynamicAnim.speed;
                var C3 = e3.globals.previousPaths[h3] && e3.globals.previousPaths[h3][f3] && e3.globals.previousPaths[h3][f3].color;
                C3 || (C3 = "rgba(255, 255, 255, 0)"), this.animateHeatColor(k3, x2.isColorHex(C3) ? C3 : x2.rgb2hex(C3), x2.isColorHex(b3) ? b3 : x2.rgb2hex(b3), S3);
              }
            }
            var L3 = (0, e3.config.dataLabels.formatter)(e3.globals.series[h3][f3], { value: e3.globals.series[h3][f3], seriesIndex: h3, dataPointIndex: f3, w: e3 }), P3 = this.helpers.calculateDataLabels({ text: L3, x: g3 + s2 / 2, y: o3 + r3 / 2, i: h3, j: f3, colorProps: y2, series: l3 });
            null !== P3 && c3.add(P3), g3 += s2;
          }
          o3 += r3, a3.add(c3);
        }
        var T3 = e3.globals.yAxisScale[0].result.slice();
        e3.config.yaxis[0].reversed ? T3.unshift("") : T3.push(""), e3.globals.yAxisScale[0].result = T3;
        var M3 = e3.globals.gridHeight / e3.globals.series.length;
        return e3.config.yaxis[0].labels.offsetY = -M3 / 2, a3;
      } }, { key: "animateHeatMap", value: function(t4, e3, i3, a3, s2, r3) {
        var o3 = new b2(this.ctx);
        o3.animateRect(t4, { x: e3 + a3 / 2, y: i3 + s2 / 2, width: 0, height: 0 }, { x: e3, y: i3, width: a3, height: s2 }, r3, function() {
          o3.animationCompleted(t4);
        });
      } }, { key: "animateHeatColor", value: function(t4, e3, i3, a3) {
        t4.attr({ fill: e3 }).animate(a3).attr({ fill: i3 });
      } }]), t3;
    }(), Ct = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "drawYAxisTexts", value: function(t4, e3, i3, a3) {
        var s2 = this.w, r3 = s2.config.yaxis[0], o3 = s2.globals.yLabelFormatters[0];
        return new m2(this.ctx).drawText({ x: t4 + r3.labels.offsetX, y: e3 + r3.labels.offsetY, text: o3(a3, i3), textAnchor: "middle", fontSize: r3.labels.style.fontSize, fontFamily: r3.labels.style.fontFamily, foreColor: Array.isArray(r3.labels.style.colors) ? r3.labels.style.colors[i3] : r3.labels.style.colors });
      } }]), t3;
    }(), Lt2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
        var i3 = this.w;
        this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== i3.globals.stroke.colors ? i3.globals.stroke.colors : i3.globals.colors, this.defaultSize = Math.min(i3.globals.gridWidth, i3.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = i3.globals.gridWidth / 2, "radialBar" === i3.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(i3.config.plotOptions.pie.endAngle - i3.config.plotOptions.pie.startAngle), this.initialAngle = i3.config.plotOptions.pie.startAngle % this.fullAngle, i3.globals.radialSize = this.defaultSize / 2.05 - i3.config.stroke.width - (i3.config.chart.sparkline.enabled ? 0 : i3.config.chart.dropShadow.blur), this.donutSize = i3.globals.radialSize * parseInt(i3.config.plotOptions.pie.donut.size, 10) / 100, this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];
      }
      return r2(t3, [{ key: "draw", value: function(t4) {
        var e3 = this, i3 = this.w, a3 = new m2(this.ctx);
        if (this.ret = a3.group({ class: "apexcharts-pie" }), i3.globals.noData)
          return this.ret;
        for (var s2 = 0, r3 = 0; r3 < t4.length; r3++)
          s2 += x2.negToZero(t4[r3]);
        var o3 = [], n3 = a3.group();
        0 === s2 && (s2 = 1e-5), t4.forEach(function(t5) {
          e3.maxY = Math.max(e3.maxY, t5);
        }), i3.config.yaxis[0].max && (this.maxY = i3.config.yaxis[0].max), "back" === i3.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret);
        for (var l3 = 0; l3 < t4.length; l3++) {
          var h3 = this.fullAngle * x2.negToZero(t4[l3]) / s2;
          o3.push(h3), "polarArea" === this.chartType ? (o3[l3] = this.fullAngle / t4.length, this.sliceSizes.push(i3.globals.radialSize * t4[l3] / this.maxY)) : this.sliceSizes.push(i3.globals.radialSize);
        }
        if (i3.globals.dataChanged) {
          for (var c3, d3 = 0, g3 = 0; g3 < i3.globals.previousPaths.length; g3++)
            d3 += x2.negToZero(i3.globals.previousPaths[g3]);
          for (var u3 = 0; u3 < i3.globals.previousPaths.length; u3++)
            c3 = this.fullAngle * x2.negToZero(i3.globals.previousPaths[u3]) / d3, this.prevSectorAngleArr.push(c3);
        }
        this.donutSize < 0 && (this.donutSize = 0);
        var f3 = i3.config.plotOptions.pie.customScale, p3 = i3.globals.gridWidth / 2, b3 = i3.globals.gridHeight / 2, v3 = p3 - i3.globals.gridWidth / 2 * f3, y2 = b3 - i3.globals.gridHeight / 2 * f3;
        if ("donut" === this.chartType) {
          var w2 = a3.drawCircle(this.donutSize);
          w2.attr({ cx: this.centerX, cy: this.centerY, fill: i3.config.plotOptions.pie.donut.background ? i3.config.plotOptions.pie.donut.background : "transparent" }), n3.add(w2);
        }
        var k3 = this.drawArcs(o3, t4);
        if (this.sliceLabels.forEach(function(t5) {
          k3.add(t5);
        }), n3.attr({ transform: "translate(".concat(v3, ", ").concat(y2, ") scale(").concat(f3, ")") }), n3.add(k3), this.ret.add(n3), this.donutDataLabels.show) {
          var A3 = this.renderInnerDataLabels(this.donutDataLabels, { hollowSize: this.donutSize, centerX: this.centerX, centerY: this.centerY, opacity: this.donutDataLabels.show, translateX: v3, translateY: y2 });
          this.ret.add(A3);
        }
        return "front" === i3.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret), this.ret;
      } }, { key: "drawArcs", value: function(t4, e3) {
        var i3 = this.w, a3 = new v2(this.ctx), s2 = new m2(this.ctx), r3 = new R2(this.ctx), o3 = s2.group({ class: "apexcharts-slices" }), n3 = this.initialAngle, l3 = this.initialAngle, h3 = this.initialAngle, c3 = this.initialAngle;
        this.strokeWidth = i3.config.stroke.show ? i3.config.stroke.width : 0;
        for (var d3 = 0; d3 < t4.length; d3++) {
          var g3 = s2.group({ class: "apexcharts-series apexcharts-pie-series", seriesName: x2.escapeString(i3.globals.seriesNames[d3]), rel: d3 + 1, "data:realIndex": d3 });
          o3.add(g3), l3 = c3, h3 = (n3 = h3) + t4[d3], c3 = l3 + this.prevSectorAngleArr[d3];
          var u3 = h3 < n3 ? this.fullAngle + h3 - n3 : h3 - n3, f3 = r3.fillPath({ seriesNumber: d3, size: this.sliceSizes[d3], value: e3[d3] }), p3 = this.getChangedPath(l3, c3), b3 = s2.drawPath({ d: p3, stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d3] : this.lineColorArr, strokeWidth: 0, fill: f3, fillOpacity: i3.config.fill.opacity, classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(d3) });
          if (b3.attr({ index: 0, j: d3 }), a3.setSelectionFilter(b3, 0, d3), i3.config.chart.dropShadow.enabled) {
            var y2 = i3.config.chart.dropShadow;
            a3.dropShadow(b3, y2, d3);
          }
          this.addListeners(b3, this.donutDataLabels), m2.setAttrs(b3.node, { "data:angle": u3, "data:startAngle": n3, "data:strokeWidth": this.strokeWidth, "data:value": e3[d3] });
          var w2 = { x: 0, y: 0 };
          "pie" === this.chartType || "polarArea" === this.chartType ? w2 = x2.polarToCartesian(this.centerX, this.centerY, i3.globals.radialSize / 1.25 + i3.config.plotOptions.pie.dataLabels.offset, (n3 + u3 / 2) % this.fullAngle) : "donut" === this.chartType && (w2 = x2.polarToCartesian(this.centerX, this.centerY, (i3.globals.radialSize + this.donutSize) / 2 + i3.config.plotOptions.pie.dataLabels.offset, (n3 + u3 / 2) % this.fullAngle)), g3.add(b3);
          var k3 = 0;
          if (!this.initialAnim || i3.globals.resized || i3.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (k3 = u3 / this.fullAngle * i3.config.chart.animations.speed) && (k3 = 1), this.animDur = k3 + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i3.globals.dataChanged ? this.animatePaths(b3, { size: this.sliceSizes[d3], endAngle: h3, startAngle: n3, prevStartAngle: l3, prevEndAngle: c3, animateStartingPos: true, i: d3, animBeginArr: this.animBeginArr, shouldSetPrevPaths: true, dur: i3.config.chart.animations.dynamicAnimation.speed }) : this.animatePaths(b3, { size: this.sliceSizes[d3], endAngle: h3, startAngle: n3, i: d3, totalItems: t4.length - 1, animBeginArr: this.animBeginArr, dur: k3 }), i3.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && b3.click(this.pieClicked.bind(this, d3)), void 0 !== i3.globals.selectedDataPoints[0] && i3.globals.selectedDataPoints[0].indexOf(d3) > -1 && this.pieClicked(d3), i3.config.dataLabels.enabled) {
            var A3 = w2.x, S3 = w2.y, C3 = 100 * u3 / this.fullAngle + "%";
            if (0 !== u3 && i3.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t4[d3]) {
              var L3 = i3.config.dataLabels.formatter;
              void 0 !== L3 && (C3 = L3(i3.globals.seriesPercent[d3][0], { seriesIndex: d3, w: i3 }));
              var P3 = i3.globals.dataLabels.style.colors[d3], T3 = s2.group({ class: "apexcharts-datalabels" }), M3 = s2.drawText({ x: A3, y: S3, text: C3, textAnchor: "middle", fontSize: i3.config.dataLabels.style.fontSize, fontFamily: i3.config.dataLabels.style.fontFamily, fontWeight: i3.config.dataLabels.style.fontWeight, foreColor: P3 });
              if (T3.add(M3), i3.config.dataLabels.dropShadow.enabled) {
                var I3 = i3.config.dataLabels.dropShadow;
                a3.dropShadow(M3, I3);
              }
              M3.node.classList.add("apexcharts-pie-label"), i3.config.chart.animations.animate && false === i3.globals.resized && (M3.node.classList.add("apexcharts-pie-label-delay"), M3.node.style.animationDelay = i3.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(T3);
            }
          }
        }
        return o3;
      } }, { key: "addListeners", value: function(t4, e3) {
        var i3 = new m2(this.ctx);
        t4.node.addEventListener("mouseenter", i3.pathMouseEnter.bind(this, t4)), t4.node.addEventListener("mouseleave", i3.pathMouseLeave.bind(this, t4)), t4.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t4.node, e3)), t4.node.addEventListener("mousedown", i3.pathMouseDown.bind(this, t4)), this.donutDataLabels.total.showAlways || (t4.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t4.node, e3)), t4.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t4.node, e3)));
      } }, { key: "animatePaths", value: function(t4, e3) {
        var i3 = this.w, a3 = e3.endAngle < e3.startAngle ? this.fullAngle + e3.endAngle - e3.startAngle : e3.endAngle - e3.startAngle, s2 = a3, r3 = e3.startAngle, o3 = e3.startAngle;
        void 0 !== e3.prevStartAngle && void 0 !== e3.prevEndAngle && (r3 = e3.prevEndAngle, s2 = e3.prevEndAngle < e3.prevStartAngle ? this.fullAngle + e3.prevEndAngle - e3.prevStartAngle : e3.prevEndAngle - e3.prevStartAngle), e3.i === i3.config.series.length - 1 && (a3 + o3 > this.fullAngle ? e3.endAngle = e3.endAngle - (a3 + o3) : a3 + o3 < this.fullAngle && (e3.endAngle = e3.endAngle + (this.fullAngle - (a3 + o3)))), a3 === this.fullAngle && (a3 = this.fullAngle - 0.01), this.animateArc(t4, r3, o3, a3, s2, e3);
      } }, { key: "animateArc", value: function(t4, e3, i3, a3, s2, r3) {
        var o3, n3 = this, l3 = this.w, h3 = new b2(this.ctx), c3 = r3.size;
        (isNaN(e3) || isNaN(s2)) && (e3 = i3, s2 = a3, r3.dur = 0);
        var d3 = a3, g3 = i3, u3 = e3 < i3 ? this.fullAngle + e3 - i3 : e3 - i3;
        l3.globals.dataChanged && r3.shouldSetPrevPaths && r3.prevEndAngle && (o3 = n3.getPiePath({ me: n3, startAngle: r3.prevStartAngle, angle: r3.prevEndAngle < r3.prevStartAngle ? this.fullAngle + r3.prevEndAngle - r3.prevStartAngle : r3.prevEndAngle - r3.prevStartAngle, size: c3 }), t4.attr({ d: o3 })), 0 !== r3.dur ? t4.animate(r3.dur, l3.globals.easing, r3.animBeginArr[r3.i]).afterAll(function() {
          "pie" !== n3.chartType && "donut" !== n3.chartType && "polarArea" !== n3.chartType || this.animate(l3.config.chart.animations.dynamicAnimation.speed).attr({ "stroke-width": n3.strokeWidth }), r3.i === l3.config.series.length - 1 && h3.animationCompleted(t4);
        }).during(function(l4) {
          d3 = u3 + (a3 - u3) * l4, r3.animateStartingPos && (d3 = s2 + (a3 - s2) * l4, g3 = e3 - s2 + (i3 - (e3 - s2)) * l4), o3 = n3.getPiePath({ me: n3, startAngle: g3, angle: d3, size: c3 }), t4.node.setAttribute("data:pathOrig", o3), t4.attr({ d: o3 });
        }) : (o3 = n3.getPiePath({ me: n3, startAngle: g3, angle: a3, size: c3 }), r3.isTrack || (l3.globals.animationEnded = true), t4.node.setAttribute("data:pathOrig", o3), t4.attr({ d: o3, "stroke-width": n3.strokeWidth }));
      } }, { key: "pieClicked", value: function(t4) {
        var e3, i3 = this.w, a3 = this, s2 = a3.sliceSizes[t4] + (i3.config.plotOptions.pie.expandOnClick ? 4 : 0), r3 = i3.globals.dom.Paper.select(".apexcharts-".concat(a3.chartType.toLowerCase(), "-slice-").concat(t4)).members[0];
        if ("true" !== r3.attr("data:pieClicked")) {
          var o3 = i3.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
          Array.prototype.forEach.call(o3, function(t5) {
            t5.setAttribute("data:pieClicked", "false");
            var e4 = t5.getAttribute("data:pathOrig");
            t5.setAttribute("d", e4);
          }), r3.attr("data:pieClicked", "true");
          var n3 = parseInt(r3.attr("data:startAngle"), 10), l3 = parseInt(r3.attr("data:angle"), 10);
          e3 = a3.getPiePath({ me: a3, startAngle: n3, angle: l3, size: s2 }), 360 !== l3 && r3.plot(e3);
        } else {
          r3.attr({ "data:pieClicked": "false" }), this.revertDataLabelsInner(r3.node, this.donutDataLabels);
          var h3 = r3.attr("data:pathOrig");
          r3.attr({ d: h3 });
        }
      } }, { key: "getChangedPath", value: function(t4, e3) {
        var i3 = "";
        return this.dynamicAnim && this.w.globals.dataChanged && (i3 = this.getPiePath({ me: this, startAngle: t4, angle: e3 - t4, size: this.size })), i3;
      } }, { key: "getPiePath", value: function(t4) {
        var e3 = t4.me, i3 = t4.startAngle, a3 = t4.angle, s2 = t4.size, r3 = i3, o3 = Math.PI * (r3 - 90) / 180, n3 = a3 + i3;
        Math.ceil(n3) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (n3 = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - 0.01), Math.ceil(n3) > this.fullAngle && (n3 -= this.fullAngle);
        var l3 = Math.PI * (n3 - 90) / 180, h3 = e3.centerX + s2 * Math.cos(o3), c3 = e3.centerY + s2 * Math.sin(o3), d3 = e3.centerX + s2 * Math.cos(l3), g3 = e3.centerY + s2 * Math.sin(l3), u3 = x2.polarToCartesian(e3.centerX, e3.centerY, e3.donutSize, n3), f3 = x2.polarToCartesian(e3.centerX, e3.centerY, e3.donutSize, r3), p3 = a3 > 180 ? 1 : 0, b3 = ["M", h3, c3, "A", s2, s2, 0, p3, 1, d3, g3];
        return "donut" === e3.chartType ? [].concat(b3, ["L", u3.x, u3.y, "A", e3.donutSize, e3.donutSize, 0, p3, 0, f3.x, f3.y, "L", h3, c3, "z"]).join(" ") : "pie" === e3.chartType || "polarArea" === e3.chartType ? [].concat(b3, ["L", e3.centerX, e3.centerY, "L", h3, c3]).join(" ") : [].concat(b3).join(" ");
      } }, { key: "drawPolarElements", value: function(t4) {
        var e3 = this.w, i3 = new _2(this.ctx), a3 = new m2(this.ctx), s2 = new Ct(this.ctx), r3 = a3.group(), o3 = a3.group(), n3 = i3.niceScale(0, Math.ceil(this.maxY), e3.config.yaxis[0].tickAmount, 0, true), l3 = n3.result.reverse(), h3 = n3.result.length;
        this.maxY = n3.niceMax;
        for (var c3 = e3.globals.radialSize, d3 = c3 / (h3 - 1), g3 = 0; g3 < h3 - 1; g3++) {
          var u3 = a3.drawCircle(c3);
          if (u3.attr({ cx: this.centerX, cy: this.centerY, fill: "none", "stroke-width": e3.config.plotOptions.polarArea.rings.strokeWidth, stroke: e3.config.plotOptions.polarArea.rings.strokeColor }), e3.config.yaxis[0].show) {
            var f3 = s2.drawYAxisTexts(this.centerX, this.centerY - c3 + parseInt(e3.config.yaxis[0].labels.style.fontSize, 10) / 2, g3, l3[g3]);
            o3.add(f3);
          }
          r3.add(u3), c3 -= d3;
        }
        this.drawSpokes(t4), t4.add(r3), t4.add(o3);
      } }, { key: "renderInnerDataLabels", value: function(t4, e3) {
        var i3 = this.w, a3 = new m2(this.ctx), s2 = a3.group({ class: "apexcharts-datalabels-group", transform: "translate(".concat(e3.translateX ? e3.translateX : 0, ", ").concat(e3.translateY ? e3.translateY : 0, ") scale(").concat(i3.config.plotOptions.pie.customScale, ")") }), r3 = t4.total.show;
        s2.node.style.opacity = e3.opacity;
        var o3, n3, l3 = e3.centerX, h3 = e3.centerY;
        o3 = void 0 === t4.name.color ? i3.globals.colors[0] : t4.name.color;
        var c3 = t4.name.fontSize, d3 = t4.name.fontFamily, g3 = t4.name.fontWeight;
        n3 = void 0 === t4.value.color ? i3.config.chart.foreColor : t4.value.color;
        var u3 = t4.value.formatter, f3 = "", p3 = "";
        if (r3 ? (o3 = t4.total.color, c3 = t4.total.fontSize, d3 = t4.total.fontFamily, g3 = t4.total.fontWeight, p3 = t4.total.label, f3 = t4.total.formatter(i3)) : 1 === i3.globals.series.length && (f3 = u3(i3.globals.series[0], i3), p3 = i3.globals.seriesNames[0]), p3 && (p3 = t4.name.formatter(p3, t4.total.show, i3)), t4.name.show) {
          var x3 = a3.drawText({ x: l3, y: h3 + parseFloat(t4.name.offsetY), text: p3, textAnchor: "middle", foreColor: o3, fontSize: c3, fontWeight: g3, fontFamily: d3 });
          x3.node.classList.add("apexcharts-datalabel-label"), s2.add(x3);
        }
        if (t4.value.show) {
          var b3 = t4.name.show ? parseFloat(t4.value.offsetY) + 16 : t4.value.offsetY, v3 = a3.drawText({ x: l3, y: h3 + b3, text: f3, textAnchor: "middle", foreColor: n3, fontWeight: t4.value.fontWeight, fontSize: t4.value.fontSize, fontFamily: t4.value.fontFamily });
          v3.node.classList.add("apexcharts-datalabel-value"), s2.add(v3);
        }
        return s2;
      } }, { key: "printInnerLabels", value: function(t4, e3, i3, a3) {
        var s2, r3 = this.w;
        a3 ? s2 = void 0 === t4.name.color ? r3.globals.colors[parseInt(a3.parentNode.getAttribute("rel"), 10) - 1] : t4.name.color : r3.globals.series.length > 1 && t4.total.show && (s2 = t4.total.color);
        var o3 = r3.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"), n3 = r3.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
        i3 = (0, t4.value.formatter)(i3, r3), a3 || "function" != typeof t4.total.formatter || (i3 = t4.total.formatter(r3));
        var l3 = e3 === t4.total.label;
        e3 = t4.name.formatter(e3, l3, r3), null !== o3 && (o3.textContent = e3), null !== n3 && (n3.textContent = i3), null !== o3 && (o3.style.fill = s2);
      } }, { key: "printDataLabelsInner", value: function(t4, e3) {
        var i3 = this.w, a3 = t4.getAttribute("data:value"), s2 = i3.globals.seriesNames[parseInt(t4.parentNode.getAttribute("rel"), 10) - 1];
        i3.globals.series.length > 1 && this.printInnerLabels(e3, s2, a3, t4);
        var r3 = i3.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
        null !== r3 && (r3.style.opacity = 1);
      } }, { key: "drawSpokes", value: function(t4) {
        var e3 = this, i3 = this.w, a3 = new m2(this.ctx), s2 = i3.config.plotOptions.polarArea.spokes;
        if (0 !== s2.strokeWidth) {
          for (var r3 = [], o3 = 360 / i3.globals.series.length, n3 = 0; n3 < i3.globals.series.length; n3++)
            r3.push(x2.polarToCartesian(this.centerX, this.centerY, i3.globals.radialSize, i3.config.plotOptions.pie.startAngle + o3 * n3));
          r3.forEach(function(i4, r4) {
            var o4 = a3.drawLine(i4.x, i4.y, e3.centerX, e3.centerY, Array.isArray(s2.connectorColors) ? s2.connectorColors[r4] : s2.connectorColors);
            t4.add(o4);
          });
        }
      } }, { key: "revertDataLabelsInner", value: function(t4, e3, i3) {
        var a3 = this, s2 = this.w, r3 = s2.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group"), o3 = false, n3 = s2.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area"), l3 = function(t5) {
          var i4 = t5.makeSliceOut, s3 = t5.printLabel;
          Array.prototype.forEach.call(n3, function(t6) {
            "true" === t6.getAttribute("data:pieClicked") && (i4 && (o3 = true), s3 && a3.printDataLabelsInner(t6, e3));
          });
        };
        if (l3({ makeSliceOut: true, printLabel: false }), e3.total.show && s2.globals.series.length > 1)
          o3 && !e3.total.showAlways ? l3({ makeSliceOut: false, printLabel: true }) : this.printInnerLabels(e3, e3.total.label, e3.total.formatter(s2));
        else if (l3({ makeSliceOut: false, printLabel: true }), !o3)
          if (s2.globals.selectedDataPoints.length && s2.globals.series.length > 1)
            if (s2.globals.selectedDataPoints[0].length > 0) {
              var h3 = s2.globals.selectedDataPoints[0], c3 = s2.globals.dom.baseEl.querySelector(".apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(h3));
              this.printDataLabelsInner(c3, e3);
            } else
              r3 && s2.globals.selectedDataPoints.length && 0 === s2.globals.selectedDataPoints[0].length && (r3.style.opacity = 0);
          else
            r3 && s2.globals.series.length > 1 && (r3.style.opacity = 0);
      } }]), t3;
    }(), Pt = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
        var i3 = this.w;
        this.graphics = new m2(this.ctx), this.lineColorArr = void 0 !== i3.globals.stroke.colors ? i3.globals.stroke.colors : i3.globals.colors, this.defaultSize = i3.globals.svgHeight < i3.globals.svgWidth ? i3.globals.gridHeight + 1.5 * i3.globals.goldenPadding : i3.globals.gridWidth, this.isLog = i3.config.yaxis[0].logarithmic, this.coreUtils = new y(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(i3.globals.maxY, 0) : i3.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.w.globals.minY, 0) : i3.globals.minY, this.polygons = i3.config.plotOptions.radar.polygons, this.strokeWidth = i3.config.stroke.show ? i3.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - i3.config.chart.dropShadow.blur, i3.config.xaxis.labels.show && (this.size = this.size - i3.globals.xAxisLabelsWidth / 1.75), void 0 !== i3.config.plotOptions.radar.size && (this.size = i3.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
      }
      return r2(t3, [{ key: "draw", value: function(t4) {
        var i3 = this, a3 = this.w, s2 = new R2(this.ctx), r3 = [], o3 = new O2(this.ctx);
        t4.length && (this.dataPointsLen = t4[a3.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
        var n3 = a3.globals.gridWidth / 2, l3 = a3.globals.gridHeight / 2, h3 = n3 + a3.config.plotOptions.radar.offsetX, c3 = l3 + a3.config.plotOptions.radar.offsetY, d3 = this.graphics.group({ class: "apexcharts-radar-series apexcharts-plot-series", transform: "translate(".concat(h3 || 0, ", ").concat(c3 || 0, ")") }), g3 = [], u3 = null, f3 = null;
        if (this.yaxisLabels = this.graphics.group({ class: "apexcharts-yaxis" }), t4.forEach(function(t5, n4) {
          var l4 = t5.length === a3.globals.dataPoints, h4 = i3.graphics.group().attr({ class: "apexcharts-series", "data:longestSeries": l4, seriesName: x2.escapeString(a3.globals.seriesNames[n4]), rel: n4 + 1, "data:realIndex": n4 });
          i3.dataRadiusOfPercent[n4] = [], i3.dataRadius[n4] = [], i3.angleArr[n4] = [], t5.forEach(function(t6, e3) {
            var a4 = Math.abs(i3.maxValue - i3.minValue);
            t6 += Math.abs(i3.minValue), i3.isLog && (t6 = i3.coreUtils.getLogVal(t6, 0)), i3.dataRadiusOfPercent[n4][e3] = t6 / a4, i3.dataRadius[n4][e3] = i3.dataRadiusOfPercent[n4][e3] * i3.size, i3.angleArr[n4][e3] = e3 * i3.disAngle;
          }), g3 = i3.getDataPointsPos(i3.dataRadius[n4], i3.angleArr[n4]);
          var c4 = i3.createPaths(g3, { x: 0, y: 0 });
          u3 = i3.graphics.group({ class: "apexcharts-series-markers-wrap apexcharts-element-hidden" }), f3 = i3.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": n4 }), a3.globals.delayedElements.push({ el: u3.node, index: n4 });
          var d4 = { i: n4, realIndex: n4, animationDelay: n4, initialSpeed: a3.config.chart.animations.speed, dataChangeSpeed: a3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-radar", shouldClipToGrid: false, bindEventsOnPaths: false, stroke: a3.globals.stroke.colors[n4], strokeLineCap: a3.config.stroke.lineCap }, p4 = null;
          a3.globals.previousPaths.length > 0 && (p4 = i3.getPreviousPath(n4));
          for (var b3 = 0; b3 < c4.linePathsTo.length; b3++) {
            var m3 = i3.graphics.renderPaths(e2(e2({}, d4), {}, { pathFrom: null === p4 ? c4.linePathsFrom[b3] : p4, pathTo: c4.linePathsTo[b3], strokeWidth: Array.isArray(i3.strokeWidth) ? i3.strokeWidth[n4] : i3.strokeWidth, fill: "none", drawShadow: false }));
            h4.add(m3);
            var y2 = s2.fillPath({ seriesNumber: n4 }), w2 = i3.graphics.renderPaths(e2(e2({}, d4), {}, { pathFrom: null === p4 ? c4.areaPathsFrom[b3] : p4, pathTo: c4.areaPathsTo[b3], strokeWidth: 0, fill: y2, drawShadow: false }));
            if (a3.config.chart.dropShadow.enabled) {
              var k3 = new v2(i3.ctx), A3 = a3.config.chart.dropShadow;
              k3.dropShadow(w2, Object.assign({}, A3, { noUserSpaceOnUse: true }), n4);
            }
            h4.add(w2);
          }
          t5.forEach(function(t6, s3) {
            var r4 = new D2(i3.ctx).getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: n4, dataPointIndex: s3 }), l5 = i3.graphics.drawMarker(g3[s3].x, g3[s3].y, r4);
            l5.attr("rel", s3), l5.attr("j", s3), l5.attr("index", n4), l5.node.setAttribute("default-marker-size", r4.pSize);
            var c5 = i3.graphics.group({ class: "apexcharts-series-markers" });
            c5 && c5.add(l5), u3.add(c5), h4.add(u3);
            var d5 = a3.config.dataLabels;
            if (d5.enabled) {
              var p5 = d5.formatter(a3.globals.series[n4][s3], { seriesIndex: n4, dataPointIndex: s3, w: a3 });
              o3.plotDataLabelsText({ x: g3[s3].x, y: g3[s3].y, text: p5, textAnchor: "middle", i: n4, j: n4, parent: f3, offsetCorrection: false, dataLabelsConfig: e2({}, d5) });
            }
            h4.add(f3);
          }), r3.push(h4);
        }), this.drawPolygons({ parent: d3 }), a3.config.xaxis.labels.show) {
          var p3 = this.drawXAxisTexts();
          d3.add(p3);
        }
        return r3.forEach(function(t5) {
          d3.add(t5);
        }), d3.add(this.yaxisLabels), d3;
      } }, { key: "drawPolygons", value: function(t4) {
        for (var e3 = this, i3 = this.w, a3 = t4.parent, s2 = new Ct(this.ctx), r3 = i3.globals.yAxisScale[0].result.reverse(), o3 = r3.length, n3 = [], l3 = this.size / (o3 - 1), h3 = 0; h3 < o3; h3++)
          n3[h3] = l3 * h3;
        n3.reverse();
        var c3 = [], d3 = [];
        n3.forEach(function(t5, i4) {
          var a4 = x2.getPolygonPos(t5, e3.dataPointsLen), s3 = "";
          a4.forEach(function(t6, a5) {
            if (0 === i4) {
              var r4 = e3.graphics.drawLine(t6.x, t6.y, 0, 0, Array.isArray(e3.polygons.connectorColors) ? e3.polygons.connectorColors[a5] : e3.polygons.connectorColors);
              d3.push(r4);
            }
            0 === a5 && e3.yaxisLabelsTextsPos.push({ x: t6.x, y: t6.y }), s3 += t6.x + "," + t6.y + " ";
          }), c3.push(s3);
        }), c3.forEach(function(t5, s3) {
          var r4 = e3.polygons.strokeColors, o4 = e3.polygons.strokeWidth, n4 = e3.graphics.drawPolygon(t5, Array.isArray(r4) ? r4[s3] : r4, Array.isArray(o4) ? o4[s3] : o4, i3.globals.radarPolygons.fill.colors[s3]);
          a3.add(n4);
        }), d3.forEach(function(t5) {
          a3.add(t5);
        }), i3.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function(t5, i4) {
          var a4 = s2.drawYAxisTexts(t5.x, t5.y, i4, r3[i4]);
          e3.yaxisLabels.add(a4);
        });
      } }, { key: "drawXAxisTexts", value: function() {
        var t4 = this, i3 = this.w, a3 = i3.config.xaxis.labels, s2 = this.graphics.group({ class: "apexcharts-xaxis" }), r3 = x2.getPolygonPos(this.size, this.dataPointsLen);
        return i3.globals.labels.forEach(function(o3, n3) {
          var l3 = i3.config.xaxis.labels.formatter, h3 = new O2(t4.ctx);
          if (r3[n3]) {
            var c3 = t4.getTextPos(r3[n3], t4.size), d3 = l3(o3, { seriesIndex: -1, dataPointIndex: n3, w: i3 });
            h3.plotDataLabelsText({ x: c3.newX, y: c3.newY, text: d3, textAnchor: c3.textAnchor, i: n3, j: n3, parent: s2, color: Array.isArray(a3.style.colors) && a3.style.colors[n3] ? a3.style.colors[n3] : "#a8a8a8", dataLabelsConfig: e2({ textAnchor: c3.textAnchor, dropShadow: { enabled: false } }, a3), offsetCorrection: false });
          }
        }), s2;
      } }, { key: "createPaths", value: function(t4, e3) {
        var i3 = this, a3 = [], s2 = [], r3 = [], o3 = [];
        if (t4.length) {
          s2 = [this.graphics.move(e3.x, e3.y)], o3 = [this.graphics.move(e3.x, e3.y)];
          var n3 = this.graphics.move(t4[0].x, t4[0].y), l3 = this.graphics.move(t4[0].x, t4[0].y);
          t4.forEach(function(e4, a4) {
            n3 += i3.graphics.line(e4.x, e4.y), l3 += i3.graphics.line(e4.x, e4.y), a4 === t4.length - 1 && (n3 += "Z", l3 += "Z");
          }), a3.push(n3), r3.push(l3);
        }
        return { linePathsFrom: s2, linePathsTo: a3, areaPathsFrom: o3, areaPathsTo: r3 };
      } }, { key: "getTextPos", value: function(t4, e3) {
        var i3 = "middle", a3 = t4.x, s2 = t4.y;
        return Math.abs(t4.x) >= 10 ? t4.x > 0 ? (i3 = "start", a3 += 10) : t4.x < 0 && (i3 = "end", a3 -= 10) : i3 = "middle", Math.abs(t4.y) >= e3 - 10 && (t4.y < 0 ? s2 -= 10 : t4.y > 0 && (s2 += 10)), { textAnchor: i3, newX: a3, newY: s2 };
      } }, { key: "getPreviousPath", value: function(t4) {
        for (var e3 = this.w, i3 = null, a3 = 0; a3 < e3.globals.previousPaths.length; a3++) {
          var s2 = e3.globals.previousPaths[a3];
          s2.paths.length > 0 && parseInt(s2.realIndex, 10) === parseInt(t4, 10) && void 0 !== e3.globals.previousPaths[a3].paths[0] && (i3 = e3.globals.previousPaths[a3].paths[0].d);
        }
        return i3;
      } }, { key: "getDataPointsPos", value: function(t4, e3) {
        var i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
        t4 = t4 || [], e3 = e3 || [];
        for (var a3 = [], s2 = 0; s2 < i3; s2++) {
          var r3 = {};
          r3.x = t4[s2] * Math.sin(e3[s2]), r3.y = -t4[s2] * Math.cos(e3[s2]), a3.push(r3);
        }
        return a3;
      } }]), t3;
    }(), Tt2 = function(t3) {
      n2(i3, Lt2);
      var e3 = d2(i3);
      function i3(t4) {
        var s2;
        a2(this, i3), (s2 = e3.call(this, t4)).ctx = t4, s2.w = t4.w, s2.animBeginArr = [0], s2.animDur = 0;
        var r3 = s2.w;
        return s2.startAngle = r3.config.plotOptions.radialBar.startAngle, s2.endAngle = r3.config.plotOptions.radialBar.endAngle, s2.totalAngle = Math.abs(r3.config.plotOptions.radialBar.endAngle - r3.config.plotOptions.radialBar.startAngle), s2.trackStartAngle = r3.config.plotOptions.radialBar.track.startAngle, s2.trackEndAngle = r3.config.plotOptions.radialBar.track.endAngle, s2.donutDataLabels = s2.w.config.plotOptions.radialBar.dataLabels, s2.radialDataLabels = s2.donutDataLabels, s2.trackStartAngle || (s2.trackStartAngle = s2.startAngle), s2.trackEndAngle || (s2.trackEndAngle = s2.endAngle), 360 === s2.endAngle && (s2.endAngle = 359.99), s2.margin = parseInt(r3.config.plotOptions.radialBar.track.margin, 10), s2;
      }
      return r2(i3, [{ key: "draw", value: function(t4) {
        var e4 = this.w, i4 = new m2(this.ctx), a3 = i4.group({ class: "apexcharts-radialbar" });
        if (e4.globals.noData)
          return a3;
        var s2 = i4.group(), r3 = this.defaultSize / 2, o3 = e4.globals.gridWidth / 2, n3 = this.defaultSize / 2.05;
        e4.config.chart.sparkline.enabled || (n3 = n3 - e4.config.stroke.width - e4.config.chart.dropShadow.blur);
        var l3 = e4.globals.fill.colors;
        if (e4.config.plotOptions.radialBar.track.show) {
          var h3 = this.drawTracks({ size: n3, centerX: o3, centerY: r3, colorArr: l3, series: t4 });
          s2.add(h3);
        }
        var c3 = this.drawArcs({ size: n3, centerX: o3, centerY: r3, colorArr: l3, series: t4 }), d3 = 360;
        e4.config.plotOptions.radialBar.startAngle < 0 && (d3 = this.totalAngle);
        var g3 = (360 - d3) / 360;
        if (e4.globals.radialSize = n3 - n3 * g3, this.radialDataLabels.value.show) {
          var u3 = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
          e4.globals.radialSize += u3 * g3;
        }
        return s2.add(c3.g), "front" === e4.config.plotOptions.radialBar.hollow.position && (c3.g.add(c3.elHollow), c3.dataLabels && c3.g.add(c3.dataLabels)), a3.add(s2), a3;
      } }, { key: "drawTracks", value: function(t4) {
        var e4 = this.w, i4 = new m2(this.ctx), a3 = i4.group({ class: "apexcharts-tracks" }), s2 = new v2(this.ctx), r3 = new R2(this.ctx), o3 = this.getStrokeWidth(t4);
        t4.size = t4.size - o3 / 2;
        for (var n3 = 0; n3 < t4.series.length; n3++) {
          var l3 = i4.group({ class: "apexcharts-radialbar-track apexcharts-track" });
          a3.add(l3), l3.attr({ rel: n3 + 1 }), t4.size = t4.size - o3 - this.margin;
          var h3 = e4.config.plotOptions.radialBar.track, c3 = r3.fillPath({ seriesNumber: 0, size: t4.size, fillColors: Array.isArray(h3.background) ? h3.background[n3] : h3.background, solid: true }), d3 = this.trackStartAngle, g3 = this.trackEndAngle;
          Math.abs(g3) + Math.abs(d3) >= 360 && (g3 = 360 - Math.abs(this.startAngle) - 0.1);
          var u3 = i4.drawPath({ d: "", stroke: c3, strokeWidth: o3 * parseInt(h3.strokeWidth, 10) / 100, fill: "none", strokeOpacity: h3.opacity, classes: "apexcharts-radialbar-area" });
          if (h3.dropShadow.enabled) {
            var f3 = h3.dropShadow;
            s2.dropShadow(u3, f3);
          }
          l3.add(u3), u3.attr("id", "apexcharts-radialbarTrack-" + n3), this.animatePaths(u3, { centerX: t4.centerX, centerY: t4.centerY, endAngle: g3, startAngle: d3, size: t4.size, i: n3, totalItems: 2, animBeginArr: 0, dur: 0, isTrack: true, easing: e4.globals.easing });
        }
        return a3;
      } }, { key: "drawArcs", value: function(t4) {
        var e4 = this.w, i4 = new m2(this.ctx), a3 = new R2(this.ctx), s2 = new v2(this.ctx), r3 = i4.group(), o3 = this.getStrokeWidth(t4);
        t4.size = t4.size - o3 / 2;
        var n3 = e4.config.plotOptions.radialBar.hollow.background, l3 = t4.size - o3 * t4.series.length - this.margin * t4.series.length - o3 * parseInt(e4.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2, h3 = l3 - e4.config.plotOptions.radialBar.hollow.margin;
        void 0 !== e4.config.plotOptions.radialBar.hollow.image && (n3 = this.drawHollowImage(t4, r3, l3, n3));
        var c3 = this.drawHollow({ size: h3, centerX: t4.centerX, centerY: t4.centerY, fill: n3 || "transparent" });
        if (e4.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
          var d3 = e4.config.plotOptions.radialBar.hollow.dropShadow;
          s2.dropShadow(c3, d3);
        }
        var g3 = 1;
        !this.radialDataLabels.total.show && e4.globals.series.length > 1 && (g3 = 0);
        var u3 = null;
        this.radialDataLabels.show && (u3 = this.renderInnerDataLabels(this.radialDataLabels, { hollowSize: l3, centerX: t4.centerX, centerY: t4.centerY, opacity: g3 })), "back" === e4.config.plotOptions.radialBar.hollow.position && (r3.add(c3), u3 && r3.add(u3));
        var f3 = false;
        e4.config.plotOptions.radialBar.inverseOrder && (f3 = true);
        for (var p3 = f3 ? t4.series.length - 1 : 0; f3 ? p3 >= 0 : p3 < t4.series.length; f3 ? p3-- : p3++) {
          var b3 = i4.group({ class: "apexcharts-series apexcharts-radial-series", seriesName: x2.escapeString(e4.globals.seriesNames[p3]) });
          r3.add(b3), b3.attr({ rel: p3 + 1, "data:realIndex": p3 }), this.ctx.series.addCollapsedClassToSeries(b3, p3), t4.size = t4.size - o3 - this.margin;
          var y2 = a3.fillPath({ seriesNumber: p3, size: t4.size, value: t4.series[p3] }), w2 = this.startAngle, k3 = void 0, A3 = x2.negToZero(t4.series[p3] > 100 ? 100 : t4.series[p3]) / 100, S3 = Math.round(this.totalAngle * A3) + this.startAngle, C3 = void 0;
          e4.globals.dataChanged && (k3 = this.startAngle, C3 = Math.round(this.totalAngle * x2.negToZero(e4.globals.previousPaths[p3]) / 100) + k3), Math.abs(S3) + Math.abs(w2) >= 360 && (S3 -= 0.01), Math.abs(C3) + Math.abs(k3) >= 360 && (C3 -= 0.01);
          var L3 = S3 - w2, P3 = Array.isArray(e4.config.stroke.dashArray) ? e4.config.stroke.dashArray[p3] : e4.config.stroke.dashArray, T3 = i4.drawPath({ d: "", stroke: y2, strokeWidth: o3, fill: "none", fillOpacity: e4.config.fill.opacity, classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + p3, strokeDashArray: P3 });
          if (m2.setAttrs(T3.node, { "data:angle": L3, "data:value": t4.series[p3] }), e4.config.chart.dropShadow.enabled) {
            var M3 = e4.config.chart.dropShadow;
            s2.dropShadow(T3, M3, p3);
          }
          s2.setSelectionFilter(T3, 0, p3), this.addListeners(T3, this.radialDataLabels), b3.add(T3), T3.attr({ index: 0, j: p3 });
          var I3 = 0;
          !this.initialAnim || e4.globals.resized || e4.globals.dataChanged || (I3 = e4.config.chart.animations.speed), e4.globals.dataChanged && (I3 = e4.config.chart.animations.dynamicAnimation.speed), this.animDur = I3 / (1.2 * t4.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(T3, { centerX: t4.centerX, centerY: t4.centerY, endAngle: S3, startAngle: w2, prevEndAngle: C3, prevStartAngle: k3, size: t4.size, i: p3, totalItems: 2, animBeginArr: this.animBeginArr, dur: I3, shouldSetPrevPaths: true, easing: e4.globals.easing });
        }
        return { g: r3, elHollow: c3, dataLabels: u3 };
      } }, { key: "drawHollow", value: function(t4) {
        var e4 = new m2(this.ctx).drawCircle(2 * t4.size);
        return e4.attr({ class: "apexcharts-radialbar-hollow", cx: t4.centerX, cy: t4.centerY, r: t4.size, fill: t4.fill }), e4;
      } }, { key: "drawHollowImage", value: function(t4, e4, i4, a3) {
        var s2 = this.w, r3 = new R2(this.ctx), o3 = x2.randomId(), n3 = s2.config.plotOptions.radialBar.hollow.image;
        if (s2.config.plotOptions.radialBar.hollow.imageClipped)
          r3.clippedImgArea({ width: i4, height: i4, image: n3, patternID: "pattern".concat(s2.globals.cuid).concat(o3) }), a3 = "url(#pattern".concat(s2.globals.cuid).concat(o3, ")");
        else {
          var l3 = s2.config.plotOptions.radialBar.hollow.imageWidth, h3 = s2.config.plotOptions.radialBar.hollow.imageHeight;
          if (void 0 === l3 && void 0 === h3) {
            var c3 = s2.globals.dom.Paper.image(n3).loaded(function(e5) {
              this.move(t4.centerX - e5.width / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetX, t4.centerY - e5.height / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetY);
            });
            e4.add(c3);
          } else {
            var d3 = s2.globals.dom.Paper.image(n3).loaded(function(e5) {
              this.move(t4.centerX - l3 / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetX, t4.centerY - h3 / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l3, h3);
            });
            e4.add(d3);
          }
        }
        return a3;
      } }, { key: "getStrokeWidth", value: function(t4) {
        var e4 = this.w;
        return t4.size * (100 - parseInt(e4.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t4.series.length + 1) - this.margin;
      } }]), i3;
    }(), Mt = function(t3) {
      n2(s2, yt2);
      var i3 = d2(s2);
      function s2() {
        return a2(this, s2), i3.apply(this, arguments);
      }
      return r2(s2, [{ key: "draw", value: function(t4, i4) {
        var a3 = this.w, s3 = new m2(this.ctx);
        this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t4, this.seriesRangeStart = a3.globals.seriesRangeStart, this.seriesRangeEnd = a3.globals.seriesRangeEnd, this.barHelpers.initVariables(t4);
        for (var r3 = s3.group({ class: "apexcharts-rangebar-series apexcharts-plot-series" }), o3 = 0; o3 < t4.length; o3++) {
          var n3, l3, h3, c3 = void 0, d3 = void 0, g3 = void 0, u3 = a3.globals.comboCharts ? i4[o3] : o3, f3 = s3.group({ class: "apexcharts-series", seriesName: x2.escapeString(a3.globals.seriesNames[u3]), rel: o3 + 1, "data:realIndex": u3 });
          this.ctx.series.addCollapsedClassToSeries(f3, u3), t4[o3].length > 0 && (this.visibleI = this.visibleI + 1);
          var p3 = 0, b3 = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = u3);
          var v3 = this.barHelpers.initialPositions();
          d3 = v3.y, h3 = v3.zeroW, c3 = v3.x, b3 = v3.barWidth, n3 = v3.xDivision, l3 = v3.zeroH;
          for (var y2 = s3.group({ class: "apexcharts-datalabels", "data:realIndex": u3 }), w2 = s3.group({ class: "apexcharts-rangebar-goals-markers", style: "pointer-events: none" }), k3 = 0; k3 < a3.globals.dataPoints; k3++) {
            var A3 = this.barHelpers.getStrokeWidth(o3, k3, u3), S3 = this.seriesRangeStart[o3][k3], C3 = this.seriesRangeEnd[o3][k3], L3 = null, P3 = null, T3 = { x: c3, y: d3, strokeWidth: A3, elSeries: f3 };
            if (g3 = v3.yDivision, p3 = v3.barHeight, this.isHorizontal) {
              P3 = d3 + p3 * this.visibleI;
              var M3 = this.seriesLen;
              a3.config.plotOptions.bar.rangeBarGroupRows && (M3 = 1);
              var I3 = (g3 - p3 * M3) / 2;
              if (void 0 === a3.config.series[o3].data[k3])
                break;
              if (a3.config.series[o3].data[k3].x) {
                var z3 = this.detectOverlappingBars({ i: o3, j: k3, barYPosition: P3, srty: I3, barHeight: p3, yDivision: g3, initPositions: v3 });
                p3 = z3.barHeight, P3 = z3.barYPosition;
              }
              b3 = (L3 = this.drawRangeBarPaths(e2({ indexes: { i: o3, j: k3, realIndex: u3 }, barHeight: p3, barYPosition: P3, zeroW: h3, yDivision: g3, y1: S3, y2: C3 }, T3))).barWidth;
            } else
              p3 = (L3 = this.drawRangeColumnPaths(e2({ indexes: { i: o3, j: k3, realIndex: u3 }, zeroH: l3, barWidth: b3, xDivision: n3 }, T3))).barHeight;
            var X3 = this.barHelpers.drawGoalLine({ barXPosition: L3.barXPosition, barYPosition: P3, goalX: L3.goalX, goalY: L3.goalY, barHeight: p3, barWidth: b3 });
            X3 && w2.add(X3), d3 = L3.y, c3 = L3.x;
            var E3 = this.barHelpers.getPathFillColor(t4, o3, k3, u3), Y3 = a3.globals.stroke.colors[u3];
            this.renderSeries({ realIndex: u3, pathFill: E3, lineFill: Y3, j: k3, i: o3, x: c3, y: d3, y1: S3, y2: C3, pathFrom: L3.pathFrom, pathTo: L3.pathTo, strokeWidth: A3, elSeries: f3, series: t4, barHeight: p3, barYPosition: P3, barWidth: b3, elDataLabelsWrap: y2, elGoalsMarkers: w2, visibleSeries: this.visibleI, type: "rangebar" });
          }
          r3.add(f3);
        }
        return r3;
      } }, { key: "detectOverlappingBars", value: function(t4) {
        var e3 = t4.i, i4 = t4.j, a3 = t4.barYPosition, s3 = t4.srty, r3 = t4.barHeight, o3 = t4.yDivision, n3 = t4.initPositions, l3 = this.w, h3 = [], c3 = l3.config.series[e3].data[i4].rangeName, d3 = l3.config.series[e3].data[i4].x, g3 = l3.globals.labels.indexOf(d3), u3 = l3.globals.seriesRange[e3].findIndex(function(t5) {
          return t5.x === d3 && t5.overlaps.length > 0;
        });
        return a3 = l3.config.plotOptions.bar.rangeBarGroupRows ? s3 + o3 * g3 : s3 + r3 * this.visibleI + o3 * g3, u3 > -1 && !l3.config.plotOptions.bar.rangeBarOverlap && (h3 = l3.globals.seriesRange[e3][u3].overlaps).indexOf(c3) > -1 && (a3 = (r3 = n3.barHeight / h3.length) * this.visibleI + o3 * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + r3 * (this.visibleI + h3.indexOf(c3)) + o3 * g3), { barYPosition: a3, barHeight: r3 };
      } }, { key: "drawRangeColumnPaths", value: function(t4) {
        var e3 = t4.indexes, i4 = t4.x;
        t4.strokeWidth;
        var a3 = t4.xDivision, s3 = t4.barWidth, r3 = t4.zeroH, o3 = this.w, n3 = e3.i, l3 = e3.j, h3 = this.yRatio[this.yaxisIndex], c3 = e3.realIndex, d3 = this.getRangeValue(c3, l3), g3 = Math.min(d3.start, d3.end), u3 = Math.max(d3.start, d3.end);
        o3.globals.isXNumeric && (i4 = (o3.globals.seriesX[n3][l3] - o3.globals.minX) / this.xRatio - s3 / 2);
        var f3 = i4 + s3 * this.visibleI;
        void 0 === this.series[n3][l3] || null === this.series[n3][l3] ? g3 = r3 : (g3 = r3 - g3 / h3, u3 = r3 - u3 / h3);
        var p3 = Math.abs(u3 - g3), x3 = this.barHelpers.getColumnPaths({ barXPosition: f3, barWidth: s3, y1: g3, y2: u3, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, realIndex: e3.realIndex, i: c3, j: l3, w: o3 });
        return o3.globals.isXNumeric || (i4 += a3), { pathTo: x3.pathTo, pathFrom: x3.pathFrom, barHeight: p3, x: i4, y: u3, goalY: this.barHelpers.getGoalValues("y", null, r3, n3, l3), barXPosition: f3 };
      } }, { key: "drawRangeBarPaths", value: function(t4) {
        var e3 = t4.indexes, i4 = t4.y, a3 = t4.y1, s3 = t4.y2, r3 = t4.yDivision, o3 = t4.barHeight, n3 = t4.barYPosition, l3 = t4.zeroW, h3 = this.w, c3 = l3 + a3 / this.invertedYRatio, d3 = l3 + s3 / this.invertedYRatio, g3 = Math.abs(d3 - c3), u3 = this.barHelpers.getBarpaths({ barYPosition: n3, barHeight: o3, x1: c3, x2: d3, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, i: e3.realIndex, realIndex: e3.realIndex, j: e3.j, w: h3 });
        return h3.globals.isXNumeric || (i4 += r3), { pathTo: u3.pathTo, pathFrom: u3.pathFrom, barWidth: g3, x: d3, goalX: this.barHelpers.getGoalValues("x", l3, null, e3.realIndex, e3.j), y: i4 };
      } }, { key: "getRangeValue", value: function(t4, e3) {
        var i4 = this.w;
        return { start: i4.globals.seriesRangeStart[t4][e3], end: i4.globals.seriesRangeEnd[t4][e3] };
      } }]), s2;
    }(), It2 = function() {
      function t3(e3) {
        a2(this, t3), this.w = e3.w, this.lineCtx = e3;
      }
      return r2(t3, [{ key: "sameValueSeriesFix", value: function(t4, e3) {
        var i3 = this.w;
        if (("gradient" === i3.config.fill.type || "gradient" === i3.config.fill.type[t4]) && new y(this.lineCtx.ctx, i3).seriesHaveSameValues(t4)) {
          var a3 = e3[t4].slice();
          a3[a3.length - 1] = a3[a3.length - 1] + 1e-6, e3[t4] = a3;
        }
        return e3;
      } }, { key: "calculatePoints", value: function(t4) {
        var e3 = t4.series, i3 = t4.realIndex, a3 = t4.x, s2 = t4.y, r3 = t4.i, o3 = t4.j, n3 = t4.prevY, l3 = this.w, h3 = [], c3 = [];
        if (0 === o3) {
          var d3 = this.lineCtx.categoryAxisCorrection + l3.config.markers.offsetX;
          l3.globals.isXNumeric && (d3 = (l3.globals.seriesX[i3][0] - l3.globals.minX) / this.lineCtx.xRatio + l3.config.markers.offsetX), h3.push(d3), c3.push(x2.isNumber(e3[r3][0]) ? n3 + l3.config.markers.offsetY : null), h3.push(a3 + l3.config.markers.offsetX), c3.push(x2.isNumber(e3[r3][o3 + 1]) ? s2 + l3.config.markers.offsetY : null);
        } else
          h3.push(a3 + l3.config.markers.offsetX), c3.push(x2.isNumber(e3[r3][o3 + 1]) ? s2 + l3.config.markers.offsetY : null);
        return { x: h3, y: c3 };
      } }, { key: "checkPreviousPaths", value: function(t4) {
        for (var e3 = t4.pathFromLine, i3 = t4.pathFromArea, a3 = t4.realIndex, s2 = this.w, r3 = 0; r3 < s2.globals.previousPaths.length; r3++) {
          var o3 = s2.globals.previousPaths[r3];
          ("line" === o3.type || "area" === o3.type) && o3.paths.length > 0 && parseInt(o3.realIndex, 10) === parseInt(a3, 10) && ("line" === o3.type ? (this.lineCtx.appendPathFrom = false, e3 = s2.globals.previousPaths[r3].paths[0].d) : "area" === o3.type && (this.lineCtx.appendPathFrom = false, i3 = s2.globals.previousPaths[r3].paths[0].d, s2.config.stroke.show && s2.globals.previousPaths[r3].paths[1] && (e3 = s2.globals.previousPaths[r3].paths[1].d)));
        }
        return { pathFromLine: e3, pathFromArea: i3 };
      } }, { key: "determineFirstPrevY", value: function(t4) {
        var e3, i3 = t4.i, a3 = t4.series, s2 = t4.prevY, r3 = t4.lineYPosition, o3 = this.w;
        if (void 0 !== (null === (e3 = a3[i3]) || void 0 === e3 ? void 0 : e3[0]))
          s2 = (r3 = o3.config.chart.stacked && i3 > 0 ? this.lineCtx.prevSeriesY[i3 - 1][0] : this.lineCtx.zeroY) - a3[i3][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] + 2 * (this.lineCtx.isReversed ? a3[i3][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] : 0);
        else if (o3.config.chart.stacked && i3 > 0 && void 0 === a3[i3][0]) {
          for (var n3 = i3 - 1; n3 >= 0; n3--)
            if (null !== a3[n3][0] && void 0 !== a3[n3][0]) {
              s2 = r3 = this.lineCtx.prevSeriesY[n3][0];
              break;
            }
        }
        return { prevY: s2, lineYPosition: r3 };
      } }]), t3;
    }(), zt2 = function() {
      function t3(e3, i3, s2) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.xyRatios = i3, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || s2, this.scatter = new H(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new It2(this), this.markers = new D2(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;
      }
      return r2(t3, [{ key: "draw", value: function(t4, i3, a3, s2) {
        var r3 = this.w, o3 = new m2(this.ctx), n3 = r3.globals.comboCharts ? i3 : r3.config.chart.type, l3 = o3.group({ class: "apexcharts-".concat(n3, "-series apexcharts-plot-series") }), h3 = new y(this.ctx, r3);
        this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t4 = h3.getLogSeries(t4), this.yRatio = h3.getLogYRatios(this.yRatio);
        for (var c3 = [], d3 = 0; d3 < t4.length; d3++) {
          t4 = this.lineHelpers.sameValueSeriesFix(d3, t4);
          var g3 = r3.globals.comboCharts ? a3[d3] : d3;
          this._initSerieVariables(t4, d3, g3);
          var u3 = [], f3 = [], p3 = r3.globals.padHorizontal + this.categoryAxisCorrection;
          this.ctx.series.addCollapsedClassToSeries(this.elSeries, g3), r3.globals.isXNumeric && r3.globals.seriesX.length > 0 && (p3 = (r3.globals.seriesX[g3][0] - r3.globals.minX) / this.xRatio), f3.push(p3);
          var x3, b3 = p3, v3 = void 0, w2 = b3, k3 = this.zeroY, A3 = this.zeroY;
          k3 = this.lineHelpers.determineFirstPrevY({ i: d3, series: t4, prevY: k3, lineYPosition: 0 }).prevY, u3.push(k3), x3 = k3;
          "rangeArea" === n3 && (v3 = A3 = this.lineHelpers.determineFirstPrevY({ i: d3, series: s2, prevY: A3, lineYPosition: 0 }).prevY);
          var S3 = { type: n3, series: t4, realIndex: g3, i: d3, x: p3, y: 1, pX: b3, pY: x3, pathsFrom: this._calculatePathsFrom({ type: n3, series: t4, i: d3, realIndex: g3, prevX: w2, prevY: k3, prevY2: A3 }), linePaths: [], areaPaths: [], seriesIndex: a3, lineYPosition: 0, xArrj: f3, yArrj: u3, seriesRangeEnd: s2 }, C3 = this._iterateOverDataPoints(e2(e2({}, S3), {}, { iterations: "rangeArea" === n3 ? t4[d3].length - 1 : void 0, isRangeStart: true }));
          if ("rangeArea" === n3) {
            var L3 = this._calculatePathsFrom({ series: s2, i: d3, realIndex: g3, prevX: w2, prevY: A3 }), P3 = this._iterateOverDataPoints(e2(e2({}, S3), {}, { series: s2, pY: v3, pathsFrom: L3, iterations: s2[d3].length - 1, isRangeStart: false }));
            C3.linePaths[0] = P3.linePath + C3.linePath, C3.pathFromLine = P3.pathFromLine + C3.pathFromLine;
          }
          this._handlePaths({ type: n3, realIndex: g3, i: d3, paths: C3 }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), c3.push(this.elSeries);
        }
        if (r3.config.chart.stacked)
          for (var T3 = c3.length; T3 > 0; T3--)
            l3.add(c3[T3 - 1]);
        else
          for (var M3 = 0; M3 < c3.length; M3++)
            l3.add(c3[M3]);
        return l3;
      } }, { key: "_initSerieVariables", value: function(t4, e3, i3) {
        var a3 = this.w, s2 = new m2(this.ctx);
        this.xDivision = a3.globals.gridWidth / (a3.globals.dataPoints - ("on" === a3.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a3.config.stroke.width) ? a3.config.stroke.width[i3] : a3.config.stroke.width, this.yRatio.length > 1 && (this.yaxisIndex = i3), this.isReversed = a3.config.yaxis[this.yaxisIndex] && a3.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a3.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? a3.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a3.globals.gridHeight || "end" === a3.config.plotOptions.area.fillTo) && (this.areaBottomY = a3.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s2.group({ class: "apexcharts-series", seriesName: x2.escapeString(a3.globals.seriesNames[i3]) }), this.elPointsMain = s2.group({ class: "apexcharts-series-markers-wrap", "data:realIndex": i3 }), this.elDataLabelsWrap = s2.group({ class: "apexcharts-datalabels", "data:realIndex": i3 });
        var r3 = t4[e3].length === a3.globals.dataPoints;
        this.elSeries.attr({ "data:longestSeries": r3, rel: e3 + 1, "data:realIndex": i3 }), this.appendPathFrom = true;
      } }, { key: "_calculatePathsFrom", value: function(t4) {
        var e3, i3, a3, s2, r3 = t4.type, o3 = t4.series, n3 = t4.i, l3 = t4.realIndex, h3 = t4.prevX, c3 = t4.prevY, d3 = t4.prevY2, g3 = this.w, u3 = new m2(this.ctx);
        if (null === o3[n3][0]) {
          for (var f3 = 0; f3 < o3[n3].length; f3++)
            if (null !== o3[n3][f3]) {
              h3 = this.xDivision * f3, c3 = this.zeroY - o3[n3][f3] / this.yRatio[this.yaxisIndex], e3 = u3.move(h3, c3), i3 = u3.move(h3, this.areaBottomY);
              break;
            }
        } else
          e3 = u3.move(h3, c3), "rangeArea" === r3 && (e3 = u3.move(h3, d3) + u3.line(h3, c3)), i3 = u3.move(h3, this.areaBottomY) + u3.line(h3, c3);
        if (a3 = u3.move(-1, this.zeroY) + u3.line(-1, this.zeroY), s2 = u3.move(-1, this.zeroY) + u3.line(-1, this.zeroY), g3.globals.previousPaths.length > 0) {
          var p3 = this.lineHelpers.checkPreviousPaths({ pathFromLine: a3, pathFromArea: s2, realIndex: l3 });
          a3 = p3.pathFromLine, s2 = p3.pathFromArea;
        }
        return { prevX: h3, prevY: c3, linePath: e3, areaPath: i3, pathFromLine: a3, pathFromArea: s2 };
      } }, { key: "_handlePaths", value: function(t4) {
        var i3 = t4.type, a3 = t4.realIndex, s2 = t4.i, r3 = t4.paths, o3 = this.w, n3 = new m2(this.ctx), l3 = new R2(this.ctx);
        this.prevSeriesY.push(r3.yArrj), o3.globals.seriesXvalues[a3] = r3.xArrj, o3.globals.seriesYvalues[a3] = r3.yArrj;
        var h3 = o3.config.forecastDataPoints;
        if (h3.count > 0 && "rangeArea" !== i3) {
          var c3 = o3.globals.seriesXvalues[a3][o3.globals.seriesXvalues[a3].length - h3.count - 1], d3 = n3.drawRect(c3, 0, o3.globals.gridWidth, o3.globals.gridHeight, 0);
          o3.globals.dom.elForecastMask.appendChild(d3.node);
          var g3 = n3.drawRect(0, 0, c3, o3.globals.gridHeight, 0);
          o3.globals.dom.elNonForecastMask.appendChild(g3.node);
        }
        this.pointsChart || o3.globals.delayedElements.push({ el: this.elPointsMain.node, index: a3 });
        var u3 = { i: s2, realIndex: a3, animationDelay: s2, initialSpeed: o3.config.chart.animations.speed, dataChangeSpeed: o3.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(i3) };
        if ("area" === i3)
          for (var f3 = l3.fillPath({ seriesNumber: a3 }), p3 = 0; p3 < r3.areaPaths.length; p3++) {
            var x3 = n3.renderPaths(e2(e2({}, u3), {}, { pathFrom: r3.pathFromArea, pathTo: r3.areaPaths[p3], stroke: "none", strokeWidth: 0, strokeLineCap: null, fill: f3 }));
            this.elSeries.add(x3);
          }
        if (o3.config.stroke.show && !this.pointsChart) {
          var b3 = null;
          if ("line" === i3)
            b3 = l3.fillPath({ seriesNumber: a3, i: s2 });
          else if ("solid" === o3.config.stroke.fill.type)
            b3 = o3.globals.stroke.colors[a3];
          else {
            var v3 = o3.config.fill;
            o3.config.fill = o3.config.stroke.fill, b3 = l3.fillPath({ seriesNumber: a3, i: s2 }), o3.config.fill = v3;
          }
          for (var y2 = 0; y2 < r3.linePaths.length; y2++) {
            var w2 = b3;
            "rangeArea" === i3 && (w2 = l3.fillPath({ seriesNumber: a3 }));
            var k3 = e2(e2({}, u3), {}, { pathFrom: r3.pathFromLine, pathTo: r3.linePaths[y2], stroke: b3, strokeWidth: this.strokeWidth, strokeLineCap: o3.config.stroke.lineCap, fill: "rangeArea" === i3 ? w2 : "none" }), A3 = n3.renderPaths(k3);
            if (this.elSeries.add(A3), A3.attr("fill-rule", "evenodd"), h3.count > 0 && "rangeArea" !== i3) {
              var S3 = n3.renderPaths(k3);
              S3.node.setAttribute("stroke-dasharray", h3.dashArray), h3.strokeWidth && S3.node.setAttribute("stroke-width", h3.strokeWidth), this.elSeries.add(S3), S3.attr("clip-path", "url(#forecastMask".concat(o3.globals.cuid, ")")), A3.attr("clip-path", "url(#nonForecastMask".concat(o3.globals.cuid, ")"));
            }
          }
        }
      } }, { key: "_iterateOverDataPoints", value: function(t4) {
        var e3 = t4.type, i3 = t4.series, a3 = t4.iterations, s2 = t4.realIndex, r3 = t4.i, o3 = t4.x, n3 = t4.y, l3 = t4.pX, h3 = t4.pY, c3 = t4.pathsFrom, d3 = t4.linePaths, g3 = t4.areaPaths, u3 = t4.seriesIndex, f3 = t4.lineYPosition, p3 = t4.xArrj, b3 = t4.yArrj, v3 = t4.isRangeStart, y2 = t4.seriesRangeEnd, w2 = this.w, k3 = new m2(this.ctx), A3 = this.yRatio, S3 = c3.prevY, C3 = c3.linePath, L3 = c3.areaPath, P3 = c3.pathFromLine, T3 = c3.pathFromArea, M3 = x2.isNumber(w2.globals.minYArr[s2]) ? w2.globals.minYArr[s2] : w2.globals.minY;
        a3 || (a3 = w2.globals.dataPoints > 1 ? w2.globals.dataPoints - 1 : w2.globals.dataPoints);
        for (var I3 = n3, z3 = 0; z3 < a3; z3++) {
          var X3 = void 0 === i3[r3][z3 + 1] || null === i3[r3][z3 + 1];
          if (w2.globals.isXNumeric) {
            var E3 = w2.globals.seriesX[s2][z3 + 1];
            void 0 === w2.globals.seriesX[s2][z3 + 1] && (E3 = w2.globals.seriesX[s2][a3 - 1]), o3 = (E3 - w2.globals.minX) / this.xRatio;
          } else
            o3 += this.xDivision;
          if (w2.config.chart.stacked)
            if (r3 > 0 && w2.globals.collapsedSeries.length < w2.config.series.length - 1) {
              f3 = this.prevSeriesY[function(t5) {
                for (var e4 = t5, i4 = 0; i4 < w2.globals.series.length; i4++)
                  if (w2.globals.collapsedSeriesIndices.indexOf(t5) > -1) {
                    e4--;
                    break;
                  }
                return e4 >= 0 ? e4 : 0;
              }(r3 - 1)][z3 + 1];
            } else
              f3 = this.zeroY;
          else
            f3 = this.zeroY;
          X3 ? n3 = f3 - M3 / A3[this.yaxisIndex] + 2 * (this.isReversed ? M3 / A3[this.yaxisIndex] : 0) : (n3 = f3 - i3[r3][z3 + 1] / A3[this.yaxisIndex] + 2 * (this.isReversed ? i3[r3][z3 + 1] / A3[this.yaxisIndex] : 0), "rangeArea" === e3 && (I3 = f3 - y2[r3][z3 + 1] / A3[this.yaxisIndex] + 2 * (this.isReversed ? y2[r3][z3 + 1] / A3[this.yaxisIndex] : 0))), p3.push(o3), b3.push(n3);
          var Y3 = this.lineHelpers.calculatePoints({ series: i3, x: o3, y: n3, realIndex: s2, i: r3, j: z3, prevY: S3 }), F3 = this._createPaths({ type: e3, series: i3, i: r3, realIndex: s2, j: z3, x: o3, y: n3, y2: I3, pX: l3, pY: h3, linePath: C3, areaPath: L3, linePaths: d3, areaPaths: g3, seriesIndex: u3, isRangeStart: v3 });
          g3 = F3.areaPaths, d3 = F3.linePaths, l3 = F3.pX, h3 = F3.pY, L3 = F3.areaPath, C3 = F3.linePath, this.appendPathFrom && (P3 += k3.line(o3, this.zeroY), T3 += k3.line(o3, this.zeroY)), this.handleNullDataPoints(i3, Y3, r3, z3, s2), this._handleMarkersAndLabels({ type: e3, pointsPos: Y3, i: r3, j: z3, realIndex: s2, isRangeStart: v3 });
        }
        return { yArrj: b3, xArrj: p3, pathFromArea: T3, areaPaths: g3, pathFromLine: P3, linePaths: d3, linePath: C3, areaPath: L3 };
      } }, { key: "_handleMarkersAndLabels", value: function(t4) {
        var e3 = t4.type, i3 = t4.pointsPos, a3 = t4.isRangeStart, s2 = t4.i, r3 = t4.j, o3 = t4.realIndex, n3 = this.w, l3 = new O2(this.ctx);
        if (this.pointsChart)
          this.scatter.draw(this.elSeries, r3, { realIndex: o3, pointsPos: i3, zRatio: this.zRatio, elParent: this.elPointsMain });
        else {
          n3.globals.series[s2].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
          var h3 = this.markers.plotChartMarkers(i3, o3, r3 + 1);
          null !== h3 && this.elPointsMain.add(h3);
        }
        var c3 = l3.drawDataLabel({ type: e3, isRangeStart: a3, pos: i3, i: o3, j: r3 + 1 });
        null !== c3 && this.elDataLabelsWrap.add(c3);
      } }, { key: "_createPaths", value: function(t4) {
        var e3 = t4.type, i3 = t4.series, a3 = t4.i, s2 = t4.realIndex, r3 = t4.j, o3 = t4.x, n3 = t4.y, l3 = t4.y2, h3 = t4.pX, c3 = t4.pY, d3 = t4.linePath, g3 = t4.areaPath, u3 = t4.linePaths, f3 = t4.areaPaths, p3 = t4.seriesIndex, x3 = t4.isRangeStart, b3 = this.w, v3 = new m2(this.ctx), y2 = b3.config.stroke.curve, w2 = this.areaBottomY;
        if (Array.isArray(b3.config.stroke.curve) && (y2 = Array.isArray(p3) ? b3.config.stroke.curve[p3[a3]] : b3.config.stroke.curve[a3]), "smooth" === y2) {
          var k3 = 0.35 * (o3 - h3);
          b3.globals.hasNullValues ? (null !== i3[a3][r3] && (null !== i3[a3][r3 + 1] ? (d3 = v3.move(h3, c3) + v3.curve(h3 + k3, c3, o3 - k3, n3, o3 + 1, n3), g3 = v3.move(h3 + 1, c3) + v3.curve(h3 + k3, c3, o3 - k3, n3, o3 + 1, n3) + v3.line(o3, w2) + v3.line(h3, w2) + "z") : (d3 = v3.move(h3, c3), g3 = v3.move(h3, c3) + "z")), u3.push(d3), f3.push(g3)) : (d3 += v3.curve(h3 + k3, c3, o3 - k3, n3, o3, n3), g3 += v3.curve(h3 + k3, c3, o3 - k3, n3, o3, n3)), h3 = o3, c3 = n3, r3 === i3[a3].length - 2 && (g3 = g3 + v3.curve(h3, c3, o3, n3, o3, w2) + v3.move(o3, n3) + "z", "rangeArea" === e3 && x3 ? d3 = d3 + v3.curve(h3, c3, o3, n3, o3, l3) + v3.move(o3, l3) + "z" : b3.globals.hasNullValues || (u3.push(d3), f3.push(g3)));
        } else {
          if (null === i3[a3][r3 + 1]) {
            d3 += v3.move(o3, n3);
            var A3 = b3.globals.isXNumeric ? (b3.globals.seriesX[s2][r3] - b3.globals.minX) / this.xRatio : o3 - this.xDivision;
            g3 = g3 + v3.line(A3, w2) + v3.move(o3, n3) + "z";
          }
          null === i3[a3][r3] && (d3 += v3.move(o3, n3), g3 += v3.move(o3, w2)), "stepline" === y2 ? (d3 = d3 + v3.line(o3, null, "H") + v3.line(null, n3, "V"), g3 = g3 + v3.line(o3, null, "H") + v3.line(null, n3, "V")) : "straight" === y2 && (d3 += v3.line(o3, n3), g3 += v3.line(o3, n3)), r3 === i3[a3].length - 2 && (g3 = g3 + v3.line(o3, w2) + v3.move(o3, n3) + "z", "rangeArea" === e3 && x3 ? d3 = d3 + v3.line(o3, l3) + v3.move(o3, l3) + "z" : (u3.push(d3), f3.push(g3)));
        }
        return { linePaths: u3, areaPaths: f3, pX: h3, pY: c3, linePath: d3, areaPath: g3 };
      } }, { key: "handleNullDataPoints", value: function(t4, e3, i3, a3, s2) {
        var r3 = this.w;
        if (null === t4[i3][a3] && r3.config.markers.showNullDataPoints || 1 === t4[i3].length) {
          var o3 = this.markers.plotChartMarkers(e3, s2, a3 + 1, this.strokeWidth - r3.config.markers.strokeWidth / 2, true);
          null !== o3 && this.elPointsMain.add(o3);
        }
      } }]), t3;
    }();
    window.TreemapSquared = {}, window.TreemapSquared.generate = function() {
      function t3(e4, i4, a4, s3) {
        this.xoffset = e4, this.yoffset = i4, this.height = s3, this.width = a4, this.shortestEdge = function() {
          return Math.min(this.height, this.width);
        }, this.getCoordinates = function(t4) {
          var e5, i5 = [], a5 = this.xoffset, s4 = this.yoffset, o4 = r3(t4) / this.height, n3 = r3(t4) / this.width;
          if (this.width >= this.height)
            for (e5 = 0; e5 < t4.length; e5++)
              i5.push([a5, s4, a5 + o4, s4 + t4[e5] / o4]), s4 += t4[e5] / o4;
          else
            for (e5 = 0; e5 < t4.length; e5++)
              i5.push([a5, s4, a5 + t4[e5] / n3, s4 + n3]), a5 += t4[e5] / n3;
          return i5;
        }, this.cutArea = function(e5) {
          var i5;
          if (this.width >= this.height) {
            var a5 = e5 / this.height, s4 = this.width - a5;
            i5 = new t3(this.xoffset + a5, this.yoffset, s4, this.height);
          } else {
            var r4 = e5 / this.width, o4 = this.height - r4;
            i5 = new t3(this.xoffset, this.yoffset + r4, this.width, o4);
          }
          return i5;
        };
      }
      function e3(e4, a4, s3, o4, n3) {
        o4 = void 0 === o4 ? 0 : o4, n3 = void 0 === n3 ? 0 : n3;
        var l3 = i3(function(t4, e5) {
          var i4, a5 = [], s4 = e5 / r3(t4);
          for (i4 = 0; i4 < t4.length; i4++)
            a5[i4] = t4[i4] * s4;
          return a5;
        }(e4, a4 * s3), [], new t3(o4, n3, a4, s3), []);
        return function(t4) {
          var e5, i4, a5 = [];
          for (e5 = 0; e5 < t4.length; e5++)
            for (i4 = 0; i4 < t4[e5].length; i4++)
              a5.push(t4[e5][i4]);
          return a5;
        }(l3);
      }
      function i3(t4, e4, s3, o4) {
        var n3, l3, h3;
        if (0 !== t4.length)
          return n3 = s3.shortestEdge(), function(t5, e5, i4) {
            var s4;
            if (0 === t5.length)
              return true;
            (s4 = t5.slice()).push(e5);
            var r4 = a3(t5, i4), o5 = a3(s4, i4);
            return r4 >= o5;
          }(e4, l3 = t4[0], n3) ? (e4.push(l3), i3(t4.slice(1), e4, s3, o4)) : (h3 = s3.cutArea(r3(e4), o4), o4.push(s3.getCoordinates(e4)), i3(t4, [], h3, o4)), o4;
        o4.push(s3.getCoordinates(e4));
      }
      function a3(t4, e4) {
        var i4 = Math.min.apply(Math, t4), a4 = Math.max.apply(Math, t4), s3 = r3(t4);
        return Math.max(Math.pow(e4, 2) * a4 / Math.pow(s3, 2), Math.pow(s3, 2) / (Math.pow(e4, 2) * i4));
      }
      function s2(t4) {
        return t4 && t4.constructor === Array;
      }
      function r3(t4) {
        var e4, i4 = 0;
        for (e4 = 0; e4 < t4.length; e4++)
          i4 += t4[e4];
        return i4;
      }
      function o3(t4) {
        var e4, i4 = 0;
        if (s2(t4[0]))
          for (e4 = 0; e4 < t4.length; e4++)
            i4 += o3(t4[e4]);
        else
          i4 = r3(t4);
        return i4;
      }
      return function t4(i4, a4, r4, n3, l3) {
        n3 = void 0 === n3 ? 0 : n3, l3 = void 0 === l3 ? 0 : l3;
        var h3, c3, d3 = [], g3 = [];
        if (s2(i4[0])) {
          for (c3 = 0; c3 < i4.length; c3++)
            d3[c3] = o3(i4[c3]);
          for (h3 = e3(d3, a4, r4, n3, l3), c3 = 0; c3 < i4.length; c3++)
            g3.push(t4(i4[c3], h3[c3][2] - h3[c3][0], h3[c3][3] - h3[c3][1], h3[c3][0], h3[c3][1]));
        } else
          g3 = e3(i4, a4, r4, n3, l3);
        return g3;
      };
    }();
    var Xt, Et2, Yt2 = function() {
      function t3(e3, i3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new At2(e3), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];
      }
      return r2(t3, [{ key: "draw", value: function(t4) {
        var e3 = this, i3 = this.w, a3 = new m2(this.ctx), s2 = new R2(this.ctx), r3 = a3.group({ class: "apexcharts-treemap" });
        if (i3.globals.noData)
          return r3;
        var o3 = [];
        return t4.forEach(function(t5) {
          var e4 = t5.map(function(t6) {
            return Math.abs(t6);
          });
          o3.push(e4);
        }), this.negRange = this.helpers.checkColorRange(), i3.config.series.forEach(function(t5, i4) {
          t5.data.forEach(function(t6) {
            Array.isArray(e3.labels[i4]) || (e3.labels[i4] = []), e3.labels[i4].push(t6.x);
          });
        }), window.TreemapSquared.generate(o3, i3.globals.gridWidth, i3.globals.gridHeight).forEach(function(o4, n3) {
          var l3 = a3.group({ class: "apexcharts-series apexcharts-treemap-series", seriesName: x2.escapeString(i3.globals.seriesNames[n3]), rel: n3 + 1, "data:realIndex": n3 });
          if (i3.config.chart.dropShadow.enabled) {
            var h3 = i3.config.chart.dropShadow;
            new v2(e3.ctx).dropShadow(r3, h3, n3);
          }
          var c3 = a3.group({ class: "apexcharts-data-labels" });
          o4.forEach(function(r4, o5) {
            var h4 = r4[0], c4 = r4[1], d3 = r4[2], g3 = r4[3], u3 = a3.drawRect(h4, c4, d3 - h4, g3 - c4, 0, "#fff", 1, e3.strokeWidth, i3.config.plotOptions.treemap.useFillColorAsStroke ? p3 : i3.globals.stroke.colors[n3]);
            u3.attr({ cx: h4, cy: c4, index: n3, i: n3, j: o5, width: d3 - h4, height: g3 - c4 });
            var f3 = e3.helpers.getShadeColor(i3.config.chart.type, n3, o5, e3.negRange), p3 = f3.color;
            void 0 !== i3.config.series[n3].data[o5] && i3.config.series[n3].data[o5].fillColor && (p3 = i3.config.series[n3].data[o5].fillColor);
            var x3 = s2.fillPath({ color: p3, seriesNumber: n3, dataPointIndex: o5 });
            u3.node.classList.add("apexcharts-treemap-rect"), u3.attr({ fill: x3 }), e3.helpers.addListeners(u3);
            var b3 = { x: h4 + (d3 - h4) / 2, y: c4 + (g3 - c4) / 2, width: 0, height: 0 }, v3 = { x: h4, y: c4, width: d3 - h4, height: g3 - c4 };
            if (i3.config.chart.animations.enabled && !i3.globals.dataChanged) {
              var m3 = 1;
              i3.globals.resized || (m3 = i3.config.chart.animations.speed), e3.animateTreemap(u3, b3, v3, m3);
            }
            if (i3.globals.dataChanged) {
              var y2 = 1;
              e3.dynamicAnim.enabled && i3.globals.shouldAnimate && (y2 = e3.dynamicAnim.speed, i3.globals.previousPaths[n3] && i3.globals.previousPaths[n3][o5] && i3.globals.previousPaths[n3][o5].rect && (b3 = i3.globals.previousPaths[n3][o5].rect), e3.animateTreemap(u3, b3, v3, y2));
            }
            var w2 = e3.getFontSize(r4), k3 = i3.config.dataLabels.formatter(e3.labels[n3][o5], { value: i3.globals.series[n3][o5], seriesIndex: n3, dataPointIndex: o5, w: i3 }), A3 = e3.helpers.calculateDataLabels({ text: k3, x: (h4 + d3) / 2, y: (c4 + g3) / 2 + e3.strokeWidth / 2 + w2 / 3, i: n3, j: o5, colorProps: f3, fontSize: w2, series: t4 });
            i3.config.dataLabels.enabled && A3 && e3.rotateToFitLabel(A3, w2, k3, h4, c4, d3, g3), l3.add(u3), null !== A3 && l3.add(A3);
          }), l3.add(c3), r3.add(l3);
        }), r3;
      } }, { key: "getFontSize", value: function(t4) {
        var e3 = this.w;
        var i3, a3, s2, r3, o3 = function t5(e4) {
          var i4, a4 = 0;
          if (Array.isArray(e4[0]))
            for (i4 = 0; i4 < e4.length; i4++)
              a4 += t5(e4[i4]);
          else
            for (i4 = 0; i4 < e4.length; i4++)
              a4 += e4[i4].length;
          return a4;
        }(this.labels) / function t5(e4) {
          var i4, a4 = 0;
          if (Array.isArray(e4[0]))
            for (i4 = 0; i4 < e4.length; i4++)
              a4 += t5(e4[i4]);
          else
            for (i4 = 0; i4 < e4.length; i4++)
              a4 += 1;
          return a4;
        }(this.labels);
        return i3 = t4[2] - t4[0], a3 = t4[3] - t4[1], s2 = i3 * a3, r3 = Math.pow(s2, 0.5), Math.min(r3 / o3, parseInt(e3.config.dataLabels.style.fontSize, 10));
      } }, { key: "rotateToFitLabel", value: function(t4, e3, i3, a3, s2, r3, o3) {
        var n3 = new m2(this.ctx), l3 = n3.getTextRects(i3, e3);
        if (l3.width + this.w.config.stroke.width + 5 > r3 - a3 && l3.width <= o3 - s2) {
          var h3 = n3.rotateAroundCenter(t4.node);
          t4.node.setAttribute("transform", "rotate(-90 ".concat(h3.x, " ").concat(h3.y, ")"));
        }
      } }, { key: "animateTreemap", value: function(t4, e3, i3, a3) {
        var s2 = new b2(this.ctx);
        s2.animateRect(t4, { x: e3.x, y: e3.y, width: e3.width, height: e3.height }, { x: i3.x, y: i3.y, width: i3.width, height: i3.height }, a3, function() {
          s2.animationCompleted(t4);
        });
      } }]), t3;
    }(), Ft2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;
      }
      return r2(t3, [{ key: "calculateTimeScaleTicks", value: function(t4, i3) {
        var a3 = this, s2 = this.w;
        if (s2.globals.allSeriesCollapsed)
          return s2.globals.labels = [], s2.globals.timescaleLabels = [], [];
        var r3 = new T2(this.ctx), o3 = (i3 - t4) / 864e5;
        this.determineInterval(o3), s2.globals.disableZoomIn = false, s2.globals.disableZoomOut = false, o3 < 11574074074074075e-20 ? s2.globals.disableZoomIn = true : o3 > 5e4 && (s2.globals.disableZoomOut = true);
        var n3 = r3.getTimeUnitsfromTimestamp(t4, i3, this.utc), l3 = s2.globals.gridWidth / o3, h3 = l3 / 24, c3 = h3 / 60, d3 = c3 / 60, g3 = Math.floor(24 * o3), u3 = Math.floor(1440 * o3), f3 = Math.floor(86400 * o3), p3 = Math.floor(o3), x3 = Math.floor(o3 / 30), b3 = Math.floor(o3 / 365), v3 = { minMillisecond: n3.minMillisecond, minSecond: n3.minSecond, minMinute: n3.minMinute, minHour: n3.minHour, minDate: n3.minDate, minMonth: n3.minMonth, minYear: n3.minYear }, m3 = { firstVal: v3, currentMillisecond: v3.minMillisecond, currentSecond: v3.minSecond, currentMinute: v3.minMinute, currentHour: v3.minHour, currentMonthDate: v3.minDate, currentDate: v3.minDate, currentMonth: v3.minMonth, currentYear: v3.minYear, daysWidthOnXAxis: l3, hoursWidthOnXAxis: h3, minutesWidthOnXAxis: c3, secondsWidthOnXAxis: d3, numberOfSeconds: f3, numberOfMinutes: u3, numberOfHours: g3, numberOfDays: p3, numberOfMonths: x3, numberOfYears: b3 };
        switch (this.tickInterval) {
          case "years":
            this.generateYearScale(m3);
            break;
          case "months":
          case "half_year":
            this.generateMonthScale(m3);
            break;
          case "months_days":
          case "months_fortnight":
          case "days":
          case "week_days":
            this.generateDayScale(m3);
            break;
          case "hours":
            this.generateHourScale(m3);
            break;
          case "minutes_fives":
          case "minutes":
            this.generateMinuteScale(m3);
            break;
          case "seconds_tens":
          case "seconds_fives":
          case "seconds":
            this.generateSecondScale(m3);
        }
        var y2 = this.timeScaleArray.map(function(t5) {
          var i4 = { position: t5.position, unit: t5.unit, year: t5.year, day: t5.day ? t5.day : 1, hour: t5.hour ? t5.hour : 0, month: t5.month + 1 };
          return "month" === t5.unit ? e2(e2({}, i4), {}, { day: 1, value: t5.value + 1 }) : "day" === t5.unit || "hour" === t5.unit ? e2(e2({}, i4), {}, { value: t5.value }) : "minute" === t5.unit ? e2(e2({}, i4), {}, { value: t5.value, minute: t5.value }) : "second" === t5.unit ? e2(e2({}, i4), {}, { value: t5.value, minute: t5.minute, second: t5.second }) : t5;
        });
        return y2.filter(function(t5) {
          var e3 = 1, i4 = Math.ceil(s2.globals.gridWidth / 120), r4 = t5.value;
          void 0 !== s2.config.xaxis.tickAmount && (i4 = s2.config.xaxis.tickAmount), y2.length > i4 && (e3 = Math.floor(y2.length / i4));
          var o4 = false, n4 = false;
          switch (a3.tickInterval) {
            case "years":
              "year" === t5.unit && (o4 = true);
              break;
            case "half_year":
              e3 = 7, "year" === t5.unit && (o4 = true);
              break;
            case "months":
              e3 = 1, "year" === t5.unit && (o4 = true);
              break;
            case "months_fortnight":
              e3 = 15, "year" !== t5.unit && "month" !== t5.unit || (o4 = true), 30 === r4 && (n4 = true);
              break;
            case "months_days":
              e3 = 10, "month" === t5.unit && (o4 = true), 30 === r4 && (n4 = true);
              break;
            case "week_days":
              e3 = 8, "month" === t5.unit && (o4 = true);
              break;
            case "days":
              e3 = 1, "month" === t5.unit && (o4 = true);
              break;
            case "hours":
              "day" === t5.unit && (o4 = true);
              break;
            case "minutes_fives":
            case "seconds_fives":
              r4 % 5 != 0 && (n4 = true);
              break;
            case "seconds_tens":
              r4 % 10 != 0 && (n4 = true);
          }
          if ("hours" === a3.tickInterval || "minutes_fives" === a3.tickInterval || "seconds_tens" === a3.tickInterval || "seconds_fives" === a3.tickInterval) {
            if (!n4)
              return true;
          } else if ((r4 % e3 == 0 || o4) && !n4)
            return true;
        });
      } }, { key: "recalcDimensionsBasedOnFormat", value: function(t4, e3) {
        var i3 = this.w, a3 = this.formatDates(t4), s2 = this.removeOverlappingTS(a3);
        i3.globals.timescaleLabels = s2.slice(), new ot2(this.ctx).plotCoords();
      } }, { key: "determineInterval", value: function(t4) {
        var e3 = 24 * t4, i3 = 60 * e3;
        switch (true) {
          case t4 / 365 > 5:
            this.tickInterval = "years";
            break;
          case t4 > 800:
            this.tickInterval = "half_year";
            break;
          case t4 > 180:
            this.tickInterval = "months";
            break;
          case t4 > 90:
            this.tickInterval = "months_fortnight";
            break;
          case t4 > 60:
            this.tickInterval = "months_days";
            break;
          case t4 > 30:
            this.tickInterval = "week_days";
            break;
          case t4 > 2:
            this.tickInterval = "days";
            break;
          case e3 > 2.4:
            this.tickInterval = "hours";
            break;
          case i3 > 15:
            this.tickInterval = "minutes_fives";
            break;
          case i3 > 5:
            this.tickInterval = "minutes";
            break;
          case i3 > 1:
            this.tickInterval = "seconds_tens";
            break;
          case 60 * i3 > 20:
            this.tickInterval = "seconds_fives";
            break;
          default:
            this.tickInterval = "seconds";
        }
      } }, { key: "generateYearScale", value: function(t4) {
        var e3 = t4.firstVal, i3 = t4.currentMonth, a3 = t4.currentYear, s2 = t4.daysWidthOnXAxis, r3 = t4.numberOfYears, o3 = e3.minYear, n3 = 0, l3 = new T2(this.ctx), h3 = "year";
        if (e3.minDate > 1 || e3.minMonth > 0) {
          var c3 = l3.determineRemainingDaysOfYear(e3.minYear, e3.minMonth, e3.minDate);
          n3 = (l3.determineDaysOfYear(e3.minYear) - c3 + 1) * s2, o3 = e3.minYear + 1, this.timeScaleArray.push({ position: n3, value: o3, unit: h3, year: o3, month: x2.monthMod(i3 + 1) });
        } else
          1 === e3.minDate && 0 === e3.minMonth && this.timeScaleArray.push({ position: n3, value: o3, unit: h3, year: a3, month: x2.monthMod(i3 + 1) });
        for (var d3 = o3, g3 = n3, u3 = 0; u3 < r3; u3++)
          d3++, g3 = l3.determineDaysOfYear(d3 - 1) * s2 + g3, this.timeScaleArray.push({ position: g3, value: d3, unit: h3, year: d3, month: 1 });
      } }, { key: "generateMonthScale", value: function(t4) {
        var e3 = t4.firstVal, i3 = t4.currentMonthDate, a3 = t4.currentMonth, s2 = t4.currentYear, r3 = t4.daysWidthOnXAxis, o3 = t4.numberOfMonths, n3 = a3, l3 = 0, h3 = new T2(this.ctx), c3 = "month", d3 = 0;
        if (e3.minDate > 1) {
          l3 = (h3.determineDaysOfMonths(a3 + 1, e3.minYear) - i3 + 1) * r3, n3 = x2.monthMod(a3 + 1);
          var g3 = s2 + d3, u3 = x2.monthMod(n3), f3 = n3;
          0 === n3 && (c3 = "year", f3 = g3, u3 = 1, g3 += d3 += 1), this.timeScaleArray.push({ position: l3, value: f3, unit: c3, year: g3, month: u3 });
        } else
          this.timeScaleArray.push({ position: l3, value: n3, unit: c3, year: s2, month: x2.monthMod(a3) });
        for (var p3 = n3 + 1, b3 = l3, v3 = 0, m3 = 1; v3 < o3; v3++, m3++) {
          0 === (p3 = x2.monthMod(p3)) ? (c3 = "year", d3 += 1) : c3 = "month";
          var y2 = this._getYear(s2, p3, d3);
          b3 = h3.determineDaysOfMonths(p3, y2) * r3 + b3;
          var w2 = 0 === p3 ? y2 : p3;
          this.timeScaleArray.push({ position: b3, value: w2, unit: c3, year: y2, month: 0 === p3 ? 1 : p3 }), p3++;
        }
      } }, { key: "generateDayScale", value: function(t4) {
        var e3 = t4.firstVal, i3 = t4.currentMonth, a3 = t4.currentYear, s2 = t4.hoursWidthOnXAxis, r3 = t4.numberOfDays, o3 = new T2(this.ctx), n3 = "day", l3 = e3.minDate + 1, h3 = l3, c3 = function(t5, e4, i4) {
          return t5 > o3.determineDaysOfMonths(e4 + 1, i4) ? (h3 = 1, n3 = "month", g3 = e4 += 1, e4) : e4;
        }, d3 = (24 - e3.minHour) * s2, g3 = l3, u3 = c3(h3, i3, a3);
        0 === e3.minHour && 1 === e3.minDate ? (d3 = 0, g3 = x2.monthMod(e3.minMonth), n3 = "month", h3 = e3.minDate, r3++) : 1 !== e3.minDate && 0 === e3.minHour && 0 === e3.minMinute && (d3 = 0, l3 = e3.minDate, g3 = l3, u3 = c3(h3 = l3, i3, a3)), this.timeScaleArray.push({ position: d3, value: g3, unit: n3, year: this._getYear(a3, u3, 0), month: x2.monthMod(u3), day: h3 });
        for (var f3 = d3, p3 = 0; p3 < r3; p3++) {
          n3 = "day", u3 = c3(h3 += 1, u3, this._getYear(a3, u3, 0));
          var b3 = this._getYear(a3, u3, 0);
          f3 = 24 * s2 + f3;
          var v3 = 1 === h3 ? x2.monthMod(u3) : h3;
          this.timeScaleArray.push({ position: f3, value: v3, unit: n3, year: b3, month: x2.monthMod(u3), day: v3 });
        }
      } }, { key: "generateHourScale", value: function(t4) {
        var e3 = t4.firstVal, i3 = t4.currentDate, a3 = t4.currentMonth, s2 = t4.currentYear, r3 = t4.minutesWidthOnXAxis, o3 = t4.numberOfHours, n3 = new T2(this.ctx), l3 = "hour", h3 = function(t5, e4) {
          return t5 > n3.determineDaysOfMonths(e4 + 1, s2) && (p3 = 1, e4 += 1), { month: e4, date: p3 };
        }, c3 = function(t5, e4) {
          return t5 > n3.determineDaysOfMonths(e4 + 1, s2) ? e4 += 1 : e4;
        }, d3 = 60 - (e3.minMinute + e3.minSecond / 60), g3 = d3 * r3, u3 = e3.minHour + 1, f3 = u3 + 1;
        60 === d3 && (g3 = 0, f3 = (u3 = e3.minHour) + 1);
        var p3 = i3, b3 = c3(p3, a3);
        this.timeScaleArray.push({ position: g3, value: u3, unit: l3, day: p3, hour: f3, year: s2, month: x2.monthMod(b3) });
        for (var v3 = g3, m3 = 0; m3 < o3; m3++) {
          if (l3 = "hour", f3 >= 24)
            f3 = 0, l3 = "day", b3 = h3(p3 += 1, b3).month, b3 = c3(p3, b3);
          var y2 = this._getYear(s2, b3, 0);
          v3 = 60 * r3 + v3;
          var w2 = 0 === f3 ? p3 : f3;
          this.timeScaleArray.push({ position: v3, value: w2, unit: l3, hour: f3, day: p3, year: y2, month: x2.monthMod(b3) }), f3++;
        }
      } }, { key: "generateMinuteScale", value: function(t4) {
        for (var e3 = t4.currentMillisecond, i3 = t4.currentSecond, a3 = t4.currentMinute, s2 = t4.currentHour, r3 = t4.currentDate, o3 = t4.currentMonth, n3 = t4.currentYear, l3 = t4.minutesWidthOnXAxis, h3 = t4.secondsWidthOnXAxis, c3 = t4.numberOfMinutes, d3 = a3 + 1, g3 = r3, u3 = o3, f3 = n3, p3 = s2, b3 = (60 - i3 - e3 / 1e3) * h3, v3 = 0; v3 < c3; v3++)
          d3 >= 60 && (d3 = 0, 24 === (p3 += 1) && (p3 = 0)), this.timeScaleArray.push({ position: b3, value: d3, unit: "minute", hour: p3, minute: d3, day: g3, year: this._getYear(f3, u3, 0), month: x2.monthMod(u3) }), b3 += l3, d3++;
      } }, { key: "generateSecondScale", value: function(t4) {
        for (var e3 = t4.currentMillisecond, i3 = t4.currentSecond, a3 = t4.currentMinute, s2 = t4.currentHour, r3 = t4.currentDate, o3 = t4.currentMonth, n3 = t4.currentYear, l3 = t4.secondsWidthOnXAxis, h3 = t4.numberOfSeconds, c3 = i3 + 1, d3 = a3, g3 = r3, u3 = o3, f3 = n3, p3 = s2, b3 = (1e3 - e3) / 1e3 * l3, v3 = 0; v3 < h3; v3++)
          c3 >= 60 && (c3 = 0, ++d3 >= 60 && (d3 = 0, 24 === ++p3 && (p3 = 0))), this.timeScaleArray.push({ position: b3, value: c3, unit: "second", hour: p3, minute: d3, second: c3, day: g3, year: this._getYear(f3, u3, 0), month: x2.monthMod(u3) }), b3 += l3, c3++;
      } }, { key: "createRawDateString", value: function(t4, e3) {
        var i3 = t4.year;
        return 0 === t4.month && (t4.month = 1), i3 += "-" + ("0" + t4.month.toString()).slice(-2), "day" === t4.unit ? i3 += "day" === t4.unit ? "-" + ("0" + e3).slice(-2) : "-01" : i3 += "-" + ("0" + (t4.day ? t4.day : "1")).slice(-2), "hour" === t4.unit ? i3 += "hour" === t4.unit ? "T" + ("0" + e3).slice(-2) : "T00" : i3 += "T" + ("0" + (t4.hour ? t4.hour : "0")).slice(-2), "minute" === t4.unit ? i3 += ":" + ("0" + e3).slice(-2) : i3 += ":" + (t4.minute ? ("0" + t4.minute).slice(-2) : "00"), "second" === t4.unit ? i3 += ":" + ("0" + e3).slice(-2) : i3 += ":00", this.utc && (i3 += ".000Z"), i3;
      } }, { key: "formatDates", value: function(t4) {
        var e3 = this, i3 = this.w;
        return t4.map(function(t5) {
          var a3 = t5.value.toString(), s2 = new T2(e3.ctx), r3 = e3.createRawDateString(t5, a3), o3 = s2.getDate(s2.parseDate(r3));
          if (e3.utc || (o3 = s2.getDate(s2.parseDateWithTimezone(r3))), void 0 === i3.config.xaxis.labels.format) {
            var n3 = "dd MMM", l3 = i3.config.xaxis.labels.datetimeFormatter;
            "year" === t5.unit && (n3 = l3.year), "month" === t5.unit && (n3 = l3.month), "day" === t5.unit && (n3 = l3.day), "hour" === t5.unit && (n3 = l3.hour), "minute" === t5.unit && (n3 = l3.minute), "second" === t5.unit && (n3 = l3.second), a3 = s2.formatDate(o3, n3);
          } else
            a3 = s2.formatDate(o3, i3.config.xaxis.labels.format);
          return { dateString: r3, position: t5.position, value: a3, unit: t5.unit, year: t5.year, month: t5.month };
        });
      } }, { key: "removeOverlappingTS", value: function(t4) {
        var e3, i3 = this, a3 = new m2(this.ctx), s2 = false;
        t4.length > 0 && t4[0].value && t4.every(function(e4) {
          return e4.value.length === t4[0].value.length;
        }) && (s2 = true, e3 = a3.getTextRects(t4[0].value).width);
        var r3 = 0, o3 = t4.map(function(o4, n3) {
          if (n3 > 0 && i3.w.config.xaxis.labels.hideOverlappingLabels) {
            var l3 = s2 ? e3 : a3.getTextRects(t4[r3].value).width, h3 = t4[r3].position;
            return o4.position > h3 + l3 + 10 ? (r3 = n3, o4) : null;
          }
          return o4;
        });
        return o3 = o3.filter(function(t5) {
          return null !== t5;
        });
      } }, { key: "_getYear", value: function(t4, e3, i3) {
        return t4 + Math.floor(e3 / 12) + i3;
      } }]), t3;
    }(), Rt2 = function() {
      function t3(e3, i3) {
        a2(this, t3), this.ctx = i3, this.w = i3.w, this.el = e3;
      }
      return r2(t3, [{ key: "setupElements", value: function() {
        var t4 = this.w.globals, e3 = this.w.config, i3 = e3.chart.type;
        t4.axisCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble", "radar", "heatmap", "treemap"].indexOf(i3) > -1, t4.xyCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble"].indexOf(i3) > -1, t4.isBarHorizontal = ("bar" === e3.chart.type || "rangeBar" === e3.chart.type || "boxPlot" === e3.chart.type) && e3.plotOptions.bar.horizontal, t4.chartClass = ".apexcharts" + t4.chartID, t4.dom.baseEl = this.el, t4.dom.elWrap = document.createElement("div"), m2.setAttrs(t4.dom.elWrap, { id: t4.chartClass.substring(1), class: "apexcharts-canvas " + t4.chartClass.substring(1) }), this.el.appendChild(t4.dom.elWrap), t4.dom.Paper = new window.SVG.Doc(t4.dom.elWrap), t4.dom.Paper.attr({ class: "apexcharts-svg", "xmlns:data": "ApexChartsNS", transform: "translate(".concat(e3.chart.offsetX, ", ").concat(e3.chart.offsetY, ")") }), t4.dom.Paper.node.style.background = e3.chart.background, this.setSVGDimensions(), t4.dom.elGraphical = t4.dom.Paper.group().attr({ class: "apexcharts-inner apexcharts-graphical" }), t4.dom.elAnnotations = t4.dom.Paper.group().attr({ class: "apexcharts-annotations" }), t4.dom.elDefs = t4.dom.Paper.defs(), t4.dom.elLegendWrap = document.createElement("div"), t4.dom.elLegendWrap.classList.add("apexcharts-legend"), t4.dom.elWrap.appendChild(t4.dom.elLegendWrap), t4.dom.Paper.add(t4.dom.elGraphical), t4.dom.elGraphical.add(t4.dom.elDefs);
      } }, { key: "plotChartType", value: function(t4, e3) {
        var i3 = this.w, a3 = i3.config, s2 = i3.globals, r3 = { series: [], i: [] }, o3 = { series: [], i: [] }, n3 = { series: [], i: [] }, l3 = { series: [], i: [] }, h3 = { series: [], i: [] }, c3 = { series: [], i: [] }, d3 = { series: [], i: [] }, g3 = { series: [], i: [] }, u3 = { series: [], seriesRangeEnd: [], i: [] };
        s2.series.map(function(e4, f4) {
          var p4 = 0;
          void 0 !== t4[f4].type ? ("column" === t4[f4].type || "bar" === t4[f4].type ? (s2.series.length > 1 && a3.plotOptions.bar.horizontal && console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"), h3.series.push(e4), h3.i.push(f4), p4++, i3.globals.columnSeries = h3.series) : "area" === t4[f4].type ? (o3.series.push(e4), o3.i.push(f4), p4++) : "line" === t4[f4].type ? (r3.series.push(e4), r3.i.push(f4), p4++) : "scatter" === t4[f4].type ? (n3.series.push(e4), n3.i.push(f4)) : "bubble" === t4[f4].type ? (l3.series.push(e4), l3.i.push(f4), p4++) : "candlestick" === t4[f4].type ? (c3.series.push(e4), c3.i.push(f4), p4++) : "boxPlot" === t4[f4].type ? (d3.series.push(e4), d3.i.push(f4), p4++) : "rangeBar" === t4[f4].type ? (g3.series.push(e4), g3.i.push(f4), p4++) : "rangeArea" === t4[f4].type ? (u3.series.push(s2.seriesRangeStart[f4]), u3.seriesRangeEnd.push(s2.seriesRangeEnd[f4]), u3.i.push(f4), p4++) : console.warn("You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble"), p4 > 1 && (s2.comboCharts = true)) : (r3.series.push(e4), r3.i.push(f4));
        });
        var f3 = new zt2(this.ctx, e3), p3 = new kt2(this.ctx, e3);
        this.ctx.pie = new Lt2(this.ctx);
        var x3 = new Tt2(this.ctx);
        this.ctx.rangeBar = new Mt(this.ctx, e3);
        var b3 = new Pt(this.ctx), v3 = [];
        if (s2.comboCharts) {
          if (o3.series.length > 0 && v3.push(f3.draw(o3.series, "area", o3.i)), h3.series.length > 0)
            if (i3.config.chart.stacked) {
              var m3 = new wt2(this.ctx, e3);
              v3.push(m3.draw(h3.series, h3.i));
            } else
              this.ctx.bar = new yt2(this.ctx, e3), v3.push(this.ctx.bar.draw(h3.series, h3.i));
          if (u3.series.length > 0 && v3.push(f3.draw(u3.series, "rangeArea", u3.i, u3.seriesRangeEnd)), r3.series.length > 0 && v3.push(f3.draw(r3.series, "line", r3.i)), c3.series.length > 0 && v3.push(p3.draw(c3.series, c3.i)), d3.series.length > 0 && v3.push(p3.draw(d3.series, d3.i)), g3.series.length > 0 && v3.push(this.ctx.rangeBar.draw(g3.series, g3.i)), n3.series.length > 0) {
            var y2 = new zt2(this.ctx, e3, true);
            v3.push(y2.draw(n3.series, "scatter", n3.i));
          }
          if (l3.series.length > 0) {
            var w2 = new zt2(this.ctx, e3, true);
            v3.push(w2.draw(l3.series, "bubble", l3.i));
          }
        } else
          switch (a3.chart.type) {
            case "line":
              v3 = f3.draw(s2.series, "line");
              break;
            case "area":
              v3 = f3.draw(s2.series, "area");
              break;
            case "bar":
              if (a3.chart.stacked)
                v3 = new wt2(this.ctx, e3).draw(s2.series);
              else
                this.ctx.bar = new yt2(this.ctx, e3), v3 = this.ctx.bar.draw(s2.series);
              break;
            case "candlestick":
              v3 = new kt2(this.ctx, e3).draw(s2.series);
              break;
            case "boxPlot":
              v3 = new kt2(this.ctx, e3).draw(s2.series);
              break;
            case "rangeBar":
              v3 = this.ctx.rangeBar.draw(s2.series);
              break;
            case "rangeArea":
              v3 = f3.draw(s2.seriesRangeStart, "rangeArea", void 0, s2.seriesRangeEnd);
              break;
            case "heatmap":
              v3 = new St2(this.ctx, e3).draw(s2.series);
              break;
            case "treemap":
              v3 = new Yt2(this.ctx, e3).draw(s2.series);
              break;
            case "pie":
            case "donut":
            case "polarArea":
              v3 = this.ctx.pie.draw(s2.series);
              break;
            case "radialBar":
              v3 = x3.draw(s2.series);
              break;
            case "radar":
              v3 = b3.draw(s2.series);
              break;
            default:
              v3 = f3.draw(s2.series);
          }
        return v3;
      } }, { key: "setSVGDimensions", value: function() {
        var t4 = this.w.globals, e3 = this.w.config;
        t4.svgWidth = e3.chart.width, t4.svgHeight = e3.chart.height;
        var i3 = x2.getDimensions(this.el), a3 = e3.chart.width.toString().split(/[0-9]+/g).pop();
        "%" === a3 ? x2.isNumber(i3[0]) && (0 === i3[0].width && (i3 = x2.getDimensions(this.el.parentNode)), t4.svgWidth = i3[0] * parseInt(e3.chart.width, 10) / 100) : "px" !== a3 && "" !== a3 || (t4.svgWidth = parseInt(e3.chart.width, 10));
        var s2 = e3.chart.height.toString().split(/[0-9]+/g).pop();
        if ("auto" !== t4.svgHeight && "" !== t4.svgHeight)
          if ("%" === s2) {
            var r3 = x2.getDimensions(this.el.parentNode);
            t4.svgHeight = r3[1] * parseInt(e3.chart.height, 10) / 100;
          } else
            t4.svgHeight = parseInt(e3.chart.height, 10);
        else
          t4.axisCharts ? t4.svgHeight = t4.svgWidth / 1.61 : t4.svgHeight = t4.svgWidth / 1.2;
        if (t4.svgWidth < 0 && (t4.svgWidth = 0), t4.svgHeight < 0 && (t4.svgHeight = 0), m2.setAttrs(t4.dom.Paper.node, { width: t4.svgWidth, height: t4.svgHeight }), "%" !== s2) {
          var o3 = e3.chart.sparkline.enabled ? 0 : t4.axisCharts ? e3.chart.parentHeightOffset : 0;
          t4.dom.Paper.node.parentNode.parentNode.style.minHeight = t4.svgHeight + o3 + "px";
        }
        t4.dom.elWrap.style.width = t4.svgWidth + "px", t4.dom.elWrap.style.height = t4.svgHeight + "px";
      } }, { key: "shiftGraphPosition", value: function() {
        var t4 = this.w.globals, e3 = t4.translateY, i3 = { transform: "translate(" + t4.translateX + ", " + e3 + ")" };
        m2.setAttrs(t4.dom.elGraphical.node, i3);
      } }, { key: "resizeNonAxisCharts", value: function() {
        var t4 = this.w, e3 = t4.globals, i3 = 0, a3 = t4.config.chart.sparkline.enabled ? 1 : 15;
        a3 += t4.config.grid.padding.bottom, "top" !== t4.config.legend.position && "bottom" !== t4.config.legend.position || !t4.config.legend.show || t4.config.legend.floating || (i3 = new lt2(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
        var s2 = t4.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"), r3 = 2.05 * t4.globals.radialSize;
        if (s2 && !t4.config.chart.sparkline.enabled && 0 !== t4.config.plotOptions.radialBar.startAngle) {
          var o3 = x2.getBoundingClientRect(s2);
          r3 = o3.bottom;
          var n3 = o3.bottom - o3.top;
          r3 = Math.max(2.05 * t4.globals.radialSize, n3);
        }
        var l3 = r3 + e3.translateY + i3 + a3;
        e3.dom.elLegendForeign && e3.dom.elLegendForeign.setAttribute("height", l3), t4.config.chart.height && String(t4.config.chart.height).indexOf("%") > 0 || (e3.dom.elWrap.style.height = l3 + "px", m2.setAttrs(e3.dom.Paper.node, { height: l3 }), e3.dom.Paper.node.parentNode.parentNode.style.minHeight = l3 + "px");
      } }, { key: "coreCalculations", value: function() {
        new U2(this.ctx).init();
      } }, { key: "resetGlobals", value: function() {
        var t4 = this, e3 = function() {
          return t4.w.config.series.map(function(t5) {
            return [];
          });
        }, i3 = new Y2(), a3 = this.w.globals;
        i3.initGlobalVars(a3), a3.seriesXvalues = e3(), a3.seriesYvalues = e3();
      } }, { key: "isMultipleY", value: function() {
        if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1)
          return this.w.globals.isMultipleYAxis = true, true;
      } }, { key: "xySettings", value: function() {
        var t4 = null, e3 = this.w;
        if (e3.globals.axisCharts) {
          if ("back" === e3.config.xaxis.crosshairs.position)
            new Q2(this.ctx).drawXCrosshairs();
          if ("back" === e3.config.yaxis[0].crosshairs.position)
            new Q2(this.ctx).drawYCrosshairs();
          if ("datetime" === e3.config.xaxis.type && void 0 === e3.config.xaxis.labels.formatter) {
            this.ctx.timeScale = new Ft2(this.ctx);
            var i3 = [];
            isFinite(e3.globals.minX) && isFinite(e3.globals.maxX) && !e3.globals.isBarHorizontal ? i3 = this.ctx.timeScale.calculateTimeScaleTicks(e3.globals.minX, e3.globals.maxX) : e3.globals.isBarHorizontal && (i3 = this.ctx.timeScale.calculateTimeScaleTicks(e3.globals.minY, e3.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i3);
          }
          t4 = new y(this.ctx).getCalculatedRatios();
        }
        return t4;
      } }, { key: "updateSourceChart", value: function(t4) {
        this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({ chart: { selection: { xaxis: { min: t4.w.globals.minX, max: t4.w.globals.maxX } } } }, false, false);
      } }, { key: "setupBrushHandler", value: function() {
        var t4 = this, i3 = this.w;
        if (i3.config.chart.brush.enabled && "function" != typeof i3.config.chart.events.selection) {
          var a3 = i3.config.chart.brush.targets || [i3.config.chart.brush.target];
          a3.forEach(function(e3) {
            var i4 = ApexCharts.getChartByID(e3);
            i4.w.globals.brushSource = t4.ctx, "function" != typeof i4.w.config.chart.events.zoomed && (i4.w.config.chart.events.zoomed = function() {
              t4.updateSourceChart(i4);
            }), "function" != typeof i4.w.config.chart.events.scrolled && (i4.w.config.chart.events.scrolled = function() {
              t4.updateSourceChart(i4);
            });
          }), i3.config.chart.events.selection = function(t5, s2) {
            a3.forEach(function(t6) {
              var a4 = ApexCharts.getChartByID(t6), r3 = x2.clone(i3.config.yaxis);
              if (i3.config.chart.brush.autoScaleYaxis && 1 === a4.w.globals.series.length) {
                var o3 = new _2(a4);
                r3 = o3.autoScaleY(a4, r3, s2);
              }
              var n3 = a4.w.config.yaxis.reduce(function(t7, i4, s3) {
                return [].concat(u2(t7), [e2(e2({}, a4.w.config.yaxis[s3]), {}, { min: r3[0].min, max: r3[0].max })]);
              }, []);
              a4.ctx.updateHelpers._updateOptions({ xaxis: { min: s2.xaxis.min, max: s2.xaxis.max }, yaxis: n3 }, false, false, false, false);
            });
          };
        }
      } }]), t3;
    }(), Dt2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "_updateOptions", value: function(t4) {
        var e3 = this, a3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], s2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], r3 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], o3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
        return new Promise(function(n3) {
          var l3 = [e3.ctx];
          r3 && (l3 = e3.ctx.getSyncedCharts()), e3.ctx.w.globals.isExecCalled && (l3 = [e3.ctx], e3.ctx.w.globals.isExecCalled = false), l3.forEach(function(r4, h3) {
            var c3 = r4.w;
            if (c3.globals.shouldAnimate = s2, a3 || (c3.globals.resized = true, c3.globals.dataChanged = true, s2 && r4.series.getPreviousPaths()), t4 && "object" === i2(t4) && (r4.config = new E2(t4), t4 = y.extendArrayProps(r4.config, t4, c3), r4.w.globals.chartID !== e3.ctx.w.globals.chartID && delete t4.series, c3.config = x2.extend(c3.config, t4), o3 && (c3.globals.lastXAxis = t4.xaxis ? x2.clone(t4.xaxis) : [], c3.globals.lastYAxis = t4.yaxis ? x2.clone(t4.yaxis) : [], c3.globals.initialConfig = x2.extend({}, c3.config), c3.globals.initialSeries = x2.clone(c3.config.series), t4.series))) {
              for (var d3 = 0; d3 < c3.globals.collapsedSeriesIndices.length; d3++) {
                var g3 = c3.config.series[c3.globals.collapsedSeriesIndices[d3]];
                c3.globals.collapsedSeries[d3].data = c3.globals.axisCharts ? g3.data.slice() : g3;
              }
              for (var u3 = 0; u3 < c3.globals.ancillaryCollapsedSeriesIndices.length; u3++) {
                var f3 = c3.config.series[c3.globals.ancillaryCollapsedSeriesIndices[u3]];
                c3.globals.ancillaryCollapsedSeries[u3].data = c3.globals.axisCharts ? f3.data.slice() : f3;
              }
              r4.series.emptyCollapsedSeries(c3.config.series);
            }
            return r4.update(t4).then(function() {
              h3 === l3.length - 1 && n3(r4);
            });
          });
        });
      } }, { key: "_updateSeries", value: function(t4, e3) {
        var i3 = this, a3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        return new Promise(function(s2) {
          var r3, o3 = i3.w;
          return o3.globals.shouldAnimate = e3, o3.globals.dataChanged = true, e3 && i3.ctx.series.getPreviousPaths(), o3.globals.axisCharts ? (0 === (r3 = t4.map(function(t5, e4) {
            return i3._extendSeries(t5, e4);
          })).length && (r3 = [{ data: [] }]), o3.config.series = r3) : o3.config.series = t4.slice(), a3 && (o3.globals.initialConfig.series = x2.clone(o3.config.series), o3.globals.initialSeries = x2.clone(o3.config.series)), i3.ctx.update().then(function() {
            s2(i3.ctx);
          });
        });
      } }, { key: "_extendSeries", value: function(t4, i3) {
        var a3 = this.w, s2 = a3.config.series[i3];
        return e2(e2({}, a3.config.series[i3]), {}, { name: t4.name ? t4.name : s2 && s2.name, color: t4.color ? t4.color : s2 && s2.color, type: t4.type ? t4.type : s2 && s2.type, data: t4.data ? t4.data : s2 && s2.data });
      } }, { key: "toggleDataPointSelection", value: function(t4, e3) {
        var i3 = this.w, a3 = null, s2 = ".apexcharts-series[data\\:realIndex='".concat(t4, "']");
        return i3.globals.axisCharts ? a3 = i3.globals.dom.Paper.select("".concat(s2, " path[j='").concat(e3, "'], ").concat(s2, " circle[j='").concat(e3, "'], ").concat(s2, " rect[j='").concat(e3, "']")).members[0] : void 0 === e3 && (a3 = i3.globals.dom.Paper.select("".concat(s2, " path[j='").concat(t4, "']")).members[0], "pie" !== i3.config.chart.type && "polarArea" !== i3.config.chart.type && "donut" !== i3.config.chart.type || this.ctx.pie.pieClicked(t4)), a3 ? (new m2(this.ctx).pathMouseDown(a3, null), a3.node ? a3.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null);
      } }, { key: "forceXAxisUpdate", value: function(t4) {
        var e3 = this.w;
        if (["min", "max"].forEach(function(i4) {
          void 0 !== t4.xaxis[i4] && (e3.config.xaxis[i4] = t4.xaxis[i4], e3.globals.lastXAxis[i4] = t4.xaxis[i4]);
        }), t4.xaxis.categories && t4.xaxis.categories.length && (e3.config.xaxis.categories = t4.xaxis.categories), e3.config.xaxis.convertedCatToNumeric) {
          var i3 = new X2(t4);
          t4 = i3.convertCatToNumericXaxis(t4, this.ctx);
        }
        return t4;
      } }, { key: "forceYAxisUpdate", value: function(t4) {
        return t4.chart && t4.chart.stacked && "100%" === t4.chart.stackType && (Array.isArray(t4.yaxis) ? t4.yaxis.forEach(function(e3, i3) {
          t4.yaxis[i3].min = 0, t4.yaxis[i3].max = 100;
        }) : (t4.yaxis.min = 0, t4.yaxis.max = 100)), t4;
      } }, { key: "revertDefaultAxisMinMax", value: function(t4) {
        var e3 = this, i3 = this.w, a3 = i3.globals.lastXAxis, s2 = i3.globals.lastYAxis;
        t4 && t4.xaxis && (a3 = t4.xaxis), t4 && t4.yaxis && (s2 = t4.yaxis), i3.config.xaxis.min = a3.min, i3.config.xaxis.max = a3.max;
        var r3 = function(t5) {
          void 0 !== s2[t5] && (i3.config.yaxis[t5].min = s2[t5].min, i3.config.yaxis[t5].max = s2[t5].max);
        };
        i3.config.yaxis.map(function(t5, a4) {
          i3.globals.zoomed || void 0 !== s2[a4] ? r3(a4) : void 0 !== e3.ctx.opts.yaxis[a4] && (t5.min = e3.ctx.opts.yaxis[a4].min, t5.max = e3.ctx.opts.yaxis[a4].max);
        });
      } }]), t3;
    }();
    Xt = "undefined" != typeof window ? window : void 0, Et2 = function(t3, e3) {
      var a3 = (void 0 !== this ? this : t3).SVG = function(t4) {
        if (a3.supported)
          return t4 = new a3.Doc(t4), a3.parser.draw || a3.prepare(), t4;
      };
      if (a3.ns = "http://www.w3.org/2000/svg", a3.xmlns = "http://www.w3.org/2000/xmlns/", a3.xlink = "http://www.w3.org/1999/xlink", a3.svgjs = "http://svgjs.dev", a3.supported = true, !a3.supported)
        return false;
      a3.did = 1e3, a3.eid = function(t4) {
        return "Svgjs" + d3(t4) + a3.did++;
      }, a3.create = function(t4) {
        var i3 = e3.createElementNS(this.ns, t4);
        return i3.setAttribute("id", this.eid(t4)), i3;
      }, a3.extend = function() {
        var t4, e4;
        e4 = (t4 = [].slice.call(arguments)).pop();
        for (var i3 = t4.length - 1; i3 >= 0; i3--)
          if (t4[i3])
            for (var s3 in e4)
              t4[i3].prototype[s3] = e4[s3];
        a3.Set && a3.Set.inherit && a3.Set.inherit();
      }, a3.invent = function(t4) {
        var e4 = "function" == typeof t4.create ? t4.create : function() {
          this.constructor.call(this, a3.create(t4.create));
        };
        return t4.inherit && (e4.prototype = new t4.inherit()), t4.extend && a3.extend(e4, t4.extend), t4.construct && a3.extend(t4.parent || a3.Container, t4.construct), e4;
      }, a3.adopt = function(e4) {
        return e4 ? e4.instance ? e4.instance : ((i3 = "svg" == e4.nodeName ? e4.parentNode instanceof t3.SVGElement ? new a3.Nested() : new a3.Doc() : "linearGradient" == e4.nodeName ? new a3.Gradient("linear") : "radialGradient" == e4.nodeName ? new a3.Gradient("radial") : a3[d3(e4.nodeName)] ? new a3[d3(e4.nodeName)]() : new a3.Element(e4)).type = e4.nodeName, i3.node = e4, e4.instance = i3, i3 instanceof a3.Doc && i3.namespace().defs(), i3.setData(JSON.parse(e4.getAttribute("svgjs:data")) || {}), i3) : null;
        var i3;
      }, a3.prepare = function() {
        var t4 = e3.getElementsByTagName("body")[0], i3 = (t4 ? new a3.Doc(t4) : a3.adopt(e3.documentElement).nested()).size(2, 0);
        a3.parser = { body: t4 || e3.documentElement, draw: i3.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node, poly: i3.polyline().node, path: i3.path().node, native: a3.create("svg") };
      }, a3.parser = { native: a3.create("svg") }, e3.addEventListener("DOMContentLoaded", function() {
        a3.parser.draw || a3.prepare();
      }, false), a3.regex = { numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i, hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i, rgb: /rgb\((\d+),(\d+),(\d+)\)/, reference: /#([a-z0-9\-_]+)/i, transforms: /\)\s*,?\s*/, whitespace: /\s/g, isHex: /^#[a-f0-9]{3,6}$/i, isRgb: /^rgb\(/, isCss: /[^:]+:[^;]+;?/, isBlank: /^(\s+)?$/, isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, isPercent: /^-?[\d\.]+%$/, isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i, delimiter: /[\s,]+/, hyphen: /([^e])\-/gi, pathLetters: /[MLHVCSQTAZ]/gi, isPathLetter: /[MLHVCSQTAZ]/i, numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi, dots: /\./g }, a3.utils = { map: function(t4, e4) {
        for (var i3 = t4.length, a4 = [], s3 = 0; s3 < i3; s3++)
          a4.push(e4(t4[s3]));
        return a4;
      }, filter: function(t4, e4) {
        for (var i3 = t4.length, a4 = [], s3 = 0; s3 < i3; s3++)
          e4(t4[s3]) && a4.push(t4[s3]);
        return a4;
      }, filterSVGElements: function(e4) {
        return this.filter(e4, function(e5) {
          return e5 instanceof t3.SVGElement;
        });
      } }, a3.defaults = { attrs: { "fill-opacity": 1, "stroke-opacity": 1, "stroke-width": 0, "stroke-linejoin": "miter", "stroke-linecap": "butt", fill: "#000000", stroke: "#000000", opacity: 1, x: 0, y: 0, cx: 0, cy: 0, width: 0, height: 0, r: 0, rx: 0, ry: 0, offset: 0, "stop-opacity": 1, "stop-color": "#000000", "font-size": 16, "font-family": "Helvetica, Arial, sans-serif", "text-anchor": "start" } }, a3.Color = function(t4) {
        var e4, s3;
        this.r = 0, this.g = 0, this.b = 0, t4 && ("string" == typeof t4 ? a3.regex.isRgb.test(t4) ? (e4 = a3.regex.rgb.exec(t4.replace(a3.regex.whitespace, "")), this.r = parseInt(e4[1]), this.g = parseInt(e4[2]), this.b = parseInt(e4[3])) : a3.regex.isHex.test(t4) && (e4 = a3.regex.hex.exec(4 == (s3 = t4).length ? ["#", s3.substring(1, 2), s3.substring(1, 2), s3.substring(2, 3), s3.substring(2, 3), s3.substring(3, 4), s3.substring(3, 4)].join("") : s3), this.r = parseInt(e4[1], 16), this.g = parseInt(e4[2], 16), this.b = parseInt(e4[3], 16)) : "object" === i2(t4) && (this.r = t4.r, this.g = t4.g, this.b = t4.b));
      }, a3.extend(a3.Color, { toString: function() {
        return this.toHex();
      }, toHex: function() {
        return "#" + g3(this.r) + g3(this.g) + g3(this.b);
      }, toRgb: function() {
        return "rgb(" + [this.r, this.g, this.b].join() + ")";
      }, brightness: function() {
        return this.r / 255 * 0.3 + this.g / 255 * 0.59 + this.b / 255 * 0.11;
      }, morph: function(t4) {
        return this.destination = new a3.Color(t4), this;
      }, at: function(t4) {
        return this.destination ? (t4 = t4 < 0 ? 0 : t4 > 1 ? 1 : t4, new a3.Color({ r: ~~(this.r + (this.destination.r - this.r) * t4), g: ~~(this.g + (this.destination.g - this.g) * t4), b: ~~(this.b + (this.destination.b - this.b) * t4) })) : this;
      } }), a3.Color.test = function(t4) {
        return t4 += "", a3.regex.isHex.test(t4) || a3.regex.isRgb.test(t4);
      }, a3.Color.isRgb = function(t4) {
        return t4 && "number" == typeof t4.r && "number" == typeof t4.g && "number" == typeof t4.b;
      }, a3.Color.isColor = function(t4) {
        return a3.Color.isRgb(t4) || a3.Color.test(t4);
      }, a3.Array = function(t4, e4) {
        0 == (t4 = (t4 || []).valueOf()).length && e4 && (t4 = e4.valueOf()), this.value = this.parse(t4);
      }, a3.extend(a3.Array, { toString: function() {
        return this.value.join(" ");
      }, valueOf: function() {
        return this.value;
      }, parse: function(t4) {
        return t4 = t4.valueOf(), Array.isArray(t4) ? t4 : this.split(t4);
      } }), a3.PointArray = function(t4, e4) {
        a3.Array.call(this, t4, e4 || [[0, 0]]);
      }, a3.PointArray.prototype = new a3.Array(), a3.PointArray.prototype.constructor = a3.PointArray;
      for (var s2 = { M: function(t4, e4, i3) {
        return e4.x = i3.x = t4[0], e4.y = i3.y = t4[1], ["M", e4.x, e4.y];
      }, L: function(t4, e4) {
        return e4.x = t4[0], e4.y = t4[1], ["L", t4[0], t4[1]];
      }, H: function(t4, e4) {
        return e4.x = t4[0], ["H", t4[0]];
      }, V: function(t4, e4) {
        return e4.y = t4[0], ["V", t4[0]];
      }, C: function(t4, e4) {
        return e4.x = t4[4], e4.y = t4[5], ["C", t4[0], t4[1], t4[2], t4[3], t4[4], t4[5]];
      }, Q: function(t4, e4) {
        return e4.x = t4[2], e4.y = t4[3], ["Q", t4[0], t4[1], t4[2], t4[3]];
      }, Z: function(t4, e4, i3) {
        return e4.x = i3.x, e4.y = i3.y, ["Z"];
      } }, r3 = "mlhvqtcsaz".split(""), o3 = 0, n3 = r3.length; o3 < n3; ++o3)
        s2[r3[o3]] = function(t4) {
          return function(e4, i3, a4) {
            if ("H" == t4)
              e4[0] = e4[0] + i3.x;
            else if ("V" == t4)
              e4[0] = e4[0] + i3.y;
            else if ("A" == t4)
              e4[5] = e4[5] + i3.x, e4[6] = e4[6] + i3.y;
            else
              for (var r4 = 0, o4 = e4.length; r4 < o4; ++r4)
                e4[r4] = e4[r4] + (r4 % 2 ? i3.y : i3.x);
            if (s2 && "function" == typeof s2[t4])
              return s2[t4](e4, i3, a4);
          };
        }(r3[o3].toUpperCase());
      a3.PathArray = function(t4, e4) {
        a3.Array.call(this, t4, e4 || [["M", 0, 0]]);
      }, a3.PathArray.prototype = new a3.Array(), a3.PathArray.prototype.constructor = a3.PathArray, a3.extend(a3.PathArray, { toString: function() {
        return function(t4) {
          for (var e4 = 0, i3 = t4.length, a4 = ""; e4 < i3; e4++)
            a4 += t4[e4][0], null != t4[e4][1] && (a4 += t4[e4][1], null != t4[e4][2] && (a4 += " ", a4 += t4[e4][2], null != t4[e4][3] && (a4 += " ", a4 += t4[e4][3], a4 += " ", a4 += t4[e4][4], null != t4[e4][5] && (a4 += " ", a4 += t4[e4][5], a4 += " ", a4 += t4[e4][6], null != t4[e4][7] && (a4 += " ", a4 += t4[e4][7])))));
          return a4 + " ";
        }(this.value);
      }, move: function(t4, e4) {
        var i3 = this.bbox();
        return i3.x, i3.y, this;
      }, at: function(t4) {
        if (!this.destination)
          return this;
        for (var e4 = this.value, i3 = this.destination.value, s3 = [], r4 = new a3.PathArray(), o4 = 0, n4 = e4.length; o4 < n4; o4++) {
          s3[o4] = [e4[o4][0]];
          for (var l4 = 1, h4 = e4[o4].length; l4 < h4; l4++)
            s3[o4][l4] = e4[o4][l4] + (i3[o4][l4] - e4[o4][l4]) * t4;
          "A" === s3[o4][0] && (s3[o4][4] = +(0 != s3[o4][4]), s3[o4][5] = +(0 != s3[o4][5]));
        }
        return r4.value = s3, r4;
      }, parse: function(t4) {
        if (t4 instanceof a3.PathArray)
          return t4.valueOf();
        var e4, i3 = { M: 2, L: 2, H: 1, V: 1, C: 6, S: 4, Q: 4, T: 2, A: 7, Z: 0 };
        t4 = "string" == typeof t4 ? t4.replace(a3.regex.numbersWithDots, h3).replace(a3.regex.pathLetters, " $& ").replace(a3.regex.hyphen, "$1 -").trim().split(a3.regex.delimiter) : t4.reduce(function(t5, e5) {
          return [].concat.call(t5, e5);
        }, []);
        var r4 = [], o4 = new a3.Point(), n4 = new a3.Point(), l4 = 0, c4 = t4.length;
        do {
          a3.regex.isPathLetter.test(t4[l4]) ? (e4 = t4[l4], ++l4) : "M" == e4 ? e4 = "L" : "m" == e4 && (e4 = "l"), r4.push(s2[e4].call(null, t4.slice(l4, l4 += i3[e4.toUpperCase()]).map(parseFloat), o4, n4));
        } while (c4 > l4);
        return r4;
      }, bbox: function() {
        return a3.parser.draw || a3.prepare(), a3.parser.path.setAttribute("d", this.toString()), a3.parser.path.getBBox();
      } }), a3.Number = a3.invent({ create: function(t4, e4) {
        this.value = 0, this.unit = e4 || "", "number" == typeof t4 ? this.value = isNaN(t4) ? 0 : isFinite(t4) ? t4 : t4 < 0 ? -34e37 : 34e37 : "string" == typeof t4 ? (e4 = t4.match(a3.regex.numberAndUnit)) && (this.value = parseFloat(e4[1]), "%" == e4[5] ? this.value /= 100 : "s" == e4[5] && (this.value *= 1e3), this.unit = e4[5]) : t4 instanceof a3.Number && (this.value = t4.valueOf(), this.unit = t4.unit);
      }, extend: { toString: function() {
        return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit;
      }, toJSON: function() {
        return this.toString();
      }, valueOf: function() {
        return this.value;
      }, plus: function(t4) {
        return t4 = new a3.Number(t4), new a3.Number(this + t4, this.unit || t4.unit);
      }, minus: function(t4) {
        return t4 = new a3.Number(t4), new a3.Number(this - t4, this.unit || t4.unit);
      }, times: function(t4) {
        return t4 = new a3.Number(t4), new a3.Number(this * t4, this.unit || t4.unit);
      }, divide: function(t4) {
        return t4 = new a3.Number(t4), new a3.Number(this / t4, this.unit || t4.unit);
      }, to: function(t4) {
        var e4 = new a3.Number(this);
        return "string" == typeof t4 && (e4.unit = t4), e4;
      }, morph: function(t4) {
        return this.destination = new a3.Number(t4), t4.relative && (this.destination.value += this.value), this;
      }, at: function(t4) {
        return this.destination ? new a3.Number(this.destination).minus(this).times(t4).plus(this) : this;
      } } }), a3.Element = a3.invent({ create: function(t4) {
        this._stroke = a3.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t4) && (this.type = t4.nodeName, this.node.instance = this, this._stroke = t4.getAttribute("stroke") || this._stroke);
      }, extend: { x: function(t4) {
        return this.attr("x", t4);
      }, y: function(t4) {
        return this.attr("y", t4);
      }, cx: function(t4) {
        return null == t4 ? this.x() + this.width() / 2 : this.x(t4 - this.width() / 2);
      }, cy: function(t4) {
        return null == t4 ? this.y() + this.height() / 2 : this.y(t4 - this.height() / 2);
      }, move: function(t4, e4) {
        return this.x(t4).y(e4);
      }, center: function(t4, e4) {
        return this.cx(t4).cy(e4);
      }, width: function(t4) {
        return this.attr("width", t4);
      }, height: function(t4) {
        return this.attr("height", t4);
      }, size: function(t4, e4) {
        var i3 = u3(this, t4, e4);
        return this.width(new a3.Number(i3.width)).height(new a3.Number(i3.height));
      }, clone: function(t4) {
        this.writeDataToDom();
        var e4 = x3(this.node.cloneNode(true));
        return t4 ? t4.add(e4) : this.after(e4), e4;
      }, remove: function() {
        return this.parent() && this.parent().removeElement(this), this;
      }, replace: function(t4) {
        return this.after(t4).remove(), t4;
      }, addTo: function(t4) {
        return t4.put(this);
      }, putIn: function(t4) {
        return t4.add(this);
      }, id: function(t4) {
        return this.attr("id", t4);
      }, show: function() {
        return this.style("display", "");
      }, hide: function() {
        return this.style("display", "none");
      }, visible: function() {
        return "none" != this.style("display");
      }, toString: function() {
        return this.attr("id");
      }, classes: function() {
        var t4 = this.attr("class");
        return null == t4 ? [] : t4.trim().split(a3.regex.delimiter);
      }, hasClass: function(t4) {
        return -1 != this.classes().indexOf(t4);
      }, addClass: function(t4) {
        if (!this.hasClass(t4)) {
          var e4 = this.classes();
          e4.push(t4), this.attr("class", e4.join(" "));
        }
        return this;
      }, removeClass: function(t4) {
        return this.hasClass(t4) && this.attr("class", this.classes().filter(function(e4) {
          return e4 != t4;
        }).join(" ")), this;
      }, toggleClass: function(t4) {
        return this.hasClass(t4) ? this.removeClass(t4) : this.addClass(t4);
      }, reference: function(t4) {
        return a3.get(this.attr(t4));
      }, parent: function(e4) {
        var i3 = this;
        if (!i3.node.parentNode)
          return null;
        if (i3 = a3.adopt(i3.node.parentNode), !e4)
          return i3;
        for (; i3 && i3.node instanceof t3.SVGElement; ) {
          if ("string" == typeof e4 ? i3.matches(e4) : i3 instanceof e4)
            return i3;
          if (!i3.node.parentNode || "#document" == i3.node.parentNode.nodeName)
            return null;
          i3 = a3.adopt(i3.node.parentNode);
        }
      }, doc: function() {
        return this instanceof a3.Doc ? this : this.parent(a3.Doc);
      }, parents: function(t4) {
        var e4 = [], i3 = this;
        do {
          if (!(i3 = i3.parent(t4)) || !i3.node)
            break;
          e4.push(i3);
        } while (i3.parent);
        return e4;
      }, matches: function(t4) {
        return function(t5, e4) {
          return (t5.matches || t5.matchesSelector || t5.msMatchesSelector || t5.mozMatchesSelector || t5.webkitMatchesSelector || t5.oMatchesSelector).call(t5, e4);
        }(this.node, t4);
      }, native: function() {
        return this.node;
      }, svg: function(t4) {
        var i3 = e3.createElement("svg");
        if (!(t4 && this instanceof a3.Parent))
          return i3.appendChild(t4 = e3.createElement("svg")), this.writeDataToDom(), t4.appendChild(this.node.cloneNode(true)), i3.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
        i3.innerHTML = "<svg>" + t4.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";
        for (var s3 = 0, r4 = i3.firstChild.childNodes.length; s3 < r4; s3++)
          this.node.appendChild(i3.firstChild.firstChild);
        return this;
      }, writeDataToDom: function() {
        return (this.each || this.lines) && (this.each ? this : this.lines()).each(function() {
          this.writeDataToDom();
        }), this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this;
      }, setData: function(t4) {
        return this.dom = t4, this;
      }, is: function(t4) {
        return function(t5, e4) {
          return t5 instanceof e4;
        }(this, t4);
      } } }), a3.easing = { "-": function(t4) {
        return t4;
      }, "<>": function(t4) {
        return -Math.cos(t4 * Math.PI) / 2 + 0.5;
      }, ">": function(t4) {
        return Math.sin(t4 * Math.PI / 2);
      }, "<": function(t4) {
        return 1 - Math.cos(t4 * Math.PI / 2);
      } }, a3.morph = function(t4) {
        return function(e4, i3) {
          return new a3.MorphObj(e4, i3).at(t4);
        };
      }, a3.Situation = a3.invent({ create: function(t4) {
        this.init = false, this.reversed = false, this.reversing = false, this.duration = new a3.Number(t4.duration).valueOf(), this.delay = new a3.Number(t4.delay).valueOf(), this.start = +new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t4.ease, this.loop = 0, this.loops = false, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};
      } }), a3.FX = a3.invent({ create: function(t4) {
        this._target = t4, this.situations = [], this.active = false, this.situation = null, this.paused = false, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;
      }, extend: { animate: function(t4, e4, s3) {
        "object" === i2(t4) && (e4 = t4.ease, s3 = t4.delay, t4 = t4.duration);
        var r4 = new a3.Situation({ duration: t4 || 1e3, delay: s3 || 0, ease: a3.easing[e4 || "-"] || e4 });
        return this.queue(r4), this;
      }, target: function(t4) {
        return t4 && t4 instanceof a3.Element ? (this._target = t4, this) : this._target;
      }, timeToAbsPos: function(t4) {
        return (t4 - this.situation.start) / (this.situation.duration / this._speed);
      }, absPosToTime: function(t4) {
        return this.situation.duration / this._speed * t4 + this.situation.start;
      }, startAnimFrame: function() {
        this.stopAnimFrame(), this.animationFrame = t3.requestAnimationFrame(function() {
          this.step();
        }.bind(this));
      }, stopAnimFrame: function() {
        t3.cancelAnimationFrame(this.animationFrame);
      }, start: function() {
        return !this.active && this.situation && (this.active = true, this.startCurrent()), this;
      }, startCurrent: function() {
        return this.situation.start = +new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();
      }, queue: function(t4) {
        return ("function" == typeof t4 || t4 instanceof a3.Situation) && this.situations.push(t4), this.situation || (this.situation = this.situations.shift()), this;
      }, dequeue: function() {
        return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof a3.Situation ? this.start() : this.situation.call(this)), this;
      }, initAnimations: function() {
        var t4, e4 = this.situation;
        if (e4.init)
          return this;
        for (var i3 in e4.animations) {
          t4 = this.target()[i3](), Array.isArray(t4) || (t4 = [t4]), Array.isArray(e4.animations[i3]) || (e4.animations[i3] = [e4.animations[i3]]);
          for (var s3 = t4.length; s3--; )
            e4.animations[i3][s3] instanceof a3.Number && (t4[s3] = new a3.Number(t4[s3])), e4.animations[i3][s3] = t4[s3].morph(e4.animations[i3][s3]);
        }
        for (var i3 in e4.attrs)
          e4.attrs[i3] = new a3.MorphObj(this.target().attr(i3), e4.attrs[i3]);
        for (var i3 in e4.styles)
          e4.styles[i3] = new a3.MorphObj(this.target().style(i3), e4.styles[i3]);
        return e4.initialTransformation = this.target().matrixify(), e4.init = true, this;
      }, clearQueue: function() {
        return this.situations = [], this;
      }, clearCurrent: function() {
        return this.situation = null, this;
      }, stop: function(t4, e4) {
        var i3 = this.active;
        return this.active = false, e4 && this.clearQueue(), t4 && this.situation && (!i3 && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
      }, after: function(t4) {
        var e4 = this.last();
        return this.target().on("finished.fx", function i3(a4) {
          a4.detail.situation == e4 && (t4.call(this, e4), this.off("finished.fx", i3));
        }), this._callStart();
      }, during: function(t4) {
        var e4 = this.last(), i3 = function(i4) {
          i4.detail.situation == e4 && t4.call(this, i4.detail.pos, a3.morph(i4.detail.pos), i4.detail.eased, e4);
        };
        return this.target().off("during.fx", i3).on("during.fx", i3), this.after(function() {
          this.off("during.fx", i3);
        }), this._callStart();
      }, afterAll: function(t4) {
        var e4 = function e5(i3) {
          t4.call(this), this.off("allfinished.fx", e5);
        };
        return this.target().off("allfinished.fx", e4).on("allfinished.fx", e4), this._callStart();
      }, last: function() {
        return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
      }, add: function(t4, e4, i3) {
        return this.last()[i3 || "animations"][t4] = e4, this._callStart();
      }, step: function(t4) {
        var e4, i3, a4;
        t4 || (this.absPos = this.timeToAbsPos(+new Date())), false !== this.situation.loops ? (e4 = Math.max(this.absPos, 0), i3 = Math.floor(e4), true === this.situation.loops || i3 < this.situation.loops ? (this.pos = e4 - i3, a4 = this.situation.loop, this.situation.loop = i3) : (this.absPos = this.situation.loops, this.pos = 1, a4 = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a4) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
        var s3 = this.situation.ease(this.pos);
        for (var r4 in this.situation.once)
          r4 > this.lastPos && r4 <= s3 && (this.situation.once[r4].call(this.target(), this.pos, s3), delete this.situation.once[r4]);
        return this.active && this.target().fire("during", { pos: this.pos, eased: s3, fx: this, situation: this.situation }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", { fx: this, situation: this.situation }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = false)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s3, this) : this;
      }, eachAt: function() {
        var t4, e4 = this, i3 = this.target(), s3 = this.situation;
        for (var r4 in s3.animations)
          t4 = [].concat(s3.animations[r4]).map(function(t5) {
            return "string" != typeof t5 && t5.at ? t5.at(s3.ease(e4.pos), e4.pos) : t5;
          }), i3[r4].apply(i3, t4);
        for (var r4 in s3.attrs)
          t4 = [r4].concat(s3.attrs[r4]).map(function(t5) {
            return "string" != typeof t5 && t5.at ? t5.at(s3.ease(e4.pos), e4.pos) : t5;
          }), i3.attr.apply(i3, t4);
        for (var r4 in s3.styles)
          t4 = [r4].concat(s3.styles[r4]).map(function(t5) {
            return "string" != typeof t5 && t5.at ? t5.at(s3.ease(e4.pos), e4.pos) : t5;
          }), i3.style.apply(i3, t4);
        if (s3.transforms.length) {
          t4 = s3.initialTransformation, r4 = 0;
          for (var o4 = s3.transforms.length; r4 < o4; r4++) {
            var n4 = s3.transforms[r4];
            n4 instanceof a3.Matrix ? t4 = n4.relative ? t4.multiply(new a3.Matrix().morph(n4).at(s3.ease(this.pos))) : t4.morph(n4).at(s3.ease(this.pos)) : (n4.relative || n4.undo(t4.extract()), t4 = t4.multiply(n4.at(s3.ease(this.pos))));
          }
          i3.matrix(t4);
        }
        return this;
      }, once: function(t4, e4, i3) {
        var a4 = this.last();
        return i3 || (t4 = a4.ease(t4)), a4.once[t4] = e4, this;
      }, _callStart: function() {
        return setTimeout(function() {
          this.start();
        }.bind(this), 0), this;
      } }, parent: a3.Element, construct: { animate: function(t4, e4, i3) {
        return (this.fx || (this.fx = new a3.FX(this))).animate(t4, e4, i3);
      }, delay: function(t4) {
        return (this.fx || (this.fx = new a3.FX(this))).delay(t4);
      }, stop: function(t4, e4) {
        return this.fx && this.fx.stop(t4, e4), this;
      }, finish: function() {
        return this.fx && this.fx.finish(), this;
      } } }), a3.MorphObj = a3.invent({ create: function(t4, e4) {
        return a3.Color.isColor(e4) ? new a3.Color(t4).morph(e4) : a3.regex.delimiter.test(t4) ? a3.regex.pathLetters.test(t4) ? new a3.PathArray(t4).morph(e4) : new a3.Array(t4).morph(e4) : a3.regex.numberAndUnit.test(e4) ? new a3.Number(t4).morph(e4) : (this.value = t4, void (this.destination = e4));
      }, extend: { at: function(t4, e4) {
        return e4 < 1 ? this.value : this.destination;
      }, valueOf: function() {
        return this.value;
      } } }), a3.extend(a3.FX, { attr: function(t4, e4, a4) {
        if ("object" === i2(t4))
          for (var s3 in t4)
            this.attr(s3, t4[s3]);
        else
          this.add(t4, e4, "attrs");
        return this;
      }, plot: function(t4, e4, i3, a4) {
        return 4 == arguments.length ? this.plot([t4, e4, i3, a4]) : this.add("plot", new (this.target()).morphArray(t4));
      } }), a3.Box = a3.invent({ create: function(t4, e4, s3, r4) {
        if (!("object" !== i2(t4) || t4 instanceof a3.Element))
          return a3.Box.call(this, null != t4.left ? t4.left : t4.x, null != t4.top ? t4.top : t4.y, t4.width, t4.height);
        4 == arguments.length && (this.x = t4, this.y = e4, this.width = s3, this.height = r4), b3(this);
      } }), a3.BBox = a3.invent({ create: function(t4) {
        if (a3.Box.apply(this, [].slice.call(arguments)), t4 instanceof a3.Element) {
          var i3;
          try {
            if (!e3.documentElement.contains) {
              for (var s3 = t4.node; s3.parentNode; )
                s3 = s3.parentNode;
              if (s3 != e3)
                throw new Error("Element not in the dom");
            }
            i3 = t4.node.getBBox();
          } catch (e4) {
            if (t4 instanceof a3.Shape) {
              a3.parser.draw || a3.prepare();
              var r4 = t4.clone(a3.parser.draw.instance).show();
              r4 && r4.node && "function" == typeof r4.node.getBBox && (i3 = r4.node.getBBox()), r4 && "function" == typeof r4.remove && r4.remove();
            } else
              i3 = { x: t4.node.clientLeft, y: t4.node.clientTop, width: t4.node.clientWidth, height: t4.node.clientHeight };
          }
          a3.Box.call(this, i3);
        }
      }, inherit: a3.Box, parent: a3.Element, construct: { bbox: function() {
        return new a3.BBox(this);
      } } }), a3.BBox.prototype.constructor = a3.BBox, a3.Matrix = a3.invent({ create: function(t4) {
        var e4 = p3([1, 0, 0, 1, 0, 0]);
        t4 = null === t4 ? e4 : t4 instanceof a3.Element ? t4.matrixify() : "string" == typeof t4 ? p3(t4.split(a3.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? p3([].slice.call(arguments)) : Array.isArray(t4) ? p3(t4) : t4 && "object" === i2(t4) ? t4 : e4;
        for (var s3 = m3.length - 1; s3 >= 0; --s3)
          this[m3[s3]] = null != t4[m3[s3]] ? t4[m3[s3]] : e4[m3[s3]];
      }, extend: { extract: function() {
        var t4 = f3(this, 0, 1);
        f3(this, 1, 0);
        var e4 = 180 / Math.PI * Math.atan2(t4.y, t4.x) - 90;
        return { x: this.e, y: this.f, transformedX: (this.e * Math.cos(e4 * Math.PI / 180) + this.f * Math.sin(e4 * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b), transformedY: (this.f * Math.cos(e4 * Math.PI / 180) + this.e * Math.sin(-e4 * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d), rotation: e4, a: this.a, b: this.b, c: this.c, d: this.d, e: this.e, f: this.f, matrix: new a3.Matrix(this) };
      }, clone: function() {
        return new a3.Matrix(this);
      }, morph: function(t4) {
        return this.destination = new a3.Matrix(t4), this;
      }, multiply: function(t4) {
        return new a3.Matrix(this.native().multiply(function(t5) {
          return t5 instanceof a3.Matrix || (t5 = new a3.Matrix(t5)), t5;
        }(t4).native()));
      }, inverse: function() {
        return new a3.Matrix(this.native().inverse());
      }, translate: function(t4, e4) {
        return new a3.Matrix(this.native().translate(t4 || 0, e4 || 0));
      }, native: function() {
        for (var t4 = a3.parser.native.createSVGMatrix(), e4 = m3.length - 1; e4 >= 0; e4--)
          t4[m3[e4]] = this[m3[e4]];
        return t4;
      }, toString: function() {
        return "matrix(" + v3(this.a) + "," + v3(this.b) + "," + v3(this.c) + "," + v3(this.d) + "," + v3(this.e) + "," + v3(this.f) + ")";
      } }, parent: a3.Element, construct: { ctm: function() {
        return new a3.Matrix(this.node.getCTM());
      }, screenCTM: function() {
        if (this instanceof a3.Nested) {
          var t4 = this.rect(1, 1), e4 = t4.node.getScreenCTM();
          return t4.remove(), new a3.Matrix(e4);
        }
        return new a3.Matrix(this.node.getScreenCTM());
      } } }), a3.Point = a3.invent({ create: function(t4, e4) {
        var a4;
        a4 = Array.isArray(t4) ? { x: t4[0], y: t4[1] } : "object" === i2(t4) ? { x: t4.x, y: t4.y } : null != t4 ? { x: t4, y: null != e4 ? e4 : t4 } : { x: 0, y: 0 }, this.x = a4.x, this.y = a4.y;
      }, extend: { clone: function() {
        return new a3.Point(this);
      }, morph: function(t4, e4) {
        return this.destination = new a3.Point(t4, e4), this;
      } } }), a3.extend(a3.Element, { point: function(t4, e4) {
        return new a3.Point(t4, e4).transform(this.screenCTM().inverse());
      } }), a3.extend(a3.Element, { attr: function(t4, e4, s3) {
        if (null == t4) {
          for (t4 = {}, s3 = (e4 = this.node.attributes).length - 1; s3 >= 0; s3--)
            t4[e4[s3].nodeName] = a3.regex.isNumber.test(e4[s3].nodeValue) ? parseFloat(e4[s3].nodeValue) : e4[s3].nodeValue;
          return t4;
        }
        if ("object" === i2(t4))
          for (var r4 in t4)
            this.attr(r4, t4[r4]);
        else if (null === e4)
          this.node.removeAttribute(t4);
        else {
          if (null == e4)
            return null == (e4 = this.node.getAttribute(t4)) ? a3.defaults.attrs[t4] : a3.regex.isNumber.test(e4) ? parseFloat(e4) : e4;
          "stroke-width" == t4 ? this.attr("stroke", parseFloat(e4) > 0 ? this._stroke : null) : "stroke" == t4 && (this._stroke = e4), "fill" != t4 && "stroke" != t4 || (a3.regex.isImage.test(e4) && (e4 = this.doc().defs().image(e4, 0, 0)), e4 instanceof a3.Image && (e4 = this.doc().defs().pattern(0, 0, function() {
            this.add(e4);
          }))), "number" == typeof e4 ? e4 = new a3.Number(e4) : a3.Color.isColor(e4) ? e4 = new a3.Color(e4) : Array.isArray(e4) && (e4 = new a3.Array(e4)), "leading" == t4 ? this.leading && this.leading(e4) : "string" == typeof s3 ? this.node.setAttributeNS(s3, t4, e4.toString()) : this.node.setAttribute(t4, e4.toString()), !this.rebuild || "font-size" != t4 && "x" != t4 || this.rebuild(t4, e4);
        }
        return this;
      } }), a3.extend(a3.Element, { transform: function(t4, e4) {
        var s3;
        return "object" !== i2(t4) ? (s3 = new a3.Matrix(this).extract(), "string" == typeof t4 ? s3[t4] : s3) : (s3 = new a3.Matrix(this), e4 = !!e4 || !!t4.relative, null != t4.a && (s3 = e4 ? s3.multiply(new a3.Matrix(t4)) : new a3.Matrix(t4)), this.attr("transform", s3));
      } }), a3.extend(a3.Element, { untransform: function() {
        return this.attr("transform", null);
      }, matrixify: function() {
        return (this.attr("transform") || "").split(a3.regex.transforms).slice(0, -1).map(function(t4) {
          var e4 = t4.trim().split("(");
          return [e4[0], e4[1].split(a3.regex.delimiter).map(function(t5) {
            return parseFloat(t5);
          })];
        }).reduce(function(t4, e4) {
          return "matrix" == e4[0] ? t4.multiply(p3(e4[1])) : t4[e4[0]].apply(t4, e4[1]);
        }, new a3.Matrix());
      }, toParent: function(t4) {
        if (this == t4)
          return this;
        var e4 = this.screenCTM(), i3 = t4.screenCTM().inverse();
        return this.addTo(t4).untransform().transform(i3.multiply(e4)), this;
      }, toDoc: function() {
        return this.toParent(this.doc());
      } }), a3.Transformation = a3.invent({ create: function(t4, e4) {
        if (arguments.length > 1 && "boolean" != typeof e4)
          return this.constructor.call(this, [].slice.call(arguments));
        if (Array.isArray(t4))
          for (var a4 = 0, s3 = this.arguments.length; a4 < s3; ++a4)
            this[this.arguments[a4]] = t4[a4];
        else if (t4 && "object" === i2(t4))
          for (a4 = 0, s3 = this.arguments.length; a4 < s3; ++a4)
            this[this.arguments[a4]] = t4[this.arguments[a4]];
        this.inversed = false, true === e4 && (this.inversed = true);
      } }), a3.Translate = a3.invent({ parent: a3.Matrix, inherit: a3.Transformation, create: function(t4, e4) {
        this.constructor.apply(this, [].slice.call(arguments));
      }, extend: { arguments: ["transformedX", "transformedY"], method: "translate" } }), a3.extend(a3.Element, { style: function(t4, e4) {
        if (0 == arguments.length)
          return this.node.style.cssText || "";
        if (arguments.length < 2)
          if ("object" === i2(t4))
            for (var s3 in t4)
              this.style(s3, t4[s3]);
          else {
            if (!a3.regex.isCss.test(t4))
              return this.node.style[c3(t4)];
            for (t4 = t4.split(/\s*;\s*/).filter(function(t5) {
              return !!t5;
            }).map(function(t5) {
              return t5.split(/\s*:\s*/);
            }); e4 = t4.pop(); )
              this.style(e4[0], e4[1]);
          }
        else
          this.node.style[c3(t4)] = null === e4 || a3.regex.isBlank.test(e4) ? "" : e4;
        return this;
      } }), a3.Parent = a3.invent({ create: function(t4) {
        this.constructor.call(this, t4);
      }, inherit: a3.Element, extend: { children: function() {
        return a3.utils.map(a3.utils.filterSVGElements(this.node.childNodes), function(t4) {
          return a3.adopt(t4);
        });
      }, add: function(t4, e4) {
        return null == e4 ? this.node.appendChild(t4.node) : t4.node != this.node.childNodes[e4] && this.node.insertBefore(t4.node, this.node.childNodes[e4]), this;
      }, put: function(t4, e4) {
        return this.add(t4, e4), t4;
      }, has: function(t4) {
        return this.index(t4) >= 0;
      }, index: function(t4) {
        return [].slice.call(this.node.childNodes).indexOf(t4.node);
      }, get: function(t4) {
        return a3.adopt(this.node.childNodes[t4]);
      }, first: function() {
        return this.get(0);
      }, last: function() {
        return this.get(this.node.childNodes.length - 1);
      }, each: function(t4, e4) {
        for (var i3 = this.children(), s3 = 0, r4 = i3.length; s3 < r4; s3++)
          i3[s3] instanceof a3.Element && t4.apply(i3[s3], [s3, i3]), e4 && i3[s3] instanceof a3.Container && i3[s3].each(t4, e4);
        return this;
      }, removeElement: function(t4) {
        return this.node.removeChild(t4.node), this;
      }, clear: function() {
        for (; this.node.hasChildNodes(); )
          this.node.removeChild(this.node.lastChild);
        return delete this._defs, this;
      }, defs: function() {
        return this.doc().defs();
      } } }), a3.extend(a3.Parent, { ungroup: function(t4, e4) {
        return 0 === e4 || this instanceof a3.Defs || this.node == a3.parser.draw || (t4 = t4 || (this instanceof a3.Doc ? this : this.parent(a3.Parent)), e4 = e4 || 1 / 0, this.each(function() {
          return this instanceof a3.Defs ? this : this instanceof a3.Parent ? this.ungroup(t4, e4 - 1) : this.toParent(t4);
        }), this.node.firstChild || this.remove()), this;
      }, flatten: function(t4, e4) {
        return this.ungroup(t4, e4);
      } }), a3.Container = a3.invent({ create: function(t4) {
        this.constructor.call(this, t4);
      }, inherit: a3.Parent }), a3.ViewBox = a3.invent({ parent: a3.Container, construct: {} }), ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel"].forEach(function(t4) {
        a3.Element.prototype[t4] = function(e4) {
          return a3.on(this.node, t4, e4), this;
        };
      }), a3.listeners = [], a3.handlerMap = [], a3.listenerId = 0, a3.on = function(t4, e4, i3, s3, r4) {
        var o4 = i3.bind(s3 || t4.instance || t4), n4 = (a3.handlerMap.indexOf(t4) + 1 || a3.handlerMap.push(t4)) - 1, l4 = e4.split(".")[0], h4 = e4.split(".")[1] || "*";
        a3.listeners[n4] = a3.listeners[n4] || {}, a3.listeners[n4][l4] = a3.listeners[n4][l4] || {}, a3.listeners[n4][l4][h4] = a3.listeners[n4][l4][h4] || {}, i3._svgjsListenerId || (i3._svgjsListenerId = ++a3.listenerId), a3.listeners[n4][l4][h4][i3._svgjsListenerId] = o4, t4.addEventListener(l4, o4, r4 || { passive: true });
      }, a3.off = function(t4, e4, i3) {
        var s3 = a3.handlerMap.indexOf(t4), r4 = e4 && e4.split(".")[0], o4 = e4 && e4.split(".")[1], n4 = "";
        if (-1 != s3)
          if (i3) {
            if ("function" == typeof i3 && (i3 = i3._svgjsListenerId), !i3)
              return;
            a3.listeners[s3][r4] && a3.listeners[s3][r4][o4 || "*"] && (t4.removeEventListener(r4, a3.listeners[s3][r4][o4 || "*"][i3], false), delete a3.listeners[s3][r4][o4 || "*"][i3]);
          } else if (o4 && r4) {
            if (a3.listeners[s3][r4] && a3.listeners[s3][r4][o4]) {
              for (var l4 in a3.listeners[s3][r4][o4])
                a3.off(t4, [r4, o4].join("."), l4);
              delete a3.listeners[s3][r4][o4];
            }
          } else if (o4)
            for (var h4 in a3.listeners[s3])
              for (var n4 in a3.listeners[s3][h4])
                o4 === n4 && a3.off(t4, [h4, o4].join("."));
          else if (r4) {
            if (a3.listeners[s3][r4]) {
              for (var n4 in a3.listeners[s3][r4])
                a3.off(t4, [r4, n4].join("."));
              delete a3.listeners[s3][r4];
            }
          } else {
            for (var h4 in a3.listeners[s3])
              a3.off(t4, h4);
            delete a3.listeners[s3], delete a3.handlerMap[s3];
          }
      }, a3.extend(a3.Element, { on: function(t4, e4, i3, s3) {
        return a3.on(this.node, t4, e4, i3, s3), this;
      }, off: function(t4, e4) {
        return a3.off(this.node, t4, e4), this;
      }, fire: function(e4, i3) {
        return e4 instanceof t3.Event ? this.node.dispatchEvent(e4) : this.node.dispatchEvent(e4 = new a3.CustomEvent(e4, { detail: i3, cancelable: true })), this._event = e4, this;
      }, event: function() {
        return this._event;
      } }), a3.Defs = a3.invent({ create: "defs", inherit: a3.Container }), a3.G = a3.invent({ create: "g", inherit: a3.Container, extend: { x: function(t4) {
        return null == t4 ? this.transform("x") : this.transform({ x: t4 - this.x() }, true);
      } }, construct: { group: function() {
        return this.put(new a3.G());
      } } }), a3.Doc = a3.invent({ create: function(t4) {
        t4 && ("svg" == (t4 = "string" == typeof t4 ? e3.getElementById(t4) : t4).nodeName ? this.constructor.call(this, t4) : (this.constructor.call(this, a3.create("svg")), t4.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs());
      }, inherit: a3.Container, extend: { namespace: function() {
        return this.attr({ xmlns: a3.ns, version: "1.1" }).attr("xmlns:xlink", a3.xlink, a3.xmlns).attr("xmlns:svgjs", a3.svgjs, a3.xmlns);
      }, defs: function() {
        var t4;
        return this._defs || ((t4 = this.node.getElementsByTagName("defs")[0]) ? this._defs = a3.adopt(t4) : this._defs = new a3.Defs(), this.node.appendChild(this._defs.node)), this._defs;
      }, parent: function() {
        return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
      }, remove: function() {
        return this.parent() && this.parent().removeChild(this.node), this;
      }, clear: function() {
        for (; this.node.hasChildNodes(); )
          this.node.removeChild(this.node.lastChild);
        return delete this._defs, a3.parser.draw && !a3.parser.draw.parentNode && this.node.appendChild(a3.parser.draw), this;
      }, clone: function(t4) {
        this.writeDataToDom();
        var e4 = this.node, i3 = x3(e4.cloneNode(true));
        return t4 ? (t4.node || t4).appendChild(i3.node) : e4.parentNode.insertBefore(i3.node, e4.nextSibling), i3;
      } } }), a3.extend(a3.Element, {}), a3.Gradient = a3.invent({ create: function(t4) {
        this.constructor.call(this, a3.create(t4 + "Gradient")), this.type = t4;
      }, inherit: a3.Container, extend: { at: function(t4, e4, i3) {
        return this.put(new a3.Stop()).update(t4, e4, i3);
      }, update: function(t4) {
        return this.clear(), "function" == typeof t4 && t4.call(this, this), this;
      }, fill: function() {
        return "url(#" + this.id() + ")";
      }, toString: function() {
        return this.fill();
      }, attr: function(t4, e4, i3) {
        return "transform" == t4 && (t4 = "gradientTransform"), a3.Container.prototype.attr.call(this, t4, e4, i3);
      } }, construct: { gradient: function(t4, e4) {
        return this.defs().gradient(t4, e4);
      } } }), a3.extend(a3.Gradient, a3.FX, { from: function(t4, e4) {
        return "radial" == (this._target || this).type ? this.attr({ fx: new a3.Number(t4), fy: new a3.Number(e4) }) : this.attr({ x1: new a3.Number(t4), y1: new a3.Number(e4) });
      }, to: function(t4, e4) {
        return "radial" == (this._target || this).type ? this.attr({ cx: new a3.Number(t4), cy: new a3.Number(e4) }) : this.attr({ x2: new a3.Number(t4), y2: new a3.Number(e4) });
      } }), a3.extend(a3.Defs, { gradient: function(t4, e4) {
        return this.put(new a3.Gradient(t4)).update(e4);
      } }), a3.Stop = a3.invent({ create: "stop", inherit: a3.Element, extend: { update: function(t4) {
        return ("number" == typeof t4 || t4 instanceof a3.Number) && (t4 = { offset: arguments[0], color: arguments[1], opacity: arguments[2] }), null != t4.opacity && this.attr("stop-opacity", t4.opacity), null != t4.color && this.attr("stop-color", t4.color), null != t4.offset && this.attr("offset", new a3.Number(t4.offset)), this;
      } } }), a3.Pattern = a3.invent({ create: "pattern", inherit: a3.Container, extend: { fill: function() {
        return "url(#" + this.id() + ")";
      }, update: function(t4) {
        return this.clear(), "function" == typeof t4 && t4.call(this, this), this;
      }, toString: function() {
        return this.fill();
      }, attr: function(t4, e4, i3) {
        return "transform" == t4 && (t4 = "patternTransform"), a3.Container.prototype.attr.call(this, t4, e4, i3);
      } }, construct: { pattern: function(t4, e4, i3) {
        return this.defs().pattern(t4, e4, i3);
      } } }), a3.extend(a3.Defs, { pattern: function(t4, e4, i3) {
        return this.put(new a3.Pattern()).update(i3).attr({ x: 0, y: 0, width: t4, height: e4, patternUnits: "userSpaceOnUse" });
      } }), a3.Shape = a3.invent({ create: function(t4) {
        this.constructor.call(this, t4);
      }, inherit: a3.Element }), a3.Symbol = a3.invent({ create: "symbol", inherit: a3.Container, construct: { symbol: function() {
        return this.put(new a3.Symbol());
      } } }), a3.Use = a3.invent({ create: "use", inherit: a3.Shape, extend: { element: function(t4, e4) {
        return this.attr("href", (e4 || "") + "#" + t4, a3.xlink);
      } }, construct: { use: function(t4, e4) {
        return this.put(new a3.Use()).element(t4, e4);
      } } }), a3.Rect = a3.invent({ create: "rect", inherit: a3.Shape, construct: { rect: function(t4, e4) {
        return this.put(new a3.Rect()).size(t4, e4);
      } } }), a3.Circle = a3.invent({ create: "circle", inherit: a3.Shape, construct: { circle: function(t4) {
        return this.put(new a3.Circle()).rx(new a3.Number(t4).divide(2)).move(0, 0);
      } } }), a3.extend(a3.Circle, a3.FX, { rx: function(t4) {
        return this.attr("r", t4);
      }, ry: function(t4) {
        return this.rx(t4);
      } }), a3.Ellipse = a3.invent({ create: "ellipse", inherit: a3.Shape, construct: { ellipse: function(t4, e4) {
        return this.put(new a3.Ellipse()).size(t4, e4).move(0, 0);
      } } }), a3.extend(a3.Ellipse, a3.Rect, a3.FX, { rx: function(t4) {
        return this.attr("rx", t4);
      }, ry: function(t4) {
        return this.attr("ry", t4);
      } }), a3.extend(a3.Circle, a3.Ellipse, { x: function(t4) {
        return null == t4 ? this.cx() - this.rx() : this.cx(t4 + this.rx());
      }, y: function(t4) {
        return null == t4 ? this.cy() - this.ry() : this.cy(t4 + this.ry());
      }, cx: function(t4) {
        return null == t4 ? this.attr("cx") : this.attr("cx", t4);
      }, cy: function(t4) {
        return null == t4 ? this.attr("cy") : this.attr("cy", t4);
      }, width: function(t4) {
        return null == t4 ? 2 * this.rx() : this.rx(new a3.Number(t4).divide(2));
      }, height: function(t4) {
        return null == t4 ? 2 * this.ry() : this.ry(new a3.Number(t4).divide(2));
      }, size: function(t4, e4) {
        var i3 = u3(this, t4, e4);
        return this.rx(new a3.Number(i3.width).divide(2)).ry(new a3.Number(i3.height).divide(2));
      } }), a3.Line = a3.invent({ create: "line", inherit: a3.Shape, extend: { array: function() {
        return new a3.PointArray([[this.attr("x1"), this.attr("y1")], [this.attr("x2"), this.attr("y2")]]);
      }, plot: function(t4, e4, i3, s3) {
        return null == t4 ? this.array() : (t4 = void 0 !== e4 ? { x1: t4, y1: e4, x2: i3, y2: s3 } : new a3.PointArray(t4).toLine(), this.attr(t4));
      }, move: function(t4, e4) {
        return this.attr(this.array().move(t4, e4).toLine());
      }, size: function(t4, e4) {
        var i3 = u3(this, t4, e4);
        return this.attr(this.array().size(i3.width, i3.height).toLine());
      } }, construct: { line: function(t4, e4, i3, s3) {
        return a3.Line.prototype.plot.apply(this.put(new a3.Line()), null != t4 ? [t4, e4, i3, s3] : [0, 0, 0, 0]);
      } } }), a3.Polyline = a3.invent({ create: "polyline", inherit: a3.Shape, construct: { polyline: function(t4) {
        return this.put(new a3.Polyline()).plot(t4 || new a3.PointArray());
      } } }), a3.Polygon = a3.invent({ create: "polygon", inherit: a3.Shape, construct: { polygon: function(t4) {
        return this.put(new a3.Polygon()).plot(t4 || new a3.PointArray());
      } } }), a3.extend(a3.Polyline, a3.Polygon, { array: function() {
        return this._array || (this._array = new a3.PointArray(this.attr("points")));
      }, plot: function(t4) {
        return null == t4 ? this.array() : this.clear().attr("points", "string" == typeof t4 ? t4 : this._array = new a3.PointArray(t4));
      }, clear: function() {
        return delete this._array, this;
      }, move: function(t4, e4) {
        return this.attr("points", this.array().move(t4, e4));
      }, size: function(t4, e4) {
        var i3 = u3(this, t4, e4);
        return this.attr("points", this.array().size(i3.width, i3.height));
      } }), a3.extend(a3.Line, a3.Polyline, a3.Polygon, { morphArray: a3.PointArray, x: function(t4) {
        return null == t4 ? this.bbox().x : this.move(t4, this.bbox().y);
      }, y: function(t4) {
        return null == t4 ? this.bbox().y : this.move(this.bbox().x, t4);
      }, width: function(t4) {
        var e4 = this.bbox();
        return null == t4 ? e4.width : this.size(t4, e4.height);
      }, height: function(t4) {
        var e4 = this.bbox();
        return null == t4 ? e4.height : this.size(e4.width, t4);
      } }), a3.Path = a3.invent({ create: "path", inherit: a3.Shape, extend: { morphArray: a3.PathArray, array: function() {
        return this._array || (this._array = new a3.PathArray(this.attr("d")));
      }, plot: function(t4) {
        return null == t4 ? this.array() : this.clear().attr("d", "string" == typeof t4 ? t4 : this._array = new a3.PathArray(t4));
      }, clear: function() {
        return delete this._array, this;
      } }, construct: { path: function(t4) {
        return this.put(new a3.Path()).plot(t4 || new a3.PathArray());
      } } }), a3.Image = a3.invent({ create: "image", inherit: a3.Shape, extend: { load: function(e4) {
        if (!e4)
          return this;
        var i3 = this, s3 = new t3.Image();
        return a3.on(s3, "load", function() {
          a3.off(s3);
          var t4 = i3.parent(a3.Pattern);
          null !== t4 && (0 == i3.width() && 0 == i3.height() && i3.size(s3.width, s3.height), t4 && 0 == t4.width() && 0 == t4.height() && t4.size(i3.width(), i3.height()), "function" == typeof i3._loaded && i3._loaded.call(i3, { width: s3.width, height: s3.height, ratio: s3.width / s3.height, url: e4 }));
        }), a3.on(s3, "error", function(t4) {
          a3.off(s3), "function" == typeof i3._error && i3._error.call(i3, t4);
        }), this.attr("href", s3.src = this.src = e4, a3.xlink);
      }, loaded: function(t4) {
        return this._loaded = t4, this;
      }, error: function(t4) {
        return this._error = t4, this;
      } }, construct: { image: function(t4, e4, i3) {
        return this.put(new a3.Image()).load(t4).size(e4 || 0, i3 || e4 || 0);
      } } }), a3.Text = a3.invent({ create: function() {
        this.constructor.call(this, a3.create("text")), this.dom.leading = new a3.Number(1.3), this._rebuild = true, this._build = false, this.attr("font-family", a3.defaults.attrs["font-family"]);
      }, inherit: a3.Shape, extend: { x: function(t4) {
        return null == t4 ? this.attr("x") : this.attr("x", t4);
      }, text: function(t4) {
        if (void 0 === t4) {
          t4 = "";
          for (var e4 = this.node.childNodes, i3 = 0, s3 = e4.length; i3 < s3; ++i3)
            0 != i3 && 3 != e4[i3].nodeType && 1 == a3.adopt(e4[i3]).dom.newLined && (t4 += "\n"), t4 += e4[i3].textContent;
          return t4;
        }
        if (this.clear().build(true), "function" == typeof t4)
          t4.call(this, this);
        else {
          i3 = 0;
          for (var r4 = (t4 = t4.split("\n")).length; i3 < r4; i3++)
            this.tspan(t4[i3]).newLine();
        }
        return this.build(false).rebuild();
      }, size: function(t4) {
        return this.attr("font-size", t4).rebuild();
      }, leading: function(t4) {
        return null == t4 ? this.dom.leading : (this.dom.leading = new a3.Number(t4), this.rebuild());
      }, lines: function() {
        var t4 = (this.textPath && this.textPath() || this).node, e4 = a3.utils.map(a3.utils.filterSVGElements(t4.childNodes), function(t5) {
          return a3.adopt(t5);
        });
        return new a3.Set(e4);
      }, rebuild: function(t4) {
        if ("boolean" == typeof t4 && (this._rebuild = t4), this._rebuild) {
          var e4 = this, i3 = 0, s3 = this.dom.leading * new a3.Number(this.attr("font-size"));
          this.lines().each(function() {
            this.dom.newLined && (e4.textPath() || this.attr("x", e4.attr("x")), "\n" == this.text() ? i3 += s3 : (this.attr("dy", s3 + i3), i3 = 0));
          }), this.fire("rebuild");
        }
        return this;
      }, build: function(t4) {
        return this._build = !!t4, this;
      }, setData: function(t4) {
        return this.dom = t4, this.dom.leading = new a3.Number(t4.leading || 1.3), this;
      } }, construct: { text: function(t4) {
        return this.put(new a3.Text()).text(t4);
      }, plain: function(t4) {
        return this.put(new a3.Text()).plain(t4);
      } } }), a3.Tspan = a3.invent({ create: "tspan", inherit: a3.Shape, extend: { text: function(t4) {
        return null == t4 ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t4 ? t4.call(this, this) : this.plain(t4), this);
      }, dx: function(t4) {
        return this.attr("dx", t4);
      }, dy: function(t4) {
        return this.attr("dy", t4);
      }, newLine: function() {
        var t4 = this.parent(a3.Text);
        return this.dom.newLined = true, this.dy(t4.dom.leading * t4.attr("font-size")).attr("x", t4.x());
      } } }), a3.extend(a3.Text, a3.Tspan, { plain: function(t4) {
        return false === this._build && this.clear(), this.node.appendChild(e3.createTextNode(t4)), this;
      }, tspan: function(t4) {
        var e4 = (this.textPath && this.textPath() || this).node, i3 = new a3.Tspan();
        return false === this._build && this.clear(), e4.appendChild(i3.node), i3.text(t4);
      }, clear: function() {
        for (var t4 = (this.textPath && this.textPath() || this).node; t4.hasChildNodes(); )
          t4.removeChild(t4.lastChild);
        return this;
      }, length: function() {
        return this.node.getComputedTextLength();
      } }), a3.TextPath = a3.invent({ create: "textPath", inherit: a3.Parent, parent: a3.Text, construct: { morphArray: a3.PathArray, array: function() {
        var t4 = this.track();
        return t4 ? t4.array() : null;
      }, plot: function(t4) {
        var e4 = this.track(), i3 = null;
        return e4 && (i3 = e4.plot(t4)), null == t4 ? i3 : this;
      }, track: function() {
        var t4 = this.textPath();
        if (t4)
          return t4.reference("href");
      }, textPath: function() {
        if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName)
          return a3.adopt(this.node.firstChild);
      } } }), a3.Nested = a3.invent({ create: function() {
        this.constructor.call(this, a3.create("svg")), this.style("overflow", "visible");
      }, inherit: a3.Container, construct: { nested: function() {
        return this.put(new a3.Nested());
      } } });
      var l3 = { stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"], fill: ["color", "opacity", "rule"], prefix: function(t4, e4) {
        return "color" == e4 ? t4 : t4 + "-" + e4;
      } };
      function h3(t4, e4, i3, s3) {
        return i3 + s3.replace(a3.regex.dots, " .");
      }
      function c3(t4) {
        return t4.toLowerCase().replace(/-(.)/g, function(t5, e4) {
          return e4.toUpperCase();
        });
      }
      function d3(t4) {
        return t4.charAt(0).toUpperCase() + t4.slice(1);
      }
      function g3(t4) {
        var e4 = t4.toString(16);
        return 1 == e4.length ? "0" + e4 : e4;
      }
      function u3(t4, e4, i3) {
        if (null == e4 || null == i3) {
          var a4 = t4.bbox();
          null == e4 ? e4 = a4.width / a4.height * i3 : null == i3 && (i3 = a4.height / a4.width * e4);
        }
        return { width: e4, height: i3 };
      }
      function f3(t4, e4, i3) {
        return { x: e4 * t4.a + i3 * t4.c + 0, y: e4 * t4.b + i3 * t4.d + 0 };
      }
      function p3(t4) {
        return { a: t4[0], b: t4[1], c: t4[2], d: t4[3], e: t4[4], f: t4[5] };
      }
      function x3(e4) {
        for (var i3 = e4.childNodes.length - 1; i3 >= 0; i3--)
          e4.childNodes[i3] instanceof t3.SVGElement && x3(e4.childNodes[i3]);
        return a3.adopt(e4).id(a3.eid(e4.nodeName));
      }
      function b3(t4) {
        return null == t4.x && (t4.x = 0, t4.y = 0, t4.width = 0, t4.height = 0), t4.w = t4.width, t4.h = t4.height, t4.x2 = t4.x + t4.width, t4.y2 = t4.y + t4.height, t4.cx = t4.x + t4.width / 2, t4.cy = t4.y + t4.height / 2, t4;
      }
      function v3(t4) {
        return Math.abs(t4) > 1e-37 ? t4 : 0;
      }
      ["fill", "stroke"].forEach(function(t4) {
        var e4 = {};
        e4[t4] = function(e5) {
          if (void 0 === e5)
            return this;
          if ("string" == typeof e5 || a3.Color.isRgb(e5) || e5 && "function" == typeof e5.fill)
            this.attr(t4, e5);
          else
            for (var i3 = l3[t4].length - 1; i3 >= 0; i3--)
              null != e5[l3[t4][i3]] && this.attr(l3.prefix(t4, l3[t4][i3]), e5[l3[t4][i3]]);
          return this;
        }, a3.extend(a3.Element, a3.FX, e4);
      }), a3.extend(a3.Element, a3.FX, { translate: function(t4, e4) {
        return this.transform({ x: t4, y: e4 });
      }, matrix: function(t4) {
        return this.attr("transform", new a3.Matrix(6 == arguments.length ? [].slice.call(arguments) : t4));
      }, opacity: function(t4) {
        return this.attr("opacity", t4);
      }, dx: function(t4) {
        return this.x(new a3.Number(t4).plus(this instanceof a3.FX ? 0 : this.x()), true);
      }, dy: function(t4) {
        return this.y(new a3.Number(t4).plus(this instanceof a3.FX ? 0 : this.y()), true);
      } }), a3.extend(a3.Path, { length: function() {
        return this.node.getTotalLength();
      }, pointAt: function(t4) {
        return this.node.getPointAtLength(t4);
      } }), a3.Set = a3.invent({ create: function(t4) {
        Array.isArray(t4) ? this.members = t4 : this.clear();
      }, extend: { add: function() {
        for (var t4 = [].slice.call(arguments), e4 = 0, i3 = t4.length; e4 < i3; e4++)
          this.members.push(t4[e4]);
        return this;
      }, remove: function(t4) {
        var e4 = this.index(t4);
        return e4 > -1 && this.members.splice(e4, 1), this;
      }, each: function(t4) {
        for (var e4 = 0, i3 = this.members.length; e4 < i3; e4++)
          t4.apply(this.members[e4], [e4, this.members]);
        return this;
      }, clear: function() {
        return this.members = [], this;
      }, length: function() {
        return this.members.length;
      }, has: function(t4) {
        return this.index(t4) >= 0;
      }, index: function(t4) {
        return this.members.indexOf(t4);
      }, get: function(t4) {
        return this.members[t4];
      }, first: function() {
        return this.get(0);
      }, last: function() {
        return this.get(this.members.length - 1);
      }, valueOf: function() {
        return this.members;
      } }, construct: { set: function(t4) {
        return new a3.Set(t4);
      } } }), a3.FX.Set = a3.invent({ create: function(t4) {
        this.set = t4;
      } }), a3.Set.inherit = function() {
        var t4 = [];
        for (var e4 in a3.Shape.prototype)
          "function" == typeof a3.Shape.prototype[e4] && "function" != typeof a3.Set.prototype[e4] && t4.push(e4);
        for (var e4 in t4.forEach(function(t5) {
          a3.Set.prototype[t5] = function() {
            for (var e5 = 0, i3 = this.members.length; e5 < i3; e5++)
              this.members[e5] && "function" == typeof this.members[e5][t5] && this.members[e5][t5].apply(this.members[e5], arguments);
            return "animate" == t5 ? this.fx || (this.fx = new a3.FX.Set(this)) : this;
          };
        }), t4 = [], a3.FX.prototype)
          "function" == typeof a3.FX.prototype[e4] && "function" != typeof a3.FX.Set.prototype[e4] && t4.push(e4);
        t4.forEach(function(t5) {
          a3.FX.Set.prototype[t5] = function() {
            for (var e5 = 0, i3 = this.set.members.length; e5 < i3; e5++)
              this.set.members[e5].fx[t5].apply(this.set.members[e5].fx, arguments);
            return this;
          };
        });
      }, a3.extend(a3.Element, {}), a3.extend(a3.Element, { remember: function(t4, e4) {
        if ("object" === i2(arguments[0]))
          for (var a4 in t4)
            this.remember(a4, t4[a4]);
        else {
          if (1 == arguments.length)
            return this.memory()[t4];
          this.memory()[t4] = e4;
        }
        return this;
      }, forget: function() {
        if (0 == arguments.length)
          this._memory = {};
        else
          for (var t4 = arguments.length - 1; t4 >= 0; t4--)
            delete this.memory()[arguments[t4]];
        return this;
      }, memory: function() {
        return this._memory || (this._memory = {});
      } }), a3.get = function(t4) {
        var i3 = e3.getElementById(function(t5) {
          var e4 = (t5 || "").toString().match(a3.regex.reference);
          if (e4)
            return e4[1];
        }(t4) || t4);
        return a3.adopt(i3);
      }, a3.select = function(t4, i3) {
        return new a3.Set(a3.utils.map((i3 || e3).querySelectorAll(t4), function(t5) {
          return a3.adopt(t5);
        }));
      }, a3.extend(a3.Parent, { select: function(t4) {
        return a3.select(t4, this.node);
      } });
      var m3 = "abcdef".split("");
      if ("function" != typeof t3.CustomEvent) {
        var y2 = function(t4, i3) {
          i3 = i3 || { bubbles: false, cancelable: false, detail: void 0 };
          var a4 = e3.createEvent("CustomEvent");
          return a4.initCustomEvent(t4, i3.bubbles, i3.cancelable, i3.detail), a4;
        };
        y2.prototype = t3.Event.prototype, a3.CustomEvent = y2;
      } else
        a3.CustomEvent = t3.CustomEvent;
      return a3;
    }, "object" === i2(exports) && true ? module2.exports = Xt.document ? Et2(Xt, Xt.document) : function(t3) {
      return Et2(t3, t3.document);
    } : Xt.SVG = Et2(Xt, Xt.document), function() {
      SVG.Filter = SVG.invent({ create: "filter", inherit: SVG.Parent, extend: { source: "SourceGraphic", sourceAlpha: "SourceAlpha", background: "BackgroundImage", backgroundAlpha: "BackgroundAlpha", fill: "FillPaint", stroke: "StrokePaint", autoSetIn: true, put: function(t4, e4) {
        return this.add(t4, e4), !t4.attr("in") && this.autoSetIn && t4.attr("in", this.source), t4.attr("result") || t4.attr("result", t4), t4;
      }, blend: function(t4, e4, i4) {
        return this.put(new SVG.BlendEffect(t4, e4, i4));
      }, colorMatrix: function(t4, e4) {
        return this.put(new SVG.ColorMatrixEffect(t4, e4));
      }, convolveMatrix: function(t4) {
        return this.put(new SVG.ConvolveMatrixEffect(t4));
      }, componentTransfer: function(t4) {
        return this.put(new SVG.ComponentTransferEffect(t4));
      }, composite: function(t4, e4, i4) {
        return this.put(new SVG.CompositeEffect(t4, e4, i4));
      }, flood: function(t4, e4) {
        return this.put(new SVG.FloodEffect(t4, e4));
      }, offset: function(t4, e4) {
        return this.put(new SVG.OffsetEffect(t4, e4));
      }, image: function(t4) {
        return this.put(new SVG.ImageEffect(t4));
      }, merge: function() {
        var t4 = [void 0];
        for (var e4 in arguments)
          t4.push(arguments[e4]);
        return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t4))());
      }, gaussianBlur: function(t4, e4) {
        return this.put(new SVG.GaussianBlurEffect(t4, e4));
      }, morphology: function(t4, e4) {
        return this.put(new SVG.MorphologyEffect(t4, e4));
      }, diffuseLighting: function(t4, e4, i4) {
        return this.put(new SVG.DiffuseLightingEffect(t4, e4, i4));
      }, displacementMap: function(t4, e4, i4, a4, s3) {
        return this.put(new SVG.DisplacementMapEffect(t4, e4, i4, a4, s3));
      }, specularLighting: function(t4, e4, i4, a4) {
        return this.put(new SVG.SpecularLightingEffect(t4, e4, i4, a4));
      }, tile: function() {
        return this.put(new SVG.TileEffect());
      }, turbulence: function(t4, e4, i4, a4, s3) {
        return this.put(new SVG.TurbulenceEffect(t4, e4, i4, a4, s3));
      }, toString: function() {
        return "url(#" + this.attr("id") + ")";
      } } }), SVG.extend(SVG.Defs, { filter: function(t4) {
        var e4 = this.put(new SVG.Filter());
        return "function" == typeof t4 && t4.call(e4, e4), e4;
      } }), SVG.extend(SVG.Container, { filter: function(t4) {
        return this.defs().filter(t4);
      } }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, { filter: function(t4) {
        return this.filterer = t4 instanceof SVG.Element ? t4 : this.doc().filter(t4), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer;
      }, unfilter: function(t4) {
        return this.filterer && true === t4 && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
      } }), SVG.Effect = SVG.invent({ create: function() {
        this.constructor.call(this);
      }, inherit: SVG.Element, extend: { in: function(t4) {
        return null == t4 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t4);
      }, result: function(t4) {
        return null == t4 ? this.attr("result") : this.attr("result", t4);
      }, toString: function() {
        return this.result();
      } } }), SVG.ParentEffect = SVG.invent({ create: function() {
        this.constructor.call(this);
      }, inherit: SVG.Parent, extend: { in: function(t4) {
        return null == t4 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t4);
      }, result: function(t4) {
        return null == t4 ? this.attr("result") : this.attr("result", t4);
      }, toString: function() {
        return this.result();
      } } });
      var t3 = { blend: function(t4, e4) {
        return this.parent() && this.parent().blend(this, t4, e4);
      }, colorMatrix: function(t4, e4) {
        return this.parent() && this.parent().colorMatrix(t4, e4).in(this);
      }, convolveMatrix: function(t4) {
        return this.parent() && this.parent().convolveMatrix(t4).in(this);
      }, componentTransfer: function(t4) {
        return this.parent() && this.parent().componentTransfer(t4).in(this);
      }, composite: function(t4, e4) {
        return this.parent() && this.parent().composite(this, t4, e4);
      }, flood: function(t4, e4) {
        return this.parent() && this.parent().flood(t4, e4);
      }, offset: function(t4, e4) {
        return this.parent() && this.parent().offset(t4, e4).in(this);
      }, image: function(t4) {
        return this.parent() && this.parent().image(t4);
      }, merge: function() {
        return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));
      }, gaussianBlur: function(t4, e4) {
        return this.parent() && this.parent().gaussianBlur(t4, e4).in(this);
      }, morphology: function(t4, e4) {
        return this.parent() && this.parent().morphology(t4, e4).in(this);
      }, diffuseLighting: function(t4, e4, i4) {
        return this.parent() && this.parent().diffuseLighting(t4, e4, i4).in(this);
      }, displacementMap: function(t4, e4, i4, a4) {
        return this.parent() && this.parent().displacementMap(this, t4, e4, i4, a4);
      }, specularLighting: function(t4, e4, i4, a4) {
        return this.parent() && this.parent().specularLighting(t4, e4, i4, a4).in(this);
      }, tile: function() {
        return this.parent() && this.parent().tile().in(this);
      }, turbulence: function(t4, e4, i4, a4, s3) {
        return this.parent() && this.parent().turbulence(t4, e4, i4, a4, s3).in(this);
      } };
      SVG.extend(SVG.Effect, t3), SVG.extend(SVG.ParentEffect, t3), SVG.ChildEffect = SVG.invent({ create: function() {
        this.constructor.call(this);
      }, inherit: SVG.Element, extend: { in: function(t4) {
        this.attr("in", t4);
      } } });
      var e3 = { blend: function(t4, e4, i4) {
        this.attr({ in: t4, in2: e4, mode: i4 || "normal" });
      }, colorMatrix: function(t4, e4) {
        "matrix" == t4 && (e4 = s2(e4)), this.attr({ type: t4, values: void 0 === e4 ? null : e4 });
      }, convolveMatrix: function(t4) {
        t4 = s2(t4), this.attr({ order: Math.sqrt(t4.split(" ").length), kernelMatrix: t4 });
      }, composite: function(t4, e4, i4) {
        this.attr({ in: t4, in2: e4, operator: i4 });
      }, flood: function(t4, e4) {
        this.attr("flood-color", t4), null != e4 && this.attr("flood-opacity", e4);
      }, offset: function(t4, e4) {
        this.attr({ dx: t4, dy: e4 });
      }, image: function(t4) {
        this.attr("href", t4, SVG.xlink);
      }, displacementMap: function(t4, e4, i4, a4, s3) {
        this.attr({ in: t4, in2: e4, scale: i4, xChannelSelector: a4, yChannelSelector: s3 });
      }, gaussianBlur: function(t4, e4) {
        null != t4 || null != e4 ? this.attr("stdDeviation", r3(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0");
      }, morphology: function(t4, e4) {
        this.attr({ operator: t4, radius: e4 });
      }, tile: function() {
      }, turbulence: function(t4, e4, i4, a4, s3) {
        this.attr({ numOctaves: e4, seed: i4, stitchTiles: a4, baseFrequency: t4, type: s3 });
      } }, i3 = { merge: function() {
        var t4;
        if (arguments[0] instanceof SVG.Set) {
          var e4 = this;
          arguments[0].each(function(t5) {
            this instanceof SVG.MergeNode ? e4.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e4.put(new SVG.MergeNode(this));
          });
        } else {
          t4 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
          for (var i4 = 0; i4 < t4.length; i4++)
            t4[i4] instanceof SVG.MergeNode ? this.put(t4[i4]) : this.put(new SVG.MergeNode(t4[i4]));
        }
      }, componentTransfer: function(t4) {
        if (this.rgb = new SVG.Set(), ["r", "g", "b", "a"].forEach(function(t5) {
          this[t5] = new SVG["Func" + t5.toUpperCase()]("identity"), this.rgb.add(this[t5]), this.node.appendChild(this[t5].node);
        }.bind(this)), t4)
          for (var e4 in t4.rgb && (["r", "g", "b"].forEach(function(e5) {
            this[e5].attr(t4.rgb);
          }.bind(this)), delete t4.rgb), t4)
            this[e4].attr(t4[e4]);
      }, diffuseLighting: function(t4, e4, i4) {
        this.attr({ surfaceScale: t4, diffuseConstant: e4, kernelUnitLength: i4 });
      }, specularLighting: function(t4, e4, i4, a4) {
        this.attr({ surfaceScale: t4, diffuseConstant: e4, specularExponent: i4, kernelUnitLength: a4 });
      } }, a3 = { distantLight: function(t4, e4) {
        this.attr({ azimuth: t4, elevation: e4 });
      }, pointLight: function(t4, e4, i4) {
        this.attr({ x: t4, y: e4, z: i4 });
      }, spotLight: function(t4, e4, i4, a4, s3, r4) {
        this.attr({ x: t4, y: e4, z: i4, pointsAtX: a4, pointsAtY: s3, pointsAtZ: r4 });
      }, mergeNode: function(t4) {
        this.attr("in", t4);
      } };
      function s2(t4) {
        return Array.isArray(t4) && (t4 = new SVG.Array(t4)), t4.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
      }
      function r3(t4) {
        if (!Array.isArray(t4))
          return t4;
        for (var e4 = 0, i4 = t4.length, a4 = []; e4 < i4; e4++)
          a4.push(t4[e4]);
        return a4.join(" ");
      }
      function o3() {
        var t4 = function() {
        };
        for (var e4 in "function" == typeof arguments[arguments.length - 1] && (t4 = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments)
          for (var i4 in arguments[e4])
            t4(arguments[e4][i4], i4, arguments[e4]);
      }
      ["r", "g", "b", "a"].forEach(function(t4) {
        a3["Func" + t4.toUpperCase()] = function(t5) {
          switch (this.attr("type", t5), t5) {
            case "table":
              this.attr("tableValues", arguments[1]);
              break;
            case "linear":
              this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
              break;
            case "gamma":
              this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
          }
        };
      }), o3(e3, function(t4, e4) {
        var i4 = e4.charAt(0).toUpperCase() + e4.slice(1);
        SVG[i4 + "Effect"] = SVG.invent({ create: function() {
          this.constructor.call(this, SVG.create("fe" + i4)), t4.apply(this, arguments), this.result(this.attr("id") + "Out");
        }, inherit: SVG.Effect, extend: {} });
      }), o3(i3, function(t4, e4) {
        var i4 = e4.charAt(0).toUpperCase() + e4.slice(1);
        SVG[i4 + "Effect"] = SVG.invent({ create: function() {
          this.constructor.call(this, SVG.create("fe" + i4)), t4.apply(this, arguments), this.result(this.attr("id") + "Out");
        }, inherit: SVG.ParentEffect, extend: {} });
      }), o3(a3, function(t4, e4) {
        var i4 = e4.charAt(0).toUpperCase() + e4.slice(1);
        SVG[i4] = SVG.invent({ create: function() {
          this.constructor.call(this, SVG.create("fe" + i4)), t4.apply(this, arguments);
        }, inherit: SVG.ChildEffect, extend: {} });
      }), SVG.extend(SVG.MergeEffect, { in: function(t4) {
        return t4 instanceof SVG.MergeNode ? this.add(t4, 0) : this.add(new SVG.MergeNode(t4), 0), this;
      } }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, { in2: function(t4) {
        return null == t4 ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t4);
      } }), SVG.filter = { sepiatone: [0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0, 0, 0, 1, 0] };
    }.call(void 0), function() {
      function t3(t4, s3, r3, o3, n3, l3, h3) {
        for (var c3 = t4.slice(s3, r3 || h3), d3 = o3.slice(n3, l3 || h3), g3 = 0, u3 = { pos: [0, 0], start: [0, 0] }, f3 = { pos: [0, 0], start: [0, 0] }; ; ) {
          if (c3[g3] = e3.call(u3, c3[g3]), d3[g3] = e3.call(f3, d3[g3]), c3[g3][0] != d3[g3][0] || "M" == c3[g3][0] || "A" == c3[g3][0] && (c3[g3][4] != d3[g3][4] || c3[g3][5] != d3[g3][5]) ? (Array.prototype.splice.apply(c3, [g3, 1].concat(a3.call(u3, c3[g3]))), Array.prototype.splice.apply(d3, [g3, 1].concat(a3.call(f3, d3[g3])))) : (c3[g3] = i3.call(u3, c3[g3]), d3[g3] = i3.call(f3, d3[g3])), ++g3 == c3.length && g3 == d3.length)
            break;
          g3 == c3.length && c3.push(["C", u3.pos[0], u3.pos[1], u3.pos[0], u3.pos[1], u3.pos[0], u3.pos[1]]), g3 == d3.length && d3.push(["C", f3.pos[0], f3.pos[1], f3.pos[0], f3.pos[1], f3.pos[0], f3.pos[1]]);
        }
        return { start: c3, dest: d3 };
      }
      function e3(t4) {
        switch (t4[0]) {
          case "z":
          case "Z":
            t4[0] = "L", t4[1] = this.start[0], t4[2] = this.start[1];
            break;
          case "H":
            t4[0] = "L", t4[2] = this.pos[1];
            break;
          case "V":
            t4[0] = "L", t4[2] = t4[1], t4[1] = this.pos[0];
            break;
          case "T":
            t4[0] = "Q", t4[3] = t4[1], t4[4] = t4[2], t4[1] = this.reflection[1], t4[2] = this.reflection[0];
            break;
          case "S":
            t4[0] = "C", t4[6] = t4[4], t4[5] = t4[3], t4[4] = t4[2], t4[3] = t4[1], t4[2] = this.reflection[1], t4[1] = this.reflection[0];
        }
        return t4;
      }
      function i3(t4) {
        var e4 = t4.length;
        return this.pos = [t4[e4 - 2], t4[e4 - 1]], -1 != "SCQT".indexOf(t4[0]) && (this.reflection = [2 * this.pos[0] - t4[e4 - 4], 2 * this.pos[1] - t4[e4 - 3]]), t4;
      }
      function a3(t4) {
        var e4 = [t4];
        switch (t4[0]) {
          case "M":
            return this.pos = this.start = [t4[1], t4[2]], e4;
          case "L":
            t4[5] = t4[3] = t4[1], t4[6] = t4[4] = t4[2], t4[1] = this.pos[0], t4[2] = this.pos[1];
            break;
          case "Q":
            t4[6] = t4[4], t4[5] = t4[3], t4[4] = 1 * t4[4] / 3 + 2 * t4[2] / 3, t4[3] = 1 * t4[3] / 3 + 2 * t4[1] / 3, t4[2] = 1 * this.pos[1] / 3 + 2 * t4[2] / 3, t4[1] = 1 * this.pos[0] / 3 + 2 * t4[1] / 3;
            break;
          case "A":
            e4 = function(t5, e5) {
              var i4, a4, s3, r3, o3, n3, l3, h3, c3, d3, g3, u3, f3, p3, x3, b3, v3, m3, y2, w2, k3, A3, S3, C3, L3, P3, T3 = Math.abs(e5[1]), M3 = Math.abs(e5[2]), I3 = e5[3] % 360, z3 = e5[4], X3 = e5[5], E3 = e5[6], Y3 = e5[7], F3 = new SVG.Point(t5), R3 = new SVG.Point(E3, Y3), D3 = [];
              if (0 === T3 || 0 === M3 || F3.x === R3.x && F3.y === R3.y)
                return [["C", F3.x, F3.y, R3.x, R3.y, R3.x, R3.y]];
              i4 = new SVG.Point((F3.x - R3.x) / 2, (F3.y - R3.y) / 2).transform(new SVG.Matrix().rotate(I3)), (a4 = i4.x * i4.x / (T3 * T3) + i4.y * i4.y / (M3 * M3)) > 1 && (T3 *= a4 = Math.sqrt(a4), M3 *= a4);
              s3 = new SVG.Matrix().rotate(I3).scale(1 / T3, 1 / M3).rotate(-I3), F3 = F3.transform(s3), R3 = R3.transform(s3), r3 = [R3.x - F3.x, R3.y - F3.y], n3 = r3[0] * r3[0] + r3[1] * r3[1], o3 = Math.sqrt(n3), r3[0] /= o3, r3[1] /= o3, l3 = n3 < 4 ? Math.sqrt(1 - n3 / 4) : 0, z3 === X3 && (l3 *= -1);
              h3 = new SVG.Point((R3.x + F3.x) / 2 + l3 * -r3[1], (R3.y + F3.y) / 2 + l3 * r3[0]), c3 = new SVG.Point(F3.x - h3.x, F3.y - h3.y), d3 = new SVG.Point(R3.x - h3.x, R3.y - h3.y), g3 = Math.acos(c3.x / Math.sqrt(c3.x * c3.x + c3.y * c3.y)), c3.y < 0 && (g3 *= -1);
              u3 = Math.acos(d3.x / Math.sqrt(d3.x * d3.x + d3.y * d3.y)), d3.y < 0 && (u3 *= -1);
              X3 && g3 > u3 && (u3 += 2 * Math.PI);
              !X3 && g3 < u3 && (u3 -= 2 * Math.PI);
              for (p3 = Math.ceil(2 * Math.abs(g3 - u3) / Math.PI), b3 = [], v3 = g3, f3 = (u3 - g3) / p3, x3 = 4 * Math.tan(f3 / 4) / 3, k3 = 0; k3 <= p3; k3++)
                y2 = Math.cos(v3), m3 = Math.sin(v3), w2 = new SVG.Point(h3.x + y2, h3.y + m3), b3[k3] = [new SVG.Point(w2.x + x3 * m3, w2.y - x3 * y2), w2, new SVG.Point(w2.x - x3 * m3, w2.y + x3 * y2)], v3 += f3;
              for (b3[0][0] = b3[0][1].clone(), b3[b3.length - 1][2] = b3[b3.length - 1][1].clone(), s3 = new SVG.Matrix().rotate(I3).scale(T3, M3).rotate(-I3), k3 = 0, A3 = b3.length; k3 < A3; k3++)
                b3[k3][0] = b3[k3][0].transform(s3), b3[k3][1] = b3[k3][1].transform(s3), b3[k3][2] = b3[k3][2].transform(s3);
              for (k3 = 1, A3 = b3.length; k3 < A3; k3++)
                S3 = (w2 = b3[k3 - 1][2]).x, C3 = w2.y, L3 = (w2 = b3[k3][0]).x, P3 = w2.y, E3 = (w2 = b3[k3][1]).x, Y3 = w2.y, D3.push(["C", S3, C3, L3, P3, E3, Y3]);
              return D3;
            }(this.pos, t4), t4 = e4[0];
        }
        return t4[0] = "C", this.pos = [t4[5], t4[6]], this.reflection = [2 * t4[5] - t4[3], 2 * t4[6] - t4[4]], e4;
      }
      function s2(t4, e4) {
        if (false === e4)
          return false;
        for (var i4 = e4, a4 = t4.length; i4 < a4; ++i4)
          if ("M" == t4[i4][0])
            return i4;
        return false;
      }
      SVG.extend(SVG.PathArray, { morph: function(e4) {
        for (var i4 = this.value, a4 = this.parse(e4), r3 = 0, o3 = 0, n3 = false, l3 = false; false !== r3 || false !== o3; ) {
          var h3;
          n3 = s2(i4, false !== r3 && r3 + 1), l3 = s2(a4, false !== o3 && o3 + 1), false === r3 && (r3 = 0 == (h3 = new SVG.PathArray(c3.start).bbox()).height || 0 == h3.width ? i4.push(i4[0]) - 1 : i4.push(["M", h3.x + h3.width / 2, h3.y + h3.height / 2]) - 1), false === o3 && (o3 = 0 == (h3 = new SVG.PathArray(c3.dest).bbox()).height || 0 == h3.width ? a4.push(a4[0]) - 1 : a4.push(["M", h3.x + h3.width / 2, h3.y + h3.height / 2]) - 1);
          var c3 = t3(i4, r3, n3, a4, o3, l3);
          i4 = i4.slice(0, r3).concat(c3.start, false === n3 ? [] : i4.slice(n3)), a4 = a4.slice(0, o3).concat(c3.dest, false === l3 ? [] : a4.slice(l3)), r3 = false !== n3 && r3 + c3.start.length, o3 = false !== l3 && o3 + c3.dest.length;
        }
        return this.value = i4, this.destination = new SVG.PathArray(), this.destination.value = a4, this;
      } });
    }(), function() {
      function t3(t4) {
        t4.remember("_draggable", this), this.el = t4;
      }
      t3.prototype.init = function(t4, e3) {
        var i3 = this;
        this.constraint = t4, this.value = e3, this.el.on("mousedown.drag", function(t5) {
          i3.start(t5);
        }), this.el.on("touchstart.drag", function(t5) {
          i3.start(t5);
        });
      }, t3.prototype.transformPoint = function(t4, e3) {
        var i3 = (t4 = t4 || window.event).changedTouches && t4.changedTouches[0] || t4;
        return this.p.x = i3.clientX - (e3 || 0), this.p.y = i3.clientY, this.p.matrixTransform(this.m);
      }, t3.prototype.getBBox = function() {
        var t4 = this.el.bbox();
        return this.el instanceof SVG.Nested && (t4 = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t4.x = this.el.x(), t4.y = this.el.y()), t4;
      }, t3.prototype.start = function(t4) {
        if ("click" != t4.type && "mousedown" != t4.type && "mousemove" != t4.type || 1 == (t4.which || t4.buttons)) {
          var e3 = this;
          if (this.el.fire("beforedrag", { event: t4, handler: this }), !this.el.event().defaultPrevented) {
            t4.preventDefault(), t4.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
            var i3, a3 = this.getBBox();
            if (this.el instanceof SVG.Text)
              switch (i3 = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")) {
                case "middle":
                  i3 /= 2;
                  break;
                case "start":
                  i3 = 0;
              }
            this.startPoints = { point: this.transformPoint(t4, i3), box: a3, transform: this.el.transform() }, SVG.on(window, "mousemove.drag", function(t5) {
              e3.drag(t5);
            }), SVG.on(window, "touchmove.drag", function(t5) {
              e3.drag(t5);
            }), SVG.on(window, "mouseup.drag", function(t5) {
              e3.end(t5);
            }), SVG.on(window, "touchend.drag", function(t5) {
              e3.end(t5);
            }), this.el.fire("dragstart", { event: t4, p: this.startPoints.point, m: this.m, handler: this });
          }
        }
      }, t3.prototype.drag = function(t4) {
        var e3 = this.getBBox(), i3 = this.transformPoint(t4), a3 = this.startPoints.box.x + i3.x - this.startPoints.point.x, s2 = this.startPoints.box.y + i3.y - this.startPoints.point.y, r3 = this.constraint, o3 = i3.x - this.startPoints.point.x, n3 = i3.y - this.startPoints.point.y;
        if (this.el.fire("dragmove", { event: t4, p: i3, m: this.m, handler: this }), this.el.event().defaultPrevented)
          return i3;
        if ("function" == typeof r3) {
          var l3 = r3.call(this.el, a3, s2, this.m);
          "boolean" == typeof l3 && (l3 = { x: l3, y: l3 }), true === l3.x ? this.el.x(a3) : false !== l3.x && this.el.x(l3.x), true === l3.y ? this.el.y(s2) : false !== l3.y && this.el.y(l3.y);
        } else
          "object" == typeof r3 && (null != r3.minX && a3 < r3.minX ? o3 = (a3 = r3.minX) - this.startPoints.box.x : null != r3.maxX && a3 > r3.maxX - e3.width && (o3 = (a3 = r3.maxX - e3.width) - this.startPoints.box.x), null != r3.minY && s2 < r3.minY ? n3 = (s2 = r3.minY) - this.startPoints.box.y : null != r3.maxY && s2 > r3.maxY - e3.height && (n3 = (s2 = r3.maxY - e3.height) - this.startPoints.box.y), null != r3.snapToGrid && (a3 -= a3 % r3.snapToGrid, s2 -= s2 % r3.snapToGrid, o3 -= o3 % r3.snapToGrid, n3 -= n3 % r3.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({ x: o3, y: n3 }, true) : this.el.move(a3, s2));
        return i3;
      }, t3.prototype.end = function(t4) {
        var e3 = this.drag(t4);
        this.el.fire("dragend", { event: t4, p: e3, m: this.m, handler: this }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
      }, SVG.extend(SVG.Element, { draggable: function(e3, i3) {
        "function" != typeof e3 && "object" != typeof e3 || (i3 = e3, e3 = true);
        var a3 = this.remember("_draggable") || new t3(this);
        return (e3 = void 0 === e3 || e3) ? a3.init(i3 || {}, e3) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
      } });
    }.call(void 0), function() {
      function t3(t4) {
        this.el = t4, t4.remember("_selectHandler", this), this.pointSelection = { isSelected: false }, this.rectSelection = { isSelected: false }, this.pointsList = { lt: [0, 0], rt: ["width", 0], rb: ["width", "height"], lb: [0, "height"], t: ["width", 0], r: ["width", "height"], b: ["width", "height"], l: [0, "height"] }, this.pointCoord = function(t5, e3, i3) {
          var a3 = "string" != typeof t5 ? t5 : e3[t5];
          return i3 ? a3 / 2 : a3;
        }, this.pointCoords = function(t5, e3) {
          var i3 = this.pointsList[t5];
          return { x: this.pointCoord(i3[0], e3, "t" === t5 || "b" === t5), y: this.pointCoord(i3[1], e3, "r" === t5 || "l" === t5) };
        };
      }
      t3.prototype.init = function(t4, e3) {
        var i3 = this.el.bbox();
        this.options = {};
        var a3 = this.el.selectize.defaults.points;
        for (var s2 in this.el.selectize.defaults)
          this.options[s2] = this.el.selectize.defaults[s2], void 0 !== e3[s2] && (this.options[s2] = e3[s2]);
        var r3 = ["points", "pointsExclude"];
        for (var s2 in r3) {
          var o3 = this.options[r3[s2]];
          "string" == typeof o3 ? o3 = o3.length > 0 ? o3.split(/\s*,\s*/i) : [] : "boolean" == typeof o3 && "points" === r3[s2] && (o3 = o3 ? a3 : []), this.options[r3[s2]] = o3;
        }
        this.options.points = [a3, this.options.points].reduce(function(t5, e4) {
          return t5.filter(function(t6) {
            return e4.indexOf(t6) > -1;
          });
        }), this.options.points = [this.options.points, this.options.pointsExclude].reduce(function(t5, e4) {
          return t5.filter(function(t6) {
            return e4.indexOf(t6) < 0;
          });
        }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i3.x, i3.y)), this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t4) : this.selectRect(t4), this.observe(), this.cleanup();
      }, t3.prototype.selectPoints = function(t4) {
        return this.pointSelection.isSelected = t4, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;
      }, t3.prototype.getPointArray = function() {
        var t4 = this.el.bbox();
        return this.el.array().valueOf().map(function(e3) {
          return [e3[0] - t4.x, e3[1] - t4.y];
        });
      }, t3.prototype.drawPoints = function() {
        for (var t4 = this, e3 = this.getPointArray(), i3 = 0, a3 = e3.length; i3 < a3; ++i3) {
          var s2 = function(e4) {
            return function(i4) {
              (i4 = i4 || window.event).preventDefault ? i4.preventDefault() : i4.returnValue = false, i4.stopPropagation();
              var a4 = i4.pageX || i4.touches[0].pageX, s3 = i4.pageY || i4.touches[0].pageY;
              t4.el.fire("point", { x: a4, y: s3, i: e4, event: i4 });
            };
          }(i3), r3 = this.drawPoint(e3[i3][0], e3[i3][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", s2).on("mousedown", s2);
          this.pointSelection.set.add(r3);
        }
      }, t3.prototype.drawPoint = function(t4, e3) {
        var i3 = this.options.pointType;
        switch (i3) {
          case "circle":
            return this.drawCircle(t4, e3);
          case "rect":
            return this.drawRect(t4, e3);
          default:
            if ("function" == typeof i3)
              return i3.call(this, t4, e3);
            throw new Error("Unknown " + i3 + " point type!");
        }
      }, t3.prototype.drawCircle = function(t4, e3) {
        return this.nested.circle(this.options.pointSize).center(t4, e3);
      }, t3.prototype.drawRect = function(t4, e3) {
        return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t4, e3);
      }, t3.prototype.updatePointSelection = function() {
        var t4 = this.getPointArray();
        this.pointSelection.set.each(function(e3) {
          this.cx() === t4[e3][0] && this.cy() === t4[e3][1] || this.center(t4[e3][0], t4[e3][1]);
        });
      }, t3.prototype.updateRectSelection = function() {
        var t4 = this, e3 = this.el.bbox();
        if (this.rectSelection.set.get(0).attr({ width: e3.width, height: e3.height }), this.options.points.length && this.options.points.map(function(i4, a3) {
          var s2 = t4.pointCoords(i4, e3);
          t4.rectSelection.set.get(a3 + 1).center(s2.x, s2.y);
        }), this.options.rotationPoint) {
          var i3 = this.rectSelection.set.length();
          this.rectSelection.set.get(i3 - 1).center(e3.width / 2, 20);
        }
      }, t3.prototype.selectRect = function(t4) {
        var e3 = this, i3 = this.el.bbox();
        function a3(t5) {
          return function(i4) {
            (i4 = i4 || window.event).preventDefault ? i4.preventDefault() : i4.returnValue = false, i4.stopPropagation();
            var a4 = i4.pageX || i4.touches[0].pageX, s3 = i4.pageY || i4.touches[0].pageY;
            e3.el.fire(t5, { x: a4, y: s3, event: i4 });
          };
        }
        if (this.rectSelection.isSelected = t4, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i3.width, i3.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) {
          this.options.points.map(function(t5, s3) {
            var r4 = e3.pointCoords(t5, i3), o3 = e3.drawPoint(r4.x, r4.y).attr("class", e3.options.classPoints + "_" + t5).on("mousedown", a3(t5)).on("touchstart", a3(t5));
            e3.rectSelection.set.add(o3);
          }), this.rectSelection.set.each(function() {
            this.addClass(e3.options.classPoints);
          });
        }
        if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
          var s2 = function(t5) {
            (t5 = t5 || window.event).preventDefault ? t5.preventDefault() : t5.returnValue = false, t5.stopPropagation();
            var i4 = t5.pageX || t5.touches[0].pageX, a4 = t5.pageY || t5.touches[0].pageY;
            e3.el.fire("rot", { x: i4, y: a4, event: t5 });
          }, r3 = this.drawPoint(i3.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", s2).on("mousedown", s2);
          this.rectSelection.set.add(r3);
        }
      }, t3.prototype.handler = function() {
        var t4 = this.el.bbox();
        this.nested.matrix(new SVG.Matrix(this.el).translate(t4.x, t4.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
      }, t3.prototype.observe = function() {
        var t4 = this;
        if (MutationObserver)
          if (this.rectSelection.isSelected || this.pointSelection.isSelected)
            this.observerInst = this.observerInst || new MutationObserver(function() {
              t4.handler();
            }), this.observerInst.observe(this.el.node, { attributes: true });
          else
            try {
              this.observerInst.disconnect(), delete this.observerInst;
            } catch (t5) {
            }
        else
          this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function() {
            t4.handler();
          });
      }, t3.prototype.cleanup = function() {
        !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function() {
          this.remove();
        }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function() {
          this.remove();
        }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
      }, SVG.extend(SVG.Element, { selectize: function(e3, i3) {
        return "object" == typeof e3 && (i3 = e3, e3 = true), (this.remember("_selectHandler") || new t3(this)).init(void 0 === e3 || e3, i3 || {}), this;
      } }), SVG.Element.prototype.selectize.defaults = { points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"], pointsExclude: [], classRect: "svg_select_boundingRect", classPoints: "svg_select_points", pointSize: 7, rotationPoint: true, deepSelect: false, pointType: "circle" };
    }(), function() {
      (function() {
        function t3(t4) {
          t4.remember("_resizeHandler", this), this.el = t4, this.parameters = {}, this.lastUpdateCall = null, this.p = t4.doc().node.createSVGPoint();
        }
        t3.prototype.transformPoint = function(t4, e3, i3) {
          return this.p.x = t4 - (this.offset.x - window.pageXOffset), this.p.y = e3 - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i3 || this.m);
        }, t3.prototype._extractPosition = function(t4) {
          return { x: null != t4.clientX ? t4.clientX : t4.touches[0].clientX, y: null != t4.clientY ? t4.clientY : t4.touches[0].clientY };
        }, t3.prototype.init = function(t4) {
          var e3 = this;
          if (this.stop(), "stop" !== t4) {
            for (var i3 in this.options = {}, this.el.resize.defaults)
              this.options[i3] = this.el.resize.defaults[i3], void 0 !== t4[i3] && (this.options[i3] = t4[i3]);
            this.el.on("lt.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("rt.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("rb.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("lb.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("t.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("r.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("b.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("l.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("rot.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.el.on("point.resize", function(t5) {
              e3.resize(t5 || window.event);
            }), this.update();
          }
        }, t3.prototype.stop = function() {
          return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this;
        }, t3.prototype.resize = function(t4) {
          var e3 = this;
          this.m = this.el.node.getScreenCTM().inverse(), this.offset = { x: window.pageXOffset, y: window.pageYOffset };
          var i3 = this._extractPosition(t4.detail.event);
          if (this.parameters = { type: this.el.type, p: this.transformPoint(i3.x, i3.y), x: t4.detail.x, y: t4.detail.y, box: this.el.bbox(), rotation: this.el.transform().rotation }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t4.detail.i) {
            var a3 = this.el.array().valueOf();
            this.parameters.i = t4.detail.i, this.parameters.pointCoords = [a3[t4.detail.i][0], a3[t4.detail.i][1]];
          }
          switch (t4.type) {
            case "lt":
              this.calc = function(t5, e4) {
                var i4 = this.snapToGrid(t5, e4);
                if (this.parameters.box.width - i4[0] > 0 && this.parameters.box.height - i4[1] > 0) {
                  if ("text" === this.parameters.type)
                    return this.el.move(this.parameters.box.x + i4[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i4[0]);
                  i4 = this.checkAspectRatio(i4), this.el.move(this.parameters.box.x + i4[0], this.parameters.box.y + i4[1]).size(this.parameters.box.width - i4[0], this.parameters.box.height - i4[1]);
                }
              };
              break;
            case "rt":
              this.calc = function(t5, e4) {
                var i4 = this.snapToGrid(t5, e4, 2);
                if (this.parameters.box.width + i4[0] > 0 && this.parameters.box.height - i4[1] > 0) {
                  if ("text" === this.parameters.type)
                    return this.el.move(this.parameters.box.x - i4[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i4[0]);
                  i4 = this.checkAspectRatio(i4, true), this.el.move(this.parameters.box.x, this.parameters.box.y + i4[1]).size(this.parameters.box.width + i4[0], this.parameters.box.height - i4[1]);
                }
              };
              break;
            case "rb":
              this.calc = function(t5, e4) {
                var i4 = this.snapToGrid(t5, e4, 0);
                if (this.parameters.box.width + i4[0] > 0 && this.parameters.box.height + i4[1] > 0) {
                  if ("text" === this.parameters.type)
                    return this.el.move(this.parameters.box.x - i4[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i4[0]);
                  i4 = this.checkAspectRatio(i4), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i4[0], this.parameters.box.height + i4[1]);
                }
              };
              break;
            case "lb":
              this.calc = function(t5, e4) {
                var i4 = this.snapToGrid(t5, e4, 1);
                if (this.parameters.box.width - i4[0] > 0 && this.parameters.box.height + i4[1] > 0) {
                  if ("text" === this.parameters.type)
                    return this.el.move(this.parameters.box.x + i4[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i4[0]);
                  i4 = this.checkAspectRatio(i4, true), this.el.move(this.parameters.box.x + i4[0], this.parameters.box.y).size(this.parameters.box.width - i4[0], this.parameters.box.height + i4[1]);
                }
              };
              break;
            case "t":
              this.calc = function(t5, e4) {
                var i4 = this.snapToGrid(t5, e4, 2);
                if (this.parameters.box.height - i4[1] > 0) {
                  if ("text" === this.parameters.type)
                    return;
                  this.el.move(this.parameters.box.x, this.parameters.box.y + i4[1]).height(this.parameters.box.height - i4[1]);
                }
              };
              break;
            case "r":
              this.calc = function(t5, e4) {
                var i4 = this.snapToGrid(t5, e4, 0);
                if (this.parameters.box.width + i4[0] > 0) {
                  if ("text" === this.parameters.type)
                    return;
                  this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i4[0]);
                }
              };
              break;
            case "b":
              this.calc = function(t5, e4) {
                var i4 = this.snapToGrid(t5, e4, 0);
                if (this.parameters.box.height + i4[1] > 0) {
                  if ("text" === this.parameters.type)
                    return;
                  this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i4[1]);
                }
              };
              break;
            case "l":
              this.calc = function(t5, e4) {
                var i4 = this.snapToGrid(t5, e4, 1);
                if (this.parameters.box.width - i4[0] > 0) {
                  if ("text" === this.parameters.type)
                    return;
                  this.el.move(this.parameters.box.x + i4[0], this.parameters.box.y).width(this.parameters.box.width - i4[0]);
                }
              };
              break;
            case "rot":
              this.calc = function(t5, e4) {
                var i4 = t5 + this.parameters.p.x, a4 = e4 + this.parameters.p.y, s2 = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2), r3 = Math.atan2(a4 - this.parameters.box.y - this.parameters.box.height / 2, i4 - this.parameters.box.x - this.parameters.box.width / 2), o3 = this.parameters.rotation + 180 * (r3 - s2) / Math.PI + this.options.snapToAngle / 2;
                this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o3 - o3 % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);
              };
              break;
            case "point":
              this.calc = function(t5, e4) {
                var i4 = this.snapToGrid(t5, e4, this.parameters.pointCoords[0], this.parameters.pointCoords[1]), a4 = this.el.array().valueOf();
                a4[this.parameters.i][0] = this.parameters.pointCoords[0] + i4[0], a4[this.parameters.i][1] = this.parameters.pointCoords[1] + i4[1], this.el.plot(a4);
              };
          }
          this.el.fire("resizestart", { dx: this.parameters.x, dy: this.parameters.y, event: t4 }), SVG.on(window, "touchmove.resize", function(t5) {
            e3.update(t5 || window.event);
          }), SVG.on(window, "touchend.resize", function() {
            e3.done();
          }), SVG.on(window, "mousemove.resize", function(t5) {
            e3.update(t5 || window.event);
          }), SVG.on(window, "mouseup.resize", function() {
            e3.done();
          });
        }, t3.prototype.update = function(t4) {
          if (t4) {
            var e3 = this._extractPosition(t4), i3 = this.transformPoint(e3.x, e3.y), a3 = i3.x - this.parameters.p.x, s2 = i3.y - this.parameters.p.y;
            this.lastUpdateCall = [a3, s2], this.calc(a3, s2), this.el.fire("resizing", { dx: a3, dy: s2, event: t4 });
          } else
            this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
        }, t3.prototype.done = function() {
          this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
        }, t3.prototype.snapToGrid = function(t4, e3, i3, a3) {
          var s2;
          return void 0 !== a3 ? s2 = [(i3 + t4) % this.options.snapToGrid, (a3 + e3) % this.options.snapToGrid] : (i3 = null == i3 ? 3 : i3, s2 = [(this.parameters.box.x + t4 + (1 & i3 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e3 + (2 & i3 ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t4 < 0 && (s2[0] -= this.options.snapToGrid), e3 < 0 && (s2[1] -= this.options.snapToGrid), t4 -= Math.abs(s2[0]) < this.options.snapToGrid / 2 ? s2[0] : s2[0] - (t4 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e3 -= Math.abs(s2[1]) < this.options.snapToGrid / 2 ? s2[1] : s2[1] - (e3 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t4, e3, i3, a3);
        }, t3.prototype.constraintToBox = function(t4, e3, i3, a3) {
          var s2, r3, o3 = this.options.constraint || {};
          return void 0 !== a3 ? (s2 = i3, r3 = a3) : (s2 = this.parameters.box.x + (1 & i3 ? 0 : this.parameters.box.width), r3 = this.parameters.box.y + (2 & i3 ? 0 : this.parameters.box.height)), void 0 !== o3.minX && s2 + t4 < o3.minX && (t4 = o3.minX - s2), void 0 !== o3.maxX && s2 + t4 > o3.maxX && (t4 = o3.maxX - s2), void 0 !== o3.minY && r3 + e3 < o3.minY && (e3 = o3.minY - r3), void 0 !== o3.maxY && r3 + e3 > o3.maxY && (e3 = o3.maxY - r3), [t4, e3];
        }, t3.prototype.checkAspectRatio = function(t4, e3) {
          if (!this.options.saveAspectRatio)
            return t4;
          var i3 = t4.slice(), a3 = this.parameters.box.width / this.parameters.box.height, s2 = this.parameters.box.width + t4[0], r3 = this.parameters.box.height - t4[1], o3 = s2 / r3;
          return o3 < a3 ? (i3[1] = s2 / a3 - this.parameters.box.height, e3 && (i3[1] = -i3[1])) : o3 > a3 && (i3[0] = this.parameters.box.width - r3 * a3, e3 && (i3[0] = -i3[0])), i3;
        }, SVG.extend(SVG.Element, { resize: function(e3) {
          return (this.remember("_resizeHandler") || new t3(this)).init(e3 || {}), this;
        } }), SVG.Element.prototype.resize.defaults = { snapToAngle: 0.1, snapToGrid: 1, constraint: {}, saveAspectRatio: false };
      }).call(this);
    }(), void 0 === window.Apex && (window.Apex = {});
    var Ht2 = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "initModules", value: function() {
        this.ctx.publicMethods = ["updateOptions", "updateSeries", "appendData", "appendSeries", "toggleSeries", "showSeries", "hideSeries", "setLocale", "resetSeries", "zoomX", "toggleDataPointSelection", "dataURI", "exportToCSV", "addXaxisAnnotation", "addYaxisAnnotation", "addPointAnnotation", "clearAnnotations", "removeAnnotation", "paper", "destroy"], this.ctx.eventList = ["click", "mousedown", "mousemove", "mouseleave", "touchstart", "touchmove", "touchleave", "mouseup", "touchend"], this.ctx.animations = new b2(this.ctx), this.ctx.axes = new J2(this.ctx), this.ctx.core = new Rt2(this.ctx.el, this.ctx), this.ctx.config = new E2({}), this.ctx.data = new W2(this.ctx), this.ctx.grid = new j2(this.ctx), this.ctx.graphics = new m2(this.ctx), this.ctx.coreUtils = new y(this.ctx), this.ctx.crosshairs = new Q2(this.ctx), this.ctx.events = new Z2(this.ctx), this.ctx.exports = new G2(this.ctx), this.ctx.localization = new $2(this.ctx), this.ctx.options = new L2(), this.ctx.responsive = new K2(this.ctx), this.ctx.series = new N2(this.ctx), this.ctx.theme = new tt(this.ctx), this.ctx.formatters = new M2(this.ctx), this.ctx.titleSubtitle = new et(this.ctx), this.ctx.legend = new lt2(this.ctx), this.ctx.toolbar = new ht2(this.ctx), this.ctx.tooltip = new bt2(this.ctx), this.ctx.dimensions = new ot2(this.ctx), this.ctx.updateHelpers = new Dt2(this.ctx), this.ctx.zoomPanSelection = new ct(this.ctx), this.ctx.w.globals.tooltip = new bt2(this.ctx);
      } }]), t3;
    }(), Ot = function() {
      function t3(e3) {
        a2(this, t3), this.ctx = e3, this.w = e3.w;
      }
      return r2(t3, [{ key: "clear", value: function(t4) {
        var e3 = t4.isUpdating;
        this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({ isUpdating: e3 });
      } }, { key: "killSVG", value: function(t4) {
        t4.each(function(t5, e3) {
          this.removeClass("*"), this.off(), this.stop();
        }, true), t4.ungroup(), t4.clear();
      } }, { key: "clearDomElements", value: function(t4) {
        var e3 = this, i3 = t4.isUpdating, a3 = this.w.globals.dom.Paper.node;
        a3.parentNode && a3.parentNode.parentNode && !i3 && (a3.parentNode.parentNode.style.minHeight = "unset");
        var s2 = this.w.globals.dom.baseEl;
        s2 && this.ctx.eventList.forEach(function(t5) {
          s2.removeEventListener(t5, e3.ctx.events.documentEvent);
        });
        var r3 = this.w.globals.dom;
        if (null !== this.ctx.el)
          for (; this.ctx.el.firstChild; )
            this.ctx.el.removeChild(this.ctx.el.firstChild);
        this.killSVG(r3.Paper), r3.Paper.remove(), r3.elWrap = null, r3.elGraphical = null, r3.elAnnotations = null, r3.elLegendWrap = null, r3.baseEl = null, r3.elGridRect = null, r3.elGridRectMask = null, r3.elGridRectMarkerMask = null, r3.elForecastMask = null, r3.elNonForecastMask = null, r3.elDefs = null;
      } }]), t3;
    }(), Nt2 = /* @__PURE__ */ new WeakMap();
    var Wt = function() {
      function t3(e3, i3) {
        a2(this, t3), this.opts = i3, this.ctx = this, this.w = new F2(i3).init(), this.el = e3, this.w.globals.cuid = x2.randomId(), this.w.globals.chartID = this.w.config.chart.id ? x2.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new Ht2(this).initModules(), this.create = x2.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);
      }
      return r2(t3, [{ key: "render", value: function() {
        var t4 = this;
        return new Promise(function(e3, i3) {
          if (null !== t4.el) {
            void 0 === Apex._chartInstances && (Apex._chartInstances = []), t4.w.config.chart.id && Apex._chartInstances.push({ id: t4.w.globals.chartID, group: t4.w.config.chart.group, chart: t4 }), t4.setLocale(t4.w.config.chart.defaultLocale);
            var a3 = t4.w.config.chart.events.beforeMount;
            if ("function" == typeof a3 && a3(t4, t4.w), t4.events.fireEvent("beforeMount", [t4, t4.w]), window.addEventListener("resize", t4.windowResizeHandler), function(t5, e4) {
              var i4 = false;
              if (t5.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                var a4 = t5.getBoundingClientRect();
                "none" !== t5.style.display && 0 !== a4.width || (i4 = true);
              }
              var s3 = new ResizeObserver(function(a5) {
                i4 && e4.call(t5, a5), i4 = true;
              });
              t5.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t5.children).forEach(function(t6) {
                return s3.observe(t6);
              }) : s3.observe(t5), Nt2.set(e4, s3);
            }(t4.el.parentNode, t4.parentResizeHandler), !t4.css) {
              var s2 = t4.el.getRootNode && t4.el.getRootNode(), r3 = x2.is("ShadowRoot", s2), o3 = t4.el.ownerDocument, n3 = o3.getElementById("apexcharts-css");
              !r3 && n3 || (t4.css = document.createElement("style"), t4.css.id = "apexcharts-css", t4.css.textContent = '@keyframes opaque {\n  0% {\n      opacity: 0\n  }\n\n  to {\n      opacity: 1\n  }\n}\n\n@keyframes resizeanim {\n  0%,to {\n      opacity: 0\n  }\n}\n\n.apexcharts-canvas {\n  position: relative;\n  user-select: none\n}\n\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0,0,0,.5);\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5)\n}\n\n.apexcharts-inner {\n  position: relative\n}\n\n.apexcharts-text tspan {\n  font-family: inherit\n}\n\n.legend-mouseover-inactive {\n  transition: .15s ease all;\n  opacity: .2\n}\n\n.apexcharts-legend-text {\n  padding-left: 15px;\n  margin-left: -15px;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255,255,255,.96)\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30,30,30,.8)\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #eceff1;\n  border-bottom: 1px solid #ddd\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0,0,0,.7);\n  border-bottom: 1px solid #333\n}\n\n.apexcharts-tooltip-text-goals-value,.apexcharts-tooltip-text-y-value,.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  margin-left: 5px;\n  font-weight: 600\n}\n\n.apexcharts-tooltip-text-goals-label:empty,.apexcharts-tooltip-text-goals-value:empty,.apexcharts-tooltip-text-y-label:empty,.apexcharts-tooltip-text-y-value:empty,.apexcharts-tooltip-text-z-value:empty,.apexcharts-tooltip-title:empty {\n  display: none\n}\n\n.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px\n}\n\n.apexcharts-tooltip-goals-group,.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  display: flex\n}\n\n.apexcharts-tooltip-text-goals-label:not(:empty),.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0;\n  margin-right: 10px;\n  border-radius: 50%\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0!important\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px\n}\n\n.apexcharts-custom-tooltip,.apexcharts-tooltip-box {\n  padding: 4px 8px\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: 700\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 5px\n}\n\n.apexcharts-xaxistooltip,.apexcharts-yaxistooltip {\n  opacity: 0;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #eceff1;\n  border: 1px solid #90a4ae\n}\n\n.apexcharts-xaxistooltip {\n  padding: 9px 10px;\n  transition: .15s ease all\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-xaxistooltip:after,.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-left: -6px\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-left: -7px\n}\n\n.apexcharts-xaxistooltip-bottom:after,.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%\n}\n\n.apexcharts-xaxistooltip-top:after,.apexcharts-xaxistooltip-top:before {\n  top: 100%\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-yaxistooltip {\n  padding: 4px 10px\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-yaxistooltip:after,.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-top: -6px\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-top: -7px\n}\n\n.apexcharts-yaxistooltip-left:after,.apexcharts-yaxistooltip-left:before {\n  left: 100%\n}\n\n.apexcharts-yaxistooltip-right:after,.apexcharts-yaxistooltip-right:before {\n  right: 100%\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none\n}\n\n.apexcharts-xcrosshairs,.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: .15s ease all\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0\n}\n\n.apexcharts-selection-rect {\n  cursor: move\n}\n\n.svg_select_boundingRect,.svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_boundingRect,.apexcharts-selection-rect+g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_points_l,.apexcharts-selection-rect+g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-menu-icon,.apexcharts-pan-icon,.apexcharts-reset-icon,.apexcharts-selection-icon,.apexcharts-toolbar-custom-icon,.apexcharts-zoom-icon,.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6e8192;\n  text-align: center\n}\n\n.apexcharts-menu-icon svg,.apexcharts-reset-icon svg,.apexcharts-zoom-icon svg,.apexcharts-zoomin-icon svg,.apexcharts-zoomout-icon svg {\n  fill: #6e8192\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(.76)\n}\n\n.apexcharts-theme-dark .apexcharts-menu-icon svg,.apexcharts-theme-dark .apexcharts-pan-icon svg,.apexcharts-theme-dark .apexcharts-reset-icon svg,.apexcharts-theme-dark .apexcharts-selection-icon svg,.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,.apexcharts-theme-dark .apexcharts-zoom-icon svg,.apexcharts-theme-dark .apexcharts-zoomin-icon svg,.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\n  fill: #f3f4f5\n}\n\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\n  fill: #008ffb\n}\n\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,.apexcharts-theme-light .apexcharts-reset-icon:hover svg,.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\n  fill: #333\n}\n\n.apexcharts-menu-icon,.apexcharts-selection-icon {\n  position: relative\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px\n}\n\n.apexcharts-menu-icon,.apexcharts-reset-icon,.apexcharts-zoom-icon {\n  transform: scale(.85)\n}\n\n.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  transform: scale(.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px\n}\n\n.apexcharts-pan-icon {\n  transform: scale(.62);\n  position: relative;\n  left: 1px;\n  top: 0\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6e8192;\n  stroke-width: 2\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008ffb\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0 6px 2px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: .15s ease all;\n  pointer-events: none\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: .15s ease all\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0,0,0,.7);\n  color: #fff\n}\n\n@media screen and (min-width:768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n      opacity: 1\n  }\n}\n\n.apexcharts-canvas .apexcharts-element-hidden,.apexcharts-datalabel.apexcharts-element-hidden,.apexcharts-hide .apexcharts-series-points {\n  opacity: 0\n}\n\n.apexcharts-datalabel,.apexcharts-datalabel-label,.apexcharts-datalabel-value,.apexcharts-datalabels,.apexcharts-pie-label {\n  cursor: default;\n  pointer-events: none\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: .3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease\n}\n\n.apexcharts-legend {	\n  display: flex;	\n  overflow: auto;	\n  padding: 0 10px;	\n}	\n.apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {	\n  flex-wrap: wrap	\n}	\n.apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {	\n  flex-direction: column;	\n  bottom: 0;	\n}	\n.apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {	\n  justify-content: flex-start;	\n}	\n.apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {	\n  justify-content: center;  	\n}	\n.apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {	\n  justify-content: flex-end;	\n}	\n.apexcharts-legend-series {	\n  cursor: pointer;	\n  line-height: normal;	\n}	\n.apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{	\n  display: flex;	\n  align-items: center;	\n}	\n.apexcharts-legend-text {	\n  position: relative;	\n  font-size: 14px;	\n}	\n.apexcharts-legend-text *, .apexcharts-legend-marker * {	\n  pointer-events: none;	\n}	\n.apexcharts-legend-marker {	\n  position: relative;	\n  display: inline-block;	\n  cursor: pointer;	\n  margin-right: 3px;	\n  border-style: solid;\n}	\n  \n.apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{	\n  display: inline-block;	\n}	\n.apexcharts-legend-series.apexcharts-no-click {	\n  cursor: auto;	\n}	\n.apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {	\n  display: none !important;	\n}	\n.apexcharts-inactive-legend {	\n  opacity: 0.45;	\n}\n\n.apexcharts-annotation-rect,.apexcharts-area-series .apexcharts-area,.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-gridline,.apexcharts-line,.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-point-annotation-label,.apexcharts-radar-series path,.apexcharts-radar-series polygon,.apexcharts-toolbar svg,.apexcharts-tooltip .apexcharts-marker,.apexcharts-xaxis-annotation-label,.apexcharts-yaxis-annotation-label,.apexcharts-zoom-rect {\n  pointer-events: none\n}\n\n.apexcharts-marker {\n  transition: .15s ease all\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden\n}\n\n.contract-trigger:before,.resize-triggers,.resize-triggers>div {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0\n}\n\n.resize-triggers>div {\n  height: 100%;\n  width: 100%;\n  background: #eee;\n  overflow: auto\n}\n\n.contract-trigger:before {\n  overflow: hidden;\n  width: 200%;\n  height: 200%\n}\n', r3 ? s2.prepend(t4.css) : o3.head.appendChild(t4.css));
            }
            var l3 = t4.create(t4.w.config.series, {});
            if (!l3)
              return e3(t4);
            t4.mount(l3).then(function() {
              "function" == typeof t4.w.config.chart.events.mounted && t4.w.config.chart.events.mounted(t4, t4.w), t4.events.fireEvent("mounted", [t4, t4.w]), e3(l3);
            }).catch(function(t5) {
              i3(t5);
            });
          } else
            i3(new Error("Element not found"));
        });
      } }, { key: "create", value: function(t4, e3) {
        var i3 = this.w;
        new Ht2(this).initModules();
        var a3 = this.w.globals;
        (a3.noData = false, a3.animationEnded = false, this.responsive.checkResponsiveConfig(e3), i3.config.xaxis.convertedCatToNumeric) && new X2(i3.config).convertCatToNumericXaxis(i3.config, this.ctx);
        if (null === this.el)
          return a3.animationEnded = true, null;
        if (this.core.setupElements(), "treemap" === i3.config.chart.type && (i3.config.grid.show = false, i3.config.yaxis[0].show = false), 0 === a3.svgWidth)
          return a3.animationEnded = true, null;
        var s2 = y.checkComboSeries(t4);
        a3.comboCharts = s2.comboCharts, a3.comboBarCount = s2.comboBarCount;
        var r3 = t4.every(function(t5) {
          return t5.data && 0 === t5.data.length;
        });
        (0 === t4.length || r3) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(t4), this.theme.init(), new D2(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), a3.noData && a3.collapsedSeries.length !== a3.series.length && !i3.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), a3.axisCharts && (this.core.coreCalculations(), "category" !== i3.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = i3.globals.minX, this.ctx.toolbar.maxX = i3.globals.maxX), this.formatters.heatmapLabelFormatters(), new y(this).getLargestMarkerSize(), this.dimensions.plotCoords();
        var o3 = this.core.xySettings();
        this.grid.createGridMask();
        var n3 = this.core.plotChartType(t4, o3), l3 = new O2(this);
        l3.bringForward(), i3.config.dataLabels.background.enabled && l3.dataLabelsBackground(), this.core.shiftGraphPosition();
        var h3 = { plot: { left: i3.globals.translateX, top: i3.globals.translateY, width: i3.globals.gridWidth, height: i3.globals.gridHeight } };
        return { elGraph: n3, xyRatios: o3, elInner: i3.globals.dom.elGraphical, dimensions: h3 };
      } }, { key: "mount", value: function() {
        var t4 = this, e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i3 = this, a3 = i3.w;
        return new Promise(function(s2, r3) {
          if (null === i3.el)
            return r3(new Error("Not enough data to display or target element not found"));
          (null === e3 || a3.globals.allSeriesCollapsed) && i3.series.handleNoData(), i3.grid = new j2(i3);
          var o3 = i3.grid.drawGrid();
          if (i3.annotations = new P2(i3), i3.annotations.drawImageAnnos(), i3.annotations.drawTextAnnos(), "back" === a3.config.grid.position && o3 && (a3.globals.dom.elGraphical.add(o3.el), o3 && o3.elGridBorders && o3.elGridBorders.node && a3.globals.dom.elGraphical.add(o3.elGridBorders)), Array.isArray(e3.elGraph))
            for (var n3 = 0; n3 < e3.elGraph.length; n3++)
              a3.globals.dom.elGraphical.add(e3.elGraph[n3]);
          else
            a3.globals.dom.elGraphical.add(e3.elGraph);
          "front" === a3.config.grid.position && o3 && (a3.globals.dom.elGraphical.add(o3.el), o3 && o3.elGridBorders && o3.elGridBorders.node && a3.globals.dom.elGraphical.add(o3.elGridBorders)), "front" === a3.config.xaxis.crosshairs.position && i3.crosshairs.drawXCrosshairs(), "front" === a3.config.yaxis[0].crosshairs.position && i3.crosshairs.drawYCrosshairs(), "treemap" !== a3.config.chart.type && i3.axes.drawAxis(a3.config.chart.type, o3);
          var l3 = new V2(t4.ctx, o3), h3 = new q2(t4.ctx, o3);
          if (null !== o3 && (l3.xAxisLabelCorrections(o3.xAxisTickWidth), h3.setYAxisTextAlignments(), a3.config.yaxis.map(function(t5, e4) {
            -1 === a3.globals.ignoreYAxisIndexes.indexOf(e4) && h3.yAxisTitleRotate(e4, t5.opposite);
          })), a3.globals.dom.Paper.add(a3.globals.dom.elAnnotations), i3.annotations.drawAxesAnnotations(), !a3.globals.noData) {
            if (a3.config.tooltip.enabled && !a3.globals.noData && i3.w.globals.tooltip.drawTooltip(e3.xyRatios), a3.globals.axisCharts && (a3.globals.isXNumeric || a3.config.xaxis.convertedCatToNumeric || a3.globals.isRangeBar))
              (a3.config.chart.zoom.enabled || a3.config.chart.selection && a3.config.chart.selection.enabled || a3.config.chart.pan && a3.config.chart.pan.enabled) && i3.zoomPanSelection.init({ xyRatios: e3.xyRatios });
            else {
              var c3 = a3.config.chart.toolbar.tools;
              ["zoom", "zoomin", "zoomout", "selection", "pan", "reset"].forEach(function(t5) {
                c3[t5] = false;
              });
            }
            a3.config.chart.toolbar.show && !a3.globals.allSeriesCollapsed && i3.toolbar.createToolbar();
          }
          a3.globals.memory.methodsToExec.length > 0 && a3.globals.memory.methodsToExec.forEach(function(t5) {
            t5.method(t5.params, false, t5.context);
          }), a3.globals.axisCharts || a3.globals.noData || i3.core.resizeNonAxisCharts(), s2(i3);
        });
      } }, { key: "destroy", value: function() {
        var t4, e3;
        window.removeEventListener("resize", this.windowResizeHandler), this.el.parentNode, t4 = this.parentResizeHandler, (e3 = Nt2.get(t4)) && (e3.disconnect(), Nt2.delete(t4));
        var i3 = this.w.config.chart.id;
        i3 && Apex._chartInstances.forEach(function(t5, e4) {
          t5.id === x2.escapeString(i3) && Apex._chartInstances.splice(e4, 1);
        }), new Ot(this.ctx).clear({ isUpdating: false });
      } }, { key: "updateOptions", value: function(t4) {
        var e3 = this, i3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r3 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], o3 = this.w;
        return o3.globals.selection = void 0, t4.series && (this.series.resetSeries(false, true, false), t4.series.length && t4.series[0].data && (t4.series = t4.series.map(function(t5, i4) {
          return e3.updateHelpers._extendSeries(t5, i4);
        })), this.updateHelpers.revertDefaultAxisMinMax()), t4.xaxis && (t4 = this.updateHelpers.forceXAxisUpdate(t4)), t4.yaxis && (t4 = this.updateHelpers.forceYAxisUpdate(t4)), o3.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t4.theme && (t4 = this.theme.updateThemeOptions(t4)), this.updateHelpers._updateOptions(t4, i3, a3, s2, r3);
      } }, { key: "updateSeries", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
        return this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t4, e3, i3);
      } }, { key: "appendSeries", value: function(t4) {
        var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a3 = this.w.config.series.slice();
        return a3.push(t4), this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a3, e3, i3);
      } }, { key: "appendData", value: function(t4) {
        var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = this;
        i3.w.globals.dataChanged = true, i3.series.getPreviousPaths();
        for (var a3 = i3.w.config.series.slice(), s2 = 0; s2 < a3.length; s2++)
          if (null !== t4[s2] && void 0 !== t4[s2])
            for (var r3 = 0; r3 < t4[s2].data.length; r3++)
              a3[s2].data.push(t4[s2].data[r3]);
        return i3.w.config.series = a3, e3 && (i3.w.globals.initialSeries = x2.clone(i3.w.config.series)), this.update();
      } }, { key: "update", value: function(t4) {
        var e3 = this;
        return new Promise(function(i3, a3) {
          new Ot(e3.ctx).clear({ isUpdating: true });
          var s2 = e3.create(e3.w.config.series, t4);
          if (!s2)
            return i3(e3);
          e3.mount(s2).then(function() {
            "function" == typeof e3.w.config.chart.events.updated && e3.w.config.chart.events.updated(e3, e3.w), e3.events.fireEvent("updated", [e3, e3.w]), e3.w.globals.isDirty = true, i3(e3);
          }).catch(function(t5) {
            a3(t5);
          });
        });
      } }, { key: "getSyncedCharts", value: function() {
        var t4 = this.getGroupedCharts(), e3 = [this];
        return t4.length && (e3 = [], t4.forEach(function(t5) {
          e3.push(t5);
        })), e3;
      } }, { key: "getGroupedCharts", value: function() {
        var t4 = this;
        return Apex._chartInstances.filter(function(t5) {
          if (t5.group)
            return true;
        }).map(function(e3) {
          return t4.w.config.chart.group === e3.group ? e3.chart : t4;
        });
      } }, { key: "toggleSeries", value: function(t4) {
        return this.series.toggleSeries(t4);
      } }, { key: "highlightSeriesOnLegendHover", value: function(t4, e3) {
        return this.series.toggleSeriesOnHover(t4, e3);
      } }, { key: "showSeries", value: function(t4) {
        this.series.showSeries(t4);
      } }, { key: "hideSeries", value: function(t4) {
        this.series.hideSeries(t4);
      } }, { key: "resetSeries", value: function() {
        var t4 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        this.series.resetSeries(t4, e3);
      } }, { key: "addEventListener", value: function(t4, e3) {
        this.events.addEventListener(t4, e3);
      } }, { key: "removeEventListener", value: function(t4, e3) {
        this.events.removeEventListener(t4, e3);
      } }, { key: "addXaxisAnnotation", value: function(t4) {
        var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
        i3 && (a3 = i3), a3.annotations.addXaxisAnnotationExternal(t4, e3, a3);
      } }, { key: "addYaxisAnnotation", value: function(t4) {
        var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
        i3 && (a3 = i3), a3.annotations.addYaxisAnnotationExternal(t4, e3, a3);
      } }, { key: "addPointAnnotation", value: function(t4) {
        var e3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a3 = this;
        i3 && (a3 = i3), a3.annotations.addPointAnnotationExternal(t4, e3, a3);
      } }, { key: "clearAnnotations", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, e3 = this;
        t4 && (e3 = t4), e3.annotations.clearAnnotations(e3);
      } }, { key: "removeAnnotation", value: function(t4) {
        var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i3 = this;
        e3 && (i3 = e3), i3.annotations.removeAnnotation(i3, t4);
      } }, { key: "getChartArea", value: function() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
      } }, { key: "getSeriesTotalXRange", value: function(t4, e3) {
        return this.coreUtils.getSeriesTotalsXRange(t4, e3);
      } }, { key: "getHighestValueInSeries", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e3 = new U2(this.ctx);
        return e3.getMinYMaxY(t4).highestY;
      } }, { key: "getLowestValueInSeries", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e3 = new U2(this.ctx);
        return e3.getMinYMaxY(t4).lowestY;
      } }, { key: "getSeriesTotal", value: function() {
        return this.w.globals.seriesTotals;
      } }, { key: "toggleDataPointSelection", value: function(t4, e3) {
        return this.updateHelpers.toggleDataPointSelection(t4, e3);
      } }, { key: "zoomX", value: function(t4, e3) {
        this.ctx.toolbar.zoomUpdateOptions(t4, e3);
      } }, { key: "setLocale", value: function(t4) {
        this.localization.setCurrentLocaleValues(t4);
      } }, { key: "dataURI", value: function(t4) {
        return new G2(this.ctx).dataURI(t4);
      } }, { key: "exportToCSV", value: function() {
        var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e3 = new G2(this.ctx);
        return e3.exportToCSV(t4);
      } }, { key: "paper", value: function() {
        return this.w.globals.dom.Paper;
      } }, { key: "_parentResizeCallback", value: function() {
        this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
      } }, { key: "_windowResize", value: function() {
        var t4 = this;
        clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function() {
          t4.w.globals.resized = true, t4.w.globals.dataChanged = false, t4.ctx.update();
        }, 150);
      } }, { key: "_windowResizeHandler", value: function() {
        var t4 = this.w.config.chart.redrawOnWindowResize;
        "function" == typeof t4 && (t4 = t4()), t4 && this._windowResize();
      } }], [{ key: "getChartByID", value: function(t4) {
        var e3 = x2.escapeString(t4), i3 = Apex._chartInstances.filter(function(t5) {
          return t5.id === e3;
        })[0];
        return i3 && i3.chart;
      } }, { key: "initOnLoad", value: function() {
        for (var e3 = document.querySelectorAll("[data-apexcharts]"), i3 = 0; i3 < e3.length; i3++) {
          new t3(e3[i3], JSON.parse(e3[i3].getAttribute("data-options"))).render();
        }
      } }, { key: "exec", value: function(t4, e3) {
        var i3 = this.getChartByID(t4);
        if (i3) {
          i3.w.globals.isExecCalled = true;
          var a3 = null;
          if (-1 !== i3.publicMethods.indexOf(e3)) {
            for (var s2 = arguments.length, r3 = new Array(s2 > 2 ? s2 - 2 : 0), o3 = 2; o3 < s2; o3++)
              r3[o3 - 2] = arguments[o3];
            a3 = i3[e3].apply(i3, r3);
          }
          return a3;
        }
      } }, { key: "merge", value: function(t4, e3) {
        return x2.extend(t4, e3);
      } }]), t3;
    }();
    module2.exports = Wt;
  })(apexcharts_common, apexcharts_common.exports);
  return apexcharts_common.exports;
}
(function(module2) {
  module2.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module3 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
      module3.l = true;
      return module3.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns2 = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns2);
      Object.defineProperty(ns2, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key in value)
          __webpack_require__.d(ns2, key, function(key2) {
            return value[key2];
          }.bind(null, key));
      return ns2;
    };
    __webpack_require__.n = function(module3) {
      var getter = module3 && module3.__esModule ? function getDefault() {
        return module3["default"];
      } : function getModuleExports() {
        return module3;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "";
    return __webpack_require__(__webpack_require__.s = "fb15");
  }({
    "8875": function(module3, exports, __webpack_require__) {
      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
      (function(root, factory) {
        {
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }
      })(typeof self !== "undefined" ? self : this, function() {
        function getCurrentScript() {
          var descriptor = Object.getOwnPropertyDescriptor(document, "currentScript");
          if (!descriptor && "currentScript" in document && document.currentScript) {
            return document.currentScript;
          }
          if (descriptor && descriptor.get !== getCurrentScript && document.currentScript) {
            return document.currentScript;
          }
          try {
            throw new Error();
          } catch (err) {
            var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/ig, ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/ig, stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack), scriptLocation = stackDetails && stackDetails[1] || false, line = stackDetails && stackDetails[2] || false, currentLocation = document.location.href.replace(document.location.hash, ""), pageSource, inlineScriptSourceRegExp, inlineScriptSource, scripts = document.getElementsByTagName("script");
            if (scriptLocation === currentLocation) {
              pageSource = document.documentElement.outerHTML;
              inlineScriptSourceRegExp = new RegExp("(?:[^\\n]+?\\n){0," + (line - 2) + "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*", "i");
              inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, "$1").trim();
            }
            for (var i2 = 0; i2 < scripts.length; i2++) {
              if (scripts[i2].readyState === "interactive") {
                return scripts[i2];
              }
              if (scripts[i2].src === scriptLocation) {
                return scripts[i2];
              }
              if (scriptLocation === currentLocation && scripts[i2].innerHTML && scripts[i2].innerHTML.trim() === inlineScriptSource) {
                return scripts[i2];
              }
            }
            return null;
          }
        }
        return getCurrentScript;
      });
    },
    "8bbf": function(module3, exports) {
      module3.exports = require$$0;
    },
    "95e6": function(module3, exports) {
      module3.exports = requireApexcharts_common();
    },
    "fb15": function(module3, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      if (typeof window !== "undefined") {
        var currentScript = window.document.currentScript;
        {
          var getCurrentScript = __webpack_require__("8875");
          currentScript = getCurrentScript();
          if (!("currentScript" in document)) {
            Object.defineProperty(document, "currentScript", { get: getCurrentScript });
          }
        }
        var src = currentScript && currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
        if (src) {
          __webpack_require__.p = src[1];
        }
      }
      var external_commonjs_vue_commonjs2_vue_root_Vue_ = __webpack_require__("8bbf");
      var external_root_ApexCharts_commonjs_apexcharts_commonjs2_apexcharts_ = __webpack_require__("95e6");
      var external_root_ApexCharts_commonjs_apexcharts_commonjs2_apexcharts_default = /* @__PURE__ */ __webpack_require__.n(external_root_ApexCharts_commonjs_apexcharts_commonjs2_apexcharts_);
      const events = [
        "animationEnd",
        "beforeMount",
        "mounted",
        "updated",
        "click",
        "mouseMove",
        "legendClick",
        "markerClick",
        "selection",
        "dataPointSelection",
        "dataPointMouseEnter",
        "dataPointMouseLeave",
        "beforeZoom",
        "beforeResetZoom",
        "zoomed",
        "scrolled",
        "scrolled"
      ];
      const vueApexcharts = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"])({
        name: "apexchart",
        props: {
          options: {
            type: Object
          },
          type: {
            type: String
          },
          series: {
            type: Array,
            required: true
          },
          width: {
            default: "100%"
          },
          height: {
            default: "auto"
          }
        },
        emits: events,
        setup(props, { emit: emit2 }) {
          const __el = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["ref"])(null);
          const chart = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["ref"])(null);
          const isObject2 = (item) => {
            return item && typeof item === "object" && !Array.isArray(item) && item != null;
          };
          const extend2 = (target, source) => {
            if (typeof Object.assign !== "function") {
              (function() {
                Object.assign = function(target2) {
                  if (target2 === void 0 || target2 === null) {
                    throw new TypeError("Cannot convert undefined or null to object");
                  }
                  let output2 = Object(target2);
                  for (let index = 1; index < arguments.length; index++) {
                    let source2 = arguments[index];
                    if (source2 !== void 0 && source2 !== null) {
                      for (let nextKey in source2) {
                        if (source2.hasOwnProperty(nextKey)) {
                          output2[nextKey] = source2[nextKey];
                        }
                      }
                    }
                  }
                  return output2;
                };
              })();
            }
            let output = Object.assign({}, target);
            if (isObject2(target) && isObject2(source)) {
              Object.keys(source).forEach((key) => {
                if (isObject2(source[key])) {
                  if (!(key in target)) {
                    Object.assign(output, {
                      [key]: source[key]
                    });
                  } else {
                    output[key] = extend2(target[key], source[key]);
                  }
                } else {
                  Object.assign(output, {
                    [key]: source[key]
                  });
                }
              });
            }
            return output;
          };
          const init = async () => {
            await Object(external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"])();
            const newOptions = {
              chart: {
                type: props.type || props.options.chart.type || "line",
                height: props.height,
                width: props.width,
                events: {}
              },
              series: props.series
            };
            events.forEach((event) => {
              let callback = (...args) => emit2(event, ...args);
              newOptions.chart.events[event] = callback;
            });
            const config2 = extend2(props.options, newOptions);
            chart.value = new external_root_ApexCharts_commonjs_apexcharts_commonjs2_apexcharts_default.a(__el.value, config2);
            return chart.value.render();
          };
          const refresh = () => {
            destroy();
            return init();
          };
          const destroy = () => {
            chart.value.destroy();
          };
          const updateSeries = (newSeries, animate) => {
            return chart.value.updateSeries(newSeries, animate);
          };
          const updateOptions = (newOptions, redrawPaths, animate, updateSyncedCharts) => {
            return chart.value.updateOptions(newOptions, redrawPaths, animate, updateSyncedCharts);
          };
          const toggleSeries = (seriesName) => {
            return chart.value.toggleSeries(seriesName);
          };
          const showSeries = (seriesName) => {
            chart.value.showSeries(seriesName);
          };
          const hideSeries = (seriesName) => {
            chart.value.hideSeries(seriesName);
          };
          const appendSeries = (newSeries, animate) => {
            return chart.value.appendSeries(newSeries, animate);
          };
          const resetSeries = () => {
            chart.value.resetSeries();
          };
          const toggleDataPointSelection = (seriesIndex, dataPointIndex) => {
            chart.value.toggleDataPointSelection(seriesIndex, dataPointIndex);
          };
          const appendData = (newData) => {
            return chart.value.appendData(newData);
          };
          const zoomX = (start, end) => {
            return chart.value.zoomX(start, end);
          };
          const dataURI = () => {
            return chart.value.dataURI();
          };
          const addXaxisAnnotation = (options, pushToMemory) => {
            chart.value.addXaxisAnnotation(options, pushToMemory);
          };
          const addYaxisAnnotation = (options, pushToMemory) => {
            chart.value.addYaxisAnnotation(options, pushToMemory);
          };
          const addPointAnnotation = (options, pushToMemory) => {
            chart.value.addPointAnnotation(options, pushToMemory);
          };
          const removeAnnotation = (id2, options) => {
            chart.value.removeAnnotation(id2, options);
          };
          const clearAnnotations = () => {
            chart.value.clearAnnotations();
          };
          Object(external_commonjs_vue_commonjs2_vue_root_Vue_["onBeforeMount"])(() => {
            window.ApexCharts = external_root_ApexCharts_commonjs_apexcharts_commonjs2_apexcharts_default.a;
          });
          Object(external_commonjs_vue_commonjs2_vue_root_Vue_["onMounted"])(() => {
            __el.value = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["getCurrentInstance"])().proxy.$el;
            init();
          });
          Object(external_commonjs_vue_commonjs2_vue_root_Vue_["onBeforeUnmount"])(() => {
            if (!chart.value) {
              return;
            }
            destroy();
          });
          const reactiveProps = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toRefs"])(props);
          Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(reactiveProps.options, () => {
            if (!chart.value && props.options) {
              init();
            } else {
              chart.value.updateOptions(props.options);
            }
          });
          Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(
            reactiveProps.series,
            () => {
              if (!chart.value && props.series) {
                init();
              } else {
                chart.value.updateSeries(props.series);
              }
            },
            { deep: true }
          );
          Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(reactiveProps.type, () => {
            refresh();
          });
          Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(reactiveProps.width, () => {
            refresh();
          });
          Object(external_commonjs_vue_commonjs2_vue_root_Vue_["watch"])(reactiveProps.height, () => {
            refresh();
          });
          return {
            chart,
            init,
            refresh,
            destroy,
            updateOptions,
            updateSeries,
            toggleSeries,
            showSeries,
            hideSeries,
            resetSeries,
            zoomX,
            toggleDataPointSelection,
            appendData,
            appendSeries,
            addXaxisAnnotation,
            addYaxisAnnotation,
            addPointAnnotation,
            removeAnnotation,
            clearAnnotations,
            dataURI
          };
        },
        render() {
          return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["h"])("div", {
            class: "vue-apexcharts"
          });
        }
      });
      var vue3_apexcharts = vueApexcharts;
      const install2 = (app) => {
        app.component(vue3_apexcharts.name, vue3_apexcharts);
      };
      vue3_apexcharts.install = install2;
      var src_0 = vue3_apexcharts;
      __webpack_exports__["default"] = src_0;
    }
  });
})(vue3Apexcharts_common);
const VueApexCharts = /* @__PURE__ */ getDefaultExportFromCjs(vue3Apexcharts_common.exports);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof {} !== "undefined" ? {} : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var mainExports$1 = {};
var main$1 = {
  get exports() {
    return mainExports$1;
  },
  set exports(v2) {
    mainExports$1 = v2;
  }
};
(function(module2, exports) {
  !function(t2, n2) {
    module2.exports = n2();
  }(commonjsGlobal, () => {
    return t2 = { 770: function(t3, n3, e2) {
      var r2 = this && this.__importDefault || function(t4) {
        return t4 && t4.__esModule ? t4 : { default: t4 };
      };
      Object.defineProperty(n3, "__esModule", { value: true }), n3.setDefaultDebugCall = n3.createOnigScanner = n3.createOnigString = n3.loadWASM = n3.OnigScanner = n3.OnigString = void 0;
      const i2 = r2(e2(418));
      let o2 = null, a2 = false;
      class f2 {
        static _utf8ByteLength(t4) {
          let n4 = 0;
          for (let e3 = 0, r3 = t4.length; e3 < r3; e3++) {
            const i3 = t4.charCodeAt(e3);
            let o3 = i3, a3 = false;
            if (i3 >= 55296 && i3 <= 56319 && e3 + 1 < r3) {
              const n5 = t4.charCodeAt(e3 + 1);
              n5 >= 56320 && n5 <= 57343 && (o3 = 65536 + (i3 - 55296 << 10) | n5 - 56320, a3 = true);
            }
            n4 += o3 <= 127 ? 1 : o3 <= 2047 ? 2 : o3 <= 65535 ? 3 : 4, a3 && e3++;
          }
          return n4;
        }
        constructor(t4) {
          const n4 = t4.length, e3 = f2._utf8ByteLength(t4), r3 = e3 !== n4, i3 = r3 ? new Uint32Array(n4 + 1) : null;
          r3 && (i3[n4] = e3);
          const o3 = r3 ? new Uint32Array(e3 + 1) : null;
          r3 && (o3[e3] = n4);
          const a3 = new Uint8Array(e3);
          let s2 = 0;
          for (let e4 = 0; e4 < n4; e4++) {
            const f3 = t4.charCodeAt(e4);
            let u3 = f3, c3 = false;
            if (f3 >= 55296 && f3 <= 56319 && e4 + 1 < n4) {
              const n5 = t4.charCodeAt(e4 + 1);
              n5 >= 56320 && n5 <= 57343 && (u3 = 65536 + (f3 - 55296 << 10) | n5 - 56320, c3 = true);
            }
            r3 && (i3[e4] = s2, c3 && (i3[e4 + 1] = s2), u3 <= 127 ? o3[s2 + 0] = e4 : u3 <= 2047 ? (o3[s2 + 0] = e4, o3[s2 + 1] = e4) : u3 <= 65535 ? (o3[s2 + 0] = e4, o3[s2 + 1] = e4, o3[s2 + 2] = e4) : (o3[s2 + 0] = e4, o3[s2 + 1] = e4, o3[s2 + 2] = e4, o3[s2 + 3] = e4)), u3 <= 127 ? a3[s2++] = u3 : u3 <= 2047 ? (a3[s2++] = 192 | (1984 & u3) >>> 6, a3[s2++] = 128 | (63 & u3) >>> 0) : u3 <= 65535 ? (a3[s2++] = 224 | (61440 & u3) >>> 12, a3[s2++] = 128 | (4032 & u3) >>> 6, a3[s2++] = 128 | (63 & u3) >>> 0) : (a3[s2++] = 240 | (1835008 & u3) >>> 18, a3[s2++] = 128 | (258048 & u3) >>> 12, a3[s2++] = 128 | (4032 & u3) >>> 6, a3[s2++] = 128 | (63 & u3) >>> 0), c3 && e4++;
          }
          this.utf16Length = n4, this.utf8Length = e3, this.utf16Value = t4, this.utf8Value = a3, this.utf16OffsetToUtf8 = i3, this.utf8OffsetToUtf16 = o3;
        }
        createString(t4) {
          const n4 = t4._omalloc(this.utf8Length);
          return t4.HEAPU8.set(this.utf8Value, n4), n4;
        }
      }
      class s {
        constructor(t4) {
          if (this.id = ++s.LAST_ID, !o2)
            throw new Error("Must invoke loadWASM first.");
          this._onigBinding = o2, this.content = t4;
          const n4 = new f2(t4);
          this.utf16Length = n4.utf16Length, this.utf8Length = n4.utf8Length, this.utf16OffsetToUtf8 = n4.utf16OffsetToUtf8, this.utf8OffsetToUtf16 = n4.utf8OffsetToUtf16, this.utf8Length < 1e4 && !s._sharedPtrInUse ? (s._sharedPtr || (s._sharedPtr = o2._omalloc(1e4)), s._sharedPtrInUse = true, o2.HEAPU8.set(n4.utf8Value, s._sharedPtr), this.ptr = s._sharedPtr) : this.ptr = n4.createString(o2);
        }
        convertUtf8OffsetToUtf16(t4) {
          return this.utf8OffsetToUtf16 ? t4 < 0 ? 0 : t4 > this.utf8Length ? this.utf16Length : this.utf8OffsetToUtf16[t4] : t4;
        }
        convertUtf16OffsetToUtf8(t4) {
          return this.utf16OffsetToUtf8 ? t4 < 0 ? 0 : t4 > this.utf16Length ? this.utf8Length : this.utf16OffsetToUtf8[t4] : t4;
        }
        dispose() {
          this.ptr === s._sharedPtr ? s._sharedPtrInUse = false : this._onigBinding._ofree(this.ptr);
        }
      }
      n3.OnigString = s, s.LAST_ID = 0, s._sharedPtr = 0, s._sharedPtrInUse = false;
      class u2 {
        constructor(t4) {
          if (!o2)
            throw new Error("Must invoke loadWASM first.");
          const n4 = [], e3 = [];
          for (let r4 = 0, i4 = t4.length; r4 < i4; r4++) {
            const i5 = new f2(t4[r4]);
            n4[r4] = i5.createString(o2), e3[r4] = i5.utf8Length;
          }
          const r3 = o2._omalloc(4 * t4.length);
          o2.HEAPU32.set(n4, r3 / 4);
          const i3 = o2._omalloc(4 * t4.length);
          o2.HEAPU32.set(e3, i3 / 4);
          const a3 = o2._createOnigScanner(r3, i3, t4.length);
          for (let e4 = 0, r4 = t4.length; e4 < r4; e4++)
            o2._ofree(n4[e4]);
          o2._ofree(i3), o2._ofree(r3), 0 === a3 && function(t5) {
            throw new Error(t5.UTF8ToString(t5._getLastOnigError()));
          }(o2), this._onigBinding = o2, this._ptr = a3;
        }
        dispose() {
          this._onigBinding._freeOnigScanner(this._ptr);
        }
        findNextMatchSync(t4, n4, e3) {
          let r3 = a2, i3 = 0;
          if ("number" == typeof e3 ? (8 & e3 && (r3 = true), i3 = e3) : "boolean" == typeof e3 && (r3 = e3), "string" == typeof t4) {
            t4 = new s(t4);
            const e4 = this._findNextMatchSync(t4, n4, r3, i3);
            return t4.dispose(), e4;
          }
          return this._findNextMatchSync(t4, n4, r3, i3);
        }
        _findNextMatchSync(t4, n4, e3, r3) {
          const i3 = this._onigBinding;
          let o3;
          if (o3 = e3 ? i3._findNextOnigScannerMatchDbg(this._ptr, t4.id, t4.ptr, t4.utf8Length, t4.convertUtf16OffsetToUtf8(n4), r3) : i3._findNextOnigScannerMatch(this._ptr, t4.id, t4.ptr, t4.utf8Length, t4.convertUtf16OffsetToUtf8(n4), r3), 0 === o3)
            return null;
          const a3 = i3.HEAPU32;
          let f3 = o3 / 4;
          const s2 = a3[f3++], u3 = a3[f3++];
          let c3 = [];
          for (let n5 = 0; n5 < u3; n5++) {
            const e4 = t4.convertUtf8OffsetToUtf16(a3[f3++]), r4 = t4.convertUtf8OffsetToUtf16(a3[f3++]);
            c3[n5] = { start: e4, end: r4, length: r4 - e4 };
          }
          return { index: s2, captureIndices: c3 };
        }
      }
      n3.OnigScanner = u2;
      let c2 = false, l2 = null;
      n3.loadWASM = function(t4) {
        if (c2)
          return l2;
        let n4, e3, r3, a3;
        if (c2 = true, function(t5) {
          return "function" == typeof t5.instantiator;
        }(t4))
          n4 = t4.instantiator, e3 = t4.print;
        else {
          let r4;
          !function(t5) {
            return void 0 !== t5.data;
          }(t4) ? r4 = t4 : (r4 = t4.data, e3 = t4.print), n4 = function(t5) {
            return "undefined" != typeof Response && t5 instanceof Response;
          }(r4) ? "function" == typeof WebAssembly.instantiateStreaming ? function(t5) {
            return (n5) => WebAssembly.instantiateStreaming(t5, n5);
          }(r4) : function(t5) {
            return async (n5) => {
              const e4 = await t5.arrayBuffer();
              return WebAssembly.instantiate(e4, n5);
            };
          }(r4) : function(t5) {
            return (n5) => WebAssembly.instantiate(t5, n5);
          }(r4);
        }
        return l2 = new Promise((t5, n5) => {
          r3 = t5, a3 = n5;
        }), function(t5, n5, e4, r4) {
          (0, i2.default)({ print: n5, instantiateWasm: (n6, e5) => {
            if ("undefined" == typeof performance) {
              const t6 = () => Date.now();
              n6.env.emscripten_get_now = t6, n6.wasi_snapshot_preview1.emscripten_get_now = t6;
            }
            return t5(n6).then((t6) => e5(t6.instance), r4), {};
          } }).then((t6) => {
            o2 = t6, e4();
          });
        }(n4, e3, r3, a3), l2;
      }, n3.createOnigString = function(t4) {
        return new s(t4);
      }, n3.createOnigScanner = function(t4) {
        return new u2(t4);
      }, n3.setDefaultDebugCall = function(t4) {
        a2 = t4;
      };
    }, 418: (t3) => {
      var n3 = ("undefined" != typeof document && document.currentScript && document.currentScript.src, function(t4) {
        var n4, e2, r2 = void 0 !== (t4 = t4 || {}) ? t4 : {};
        r2.ready = new Promise(function(t5, r3) {
          n4 = t5, e2 = r3;
        });
        var i2, o2 = Object.assign({}, r2), s = false, c2 = "";
        function l2(t5) {
          return r2.locateFile ? r2.locateFile(t5, c2) : c2 + t5;
        }
        i2 = function(t5) {
          let n5;
          return "function" == typeof readbuffer ? new Uint8Array(readbuffer(t5)) : (n5 = read(t5, "binary"), m2("object" == typeof n5), n5);
        }, "undefined" != typeof scriptArgs ? scriptArgs : void 0 !== arguments && arguments, "undefined" != typeof onig_print && ("undefined" == typeof console && (console = {}), console.log = onig_print, console.warn = console.error = "undefined" != typeof printErr ? printErr : onig_print);
        var h2, p2, d2 = r2.print || console.log.bind(console), g2 = r2.printErr || console.warn.bind(console);
        Object.assign(r2, o2), o2 = null, r2.arguments && r2.arguments, r2.thisProgram && r2.thisProgram, r2.quit && r2.quit, r2.wasmBinary && (h2 = r2.wasmBinary), r2.noExitRuntime, "object" != typeof WebAssembly && k2("no native wasm support detected");
        var _2 = false;
        function m2(t5, n5) {
          t5 || k2(n5);
        }
        var y, w, S2, v2 = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0;
        function A2(t5, n5, e3) {
          for (var r3 = n5 + e3, i3 = n5; t5[i3] && !(i3 >= r3); )
            ++i3;
          if (i3 - n5 > 16 && t5.buffer && v2)
            return v2.decode(t5.subarray(n5, i3));
          for (var o3 = ""; n5 < i3; ) {
            var a2 = t5[n5++];
            if (128 & a2) {
              var f2 = 63 & t5[n5++];
              if (192 != (224 & a2)) {
                var s2 = 63 & t5[n5++];
                if ((a2 = 224 == (240 & a2) ? (15 & a2) << 12 | f2 << 6 | s2 : (7 & a2) << 18 | f2 << 12 | s2 << 6 | 63 & t5[n5++]) < 65536)
                  o3 += String.fromCharCode(a2);
                else {
                  var u2 = a2 - 65536;
                  o3 += String.fromCharCode(55296 | u2 >> 10, 56320 | 1023 & u2);
                }
              } else
                o3 += String.fromCharCode((31 & a2) << 6 | f2);
            } else
              o3 += String.fromCharCode(a2);
          }
          return o3;
        }
        function b2(t5, n5) {
          return t5 ? A2(w, t5, n5) : "";
        }
        function O2(t5) {
          y = t5, r2.HEAP8 = new Int8Array(t5), r2.HEAP16 = new Int16Array(t5), r2.HEAP32 = new Int32Array(t5), r2.HEAPU8 = w = new Uint8Array(t5), r2.HEAPU16 = new Uint16Array(t5), r2.HEAPU32 = S2 = new Uint32Array(t5), r2.HEAPF32 = new Float32Array(t5), r2.HEAPF64 = new Float64Array(t5);
        }
        r2.INITIAL_MEMORY;
        var U2 = [], P2 = [], R2 = [];
        function x2() {
          if (r2.preRun)
            for ("function" == typeof r2.preRun && (r2.preRun = [r2.preRun]); r2.preRun.length; )
              M2(r2.preRun.shift());
          G2(U2);
        }
        function T2() {
          G2(P2);
        }
        function E2() {
          if (r2.postRun)
            for ("function" == typeof r2.postRun && (r2.postRun = [r2.postRun]); r2.postRun.length; )
              I2(r2.postRun.shift());
          G2(R2);
        }
        function M2(t5) {
          U2.unshift(t5);
        }
        function L2(t5) {
          P2.unshift(t5);
        }
        function I2(t5) {
          R2.unshift(t5);
        }
        var W2 = 0, C2 = null;
        function N2(t5) {
          W2++, r2.monitorRunDependencies && r2.monitorRunDependencies(W2);
        }
        function j2(t5) {
          if (W2--, r2.monitorRunDependencies && r2.monitorRunDependencies(W2), 0 == W2 && C2) {
            var n5 = C2;
            C2 = null, n5();
          }
        }
        function k2(t5) {
          r2.onAbort && r2.onAbort(t5), g2(t5 = "Aborted(" + t5 + ")"), _2 = true, t5 += ". Build with -sASSERTIONS for more info.";
          var n5 = new WebAssembly.RuntimeError(t5);
          throw e2(n5), n5;
        }
        var B, H, F2 = "data:application/octet-stream;base64,";
        function V2(t5) {
          return t5.startsWith(F2);
        }
        function z2(t5) {
          try {
            if (t5 == B && h2)
              return new Uint8Array(h2);
            if (i2)
              return i2(t5);
            throw "both async and sync fetching of the wasm failed";
          } catch (t6) {
            k2(t6);
          }
        }
        function q2() {
          return h2 || !s || "function" != typeof fetch ? Promise.resolve().then(function() {
            return z2(B);
          }) : fetch(B, { credentials: "same-origin" }).then(function(t5) {
            if (!t5.ok)
              throw "failed to load wasm binary file at '" + B + "'";
            return t5.arrayBuffer();
          }).catch(function() {
            return z2(B);
          });
        }
        function Y2() {
          var t5 = { env: nt2, wasi_snapshot_preview1: nt2 };
          function n5(t6, n6) {
            var e3 = t6.exports;
            r2.asm = e3, O2((p2 = r2.asm.memory).buffer), r2.asm.__indirect_function_table, L2(r2.asm.__wasm_call_ctors), j2();
          }
          function i3(t6) {
            n5(t6.instance);
          }
          function o3(n6) {
            return q2().then(function(n7) {
              return WebAssembly.instantiate(n7, t5);
            }).then(function(t6) {
              return t6;
            }).then(n6, function(t6) {
              g2("failed to asynchronously prepare wasm: " + t6), k2(t6);
            });
          }
          if (N2(), r2.instantiateWasm)
            try {
              return r2.instantiateWasm(t5, n5);
            } catch (t6) {
              g2("Module.instantiateWasm callback failed with error: " + t6), e2(t6);
            }
          return (h2 || "function" != typeof WebAssembly.instantiateStreaming || V2(B) || "function" != typeof fetch ? o3(i3) : fetch(B, { credentials: "same-origin" }).then(function(n6) {
            return WebAssembly.instantiateStreaming(n6, t5).then(i3, function(t6) {
              return g2("wasm streaming compile failed: " + t6), g2("falling back to ArrayBuffer instantiation"), o3(i3);
            });
          })).catch(e2), {};
        }
        function G2(t5) {
          for (; t5.length > 0; )
            t5.shift()(r2);
        }
        function J2(t5, n5, e3) {
          w.copyWithin(t5, n5, n5 + e3);
        }
        function K2(t5) {
          try {
            return p2.grow(t5 - y.byteLength + 65535 >>> 16), O2(p2.buffer), 1;
          } catch (t6) {
          }
        }
        function Q2(t5) {
          var n5, e3 = w.length, r3 = 2147483648;
          if ((t5 >>>= 0) > r3)
            return false;
          for (var i3 = 1; i3 <= 4; i3 *= 2) {
            var o3 = e3 * (1 + 0.2 / i3);
            if (o3 = Math.min(o3, t5 + 100663296), K2(Math.min(r3, (n5 = Math.max(t5, o3)) + (65536 - n5 % 65536) % 65536)))
              return true;
          }
          return false;
        }
        V2(B = "onig.wasm") || (B = l2(B)), H = "undefined" != typeof dateNow ? dateNow : () => performance.now();
        var X2 = [null, [], []];
        function Z2(t5, n5) {
          var e3 = X2[t5];
          0 === n5 || 10 === n5 ? ((1 === t5 ? d2 : g2)(A2(e3, 0)), e3.length = 0) : e3.push(n5);
        }
        function $2(t5, n5, e3, r3) {
          for (var i3 = 0, o3 = 0; o3 < e3; o3++) {
            var a2 = S2[n5 >> 2], f2 = S2[n5 + 4 >> 2];
            n5 += 8;
            for (var s2 = 0; s2 < f2; s2++)
              Z2(t5, w[a2 + s2]);
            i3 += f2;
          }
          return S2[r3 >> 2] = i3, 0;
        }
        var tt, nt2 = { emscripten_get_now: H, emscripten_memcpy_big: J2, emscripten_resize_heap: Q2, fd_write: $2 };
        function et(t5) {
          function e3() {
            tt || (tt = true, r2.calledRun = true, _2 || (T2(), n4(r2), r2.onRuntimeInitialized && r2.onRuntimeInitialized(), E2()));
          }
          W2 > 0 || (x2(), W2 > 0 || (r2.setStatus ? (r2.setStatus("Running..."), setTimeout(function() {
            setTimeout(function() {
              r2.setStatus("");
            }, 1), e3();
          }, 1)) : e3()));
        }
        if (Y2(), r2.___wasm_call_ctors = function() {
          return (r2.___wasm_call_ctors = r2.asm.__wasm_call_ctors).apply(null, arguments);
        }, r2.___errno_location = function() {
          return (r2.___errno_location = r2.asm.__errno_location).apply(null, arguments);
        }, r2._omalloc = function() {
          return (r2._omalloc = r2.asm.omalloc).apply(null, arguments);
        }, r2._ofree = function() {
          return (r2._ofree = r2.asm.ofree).apply(null, arguments);
        }, r2._getLastOnigError = function() {
          return (r2._getLastOnigError = r2.asm.getLastOnigError).apply(null, arguments);
        }, r2._createOnigScanner = function() {
          return (r2._createOnigScanner = r2.asm.createOnigScanner).apply(null, arguments);
        }, r2._freeOnigScanner = function() {
          return (r2._freeOnigScanner = r2.asm.freeOnigScanner).apply(null, arguments);
        }, r2._findNextOnigScannerMatch = function() {
          return (r2._findNextOnigScannerMatch = r2.asm.findNextOnigScannerMatch).apply(null, arguments);
        }, r2._findNextOnigScannerMatchDbg = function() {
          return (r2._findNextOnigScannerMatchDbg = r2.asm.findNextOnigScannerMatchDbg).apply(null, arguments);
        }, r2.stackSave = function() {
          return (r2.stackSave = r2.asm.stackSave).apply(null, arguments);
        }, r2.stackRestore = function() {
          return (r2.stackRestore = r2.asm.stackRestore).apply(null, arguments);
        }, r2.stackAlloc = function() {
          return (r2.stackAlloc = r2.asm.stackAlloc).apply(null, arguments);
        }, r2.dynCall_jiji = function() {
          return (r2.dynCall_jiji = r2.asm.dynCall_jiji).apply(null, arguments);
        }, r2.UTF8ToString = b2, C2 = function t5() {
          tt || et(), tt || (C2 = t5);
        }, r2.preInit)
          for ("function" == typeof r2.preInit && (r2.preInit = [r2.preInit]); r2.preInit.length > 0; )
            r2.preInit.pop()();
        return et(), t4.ready;
      });
      t3.exports = n3;
    } }, n2 = {}, function e2(r2) {
      var i2 = n2[r2];
      if (void 0 !== i2)
        return i2.exports;
      var o2 = n2[r2] = { exports: {} };
      return t2[r2].call(o2.exports, o2, o2.exports, e2), o2.exports;
    }(770);
    var t2, n2;
  });
})(main$1);
var mainExports = {};
var main$2 = {
  get exports() {
    return mainExports;
  },
  set exports(v2) {
    mainExports = v2;
  }
};
(function(module2, exports) {
  !function(e2, t2) {
    module2.exports = t2();
  }(commonjsGlobal, function() {
    return (() => {
      var e2 = { 350: (e3, t3) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.UseOnigurumaFindOptions = t3.DebugFlags = void 0, t3.DebugFlags = { InDebugMode: "undefined" != typeof process && !!process.env.VSCODE_TEXTMATE_DEBUG }, t3.UseOnigurumaFindOptions = false;
      }, 36: (e3, t3) => {
        var n2;
        Object.defineProperty(t3, "__esModule", { value: true }), t3.toOptionalTokenType = t3.EncodedTokenAttributes = void 0, (n2 = t3.EncodedTokenAttributes || (t3.EncodedTokenAttributes = {})).toBinaryStr = function(e4) {
          let t4 = e4.toString(2);
          for (; t4.length < 32; )
            t4 = "0" + t4;
          return t4;
        }, n2.print = function(e4) {
          const t4 = n2.getLanguageId(e4), s = n2.getTokenType(e4), r2 = n2.getFontStyle(e4), i2 = n2.getForeground(e4), o2 = n2.getBackground(e4);
          console.log({ languageId: t4, tokenType: s, fontStyle: r2, foreground: i2, background: o2 });
        }, n2.getLanguageId = function(e4) {
          return (255 & e4) >>> 0;
        }, n2.getTokenType = function(e4) {
          return (768 & e4) >>> 8;
        }, n2.containsBalancedBrackets = function(e4) {
          return 0 != (1024 & e4);
        }, n2.getFontStyle = function(e4) {
          return (30720 & e4) >>> 11;
        }, n2.getForeground = function(e4) {
          return (16744448 & e4) >>> 15;
        }, n2.getBackground = function(e4) {
          return (4278190080 & e4) >>> 24;
        }, n2.set = function(e4, t4, s, r2, i2, o2, c2) {
          let a2 = n2.getLanguageId(e4), l2 = n2.getTokenType(e4), u2 = n2.containsBalancedBrackets(e4) ? 1 : 0, h2 = n2.getFontStyle(e4), p2 = n2.getForeground(e4), d2 = n2.getBackground(e4);
          return 0 !== t4 && (a2 = t4), 8 !== s && (l2 = s), null !== r2 && (u2 = r2 ? 1 : 0), -1 !== i2 && (h2 = i2), 0 !== o2 && (p2 = o2), 0 !== c2 && (d2 = c2), (a2 << 0 | l2 << 8 | u2 << 10 | h2 << 11 | p2 << 15 | d2 << 24) >>> 0;
        }, t3.toOptionalTokenType = function(e4) {
          return e4;
        };
      }, 996: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.BasicScopeAttributesProvider = t3.BasicScopeAttributes = void 0;
        const s = n2(878);
        class r2 {
          constructor(e4, t4) {
            this.languageId = e4, this.tokenType = t4;
          }
        }
        t3.BasicScopeAttributes = r2;
        class i2 {
          constructor(e4, t4) {
            this._getBasicScopeAttributes = new s.CachedFn((e5) => {
              const t5 = this._scopeToLanguage(e5), n3 = this._toStandardTokenType(e5);
              return new r2(t5, n3);
            }), this._defaultAttributes = new r2(e4, 8), this._embeddedLanguagesMatcher = new o2(Object.entries(t4 || {}));
          }
          getDefaultAttributes() {
            return this._defaultAttributes;
          }
          getBasicScopeAttributes(e4) {
            return null === e4 ? i2._NULL_SCOPE_METADATA : this._getBasicScopeAttributes.get(e4);
          }
          _scopeToLanguage(e4) {
            return this._embeddedLanguagesMatcher.match(e4) || 0;
          }
          _toStandardTokenType(e4) {
            const t4 = e4.match(i2.STANDARD_TOKEN_TYPE_REGEXP);
            if (!t4)
              return 8;
            switch (t4[1]) {
              case "comment":
                return 1;
              case "string":
                return 2;
              case "regex":
                return 3;
              case "meta.embedded":
                return 0;
            }
            throw new Error("Unexpected match for standard token type!");
          }
        }
        t3.BasicScopeAttributesProvider = i2, i2._NULL_SCOPE_METADATA = new r2(0, 0), i2.STANDARD_TOKEN_TYPE_REGEXP = /\b(comment|string|regex|meta\.embedded)\b/;
        class o2 {
          constructor(e4) {
            if (0 === e4.length)
              this.values = null, this.scopesRegExp = null;
            else {
              this.values = new Map(e4);
              const t4 = e4.map(([e5, t5]) => s.escapeRegExpCharacters(e5));
              t4.sort(), t4.reverse(), this.scopesRegExp = new RegExp(`^((${t4.join(")|(")}))($|\\.)`, "");
            }
          }
          match(e4) {
            if (!this.scopesRegExp)
              return;
            const t4 = e4.match(this.scopesRegExp);
            return t4 ? this.values.get(t4[1]) : void 0;
          }
        }
      }, 947: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.LineTokens = t3.BalancedBracketSelectors = t3.StateStack = t3.AttributedScopeStack = t3.Grammar = t3.createGrammar = void 0;
        const s = n2(350), r2 = n2(36), i2 = n2(736), o2 = n2(44), c2 = n2(792), a2 = n2(583), l2 = n2(878), u2 = n2(996), h2 = n2(47);
        function p2(e4, t4, n3, s2, r3) {
          const o3 = i2.createMatchers(t4, d2), a3 = c2.RuleFactory.getCompiledRuleId(n3, s2, r3.repository);
          for (const n4 of o3)
            e4.push({ debugSelector: t4, matcher: n4.matcher, ruleId: a3, grammar: r3, priority: n4.priority });
        }
        function d2(e4, t4) {
          if (t4.length < e4.length)
            return false;
          let n3 = 0;
          return e4.every((e5) => {
            for (let s2 = n3; s2 < t4.length; s2++)
              if (f2(t4[s2], e5))
                return n3 = s2 + 1, true;
            return false;
          });
        }
        function f2(e4, t4) {
          if (!e4)
            return false;
          if (e4 === t4)
            return true;
          const n3 = t4.length;
          return e4.length > n3 && e4.substr(0, n3) === t4 && "." === e4[n3];
        }
        t3.createGrammar = function(e4, t4, n3, s2, r3, i3, o3, c3) {
          return new g2(e4, t4, n3, s2, r3, i3, o3, c3);
        };
        class g2 {
          constructor(e4, t4, n3, s2, r3, o3, c3, a3) {
            if (this._rootScopeName = e4, this.balancedBracketSelectors = o3, this._onigLib = a3, this._basicScopeAttributesProvider = new u2.BasicScopeAttributesProvider(n3, s2), this._rootId = -1, this._lastRuleId = 0, this._ruleId2desc = [null], this._includedGrammars = {}, this._grammarRepository = c3, this._grammar = m2(t4, null), this._injections = null, this._tokenTypeMatchers = [], r3)
              for (const e5 of Object.keys(r3)) {
                const t5 = i2.createMatchers(e5, d2);
                for (const n4 of t5)
                  this._tokenTypeMatchers.push({ matcher: n4.matcher, type: r3[e5] });
              }
          }
          get themeProvider() {
            return this._grammarRepository;
          }
          dispose() {
            for (const e4 of this._ruleId2desc)
              e4 && e4.dispose();
          }
          createOnigScanner(e4) {
            return this._onigLib.createOnigScanner(e4);
          }
          createOnigString(e4) {
            return this._onigLib.createOnigString(e4);
          }
          getMetadataForScope(e4) {
            return this._basicScopeAttributesProvider.getBasicScopeAttributes(e4);
          }
          _collectInjections() {
            const e4 = [], t4 = this._rootScopeName, n3 = ((e5) => e5 === this._rootScopeName ? this._grammar : this.getExternalGrammar(e5))(t4);
            if (n3) {
              const s2 = n3.injections;
              if (s2)
                for (let t5 in s2)
                  p2(e4, t5, s2[t5], this, n3);
              const r3 = this._grammarRepository.injections(t4);
              r3 && r3.forEach((t5) => {
                const n4 = this.getExternalGrammar(t5);
                if (n4) {
                  const t6 = n4.injectionSelector;
                  t6 && p2(e4, t6, n4, this, n4);
                }
              });
            }
            return e4.sort((e5, t5) => e5.priority - t5.priority), e4;
          }
          getInjections() {
            if (null === this._injections && (this._injections = this._collectInjections(), s.DebugFlags.InDebugMode && this._injections.length > 0)) {
              console.log(`Grammar ${this._rootScopeName} contains the following injections:`);
              for (const e4 of this._injections)
                console.log(`  - ${e4.debugSelector}`);
            }
            return this._injections;
          }
          registerRule(e4) {
            const t4 = ++this._lastRuleId, n3 = e4(c2.ruleIdFromNumber(t4));
            return this._ruleId2desc[t4] = n3, n3;
          }
          getRule(e4) {
            return this._ruleId2desc[c2.ruleIdToNumber(e4)];
          }
          getExternalGrammar(e4, t4) {
            if (this._includedGrammars[e4])
              return this._includedGrammars[e4];
            if (this._grammarRepository) {
              const n3 = this._grammarRepository.lookup(e4);
              if (n3)
                return this._includedGrammars[e4] = m2(n3, t4 && t4.$base), this._includedGrammars[e4];
            }
          }
          tokenizeLine(e4, t4, n3 = 0) {
            const s2 = this._tokenize(e4, t4, false, n3);
            return { tokens: s2.lineTokens.getResult(s2.ruleStack, s2.lineLength), ruleStack: s2.ruleStack, stoppedEarly: s2.stoppedEarly };
          }
          tokenizeLine2(e4, t4, n3 = 0) {
            const s2 = this._tokenize(e4, t4, true, n3);
            return { tokens: s2.lineTokens.getBinaryResult(s2.ruleStack, s2.lineLength), ruleStack: s2.ruleStack, stoppedEarly: s2.stoppedEarly };
          }
          _tokenize(e4, t4, n3, s2) {
            let i3;
            if (-1 === this._rootId && (this._rootId = c2.RuleFactory.getCompiledRuleId(this._grammar.repository.$self, this, this._grammar.repository)), t4 && t4 !== b2.NULL)
              i3 = false, t4.reset();
            else {
              i3 = true;
              const e5 = this._basicScopeAttributesProvider.getDefaultAttributes(), n4 = this.themeProvider.getDefaults(), s3 = r2.EncodedTokenAttributes.set(0, e5.languageId, e5.tokenType, null, n4.fontStyle, n4.foregroundId, n4.backgroundId), o3 = this.getRule(this._rootId).getName(null, null);
              let c3;
              c3 = o3 ? _2.createRootAndLookUpScopeName(o3, s3, this) : _2.createRoot("unknown", s3), t4 = new b2(null, this._rootId, -1, -1, false, null, c3, c3);
            }
            e4 += "\n";
            const a3 = this.createOnigString(e4), l3 = a3.content.length, u3 = new y(n3, e4, this._tokenTypeMatchers, this.balancedBracketSelectors), p3 = h2._tokenizeString(this, a3, i3, 0, t4, u3, true, s2);
            return o2.disposeOnigString(a3), { lineLength: l3, lineTokens: u3, ruleStack: p3.stack, stoppedEarly: p3.stoppedEarly };
          }
        }
        function m2(e4, t4) {
          return (e4 = l2.clone(e4)).repository = e4.repository || {}, e4.repository.$self = { $vscodeTextmateLocation: e4.$vscodeTextmateLocation, patterns: e4.patterns, name: e4.scopeName }, e4.repository.$base = t4 || e4.repository.$self, e4;
        }
        t3.Grammar = g2;
        class _2 {
          constructor(e4, t4, n3) {
            this.parent = e4, this.scopePath = t4, this.tokenAttributes = n3;
          }
          static createRoot(e4, t4) {
            return new _2(null, new a2.ScopeStack(null, e4), t4);
          }
          static createRootAndLookUpScopeName(e4, t4, n3) {
            const s2 = n3.getMetadataForScope(e4), r3 = new a2.ScopeStack(null, e4), i3 = n3.themeProvider.themeMatch(r3), o3 = _2.mergeAttributes(t4, s2, i3);
            return new _2(null, r3, o3);
          }
          get scopeName() {
            return this.scopePath.scopeName;
          }
          equals(e4) {
            return _2._equals(this, e4);
          }
          static _equals(e4, t4) {
            for (; ; ) {
              if (e4 === t4)
                return true;
              if (!e4 && !t4)
                return true;
              if (!e4 || !t4)
                return false;
              if (e4.scopeName !== t4.scopeName || e4.tokenAttributes !== t4.tokenAttributes)
                return false;
              e4 = e4.parent, t4 = t4.parent;
            }
          }
          static mergeAttributes(e4, t4, n3) {
            let s2 = -1, i3 = 0, o3 = 0;
            return null !== n3 && (s2 = n3.fontStyle, i3 = n3.foregroundId, o3 = n3.backgroundId), r2.EncodedTokenAttributes.set(e4, t4.languageId, t4.tokenType, null, s2, i3, o3);
          }
          pushAttributed(e4, t4) {
            if (null === e4)
              return this;
            if (-1 === e4.indexOf(" "))
              return _2._pushAttributed(this, e4, t4);
            const n3 = e4.split(/ /g);
            let s2 = this;
            for (const e5 of n3)
              s2 = _2._pushAttributed(s2, e5, t4);
            return s2;
          }
          static _pushAttributed(e4, t4, n3) {
            const s2 = n3.getMetadataForScope(t4), r3 = e4.scopePath.push(t4), i3 = n3.themeProvider.themeMatch(r3), o3 = _2.mergeAttributes(e4.tokenAttributes, s2, i3);
            return new _2(e4, r3, o3);
          }
          getScopeNames() {
            return this.scopePath.getSegments();
          }
        }
        t3.AttributedScopeStack = _2;
        class b2 {
          constructor(e4, t4, n3, s2, r3, i3, o3, c3) {
            this.parent = e4, this.ruleId = t4, this.beginRuleCapturedEOL = r3, this.endRule = i3, this.nameScopesList = o3, this.contentNameScopesList = c3, this._stackElementBrand = void 0, this.depth = this.parent ? this.parent.depth + 1 : 1, this._enterPos = n3, this._anchorPos = s2;
          }
          equals(e4) {
            return null !== e4 && b2._equals(this, e4);
          }
          static _equals(e4, t4) {
            return e4 === t4 || !!this._structuralEquals(e4, t4) && e4.contentNameScopesList.equals(t4.contentNameScopesList);
          }
          static _structuralEquals(e4, t4) {
            for (; ; ) {
              if (e4 === t4)
                return true;
              if (!e4 && !t4)
                return true;
              if (!e4 || !t4)
                return false;
              if (e4.depth !== t4.depth || e4.ruleId !== t4.ruleId || e4.endRule !== t4.endRule)
                return false;
              e4 = e4.parent, t4 = t4.parent;
            }
          }
          clone() {
            return this;
          }
          static _reset(e4) {
            for (; e4; )
              e4._enterPos = -1, e4._anchorPos = -1, e4 = e4.parent;
          }
          reset() {
            b2._reset(this);
          }
          pop() {
            return this.parent;
          }
          safePop() {
            return this.parent ? this.parent : this;
          }
          push(e4, t4, n3, s2, r3, i3, o3) {
            return new b2(this, e4, t4, n3, s2, r3, i3, o3);
          }
          getEnterPos() {
            return this._enterPos;
          }
          getAnchorPos() {
            return this._anchorPos;
          }
          getRule(e4) {
            return e4.getRule(this.ruleId);
          }
          toString() {
            const e4 = [];
            return this._writeString(e4, 0), "[" + e4.join(",") + "]";
          }
          _writeString(e4, t4) {
            return this.parent && (t4 = this.parent._writeString(e4, t4)), e4[t4++] = `(${this.ruleId}, TODO-${this.nameScopesList}, TODO-${this.contentNameScopesList})`, t4;
          }
          withContentNameScopesList(e4) {
            return this.contentNameScopesList === e4 ? this : this.parent.push(this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, this.endRule, this.nameScopesList, e4);
          }
          withEndRule(e4) {
            return this.endRule === e4 ? this : new b2(this.parent, this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, e4, this.nameScopesList, this.contentNameScopesList);
          }
          hasSameRuleAs(e4) {
            let t4 = this;
            for (; t4 && t4._enterPos === e4._enterPos; ) {
              if (t4.ruleId === e4.ruleId)
                return true;
              t4 = t4.parent;
            }
            return false;
          }
        }
        t3.StateStack = b2, b2.NULL = new b2(null, 0, 0, 0, false, null, null, null), t3.BalancedBracketSelectors = class {
          constructor(e4, t4) {
            this.allowAny = false, this.balancedBracketScopes = e4.flatMap((e5) => "*" === e5 ? (this.allowAny = true, []) : i2.createMatchers(e5, d2).map((e6) => e6.matcher)), this.unbalancedBracketScopes = t4.flatMap((e5) => i2.createMatchers(e5, d2).map((e6) => e6.matcher));
          }
          get matchesAlways() {
            return this.allowAny && 0 === this.unbalancedBracketScopes.length;
          }
          get matchesNever() {
            return 0 === this.balancedBracketScopes.length && !this.allowAny;
          }
          match(e4) {
            for (const t4 of this.unbalancedBracketScopes)
              if (t4(e4))
                return false;
            for (const t4 of this.balancedBracketScopes)
              if (t4(e4))
                return true;
            return this.allowAny;
          }
        };
        class y {
          constructor(e4, t4, n3, r3) {
            this.balancedBracketSelectors = r3, this._emitBinaryTokens = e4, this._tokenTypeOverrides = n3, s.DebugFlags.InDebugMode ? this._lineText = t4 : this._lineText = null, this._tokens = [], this._binaryTokens = [], this._lastTokenEndIndex = 0;
          }
          produce(e4, t4) {
            this.produceFromScopes(e4.contentNameScopesList, t4);
          }
          produceFromScopes(e4, t4) {
            var _a2;
            if (this._lastTokenEndIndex >= t4)
              return;
            if (this._emitBinaryTokens) {
              let n4 = e4.tokenAttributes, i3 = false;
              if (((_a2 = this.balancedBracketSelectors) == null ? void 0 : _a2.matchesAlways) && (i3 = true), this._tokenTypeOverrides.length > 0 || this.balancedBracketSelectors && !this.balancedBracketSelectors.matchesAlways && !this.balancedBracketSelectors.matchesNever) {
                const t5 = e4.getScopeNames();
                for (const e5 of this._tokenTypeOverrides)
                  e5.matcher(t5) && (n4 = r2.EncodedTokenAttributes.set(n4, 0, r2.toOptionalTokenType(e5.type), null, -1, 0, 0));
                this.balancedBracketSelectors && (i3 = this.balancedBracketSelectors.match(t5));
              }
              if (i3 && (n4 = r2.EncodedTokenAttributes.set(n4, 0, 8, i3, -1, 0, 0)), this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === n4)
                return void (this._lastTokenEndIndex = t4);
              if (s.DebugFlags.InDebugMode) {
                const n5 = e4.getScopeNames();
                console.log("  token: |" + this._lineText.substring(this._lastTokenEndIndex, t4).replace(/\n$/, "\\n") + "|");
                for (let e5 = 0; e5 < n5.length; e5++)
                  console.log("      * " + n5[e5]);
              }
              return this._binaryTokens.push(this._lastTokenEndIndex), this._binaryTokens.push(n4), void (this._lastTokenEndIndex = t4);
            }
            const n3 = e4.getScopeNames();
            if (s.DebugFlags.InDebugMode) {
              console.log("  token: |" + this._lineText.substring(this._lastTokenEndIndex, t4).replace(/\n$/, "\\n") + "|");
              for (let e5 = 0; e5 < n3.length; e5++)
                console.log("      * " + n3[e5]);
            }
            this._tokens.push({ startIndex: this._lastTokenEndIndex, endIndex: t4, scopes: n3 }), this._lastTokenEndIndex = t4;
          }
          getResult(e4, t4) {
            return this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === t4 - 1 && this._tokens.pop(), 0 === this._tokens.length && (this._lastTokenEndIndex = -1, this.produce(e4, t4), this._tokens[this._tokens.length - 1].startIndex = 0), this._tokens;
          }
          getBinaryResult(e4, t4) {
            this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === t4 - 1 && (this._binaryTokens.pop(), this._binaryTokens.pop()), 0 === this._binaryTokens.length && (this._lastTokenEndIndex = -1, this.produce(e4, t4), this._binaryTokens[this._binaryTokens.length - 2] = 0);
            const n3 = new Uint32Array(this._binaryTokens.length);
            for (let e5 = 0, t5 = this._binaryTokens.length; e5 < t5; e5++)
              n3[e5] = this._binaryTokens[e5];
            return n3;
          }
        }
        t3.LineTokens = y;
      }, 965: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.parseInclude = t3.TopLevelRepositoryReference = t3.TopLevelReference = t3.RelativeReference = t3.SelfReference = t3.BaseReference = t3.ScopeDependencyProcessor = t3.ExternalReferenceCollector = t3.TopLevelRepositoryRuleReference = t3.TopLevelRuleReference = void 0;
        const s = n2(878);
        class r2 {
          constructor(e4) {
            this.scopeName = e4;
          }
          toKey() {
            return this.scopeName;
          }
        }
        t3.TopLevelRuleReference = r2;
        class i2 {
          constructor(e4, t4) {
            this.scopeName = e4, this.ruleName = t4;
          }
          toKey() {
            return `${this.scopeName}#${this.ruleName}`;
          }
        }
        t3.TopLevelRepositoryRuleReference = i2;
        class o2 {
          constructor() {
            this._references = [], this._seenReferenceKeys = /* @__PURE__ */ new Set(), this.visitedRule = /* @__PURE__ */ new Set();
          }
          get references() {
            return this._references;
          }
          add(e4) {
            const t4 = e4.toKey();
            this._seenReferenceKeys.has(t4) || (this._seenReferenceKeys.add(t4), this._references.push(e4));
          }
        }
        function c2(e4, t4, n3, s2) {
          const i3 = n3.lookup(e4.scopeName);
          if (!i3) {
            if (e4.scopeName === t4)
              throw new Error(`No grammar provided for <${t4}>`);
            return;
          }
          const o3 = n3.lookup(t4);
          e4 instanceof r2 ? l2({ baseGrammar: o3, selfGrammar: i3 }, s2) : a2(e4.ruleName, { baseGrammar: o3, selfGrammar: i3, repository: i3.repository }, s2);
          const c3 = n3.injections(e4.scopeName);
          if (c3)
            for (const e5 of c3)
              s2.add(new r2(e5));
        }
        function a2(e4, t4, n3) {
          t4.repository && t4.repository[e4] && u2([t4.repository[e4]], t4, n3);
        }
        function l2(e4, t4) {
          e4.selfGrammar.patterns && Array.isArray(e4.selfGrammar.patterns) && u2(e4.selfGrammar.patterns, { ...e4, repository: e4.selfGrammar.repository }, t4), e4.selfGrammar.injections && u2(Object.values(e4.selfGrammar.injections), { ...e4, repository: e4.selfGrammar.repository }, t4);
        }
        function u2(e4, t4, n3) {
          for (const o3 of e4) {
            if (n3.visitedRule.has(o3))
              continue;
            n3.visitedRule.add(o3);
            const e5 = o3.repository ? s.mergeObjects({}, t4.repository, o3.repository) : t4.repository;
            Array.isArray(o3.patterns) && u2(o3.patterns, { ...t4, repository: e5 }, n3);
            const c3 = o3.include;
            if (!c3)
              continue;
            const h3 = m2(c3);
            switch (h3.kind) {
              case 0:
                l2({ ...t4, selfGrammar: t4.baseGrammar }, n3);
                break;
              case 1:
                l2(t4, n3);
                break;
              case 2:
                a2(h3.ruleName, { ...t4, repository: e5 }, n3);
                break;
              case 3:
              case 4:
                const s2 = h3.scopeName === t4.selfGrammar.scopeName ? t4.selfGrammar : h3.scopeName === t4.baseGrammar.scopeName ? t4.baseGrammar : void 0;
                if (s2) {
                  const r3 = { baseGrammar: t4.baseGrammar, selfGrammar: s2, repository: e5 };
                  4 === h3.kind ? a2(h3.ruleName, r3, n3) : l2(r3, n3);
                } else
                  4 === h3.kind ? n3.add(new i2(h3.scopeName, h3.ruleName)) : n3.add(new r2(h3.scopeName));
            }
          }
        }
        t3.ExternalReferenceCollector = o2, t3.ScopeDependencyProcessor = class {
          constructor(e4, t4) {
            this.repo = e4, this.initialScopeName = t4, this.seenFullScopeRequests = /* @__PURE__ */ new Set(), this.seenPartialScopeRequests = /* @__PURE__ */ new Set(), this.seenFullScopeRequests.add(this.initialScopeName), this.Q = [new r2(this.initialScopeName)];
          }
          processQueue() {
            const e4 = this.Q;
            this.Q = [];
            const t4 = new o2();
            for (const n3 of e4)
              c2(n3, this.initialScopeName, this.repo, t4);
            for (const e5 of t4.references)
              if (e5 instanceof r2) {
                if (this.seenFullScopeRequests.has(e5.scopeName))
                  continue;
                this.seenFullScopeRequests.add(e5.scopeName), this.Q.push(e5);
              } else {
                if (this.seenFullScopeRequests.has(e5.scopeName))
                  continue;
                if (this.seenPartialScopeRequests.has(e5.toKey()))
                  continue;
                this.seenPartialScopeRequests.add(e5.toKey()), this.Q.push(e5);
              }
          }
        };
        class h2 {
          constructor() {
            this.kind = 0;
          }
        }
        t3.BaseReference = h2;
        class p2 {
          constructor() {
            this.kind = 1;
          }
        }
        t3.SelfReference = p2;
        class d2 {
          constructor(e4) {
            this.ruleName = e4, this.kind = 2;
          }
        }
        t3.RelativeReference = d2;
        class f2 {
          constructor(e4) {
            this.scopeName = e4, this.kind = 3;
          }
        }
        t3.TopLevelReference = f2;
        class g2 {
          constructor(e4, t4) {
            this.scopeName = e4, this.ruleName = t4, this.kind = 4;
          }
        }
        function m2(e4) {
          if ("$base" === e4)
            return new h2();
          if ("$self" === e4)
            return new p2();
          const t4 = e4.indexOf("#");
          if (-1 === t4)
            return new f2(e4);
          if (0 === t4)
            return new d2(e4.substring(1));
          {
            const n3 = e4.substring(0, t4), s2 = e4.substring(t4 + 1);
            return new g2(n3, s2);
          }
        }
        t3.TopLevelRepositoryReference = g2, t3.parseInclude = m2;
      }, 391: function(e3, t3, n2) {
        var s = this && this.__createBinding || (Object.create ? function(e4, t4, n3, s2) {
          void 0 === s2 && (s2 = n3), Object.defineProperty(e4, s2, { enumerable: true, get: function() {
            return t4[n3];
          } });
        } : function(e4, t4, n3, s2) {
          void 0 === s2 && (s2 = n3), e4[s2] = t4[n3];
        }), r2 = this && this.__exportStar || function(e4, t4) {
          for (var n3 in e4)
            "default" === n3 || Object.prototype.hasOwnProperty.call(t4, n3) || s(t4, e4, n3);
        };
        Object.defineProperty(t3, "__esModule", { value: true }), r2(n2(947), t3);
      }, 47: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.LocalStackElement = t3._tokenizeString = void 0;
        const s = n2(350), r2 = n2(44), i2 = n2(792), o2 = n2(878);
        class c2 {
          constructor(e4, t4) {
            this.stack = e4, this.stoppedEarly = t4;
          }
        }
        function a2(e4, t4, n3, r3, a3, h3, d3, f2) {
          const g2 = t4.content.length;
          let m2 = false, _2 = -1;
          if (d3) {
            const o3 = function(e5, t5, n4, r4, o4, c3) {
              let a4 = o4.beginRuleCapturedEOL ? 0 : -1;
              const l3 = [];
              for (let t6 = o4; t6; t6 = t6.pop()) {
                const n5 = t6.getRule(e5);
                n5 instanceof i2.BeginWhileRule && l3.push({ rule: n5, stack: t6 });
              }
              for (let h4 = l3.pop(); h4; h4 = l3.pop()) {
                const { ruleScanner: l4, findOptions: d4 } = u2(h4.rule, e5, h4.stack.endRule, n4, r4 === a4), f3 = l4.findNextMatchSync(t5, r4, d4);
                if (s.DebugFlags.InDebugMode && (console.log("  scanning for while rule"), console.log(l4.toString())), !f3) {
                  s.DebugFlags.InDebugMode && console.log("  popping " + h4.rule.debugName + " - " + h4.rule.debugWhileRegExp), o4 = h4.stack.pop();
                  break;
                }
                if (f3.ruleId !== i2.whileRuleId) {
                  o4 = h4.stack.pop();
                  break;
                }
                f3.captureIndices && f3.captureIndices.length && (c3.produce(h4.stack, f3.captureIndices[0].start), p2(e5, t5, n4, h4.stack, c3, h4.rule.whileCaptures, f3.captureIndices), c3.produce(h4.stack, f3.captureIndices[0].end), a4 = f3.captureIndices[0].end, f3.captureIndices[0].end > r4 && (r4 = f3.captureIndices[0].end, n4 = false));
              }
              return { stack: o4, linePos: r4, anchorPosition: a4, isFirstLine: n4 };
            }(e4, t4, n3, r3, a3, h3);
            a3 = o3.stack, r3 = o3.linePos, n3 = o3.isFirstLine, _2 = o3.anchorPosition;
          }
          const b2 = Date.now();
          for (; !m2; ) {
            if (0 !== f2 && Date.now() - b2 > f2)
              return new c2(a3, true);
            y();
          }
          return new c2(a3, false);
          function y() {
            s.DebugFlags.InDebugMode && (console.log(""), console.log(`@@scanNext ${r3}: |${t4.content.substr(r3).replace(/\n$/, "\\n")}|`));
            const c3 = function(e5, t5, n4, r4, i3, c4) {
              const a4 = function(e6, t6, n5, r5, i4, c5) {
                const a5 = i4.getRule(e6), { ruleScanner: u5, findOptions: h5 } = l2(a5, e6, i4.endRule, n5, r5 === c5);
                let p4 = 0;
                s.DebugFlags.InDebugMode && (p4 = o2.performanceNow());
                const d6 = u5.findNextMatchSync(t6, r5, h5);
                if (s.DebugFlags.InDebugMode) {
                  const e7 = o2.performanceNow() - p4;
                  e7 > 5 && console.warn(`Rule ${a5.debugName} (${a5.id}) matching took ${e7} against '${t6}'`), console.log(`  scanning for (linePos: ${r5}, anchorPosition: ${c5})`), console.log(u5.toString()), d6 && console.log(`matched rule id: ${d6.ruleId} from ${d6.captureIndices[0].start} to ${d6.captureIndices[0].end}`);
                }
                return d6 ? { captureIndices: d6.captureIndices, matchedRuleId: d6.ruleId } : null;
              }(e5, t5, n4, r4, i3, c4), u4 = e5.getInjections();
              if (0 === u4.length)
                return a4;
              const h4 = function(e6, t6, n5, r5, i4, o3, c5) {
                let a5, u5 = Number.MAX_VALUE, h5 = null, p4 = 0;
                const d6 = o3.contentNameScopesList.getScopeNames();
                for (let o4 = 0, f4 = e6.length; o4 < f4; o4++) {
                  const f5 = e6[o4];
                  if (!f5.matcher(d6))
                    continue;
                  const g3 = t6.getRule(f5.ruleId), { ruleScanner: m3, findOptions: _3 } = l2(g3, t6, null, r5, i4 === c5), b3 = m3.findNextMatchSync(n5, i4, _3);
                  if (!b3)
                    continue;
                  s.DebugFlags.InDebugMode && (console.log(`  matched injection: ${f5.debugSelector}`), console.log(m3.toString()));
                  const y2 = b3.captureIndices[0].start;
                  if (!(y2 >= u5) && (u5 = y2, h5 = b3.captureIndices, a5 = b3.ruleId, p4 = f5.priority, u5 === i4))
                    break;
                }
                return h5 ? { priorityMatch: -1 === p4, captureIndices: h5, matchedRuleId: a5 } : null;
              }(u4, e5, t5, n4, r4, i3, c4);
              if (!h4)
                return a4;
              if (!a4)
                return h4;
              const p3 = a4.captureIndices[0].start, d5 = h4.captureIndices[0].start;
              return d5 < p3 || h4.priorityMatch && d5 === p3 ? h4 : a4;
            }(e4, t4, n3, r3, a3, _2);
            if (!c3)
              return s.DebugFlags.InDebugMode && console.log("  no more matches."), h3.produce(a3, g2), void (m2 = true);
            const u3 = c3.captureIndices, d4 = c3.matchedRuleId, f3 = !!(u3 && u3.length > 0) && u3[0].end > r3;
            if (d4 === i2.endRuleId) {
              const i3 = a3.getRule(e4);
              s.DebugFlags.InDebugMode && console.log("  popping " + i3.debugName + " - " + i3.debugEndRegExp), h3.produce(a3, u3[0].start), a3 = a3.withContentNameScopesList(a3.nameScopesList), p2(e4, t4, n3, a3, h3, i3.endCaptures, u3), h3.produce(a3, u3[0].end);
              const o3 = a3;
              if (a3 = a3.parent, _2 = o3.getAnchorPos(), !f3 && o3.getEnterPos() === r3)
                return s.DebugFlags.InDebugMode && console.error("[1] - Grammar is in an endless loop - Grammar pushed & popped a rule without advancing"), a3 = o3, h3.produce(a3, g2), void (m2 = true);
            } else {
              const o3 = e4.getRule(d4);
              h3.produce(a3, u3[0].start);
              const c4 = a3, l3 = o3.getName(t4.content, u3), b3 = a3.contentNameScopesList.pushAttributed(l3, e4);
              if (a3 = a3.push(d4, r3, _2, u3[0].end === g2, null, b3, b3), o3 instanceof i2.BeginEndRule) {
                const r4 = o3;
                s.DebugFlags.InDebugMode && console.log("  pushing " + r4.debugName + " - " + r4.debugBeginRegExp), p2(e4, t4, n3, a3, h3, r4.beginCaptures, u3), h3.produce(a3, u3[0].end), _2 = u3[0].end;
                const i3 = r4.getContentName(t4.content, u3), l4 = b3.pushAttributed(i3, e4);
                if (a3 = a3.withContentNameScopesList(l4), r4.endHasBackReferences && (a3 = a3.withEndRule(r4.getEndWithResolvedBackReferences(t4.content, u3))), !f3 && c4.hasSameRuleAs(a3))
                  return s.DebugFlags.InDebugMode && console.error("[2] - Grammar is in an endless loop - Grammar pushed the same rule without advancing"), a3 = a3.pop(), h3.produce(a3, g2), void (m2 = true);
              } else if (o3 instanceof i2.BeginWhileRule) {
                const r4 = o3;
                s.DebugFlags.InDebugMode && console.log("  pushing " + r4.debugName), p2(e4, t4, n3, a3, h3, r4.beginCaptures, u3), h3.produce(a3, u3[0].end), _2 = u3[0].end;
                const i3 = r4.getContentName(t4.content, u3), l4 = b3.pushAttributed(i3, e4);
                if (a3 = a3.withContentNameScopesList(l4), r4.whileHasBackReferences && (a3 = a3.withEndRule(r4.getWhileWithResolvedBackReferences(t4.content, u3))), !f3 && c4.hasSameRuleAs(a3))
                  return s.DebugFlags.InDebugMode && console.error("[3] - Grammar is in an endless loop - Grammar pushed the same rule without advancing"), a3 = a3.pop(), h3.produce(a3, g2), void (m2 = true);
              } else {
                const r4 = o3;
                if (s.DebugFlags.InDebugMode && console.log("  matched " + r4.debugName + " - " + r4.debugMatchRegExp), p2(e4, t4, n3, a3, h3, r4.captures, u3), h3.produce(a3, u3[0].end), a3 = a3.pop(), !f3)
                  return s.DebugFlags.InDebugMode && console.error("[4] - Grammar is in an endless loop - Grammar is not advancing, nor is it pushing/popping"), a3 = a3.safePop(), h3.produce(a3, g2), void (m2 = true);
              }
            }
            u3[0].end > r3 && (r3 = u3[0].end, n3 = false);
          }
        }
        function l2(e4, t4, n3, r3, i3) {
          return s.UseOnigurumaFindOptions ? { ruleScanner: e4.compile(t4, n3), findOptions: h2(r3, i3) } : { ruleScanner: e4.compileAG(t4, n3, r3, i3), findOptions: 0 };
        }
        function u2(e4, t4, n3, r3, i3) {
          return s.UseOnigurumaFindOptions ? { ruleScanner: e4.compileWhile(t4, n3), findOptions: h2(r3, i3) } : { ruleScanner: e4.compileWhileAG(t4, n3, r3, i3), findOptions: 0 };
        }
        function h2(e4, t4) {
          let n3 = 0;
          return e4 || (n3 |= 1), t4 || (n3 |= 4), n3;
        }
        function p2(e4, t4, n3, s2, i3, o3, c3) {
          if (0 === o3.length)
            return;
          const l3 = t4.content, u3 = Math.min(o3.length, c3.length), h3 = [], p3 = c3[0].end;
          for (let t5 = 0; t5 < u3; t5++) {
            const u4 = o3[t5];
            if (null === u4)
              continue;
            const f2 = c3[t5];
            if (0 === f2.length)
              continue;
            if (f2.start > p3)
              break;
            for (; h3.length > 0 && h3[h3.length - 1].endPos <= f2.start; )
              i3.produceFromScopes(h3[h3.length - 1].scopes, h3[h3.length - 1].endPos), h3.pop();
            if (h3.length > 0 ? i3.produceFromScopes(h3[h3.length - 1].scopes, f2.start) : i3.produce(s2, f2.start), u4.retokenizeCapturedWithRuleId) {
              const t6 = u4.getName(l3, c3), o4 = s2.contentNameScopesList.pushAttributed(t6, e4), h4 = u4.getContentName(l3, c3), p4 = o4.pushAttributed(h4, e4), d3 = s2.push(u4.retokenizeCapturedWithRuleId, f2.start, -1, false, null, o4, p4), g3 = e4.createOnigString(l3.substring(0, f2.end));
              a2(e4, g3, n3 && 0 === f2.start, f2.start, d3, i3, false, 0), r2.disposeOnigString(g3);
              continue;
            }
            const g2 = u4.getName(l3, c3);
            if (null !== g2) {
              const t6 = (h3.length > 0 ? h3[h3.length - 1].scopes : s2.contentNameScopesList).pushAttributed(g2, e4);
              h3.push(new d2(t6, f2.end));
            }
          }
          for (; h3.length > 0; )
            i3.produceFromScopes(h3[h3.length - 1].scopes, h3[h3.length - 1].endPos), h3.pop();
        }
        t3._tokenizeString = a2;
        class d2 {
          constructor(e4, t4) {
            this.scopes = e4, this.endPos = t4;
          }
        }
        t3.LocalStackElement = d2;
      }, 974: (e3, t3) => {
        function n2(e4, t4) {
          throw new Error("Near offset " + e4.pos + ": " + t4 + " ~~~" + e4.source.substr(e4.pos, 50) + "~~~");
        }
        Object.defineProperty(t3, "__esModule", { value: true }), t3.parseJSON = void 0, t3.parseJSON = function(e4, t4, o2) {
          let c2 = new s(e4), a2 = new r2(), l2 = 0, u2 = null, h2 = [], p2 = [];
          function d2() {
            h2.push(l2), p2.push(u2);
          }
          function f2() {
            l2 = h2.pop(), u2 = p2.pop();
          }
          function g2(e5) {
            n2(c2, e5);
          }
          for (; i2(c2, a2); ) {
            if (0 === l2) {
              if (null !== u2 && g2("too many constructs in root"), 3 === a2.type) {
                u2 = {}, o2 && (u2.$vscodeTextmateLocation = a2.toLocation(t4)), d2(), l2 = 1;
                continue;
              }
              if (2 === a2.type) {
                u2 = [], d2(), l2 = 4;
                continue;
              }
              g2("unexpected token in root");
            }
            if (2 === l2) {
              if (5 === a2.type) {
                f2();
                continue;
              }
              if (7 === a2.type) {
                l2 = 3;
                continue;
              }
              g2("expected , or }");
            }
            if (1 === l2 || 3 === l2) {
              if (1 === l2 && 5 === a2.type) {
                f2();
                continue;
              }
              if (1 === a2.type) {
                let e5 = a2.value;
                if (i2(c2, a2) && 6 === a2.type || g2("expected colon"), i2(c2, a2) || g2("expected value"), l2 = 2, 1 === a2.type) {
                  u2[e5] = a2.value;
                  continue;
                }
                if (8 === a2.type) {
                  u2[e5] = null;
                  continue;
                }
                if (9 === a2.type) {
                  u2[e5] = true;
                  continue;
                }
                if (10 === a2.type) {
                  u2[e5] = false;
                  continue;
                }
                if (11 === a2.type) {
                  u2[e5] = parseFloat(a2.value);
                  continue;
                }
                if (2 === a2.type) {
                  let t5 = [];
                  u2[e5] = t5, d2(), l2 = 4, u2 = t5;
                  continue;
                }
                if (3 === a2.type) {
                  let n3 = {};
                  o2 && (n3.$vscodeTextmateLocation = a2.toLocation(t4)), u2[e5] = n3, d2(), l2 = 1, u2 = n3;
                  continue;
                }
              }
              g2("unexpected token in dict");
            }
            if (5 === l2) {
              if (4 === a2.type) {
                f2();
                continue;
              }
              if (7 === a2.type) {
                l2 = 6;
                continue;
              }
              g2("expected , or ]");
            }
            if (4 === l2 || 6 === l2) {
              if (4 === l2 && 4 === a2.type) {
                f2();
                continue;
              }
              if (l2 = 5, 1 === a2.type) {
                u2.push(a2.value);
                continue;
              }
              if (8 === a2.type) {
                u2.push(null);
                continue;
              }
              if (9 === a2.type) {
                u2.push(true);
                continue;
              }
              if (10 === a2.type) {
                u2.push(false);
                continue;
              }
              if (11 === a2.type) {
                u2.push(parseFloat(a2.value));
                continue;
              }
              if (2 === a2.type) {
                let e5 = [];
                u2.push(e5), d2(), l2 = 4, u2 = e5;
                continue;
              }
              if (3 === a2.type) {
                let e5 = {};
                o2 && (e5.$vscodeTextmateLocation = a2.toLocation(t4)), u2.push(e5), d2(), l2 = 1, u2 = e5;
                continue;
              }
              g2("unexpected token in array");
            }
            g2("unknown state");
          }
          return 0 !== p2.length && g2("unclosed constructs"), u2;
        };
        class s {
          constructor(e4) {
            this.source = e4, this.pos = 0, this.len = e4.length, this.line = 1, this.char = 0;
          }
        }
        class r2 {
          constructor() {
            this.value = null, this.type = 0, this.offset = -1, this.len = -1, this.line = -1, this.char = -1;
          }
          toLocation(e4) {
            return { filename: e4, line: this.line, char: this.char };
          }
        }
        function i2(e4, t4) {
          t4.value = null, t4.type = 0, t4.offset = -1, t4.len = -1, t4.line = -1, t4.char = -1;
          let s2, r3 = e4.source, i3 = e4.pos, o2 = e4.len, c2 = e4.line, a2 = e4.char;
          for (; ; ) {
            if (i3 >= o2)
              return false;
            if (s2 = r3.charCodeAt(i3), 32 !== s2 && 9 !== s2 && 13 !== s2) {
              if (10 !== s2)
                break;
              i3++, c2++, a2 = 0;
            } else
              i3++, a2++;
          }
          if (t4.offset = i3, t4.line = c2, t4.char = a2, 34 === s2) {
            for (t4.type = 1, i3++, a2++; ; ) {
              if (i3 >= o2)
                return false;
              if (s2 = r3.charCodeAt(i3), i3++, a2++, 92 !== s2) {
                if (34 === s2)
                  break;
              } else
                i3++, a2++;
            }
            t4.value = r3.substring(t4.offset + 1, i3 - 1).replace(/\\u([0-9A-Fa-f]{4})/g, (e5, t5) => String.fromCodePoint(parseInt(t5, 16))).replace(/\\(.)/g, (t5, s3) => {
              switch (s3) {
                case '"':
                  return '"';
                case "\\":
                  return "\\";
                case "/":
                  return "/";
                case "b":
                  return "\b";
                case "f":
                  return "\f";
                case "n":
                  return "\n";
                case "r":
                  return "\r";
                case "t":
                  return "	";
                default:
                  n2(e4, "invalid escape sequence");
              }
              throw new Error("unreachable");
            });
          } else if (91 === s2)
            t4.type = 2, i3++, a2++;
          else if (123 === s2)
            t4.type = 3, i3++, a2++;
          else if (93 === s2)
            t4.type = 4, i3++, a2++;
          else if (125 === s2)
            t4.type = 5, i3++, a2++;
          else if (58 === s2)
            t4.type = 6, i3++, a2++;
          else if (44 === s2)
            t4.type = 7, i3++, a2++;
          else if (110 === s2) {
            if (t4.type = 8, i3++, a2++, s2 = r3.charCodeAt(i3), 117 !== s2)
              return false;
            if (i3++, a2++, s2 = r3.charCodeAt(i3), 108 !== s2)
              return false;
            if (i3++, a2++, s2 = r3.charCodeAt(i3), 108 !== s2)
              return false;
            i3++, a2++;
          } else if (116 === s2) {
            if (t4.type = 9, i3++, a2++, s2 = r3.charCodeAt(i3), 114 !== s2)
              return false;
            if (i3++, a2++, s2 = r3.charCodeAt(i3), 117 !== s2)
              return false;
            if (i3++, a2++, s2 = r3.charCodeAt(i3), 101 !== s2)
              return false;
            i3++, a2++;
          } else if (102 === s2) {
            if (t4.type = 10, i3++, a2++, s2 = r3.charCodeAt(i3), 97 !== s2)
              return false;
            if (i3++, a2++, s2 = r3.charCodeAt(i3), 108 !== s2)
              return false;
            if (i3++, a2++, s2 = r3.charCodeAt(i3), 115 !== s2)
              return false;
            if (i3++, a2++, s2 = r3.charCodeAt(i3), 101 !== s2)
              return false;
            i3++, a2++;
          } else
            for (t4.type = 11; ; ) {
              if (i3 >= o2)
                return false;
              if (s2 = r3.charCodeAt(i3), !(46 === s2 || s2 >= 48 && s2 <= 57 || 101 === s2 || 69 === s2 || 45 === s2 || 43 === s2))
                break;
              i3++, a2++;
            }
          return t4.len = i3 - t4.offset, null === t4.value && (t4.value = r3.substr(t4.offset, t4.len)), e4.pos = i3, e4.line = c2, e4.char = a2, true;
        }
      }, 787: function(e3, t3, n2) {
        var s = this && this.__createBinding || (Object.create ? function(e4, t4, n3, s2) {
          void 0 === s2 && (s2 = n3), Object.defineProperty(e4, s2, { enumerable: true, get: function() {
            return t4[n3];
          } });
        } : function(e4, t4, n3, s2) {
          void 0 === s2 && (s2 = n3), e4[s2] = t4[n3];
        }), r2 = this && this.__exportStar || function(e4, t4) {
          for (var n3 in e4)
            "default" === n3 || Object.prototype.hasOwnProperty.call(t4, n3) || s(t4, e4, n3);
        };
        Object.defineProperty(t3, "__esModule", { value: true }), t3.parseRawGrammar = t3.INITIAL = t3.Registry = void 0;
        const i2 = n2(391), o2 = n2(50), c2 = n2(652), a2 = n2(583), l2 = n2(965);
        r2(n2(44), t3), t3.Registry = class {
          constructor(e4) {
            this._options = e4, this._syncRegistry = new c2.SyncRegistry(a2.Theme.createFromRawTheme(e4.theme, e4.colorMap), e4.onigLib), this._ensureGrammarCache = /* @__PURE__ */ new Map();
          }
          dispose() {
            this._syncRegistry.dispose();
          }
          setTheme(e4, t4) {
            this._syncRegistry.setTheme(a2.Theme.createFromRawTheme(e4, t4));
          }
          getColorMap() {
            return this._syncRegistry.getColorMap();
          }
          loadGrammarWithEmbeddedLanguages(e4, t4, n3) {
            return this.loadGrammarWithConfiguration(e4, t4, { embeddedLanguages: n3 });
          }
          loadGrammarWithConfiguration(e4, t4, n3) {
            return this._loadGrammar(e4, t4, n3.embeddedLanguages, n3.tokenTypes, new i2.BalancedBracketSelectors(n3.balancedBracketSelectors || [], n3.unbalancedBracketSelectors || []));
          }
          loadGrammar(e4) {
            return this._loadGrammar(e4, 0, null, null, null);
          }
          async _loadGrammar(e4, t4, n3, s2, r3) {
            const i3 = new l2.ScopeDependencyProcessor(this._syncRegistry, e4);
            for (; i3.Q.length > 0; )
              await Promise.all(i3.Q.map((e5) => this._loadSingleGrammar(e5.scopeName))), i3.processQueue();
            return this._grammarForScopeName(e4, t4, n3, s2, r3);
          }
          async _loadSingleGrammar(e4) {
            return this._ensureGrammarCache.has(e4) || this._ensureGrammarCache.set(e4, this._doLoadSingleGrammar(e4)), this._ensureGrammarCache.get(e4);
          }
          async _doLoadSingleGrammar(e4) {
            const t4 = await this._options.loadGrammar(e4);
            if (t4) {
              const n3 = "function" == typeof this._options.getInjections ? this._options.getInjections(e4) : void 0;
              this._syncRegistry.addGrammar(t4, n3);
            }
          }
          async addGrammar(e4, t4 = [], n3 = 0, s2 = null) {
            return this._syncRegistry.addGrammar(e4, t4), await this._grammarForScopeName(e4.scopeName, n3, s2);
          }
          _grammarForScopeName(e4, t4 = 0, n3 = null, s2 = null, r3 = null) {
            return this._syncRegistry.grammarForScopeName(e4, t4, n3, s2, r3);
          }
        }, t3.INITIAL = i2.StateStack.NULL, t3.parseRawGrammar = o2.parseRawGrammar;
      }, 736: (e3, t3) => {
        function n2(e4) {
          return !!e4 && !!e4.match(/[\w\.:]+/);
        }
        Object.defineProperty(t3, "__esModule", { value: true }), t3.createMatchers = void 0, t3.createMatchers = function(e4, t4) {
          const s = [], r2 = function(e5) {
            let t5 = /([LR]:|[\w\.:][\w\.:\-]*|[\,\|\-\(\)])/g, n3 = t5.exec(e5);
            return { next: () => {
              if (!n3)
                return null;
              const s2 = n3[0];
              return n3 = t5.exec(e5), s2;
            } };
          }(e4);
          let i2 = r2.next();
          for (; null !== i2; ) {
            let e5 = 0;
            if (2 === i2.length && ":" === i2.charAt(1)) {
              switch (i2.charAt(0)) {
                case "R":
                  e5 = 1;
                  break;
                case "L":
                  e5 = -1;
                  break;
                default:
                  console.log(`Unknown priority ${i2} in scope selector`);
              }
              i2 = r2.next();
            }
            let t5 = c2();
            if (s.push({ matcher: t5, priority: e5 }), "," !== i2)
              break;
            i2 = r2.next();
          }
          return s;
          function o2() {
            if ("-" === i2) {
              i2 = r2.next();
              const e5 = o2();
              return (t5) => !!e5 && !e5(t5);
            }
            if ("(" === i2) {
              i2 = r2.next();
              const e5 = function() {
                const e6 = [];
                let t5 = c2();
                for (; t5 && (e6.push(t5), "|" === i2 || "," === i2); ) {
                  do {
                    i2 = r2.next();
                  } while ("|" === i2 || "," === i2);
                  t5 = c2();
                }
                return (t6) => e6.some((e7) => e7(t6));
              }();
              return ")" === i2 && (i2 = r2.next()), e5;
            }
            if (n2(i2)) {
              const e5 = [];
              do {
                e5.push(i2), i2 = r2.next();
              } while (n2(i2));
              return (n3) => t4(e5, n3);
            }
            return null;
          }
          function c2() {
            const e5 = [];
            let t5 = o2();
            for (; t5; )
              e5.push(t5), t5 = o2();
            return (t6) => e5.every((e6) => e6(t6));
          }
        };
      }, 44: (e3, t3) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.disposeOnigString = void 0, t3.disposeOnigString = function(e4) {
          "function" == typeof e4.dispose && e4.dispose();
        };
      }, 50: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.parseRawGrammar = void 0;
        const s = n2(69), r2 = n2(350), i2 = n2(974);
        t3.parseRawGrammar = function(e4, t4 = null) {
          return null !== t4 && /\.json$/.test(t4) ? (n3 = e4, o2 = t4, r2.DebugFlags.InDebugMode ? i2.parseJSON(n3, o2, true) : JSON.parse(n3)) : function(e5, t5) {
            return r2.DebugFlags.InDebugMode ? s.parseWithLocation(e5, t5, "$vscodeTextmateLocation") : s.parsePLIST(e5);
          }(e4, t4);
          var n3, o2;
        };
      }, 69: (e3, t3) => {
        function n2(e4, t4, n3) {
          const s = e4.length;
          let r2 = 0, i2 = 1, o2 = 0;
          function c2(t5) {
            if (null === n3)
              r2 += t5;
            else
              for (; t5 > 0; )
                10 === e4.charCodeAt(r2) ? (r2++, i2++, o2 = 0) : (r2++, o2++), t5--;
          }
          function a2(e5) {
            null === n3 ? r2 = e5 : c2(e5 - r2);
          }
          function l2() {
            for (; r2 < s; ) {
              let t5 = e4.charCodeAt(r2);
              if (32 !== t5 && 9 !== t5 && 13 !== t5 && 10 !== t5)
                break;
              c2(1);
            }
          }
          function u2(t5) {
            return e4.substr(r2, t5.length) === t5 && (c2(t5.length), true);
          }
          function h2(t5) {
            let n4 = e4.indexOf(t5, r2);
            a2(-1 !== n4 ? n4 + t5.length : s);
          }
          function p2(t5) {
            let n4 = e4.indexOf(t5, r2);
            if (-1 !== n4) {
              let s2 = e4.substring(r2, n4);
              return a2(n4 + t5.length), s2;
            }
            {
              let t6 = e4.substr(r2);
              return a2(s), t6;
            }
          }
          s > 0 && 65279 === e4.charCodeAt(0) && (r2 = 1);
          let d2 = 0, f2 = null, g2 = [], m2 = [], _2 = null;
          function b2(e5, t5) {
            g2.push(d2), m2.push(f2), d2 = e5, f2 = t5;
          }
          function y() {
            if (0 === g2.length)
              return S2("illegal state stack");
            d2 = g2.pop(), f2 = m2.pop();
          }
          function S2(t5) {
            throw new Error("Near offset " + r2 + ": " + t5 + " ~~~" + e4.substr(r2, 50) + "~~~");
          }
          const k2 = function() {
            if (null === _2)
              return S2("missing <key>");
            let e5 = {};
            null !== n3 && (e5[n3] = { filename: t4, line: i2, char: o2 }), f2[_2] = e5, _2 = null, b2(1, e5);
          }, C2 = function() {
            if (null === _2)
              return S2("missing <key>");
            let e5 = [];
            f2[_2] = e5, _2 = null, b2(2, e5);
          }, R2 = function() {
            let e5 = {};
            null !== n3 && (e5[n3] = { filename: t4, line: i2, char: o2 }), f2.push(e5), b2(1, e5);
          }, A2 = function() {
            let e5 = [];
            f2.push(e5), b2(2, e5);
          };
          function w() {
            if (1 !== d2)
              return S2("unexpected </dict>");
            y();
          }
          function P2() {
            return 1 === d2 || 2 !== d2 ? S2("unexpected </array>") : void y();
          }
          function I2(e5) {
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function v2(e5) {
            if (isNaN(e5))
              return S2("cannot parse float");
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function N2(e5) {
            if (isNaN(e5))
              return S2("cannot parse integer");
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function T2(e5) {
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function x2(e5) {
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function G2(e5) {
            if (1 === d2) {
              if (null === _2)
                return S2("missing <key>");
              f2[_2] = e5, _2 = null;
            } else
              2 === d2 ? f2.push(e5) : f2 = e5;
          }
          function E2() {
            let e5 = p2(">"), t5 = false;
            return 47 === e5.charCodeAt(e5.length - 1) && (t5 = true, e5 = e5.substring(0, e5.length - 1)), { name: e5.trim(), isClosed: t5 };
          }
          function L2(e5) {
            if (e5.isClosed)
              return "";
            let t5 = p2("</");
            return h2(">"), t5.replace(/&#([0-9]+);/g, function(e6, t6) {
              return String.fromCodePoint(parseInt(t6, 10));
            }).replace(/&#x([0-9a-f]+);/g, function(e6, t6) {
              return String.fromCodePoint(parseInt(t6, 16));
            }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function(e6) {
              switch (e6) {
                case "&amp;":
                  return "&";
                case "&lt;":
                  return "<";
                case "&gt;":
                  return ">";
                case "&quot;":
                  return '"';
                case "&apos;":
                  return "'";
              }
              return e6;
            });
          }
          for (; r2 < s && (l2(), !(r2 >= s)); ) {
            const a3 = e4.charCodeAt(r2);
            if (c2(1), 60 !== a3)
              return S2("expected <");
            if (r2 >= s)
              return S2("unexpected end of input");
            const p3 = e4.charCodeAt(r2);
            if (63 === p3) {
              c2(1), h2("?>");
              continue;
            }
            if (33 === p3) {
              if (c2(1), u2("--")) {
                h2("-->");
                continue;
              }
              h2(">");
              continue;
            }
            if (47 === p3) {
              if (c2(1), l2(), u2("plist")) {
                h2(">");
                continue;
              }
              if (u2("dict")) {
                h2(">"), w();
                continue;
              }
              if (u2("array")) {
                h2(">"), P2();
                continue;
              }
              return S2("unexpected closed tag");
            }
            let g3 = E2();
            switch (g3.name) {
              case "dict":
                1 === d2 ? k2() : 2 === d2 ? R2() : (f2 = {}, null !== n3 && (f2[n3] = { filename: t4, line: i2, char: o2 }), b2(1, f2)), g3.isClosed && w();
                continue;
              case "array":
                1 === d2 ? C2() : 2 === d2 ? A2() : (f2 = [], b2(2, f2)), g3.isClosed && P2();
                continue;
              case "key":
                M2 = L2(g3), 1 !== d2 ? S2("unexpected <key>") : null !== _2 ? S2("too many <key>") : _2 = M2;
                continue;
              case "string":
                I2(L2(g3));
                continue;
              case "real":
                v2(parseFloat(L2(g3)));
                continue;
              case "integer":
                N2(parseInt(L2(g3), 10));
                continue;
              case "date":
                T2(new Date(L2(g3)));
                continue;
              case "data":
                x2(L2(g3));
                continue;
              case "true":
                L2(g3), G2(true);
                continue;
              case "false":
                L2(g3), G2(false);
                continue;
            }
            if (!/^plist/.test(g3.name))
              return S2("unexpected opened tag " + g3.name);
          }
          var M2;
          return f2;
        }
        Object.defineProperty(t3, "__esModule", { value: true }), t3.parsePLIST = t3.parseWithLocation = void 0, t3.parseWithLocation = function(e4, t4, s) {
          return n2(e4, t4, s);
        }, t3.parsePLIST = function(e4) {
          return n2(e4, null, null);
        };
      }, 652: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.SyncRegistry = void 0;
        const s = n2(391);
        t3.SyncRegistry = class {
          constructor(e4, t4) {
            this._onigLibPromise = t4, this._grammars = /* @__PURE__ */ new Map(), this._rawGrammars = /* @__PURE__ */ new Map(), this._injectionGrammars = /* @__PURE__ */ new Map(), this._theme = e4;
          }
          dispose() {
            for (const e4 of this._grammars.values())
              e4.dispose();
          }
          setTheme(e4) {
            this._theme = e4;
          }
          getColorMap() {
            return this._theme.getColorMap();
          }
          addGrammar(e4, t4) {
            this._rawGrammars.set(e4.scopeName, e4), t4 && this._injectionGrammars.set(e4.scopeName, t4);
          }
          lookup(e4) {
            return this._rawGrammars.get(e4);
          }
          injections(e4) {
            return this._injectionGrammars.get(e4);
          }
          getDefaults() {
            return this._theme.getDefaults();
          }
          themeMatch(e4) {
            return this._theme.match(e4);
          }
          async grammarForScopeName(e4, t4, n3, r2, i2) {
            if (!this._grammars.has(e4)) {
              let o2 = this._rawGrammars.get(e4);
              if (!o2)
                return null;
              this._grammars.set(e4, s.createGrammar(e4, o2, t4, n3, r2, i2, this, await this._onigLibPromise));
            }
            return this._grammars.get(e4);
          }
        };
      }, 792: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.CompiledRule = t3.RegExpSourceList = t3.RegExpSource = t3.RuleFactory = t3.BeginWhileRule = t3.BeginEndRule = t3.IncludeOnlyRule = t3.MatchRule = t3.CaptureRule = t3.Rule = t3.ruleIdToNumber = t3.ruleIdFromNumber = t3.whileRuleId = t3.endRuleId = void 0;
        const s = n2(878), r2 = n2(965), i2 = /\\(\d+)/, o2 = /\\(\d+)/g;
        t3.endRuleId = -1, t3.whileRuleId = -2, t3.ruleIdFromNumber = function(e4) {
          return e4;
        }, t3.ruleIdToNumber = function(e4) {
          return e4;
        };
        class c2 {
          constructor(e4, t4, n3, r3) {
            this.$location = e4, this.id = t4, this._name = n3 || null, this._nameIsCapturing = s.RegexSource.hasCaptures(this._name), this._contentName = r3 || null, this._contentNameIsCapturing = s.RegexSource.hasCaptures(this._contentName);
          }
          get debugName() {
            const e4 = this.$location ? `${s.basename(this.$location.filename)}:${this.$location.line}` : "unknown";
            return `${this.constructor.name}#${this.id} @ ${e4}`;
          }
          getName(e4, t4) {
            return this._nameIsCapturing && null !== this._name && null !== e4 && null !== t4 ? s.RegexSource.replaceCaptures(this._name, e4, t4) : this._name;
          }
          getContentName(e4, t4) {
            return this._contentNameIsCapturing && null !== this._contentName ? s.RegexSource.replaceCaptures(this._contentName, e4, t4) : this._contentName;
          }
        }
        t3.Rule = c2;
        class a2 extends c2 {
          constructor(e4, t4, n3, s2, r3) {
            super(e4, t4, n3, s2), this.retokenizeCapturedWithRuleId = r3;
          }
          dispose() {
          }
          collectPatterns(e4, t4) {
            throw new Error("Not supported!");
          }
          compile(e4, t4) {
            throw new Error("Not supported!");
          }
          compileAG(e4, t4, n3, s2) {
            throw new Error("Not supported!");
          }
        }
        t3.CaptureRule = a2;
        class l2 extends c2 {
          constructor(e4, t4, n3, s2, r3) {
            super(e4, t4, n3, null), this._match = new f2(s2, this.id), this.captures = r3, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          get debugMatchRegExp() {
            return `${this._match.source}`;
          }
          collectPatterns(e4, t4) {
            t4.push(this._match);
          }
          compile(e4, t4) {
            return this._getCachedCompiledPatterns(e4).compile(e4);
          }
          compileAG(e4, t4, n3, s2) {
            return this._getCachedCompiledPatterns(e4).compileAG(e4, n3, s2);
          }
          _getCachedCompiledPatterns(e4) {
            return this._cachedCompiledPatterns || (this._cachedCompiledPatterns = new g2(), this.collectPatterns(e4, this._cachedCompiledPatterns)), this._cachedCompiledPatterns;
          }
        }
        t3.MatchRule = l2;
        class u2 extends c2 {
          constructor(e4, t4, n3, s2, r3) {
            super(e4, t4, n3, s2), this.patterns = r3.patterns, this.hasMissingPatterns = r3.hasMissingPatterns, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          collectPatterns(e4, t4) {
            for (const n3 of this.patterns)
              e4.getRule(n3).collectPatterns(e4, t4);
          }
          compile(e4, t4) {
            return this._getCachedCompiledPatterns(e4).compile(e4);
          }
          compileAG(e4, t4, n3, s2) {
            return this._getCachedCompiledPatterns(e4).compileAG(e4, n3, s2);
          }
          _getCachedCompiledPatterns(e4) {
            return this._cachedCompiledPatterns || (this._cachedCompiledPatterns = new g2(), this.collectPatterns(e4, this._cachedCompiledPatterns)), this._cachedCompiledPatterns;
          }
        }
        t3.IncludeOnlyRule = u2;
        class h2 extends c2 {
          constructor(e4, t4, n3, s2, r3, i3, o3, c3, a3, l3) {
            super(e4, t4, n3, s2), this._begin = new f2(r3, this.id), this.beginCaptures = i3, this._end = new f2(o3 || "\uFFFF", -1), this.endHasBackReferences = this._end.hasBackReferences, this.endCaptures = c3, this.applyEndPatternLast = a3 || false, this.patterns = l3.patterns, this.hasMissingPatterns = l3.hasMissingPatterns, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          get debugBeginRegExp() {
            return `${this._begin.source}`;
          }
          get debugEndRegExp() {
            return `${this._end.source}`;
          }
          getEndWithResolvedBackReferences(e4, t4) {
            return this._end.resolveBackReferences(e4, t4);
          }
          collectPatterns(e4, t4) {
            t4.push(this._begin);
          }
          compile(e4, t4) {
            return this._getCachedCompiledPatterns(e4, t4).compile(e4);
          }
          compileAG(e4, t4, n3, s2) {
            return this._getCachedCompiledPatterns(e4, t4).compileAG(e4, n3, s2);
          }
          _getCachedCompiledPatterns(e4, t4) {
            if (!this._cachedCompiledPatterns) {
              this._cachedCompiledPatterns = new g2();
              for (const t5 of this.patterns)
                e4.getRule(t5).collectPatterns(e4, this._cachedCompiledPatterns);
              this.applyEndPatternLast ? this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end) : this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);
            }
            return this._end.hasBackReferences && (this.applyEndPatternLast ? this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, t4) : this._cachedCompiledPatterns.setSource(0, t4)), this._cachedCompiledPatterns;
          }
        }
        t3.BeginEndRule = h2;
        class p2 extends c2 {
          constructor(e4, n3, s2, r3, i3, o3, c3, a3, l3) {
            super(e4, n3, s2, r3), this._begin = new f2(i3, this.id), this.beginCaptures = o3, this.whileCaptures = a3, this._while = new f2(c3, t3.whileRuleId), this.whileHasBackReferences = this._while.hasBackReferences, this.patterns = l3.patterns, this.hasMissingPatterns = l3.hasMissingPatterns, this._cachedCompiledPatterns = null, this._cachedCompiledWhilePatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null), this._cachedCompiledWhilePatterns && (this._cachedCompiledWhilePatterns.dispose(), this._cachedCompiledWhilePatterns = null);
          }
          get debugBeginRegExp() {
            return `${this._begin.source}`;
          }
          get debugWhileRegExp() {
            return `${this._while.source}`;
          }
          getWhileWithResolvedBackReferences(e4, t4) {
            return this._while.resolveBackReferences(e4, t4);
          }
          collectPatterns(e4, t4) {
            t4.push(this._begin);
          }
          compile(e4, t4) {
            return this._getCachedCompiledPatterns(e4).compile(e4);
          }
          compileAG(e4, t4, n3, s2) {
            return this._getCachedCompiledPatterns(e4).compileAG(e4, n3, s2);
          }
          _getCachedCompiledPatterns(e4) {
            if (!this._cachedCompiledPatterns) {
              this._cachedCompiledPatterns = new g2();
              for (const t4 of this.patterns)
                e4.getRule(t4).collectPatterns(e4, this._cachedCompiledPatterns);
            }
            return this._cachedCompiledPatterns;
          }
          compileWhile(e4, t4) {
            return this._getCachedCompiledWhilePatterns(e4, t4).compile(e4);
          }
          compileWhileAG(e4, t4, n3, s2) {
            return this._getCachedCompiledWhilePatterns(e4, t4).compileAG(e4, n3, s2);
          }
          _getCachedCompiledWhilePatterns(e4, t4) {
            return this._cachedCompiledWhilePatterns || (this._cachedCompiledWhilePatterns = new g2(), this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while)), this._while.hasBackReferences && this._cachedCompiledWhilePatterns.setSource(0, t4 || "\uFFFF"), this._cachedCompiledWhilePatterns;
          }
        }
        t3.BeginWhileRule = p2;
        class d2 {
          static createCaptureRule(e4, t4, n3, s2, r3) {
            return e4.registerRule((e5) => new a2(t4, e5, n3, s2, r3));
          }
          static getCompiledRuleId(e4, t4, n3) {
            return e4.id || t4.registerRule((r3) => {
              if (e4.id = r3, e4.match)
                return new l2(e4.$vscodeTextmateLocation, e4.id, e4.name, e4.match, d2._compileCaptures(e4.captures, t4, n3));
              if (void 0 === e4.begin) {
                e4.repository && (n3 = s.mergeObjects({}, n3, e4.repository));
                let r4 = e4.patterns;
                return void 0 === r4 && e4.include && (r4 = [{ include: e4.include }]), new u2(e4.$vscodeTextmateLocation, e4.id, e4.name, e4.contentName, d2._compilePatterns(r4, t4, n3));
              }
              return e4.while ? new p2(e4.$vscodeTextmateLocation, e4.id, e4.name, e4.contentName, e4.begin, d2._compileCaptures(e4.beginCaptures || e4.captures, t4, n3), e4.while, d2._compileCaptures(e4.whileCaptures || e4.captures, t4, n3), d2._compilePatterns(e4.patterns, t4, n3)) : new h2(e4.$vscodeTextmateLocation, e4.id, e4.name, e4.contentName, e4.begin, d2._compileCaptures(e4.beginCaptures || e4.captures, t4, n3), e4.end, d2._compileCaptures(e4.endCaptures || e4.captures, t4, n3), e4.applyEndPatternLast, d2._compilePatterns(e4.patterns, t4, n3));
            }), e4.id;
          }
          static _compileCaptures(e4, t4, n3) {
            let s2 = [];
            if (e4) {
              let r3 = 0;
              for (const t5 in e4) {
                if ("$vscodeTextmateLocation" === t5)
                  continue;
                const e5 = parseInt(t5, 10);
                e5 > r3 && (r3 = e5);
              }
              for (let e5 = 0; e5 <= r3; e5++)
                s2[e5] = null;
              for (const r4 in e4) {
                if ("$vscodeTextmateLocation" === r4)
                  continue;
                const i3 = parseInt(r4, 10);
                let o3 = 0;
                e4[r4].patterns && (o3 = d2.getCompiledRuleId(e4[r4], t4, n3)), s2[i3] = d2.createCaptureRule(t4, e4[r4].$vscodeTextmateLocation, e4[r4].name, e4[r4].contentName, o3);
              }
            }
            return s2;
          }
          static _compilePatterns(e4, t4, n3) {
            let s2 = [];
            if (e4)
              for (let i3 = 0, o3 = e4.length; i3 < o3; i3++) {
                const o4 = e4[i3];
                let c3 = -1;
                if (o4.include) {
                  const e5 = r2.parseInclude(o4.include);
                  switch (e5.kind) {
                    case 0:
                    case 1:
                      c3 = d2.getCompiledRuleId(n3[o4.include], t4, n3);
                      break;
                    case 2:
                      let s3 = n3[e5.ruleName];
                      s3 && (c3 = d2.getCompiledRuleId(s3, t4, n3));
                      break;
                    case 3:
                    case 4:
                      const r3 = e5.scopeName, i4 = 4 === e5.kind ? e5.ruleName : null, a3 = t4.getExternalGrammar(r3, n3);
                      if (a3)
                        if (i4) {
                          let e6 = a3.repository[i4];
                          e6 && (c3 = d2.getCompiledRuleId(e6, t4, a3.repository));
                        } else
                          c3 = d2.getCompiledRuleId(a3.repository.$self, t4, a3.repository);
                  }
                } else
                  c3 = d2.getCompiledRuleId(o4, t4, n3);
                if (-1 !== c3) {
                  const e5 = t4.getRule(c3);
                  let n4 = false;
                  if ((e5 instanceof u2 || e5 instanceof h2 || e5 instanceof p2) && e5.hasMissingPatterns && 0 === e5.patterns.length && (n4 = true), n4)
                    continue;
                  s2.push(c3);
                }
              }
            return { patterns: s2, hasMissingPatterns: (e4 ? e4.length : 0) !== s2.length };
          }
        }
        t3.RuleFactory = d2;
        class f2 {
          constructor(e4, t4) {
            if (e4) {
              const t5 = e4.length;
              let n3 = 0, s2 = [], r3 = false;
              for (let i3 = 0; i3 < t5; i3++)
                if ("\\" === e4.charAt(i3) && i3 + 1 < t5) {
                  const t6 = e4.charAt(i3 + 1);
                  "z" === t6 ? (s2.push(e4.substring(n3, i3)), s2.push("$(?!\\n)(?<!\\n)"), n3 = i3 + 2) : "A" !== t6 && "G" !== t6 || (r3 = true), i3++;
                }
              this.hasAnchor = r3, 0 === n3 ? this.source = e4 : (s2.push(e4.substring(n3, t5)), this.source = s2.join(""));
            } else
              this.hasAnchor = false, this.source = e4;
            this.hasAnchor ? this._anchorCache = this._buildAnchorCache() : this._anchorCache = null, this.ruleId = t4, this.hasBackReferences = i2.test(this.source);
          }
          clone() {
            return new f2(this.source, this.ruleId);
          }
          setSource(e4) {
            this.source !== e4 && (this.source = e4, this.hasAnchor && (this._anchorCache = this._buildAnchorCache()));
          }
          resolveBackReferences(e4, t4) {
            let n3 = t4.map((t5) => e4.substring(t5.start, t5.end));
            return o2.lastIndex = 0, this.source.replace(o2, (e5, t5) => s.escapeRegExpCharacters(n3[parseInt(t5, 10)] || ""));
          }
          _buildAnchorCache() {
            let e4, t4, n3, s2, r3 = [], i3 = [], o3 = [], c3 = [];
            for (e4 = 0, t4 = this.source.length; e4 < t4; e4++)
              n3 = this.source.charAt(e4), r3[e4] = n3, i3[e4] = n3, o3[e4] = n3, c3[e4] = n3, "\\" === n3 && e4 + 1 < t4 && (s2 = this.source.charAt(e4 + 1), "A" === s2 ? (r3[e4 + 1] = "\uFFFF", i3[e4 + 1] = "\uFFFF", o3[e4 + 1] = "A", c3[e4 + 1] = "A") : "G" === s2 ? (r3[e4 + 1] = "\uFFFF", i3[e4 + 1] = "G", o3[e4 + 1] = "\uFFFF", c3[e4 + 1] = "G") : (r3[e4 + 1] = s2, i3[e4 + 1] = s2, o3[e4 + 1] = s2, c3[e4 + 1] = s2), e4++);
            return { A0_G0: r3.join(""), A0_G1: i3.join(""), A1_G0: o3.join(""), A1_G1: c3.join("") };
          }
          resolveAnchors(e4, t4) {
            return this.hasAnchor && this._anchorCache ? e4 ? t4 ? this._anchorCache.A1_G1 : this._anchorCache.A1_G0 : t4 ? this._anchorCache.A0_G1 : this._anchorCache.A0_G0 : this.source;
          }
        }
        t3.RegExpSource = f2;
        class g2 {
          constructor() {
            this._items = [], this._hasAnchors = false, this._cached = null, this._anchorCache = { A0_G0: null, A0_G1: null, A1_G0: null, A1_G1: null };
          }
          dispose() {
            this._disposeCaches();
          }
          _disposeCaches() {
            this._cached && (this._cached.dispose(), this._cached = null), this._anchorCache.A0_G0 && (this._anchorCache.A0_G0.dispose(), this._anchorCache.A0_G0 = null), this._anchorCache.A0_G1 && (this._anchorCache.A0_G1.dispose(), this._anchorCache.A0_G1 = null), this._anchorCache.A1_G0 && (this._anchorCache.A1_G0.dispose(), this._anchorCache.A1_G0 = null), this._anchorCache.A1_G1 && (this._anchorCache.A1_G1.dispose(), this._anchorCache.A1_G1 = null);
          }
          push(e4) {
            this._items.push(e4), this._hasAnchors = this._hasAnchors || e4.hasAnchor;
          }
          unshift(e4) {
            this._items.unshift(e4), this._hasAnchors = this._hasAnchors || e4.hasAnchor;
          }
          length() {
            return this._items.length;
          }
          setSource(e4, t4) {
            this._items[e4].source !== t4 && (this._disposeCaches(), this._items[e4].setSource(t4));
          }
          compile(e4) {
            if (!this._cached) {
              let t4 = this._items.map((e5) => e5.source);
              this._cached = new m2(e4, t4, this._items.map((e5) => e5.ruleId));
            }
            return this._cached;
          }
          compileAG(e4, t4, n3) {
            return this._hasAnchors ? t4 ? n3 ? (this._anchorCache.A1_G1 || (this._anchorCache.A1_G1 = this._resolveAnchors(e4, t4, n3)), this._anchorCache.A1_G1) : (this._anchorCache.A1_G0 || (this._anchorCache.A1_G0 = this._resolveAnchors(e4, t4, n3)), this._anchorCache.A1_G0) : n3 ? (this._anchorCache.A0_G1 || (this._anchorCache.A0_G1 = this._resolveAnchors(e4, t4, n3)), this._anchorCache.A0_G1) : (this._anchorCache.A0_G0 || (this._anchorCache.A0_G0 = this._resolveAnchors(e4, t4, n3)), this._anchorCache.A0_G0) : this.compile(e4);
          }
          _resolveAnchors(e4, t4, n3) {
            let s2 = this._items.map((e5) => e5.resolveAnchors(t4, n3));
            return new m2(e4, s2, this._items.map((e5) => e5.ruleId));
          }
        }
        t3.RegExpSourceList = g2;
        class m2 {
          constructor(e4, t4, n3) {
            this.regExps = t4, this.rules = n3, this.scanner = e4.createOnigScanner(t4);
          }
          dispose() {
            "function" == typeof this.scanner.dispose && this.scanner.dispose();
          }
          toString() {
            const e4 = [];
            for (let t4 = 0, n3 = this.rules.length; t4 < n3; t4++)
              e4.push("   - " + this.rules[t4] + ": " + this.regExps[t4]);
            return e4.join("\n");
          }
          findNextMatchSync(e4, t4, n3) {
            const s2 = this.scanner.findNextMatchSync(e4, t4, n3);
            return s2 ? { ruleId: this.rules[s2.index], captureIndices: s2.captureIndices } : null;
          }
        }
        t3.CompiledRule = m2;
      }, 583: (e3, t3, n2) => {
        Object.defineProperty(t3, "__esModule", { value: true }), t3.ThemeTrieElement = t3.ThemeTrieElementRule = t3.ColorMap = t3.fontStyleToString = t3.ParsedThemeRule = t3.parseTheme = t3.StyleAttributes = t3.ScopeStack = t3.Theme = void 0;
        const s = n2(878);
        class r2 {
          constructor(e4, t4, n3) {
            this._colorMap = e4, this._defaults = t4, this._root = n3, this._cachedMatchRoot = new s.CachedFn((e5) => this._root.match(e5));
          }
          static createFromRawTheme(e4, t4) {
            return this.createFromParsedTheme(a2(e4), t4);
          }
          static createFromParsedTheme(e4, t4) {
            return function(e5, t5) {
              e5.sort((e6, t6) => {
                let n4 = s.strcmp(e6.scope, t6.scope);
                return 0 !== n4 ? n4 : (n4 = s.strArrCmp(e6.parentScopes, t6.parentScopes), 0 !== n4 ? n4 : e6.index - t6.index);
              });
              let n3 = 0, i3 = "#000000", o3 = "#ffffff";
              for (; e5.length >= 1 && "" === e5[0].scope; ) {
                let t6 = e5.shift();
                -1 !== t6.fontStyle && (n3 = t6.fontStyle), null !== t6.foreground && (i3 = t6.foreground), null !== t6.background && (o3 = t6.background);
              }
              let a3 = new u2(t5), l3 = new c2(n3, a3.getId(i3), a3.getId(o3)), d2 = new p2(new h2(0, null, -1, 0, 0), []);
              for (let t6 = 0, n4 = e5.length; t6 < n4; t6++) {
                let n5 = e5[t6];
                d2.insert(0, n5.scope, n5.parentScopes, n5.fontStyle, a3.getId(n5.foreground), a3.getId(n5.background));
              }
              return new r2(a3, l3, d2);
            }(e4, t4);
          }
          getColorMap() {
            return this._colorMap.getColorMap();
          }
          getDefaults() {
            return this._defaults;
          }
          match(e4) {
            if (null === e4)
              return this._defaults;
            const t4 = e4.scopeName, n3 = this._cachedMatchRoot.get(t4).find((t5) => function(e5, t6) {
              if (null === t6)
                return true;
              let n4 = 0, s2 = t6[n4];
              for (; e5; ) {
                if (o2(e5.scopeName, s2)) {
                  if (n4++, n4 === t6.length)
                    return true;
                  s2 = t6[n4];
                }
                e5 = e5.parent;
              }
              return false;
            }(e4.parent, t5.parentScopes));
            return n3 ? new c2(n3.fontStyle, n3.foreground, n3.background) : null;
          }
        }
        t3.Theme = r2;
        class i2 {
          constructor(e4, t4) {
            this.parent = e4, this.scopeName = t4;
          }
          static from(...e4) {
            let t4 = null;
            for (let n3 = 0; n3 < e4.length; n3++)
              t4 = new i2(t4, e4[n3]);
            return t4;
          }
          push(e4) {
            return new i2(this, e4);
          }
          getSegments() {
            let e4 = this;
            const t4 = [];
            for (; e4; )
              t4.push(e4.scopeName), e4 = e4.parent;
            return t4.reverse(), t4;
          }
          toString() {
            return this.getSegments().join(" ");
          }
        }
        function o2(e4, t4) {
          return t4 === e4 || e4.startsWith(t4) && "." === e4[t4.length];
        }
        t3.ScopeStack = i2;
        class c2 {
          constructor(e4, t4, n3) {
            this.fontStyle = e4, this.foregroundId = t4, this.backgroundId = n3;
          }
        }
        function a2(e4) {
          if (!e4)
            return [];
          if (!e4.settings || !Array.isArray(e4.settings))
            return [];
          let t4 = e4.settings, n3 = [], r3 = 0;
          for (let e5 = 0, i3 = t4.length; e5 < i3; e5++) {
            let i4, o3 = t4[e5];
            if (!o3.settings)
              continue;
            if ("string" == typeof o3.scope) {
              let e6 = o3.scope;
              e6 = e6.replace(/^[,]+/, ""), e6 = e6.replace(/[,]+$/, ""), i4 = e6.split(",");
            } else
              i4 = Array.isArray(o3.scope) ? o3.scope : [""];
            let c3 = -1;
            if ("string" == typeof o3.settings.fontStyle) {
              c3 = 0;
              let e6 = o3.settings.fontStyle.split(" ");
              for (let t5 = 0, n4 = e6.length; t5 < n4; t5++)
                switch (e6[t5]) {
                  case "italic":
                    c3 |= 1;
                    break;
                  case "bold":
                    c3 |= 2;
                    break;
                  case "underline":
                    c3 |= 4;
                    break;
                  case "strikethrough":
                    c3 |= 8;
                }
            }
            let a3 = null;
            "string" == typeof o3.settings.foreground && s.isValidHexColor(o3.settings.foreground) && (a3 = o3.settings.foreground);
            let u3 = null;
            "string" == typeof o3.settings.background && s.isValidHexColor(o3.settings.background) && (u3 = o3.settings.background);
            for (let t5 = 0, s2 = i4.length; t5 < s2; t5++) {
              let s3 = i4[t5].trim().split(" "), o4 = s3[s3.length - 1], h3 = null;
              s3.length > 1 && (h3 = s3.slice(0, s3.length - 1), h3.reverse()), n3[r3++] = new l2(o4, h3, e5, c3, a3, u3);
            }
          }
          return n3;
        }
        t3.StyleAttributes = c2, t3.parseTheme = a2;
        class l2 {
          constructor(e4, t4, n3, s2, r3, i3) {
            this.scope = e4, this.parentScopes = t4, this.index = n3, this.fontStyle = s2, this.foreground = r3, this.background = i3;
          }
        }
        t3.ParsedThemeRule = l2, t3.fontStyleToString = function(e4) {
          if (-1 === e4)
            return "not set";
          let t4 = "";
          return 1 & e4 && (t4 += "italic "), 2 & e4 && (t4 += "bold "), 4 & e4 && (t4 += "underline "), 8 & e4 && (t4 += "strikethrough "), "" === t4 && (t4 = "none"), t4.trim();
        };
        class u2 {
          constructor(e4) {
            if (this._lastColorId = 0, this._id2color = [], this._color2id = /* @__PURE__ */ Object.create(null), Array.isArray(e4)) {
              this._isFrozen = true;
              for (let t4 = 0, n3 = e4.length; t4 < n3; t4++)
                this._color2id[e4[t4]] = t4, this._id2color[t4] = e4[t4];
            } else
              this._isFrozen = false;
          }
          getId(e4) {
            if (null === e4)
              return 0;
            e4 = e4.toUpperCase();
            let t4 = this._color2id[e4];
            if (t4)
              return t4;
            if (this._isFrozen)
              throw new Error(`Missing color in color map - ${e4}`);
            return t4 = ++this._lastColorId, this._color2id[e4] = t4, this._id2color[t4] = e4, t4;
          }
          getColorMap() {
            return this._id2color.slice(0);
          }
        }
        t3.ColorMap = u2;
        class h2 {
          constructor(e4, t4, n3, s2, r3) {
            this.scopeDepth = e4, this.parentScopes = t4, this.fontStyle = n3, this.foreground = s2, this.background = r3;
          }
          clone() {
            return new h2(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);
          }
          static cloneArr(e4) {
            let t4 = [];
            for (let n3 = 0, s2 = e4.length; n3 < s2; n3++)
              t4[n3] = e4[n3].clone();
            return t4;
          }
          acceptOverwrite(e4, t4, n3, s2) {
            this.scopeDepth > e4 ? console.log("how did this happen?") : this.scopeDepth = e4, -1 !== t4 && (this.fontStyle = t4), 0 !== n3 && (this.foreground = n3), 0 !== s2 && (this.background = s2);
          }
        }
        t3.ThemeTrieElementRule = h2;
        class p2 {
          constructor(e4, t4 = [], n3 = {}) {
            this._mainRule = e4, this._children = n3, this._rulesWithParentScopes = t4;
          }
          static _sortBySpecificity(e4) {
            return 1 === e4.length || e4.sort(this._cmpBySpecificity), e4;
          }
          static _cmpBySpecificity(e4, t4) {
            if (e4.scopeDepth === t4.scopeDepth) {
              const n3 = e4.parentScopes, s2 = t4.parentScopes;
              let r3 = null === n3 ? 0 : n3.length, i3 = null === s2 ? 0 : s2.length;
              if (r3 === i3)
                for (let e5 = 0; e5 < r3; e5++) {
                  const t5 = n3[e5].length, r4 = s2[e5].length;
                  if (t5 !== r4)
                    return r4 - t5;
                }
              return i3 - r3;
            }
            return t4.scopeDepth - e4.scopeDepth;
          }
          match(e4) {
            if ("" === e4)
              return p2._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));
            let t4, n3, s2 = e4.indexOf(".");
            return -1 === s2 ? (t4 = e4, n3 = "") : (t4 = e4.substring(0, s2), n3 = e4.substring(s2 + 1)), this._children.hasOwnProperty(t4) ? this._children[t4].match(n3) : p2._sortBySpecificity([].concat(this._mainRule).concat(this._rulesWithParentScopes));
          }
          insert(e4, t4, n3, s2, r3, i3) {
            if ("" === t4)
              return void this._doInsertHere(e4, n3, s2, r3, i3);
            let o3, c3, a3, l3 = t4.indexOf(".");
            -1 === l3 ? (o3 = t4, c3 = "") : (o3 = t4.substring(0, l3), c3 = t4.substring(l3 + 1)), this._children.hasOwnProperty(o3) ? a3 = this._children[o3] : (a3 = new p2(this._mainRule.clone(), h2.cloneArr(this._rulesWithParentScopes)), this._children[o3] = a3), a3.insert(e4 + 1, c3, n3, s2, r3, i3);
          }
          _doInsertHere(e4, t4, n3, r3, i3) {
            if (null !== t4) {
              for (let o3 = 0, c3 = this._rulesWithParentScopes.length; o3 < c3; o3++) {
                let c4 = this._rulesWithParentScopes[o3];
                if (0 === s.strArrCmp(c4.parentScopes, t4))
                  return void c4.acceptOverwrite(e4, n3, r3, i3);
              }
              -1 === n3 && (n3 = this._mainRule.fontStyle), 0 === r3 && (r3 = this._mainRule.foreground), 0 === i3 && (i3 = this._mainRule.background), this._rulesWithParentScopes.push(new h2(e4, t4, n3, r3, i3));
            } else
              this._mainRule.acceptOverwrite(e4, n3, r3, i3);
          }
        }
        t3.ThemeTrieElement = p2;
      }, 878: (e3, t3) => {
        function n2(e4) {
          return Array.isArray(e4) ? function(e5) {
            let t4 = [];
            for (let s2 = 0, r3 = e5.length; s2 < r3; s2++)
              t4[s2] = n2(e5[s2]);
            return t4;
          }(e4) : "object" == typeof e4 ? function(e5) {
            let t4 = {};
            for (let s2 in e5)
              t4[s2] = n2(e5[s2]);
            return t4;
          }(e4) : e4;
        }
        Object.defineProperty(t3, "__esModule", { value: true }), t3.performanceNow = t3.CachedFn = t3.escapeRegExpCharacters = t3.isValidHexColor = t3.strArrCmp = t3.strcmp = t3.RegexSource = t3.basename = t3.mergeObjects = t3.clone = void 0, t3.clone = function(e4) {
          return n2(e4);
        }, t3.mergeObjects = function(e4, ...t4) {
          return t4.forEach((t5) => {
            for (let n3 in t5)
              e4[n3] = t5[n3];
          }), e4;
        }, t3.basename = function e4(t4) {
          const n3 = ~t4.lastIndexOf("/") || ~t4.lastIndexOf("\\");
          return 0 === n3 ? t4 : ~n3 == t4.length - 1 ? e4(t4.substring(0, t4.length - 1)) : t4.substr(1 + ~n3);
        };
        let s = /\$(\d+)|\${(\d+):\/(downcase|upcase)}/g;
        function r2(e4, t4) {
          return e4 < t4 ? -1 : e4 > t4 ? 1 : 0;
        }
        t3.RegexSource = class {
          static hasCaptures(e4) {
            return null !== e4 && (s.lastIndex = 0, s.test(e4));
          }
          static replaceCaptures(e4, t4, n3) {
            return e4.replace(s, (e5, s2, r3, i2) => {
              let o2 = n3[parseInt(s2 || r3, 10)];
              if (!o2)
                return e5;
              {
                let e6 = t4.substring(o2.start, o2.end);
                for (; "." === e6[0]; )
                  e6 = e6.substring(1);
                switch (i2) {
                  case "downcase":
                    return e6.toLowerCase();
                  case "upcase":
                    return e6.toUpperCase();
                  default:
                    return e6;
                }
              }
            });
          }
        }, t3.strcmp = r2, t3.strArrCmp = function(e4, t4) {
          if (null === e4 && null === t4)
            return 0;
          if (!e4)
            return -1;
          if (!t4)
            return 1;
          let n3 = e4.length, s2 = t4.length;
          if (n3 === s2) {
            for (let s3 = 0; s3 < n3; s3++) {
              let n4 = r2(e4[s3], t4[s3]);
              if (0 !== n4)
                return n4;
            }
            return 0;
          }
          return n3 - s2;
        }, t3.isValidHexColor = function(e4) {
          return !!(/^#[0-9a-f]{6}$/i.test(e4) || /^#[0-9a-f]{8}$/i.test(e4) || /^#[0-9a-f]{3}$/i.test(e4) || /^#[0-9a-f]{4}$/i.test(e4));
        }, t3.escapeRegExpCharacters = function(e4) {
          return e4.replace(/[\-\\\{\}\*\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, "\\$&");
        }, t3.CachedFn = class {
          constructor(e4) {
            this.fn = e4, this.cache = /* @__PURE__ */ new Map();
          }
          get(e4) {
            if (this.cache.has(e4))
              return this.cache.get(e4);
            const t4 = this.fn(e4);
            return this.cache.set(e4, t4), t4;
          }
        }, t3.performanceNow = "undefined" == typeof performance ? function() {
          return Date.now();
        } : function() {
          return performance.now();
        };
      } }, t2 = {};
      return function n2(s) {
        var r2 = t2[s];
        if (void 0 !== r2)
          return r2.exports;
        var i2 = t2[s] = { exports: {} };
        return e2[s].call(i2.exports, i2, i2.exports, n2), i2.exports;
      }(787);
    })();
  });
})(main$2);
const languages = [
  {
    id: "abap",
    scopeName: "source.abap",
    path: "abap.tmLanguage.json",
    samplePath: "abap.sample"
  },
  {
    id: "actionscript-3",
    scopeName: "source.actionscript.3",
    path: "actionscript-3.tmLanguage.json",
    samplePath: "actionscript-3.sample"
  },
  {
    id: "ada",
    scopeName: "source.ada",
    path: "ada.tmLanguage.json",
    samplePath: "ada.sample"
  },
  {
    id: "apache",
    scopeName: "source.apacheconf",
    path: "apache.tmLanguage.json"
  },
  {
    id: "apex",
    scopeName: "source.apex",
    path: "apex.tmLanguage.json",
    samplePath: "apex.sample"
  },
  {
    id: "apl",
    scopeName: "source.apl",
    path: "apl.tmLanguage.json",
    embeddedLangs: ["html", "xml", "css", "javascript", "json"]
  },
  {
    id: "applescript",
    scopeName: "source.applescript",
    path: "applescript.tmLanguage.json",
    samplePath: "applescript.sample"
  },
  {
    id: "asm",
    scopeName: "source.asm.x86_64",
    path: "asm.tmLanguage.json",
    samplePath: "asm.sample"
  },
  {
    id: "astro",
    scopeName: "source.astro",
    path: "astro.tmLanguage.json",
    samplePath: "astro.sample",
    embeddedLangs: ["json", "javascript", "typescript", "tsx", "css", "less", "sass", "scss", "stylus"]
  },
  {
    id: "awk",
    scopeName: "source.awk",
    path: "awk.tmLanguage.json",
    samplePath: "awk.sample"
  },
  {
    id: "ballerina",
    scopeName: "source.ballerina",
    path: "ballerina.tmLanguage.json",
    samplePath: "ballerina.sample"
  },
  {
    id: "bat",
    scopeName: "source.batchfile",
    path: "bat.tmLanguage.json",
    samplePath: "bat.sample",
    aliases: ["batch"]
  },
  {
    id: "berry",
    scopeName: "source.berry",
    path: "berry.tmLanguage.json",
    samplePath: "berry.sample",
    aliases: ["be"]
  },
  {
    id: "bibtex",
    scopeName: "text.bibtex",
    path: "bibtex.tmLanguage.json"
  },
  {
    id: "bicep",
    scopeName: "source.bicep",
    path: "bicep.tmLanguage.json",
    samplePath: "bicep.sample"
  },
  {
    id: "blade",
    scopeName: "text.html.php.blade",
    path: "blade.tmLanguage.json",
    samplePath: "blade.sample",
    embeddedLangs: ["html", "xml", "sql", "javascript", "json", "css"]
  },
  {
    id: "c",
    scopeName: "source.c",
    path: "c.tmLanguage.json",
    samplePath: "c.sample"
  },
  {
    id: "cadence",
    scopeName: "source.cadence",
    path: "cadence.tmLanguage.json",
    samplePath: "cadence.sample",
    aliases: ["cdc"]
  },
  {
    id: "clarity",
    scopeName: "source.clar",
    path: "clarity.tmLanguage.json",
    samplePath: "clarity.sample"
  },
  {
    id: "clojure",
    scopeName: "source.clojure",
    path: "clojure.tmLanguage.json",
    samplePath: "clojure.sample",
    aliases: ["clj"]
  },
  {
    id: "cmake",
    scopeName: "source.cmake",
    path: "cmake.tmLanguage.json",
    samplePath: "cmake.sample"
  },
  {
    id: "cobol",
    scopeName: "source.cobol",
    path: "cobol.tmLanguage.json",
    samplePath: "cobol.sample",
    embeddedLangs: ["sql", "html", "java"]
  },
  {
    id: "codeql",
    scopeName: "source.ql",
    path: "codeql.tmLanguage.json",
    samplePath: "codeql.sample",
    aliases: ["ql"],
    embeddedLangs: ["markdown"]
  },
  {
    id: "coffee",
    scopeName: "source.coffee",
    path: "coffee.tmLanguage.json",
    samplePath: "coffee.sample",
    embeddedLangs: ["javascript"]
  },
  {
    id: "cpp",
    scopeName: "source.cpp",
    path: "cpp.tmLanguage.json",
    samplePath: "cpp.sample",
    embeddedLangs: ["glsl", "sql"]
  },
  {
    id: "crystal",
    scopeName: "source.crystal",
    path: "crystal.tmLanguage.json",
    samplePath: "crystal.sample",
    embeddedLangs: ["html", "sql", "css", "c", "javascript", "shellscript"]
  },
  {
    id: "csharp",
    scopeName: "source.cs",
    path: "csharp.tmLanguage.json",
    samplePath: "csharp.sample",
    aliases: ["c#", "cs"]
  },
  {
    id: "css",
    scopeName: "source.css",
    path: "css.tmLanguage.json",
    samplePath: "css.sample"
  },
  {
    id: "cue",
    scopeName: "source.cue",
    path: "cue.tmLanguage.json",
    samplePath: "cue.sample"
  },
  {
    id: "d",
    scopeName: "source.d",
    path: "d.tmLanguage.json",
    samplePath: "d.sample"
  },
  {
    id: "dart",
    scopeName: "source.dart",
    path: "dart.tmLanguage.json",
    samplePath: "dart.sample"
  },
  {
    id: "diff",
    scopeName: "source.diff",
    path: "diff.tmLanguage.json",
    samplePath: "diff.sample"
  },
  {
    id: "docker",
    scopeName: "source.dockerfile",
    path: "docker.tmLanguage.json",
    samplePath: "docker.sample"
  },
  {
    id: "dream-maker",
    scopeName: "source.dm",
    path: "dream-maker.tmLanguage.json"
  },
  {
    id: "elixir",
    scopeName: "source.elixir",
    path: "elixir.tmLanguage.json",
    samplePath: "elixir.sample",
    embeddedLangs: ["html"]
  },
  {
    id: "elm",
    scopeName: "source.elm",
    path: "elm.tmLanguage.json",
    samplePath: "elm.sample",
    embeddedLangs: ["glsl"]
  },
  {
    id: "erb",
    scopeName: "text.html.erb",
    path: "erb.tmLanguage.json",
    samplePath: "erb.sample",
    embeddedLangs: ["html", "ruby"]
  },
  {
    id: "erlang",
    scopeName: "source.erlang",
    path: "erlang.tmLanguage.json",
    samplePath: "erlang.sample",
    aliases: ["erl"]
  },
  {
    id: "fish",
    scopeName: "source.fish",
    path: "fish.tmLanguage.json",
    samplePath: "fish.sample"
  },
  {
    id: "fsharp",
    scopeName: "source.fsharp",
    path: "fsharp.tmLanguage.json",
    samplePath: "fsharp.sample",
    aliases: ["f#", "fs"],
    embeddedLangs: ["markdown"]
  },
  {
    id: "gherkin",
    scopeName: "text.gherkin.feature",
    path: "gherkin.tmLanguage.json"
  },
  {
    id: "git-commit",
    scopeName: "text.git-commit",
    path: "git-commit.tmLanguage.json",
    embeddedLangs: ["diff"]
  },
  {
    id: "git-rebase",
    scopeName: "text.git-rebase",
    path: "git-rebase.tmLanguage.json",
    embeddedLangs: ["shellscript"]
  },
  {
    id: "glsl",
    scopeName: "source.glsl",
    path: "glsl.tmLanguage.json",
    samplePath: "glsl.sample",
    embeddedLangs: ["c"]
  },
  {
    id: "gnuplot",
    scopeName: "source.gnuplot",
    path: "gnuplot.tmLanguage.json"
  },
  {
    id: "go",
    scopeName: "source.go",
    path: "go.tmLanguage.json",
    samplePath: "go.sample"
  },
  {
    id: "graphql",
    scopeName: "source.graphql",
    path: "graphql.tmLanguage.json",
    embeddedLangs: ["javascript", "typescript", "jsx", "tsx"]
  },
  {
    id: "groovy",
    scopeName: "source.groovy",
    path: "groovy.tmLanguage.json"
  },
  {
    id: "hack",
    scopeName: "source.hack",
    path: "hack.tmLanguage.json",
    embeddedLangs: ["html", "sql"]
  },
  {
    id: "haml",
    scopeName: "text.haml",
    path: "haml.tmLanguage.json",
    embeddedLangs: ["ruby", "javascript", "sass", "coffee", "markdown", "css"]
  },
  {
    id: "handlebars",
    scopeName: "text.html.handlebars",
    path: "handlebars.tmLanguage.json",
    aliases: ["hbs"],
    embeddedLangs: ["html", "css", "javascript", "yaml"]
  },
  {
    id: "haskell",
    scopeName: "source.haskell",
    path: "haskell.tmLanguage.json",
    aliases: ["hs"]
  },
  {
    id: "hcl",
    scopeName: "source.hcl",
    path: "hcl.tmLanguage.json",
    samplePath: "hcl.sample"
  },
  {
    id: "hlsl",
    scopeName: "source.hlsl",
    path: "hlsl.tmLanguage.json"
  },
  {
    id: "html",
    scopeName: "text.html.basic",
    path: "html.tmLanguage.json",
    samplePath: "html.sample",
    embeddedLangs: ["javascript", "css"]
  },
  {
    id: "imba",
    scopeName: "source.imba",
    path: "imba.tmLanguage.json",
    samplePath: "imba.sample"
  },
  {
    id: "ini",
    scopeName: "source.ini",
    path: "ini.tmLanguage.json"
  },
  {
    id: "java",
    scopeName: "source.java",
    path: "java.tmLanguage.json",
    samplePath: "java.sample"
  },
  {
    id: "javascript",
    scopeName: "source.js",
    path: "javascript.tmLanguage.json",
    samplePath: "javascript.sample",
    aliases: ["js"]
  },
  {
    id: "jinja-html",
    scopeName: "text.html.jinja",
    path: "jinja-html.tmLanguage.json",
    embeddedLangs: ["html"]
  },
  {
    id: "json",
    scopeName: "source.json",
    path: "json.tmLanguage.json"
  },
  {
    id: "json5",
    scopeName: "source.json5",
    path: "json5.tmLanguage.json",
    samplePath: "json5.sample"
  },
  {
    id: "jsonc",
    scopeName: "source.json.comments",
    path: "jsonc.tmLanguage.json"
  },
  {
    id: "jsonnet",
    scopeName: "source.jsonnet",
    path: "jsonnet.tmLanguage.json"
  },
  {
    id: "jssm",
    scopeName: "source.jssm",
    path: "jssm.tmLanguage.json",
    samplePath: "jssm.sample",
    aliases: ["fsl"]
  },
  {
    id: "jsx",
    scopeName: "source.js.jsx",
    path: "jsx.tmLanguage.json"
  },
  {
    id: "julia",
    scopeName: "source.julia",
    path: "julia.tmLanguage.json",
    embeddedLangs: ["cpp", "python", "javascript", "r", "sql"]
  },
  {
    id: "kotlin",
    scopeName: "source.kotlin",
    path: "kotlin.tmLanguage.json"
  },
  {
    id: "latex",
    scopeName: "text.tex.latex",
    path: "latex.tmLanguage.json",
    embeddedLangs: ["tex", "css", "haskell", "html", "xml", "java", "lua", "julia", "ruby", "javascript", "typescript", "python", "yaml", "rust", "scala", "gnuplot"]
  },
  {
    id: "less",
    scopeName: "source.css.less",
    path: "less.tmLanguage.json",
    embeddedLangs: ["css"]
  },
  {
    id: "liquid",
    scopeName: "text.html.liquid",
    path: "liquid.tmLanguage.json",
    samplePath: "liquid.sample",
    embeddedLangs: ["html", "css", "json", "javascript"]
  },
  {
    id: "lisp",
    scopeName: "source.lisp",
    path: "lisp.tmLanguage.json"
  },
  {
    id: "logo",
    scopeName: "source.logo",
    path: "logo.tmLanguage.json"
  },
  {
    id: "lua",
    scopeName: "source.lua",
    path: "lua.tmLanguage.json",
    embeddedLangs: ["c"]
  },
  {
    id: "make",
    scopeName: "source.makefile",
    path: "make.tmLanguage.json",
    aliases: ["makefile"]
  },
  {
    id: "markdown",
    scopeName: "text.html.markdown",
    path: "markdown.tmLanguage.json",
    aliases: ["md"],
    embeddedLangs: ["css", "html", "ini", "java", "lua", "make", "perl", "r", "ruby", "php", "sql", "vb", "xml", "xsl", "yaml", "bat", "clojure", "coffee", "c", "cpp", "diff", "docker", "git-commit", "git-rebase", "go", "groovy", "pug", "javascript", "json", "jsonc", "less", "objective-c", "swift", "scss", "raku", "powershell", "python", "julia", "rust", "scala", "shellscript", "typescript", "tsx", "csharp", "fsharp", "dart", "handlebars", "erlang", "elixir", "latex", "bibtex"]
  },
  {
    id: "marko",
    scopeName: "text.marko",
    path: "marko.tmLanguage.json",
    embeddedLangs: ["css", "less", "scss", "typescript"]
  },
  {
    id: "matlab",
    scopeName: "source.matlab",
    path: "matlab.tmLanguage.json"
  },
  {
    id: "mdx",
    scopeName: "text.html.markdown.jsx",
    path: "mdx.tmLanguage.json",
    embeddedLangs: ["jsx", "markdown"]
  },
  {
    id: "mermaid",
    scopeName: "source.mermaid",
    path: "mermaid.tmLanguage.json"
  },
  {
    id: "nginx",
    scopeName: "source.nginx",
    path: "nginx.tmLanguage.json",
    embeddedLangs: ["lua"]
  },
  {
    id: "nim",
    scopeName: "source.nim",
    path: "nim.tmLanguage.json",
    embeddedLangs: ["c", "html", "xml", "javascript", "css", "glsl", "markdown"]
  },
  {
    id: "nix",
    scopeName: "source.nix",
    path: "nix.tmLanguage.json"
  },
  {
    id: "objective-c",
    scopeName: "source.objc",
    path: "objective-c.tmLanguage.json",
    aliases: ["objc"]
  },
  {
    id: "objective-cpp",
    scopeName: "source.objcpp",
    path: "objective-cpp.tmLanguage.json"
  },
  {
    id: "ocaml",
    scopeName: "source.ocaml",
    path: "ocaml.tmLanguage.json"
  },
  {
    id: "pascal",
    scopeName: "source.pascal",
    path: "pascal.tmLanguage.json"
  },
  {
    id: "perl",
    scopeName: "source.perl",
    path: "perl.tmLanguage.json",
    embeddedLangs: ["html", "xml", "css", "javascript", "sql"]
  },
  {
    id: "php",
    scopeName: "source.php",
    path: "php.tmLanguage.json",
    embeddedLangs: ["html", "xml", "sql", "javascript", "json", "css"]
  },
  {
    id: "plsql",
    scopeName: "source.plsql.oracle",
    path: "plsql.tmLanguage.json"
  },
  {
    id: "postcss",
    scopeName: "source.css.postcss",
    path: "postcss.tmLanguage.json"
  },
  {
    id: "powershell",
    scopeName: "source.powershell",
    path: "powershell.tmLanguage.json",
    aliases: ["ps", "ps1"]
  },
  {
    id: "prisma",
    scopeName: "source.prisma",
    path: "prisma.tmLanguage.json",
    samplePath: "prisma.sample"
  },
  {
    id: "prolog",
    scopeName: "source.prolog",
    path: "prolog.tmLanguage.json"
  },
  {
    id: "proto",
    scopeName: "source.proto",
    path: "proto.tmLanguage.json",
    samplePath: "proto.sample"
  },
  {
    id: "pug",
    scopeName: "text.pug",
    path: "pug.tmLanguage.json",
    aliases: ["jade"],
    embeddedLangs: ["javascript", "css", "sass", "scss", "stylus", "coffee", "html"]
  },
  {
    id: "puppet",
    scopeName: "source.puppet",
    path: "puppet.tmLanguage.json"
  },
  {
    id: "purescript",
    scopeName: "source.purescript",
    path: "purescript.tmLanguage.json"
  },
  {
    id: "python",
    scopeName: "source.python",
    path: "python.tmLanguage.json",
    samplePath: "python.sample",
    aliases: ["py"]
  },
  {
    id: "r",
    scopeName: "source.r",
    path: "r.tmLanguage.json"
  },
  {
    id: "raku",
    scopeName: "source.perl.6",
    path: "raku.tmLanguage.json",
    aliases: ["perl6"]
  },
  {
    id: "razor",
    scopeName: "text.aspnetcorerazor",
    path: "razor.tmLanguage.json",
    embeddedLangs: ["html", "csharp"]
  },
  {
    id: "rel",
    scopeName: "source.rel",
    path: "rel.tmLanguage.json",
    samplePath: "rel.sample"
  },
  {
    id: "riscv",
    scopeName: "source.riscv",
    path: "riscv.tmLanguage.json"
  },
  {
    id: "rst",
    scopeName: "source.rst",
    path: "rst.tmLanguage.json",
    embeddedLangs: ["cpp", "python", "javascript", "shellscript", "yaml", "cmake", "ruby"]
  },
  {
    id: "ruby",
    scopeName: "source.ruby",
    path: "ruby.tmLanguage.json",
    samplePath: "ruby.sample",
    aliases: ["rb"],
    embeddedLangs: ["html", "xml", "sql", "css", "c", "javascript", "shellscript", "lua"]
  },
  {
    id: "rust",
    scopeName: "source.rust",
    path: "rust.tmLanguage.json",
    aliases: ["rs"]
  },
  {
    id: "sas",
    scopeName: "source.sas",
    path: "sas.tmLanguage.json",
    embeddedLangs: ["sql"]
  },
  {
    id: "sass",
    scopeName: "source.sass",
    path: "sass.tmLanguage.json"
  },
  {
    id: "scala",
    scopeName: "source.scala",
    path: "scala.tmLanguage.json"
  },
  {
    id: "scheme",
    scopeName: "source.scheme",
    path: "scheme.tmLanguage.json"
  },
  {
    id: "scss",
    scopeName: "source.css.scss",
    path: "scss.tmLanguage.json",
    embeddedLangs: ["css"]
  },
  {
    id: "shaderlab",
    scopeName: "source.shaderlab",
    path: "shaderlab.tmLanguage.json",
    aliases: ["shader"],
    embeddedLangs: ["hlsl"]
  },
  {
    id: "shellscript",
    scopeName: "source.shell",
    path: "shellscript.tmLanguage.json",
    aliases: ["shell", "bash", "sh", "zsh"]
  },
  {
    id: "smalltalk",
    scopeName: "source.smalltalk",
    path: "smalltalk.tmLanguage.json"
  },
  {
    id: "solidity",
    scopeName: "source.solidity",
    path: "solidity.tmLanguage.json"
  },
  {
    id: "sparql",
    scopeName: "source.sparql",
    path: "sparql.tmLanguage.json",
    samplePath: "sparql.sample",
    embeddedLangs: ["turtle"]
  },
  {
    id: "sql",
    scopeName: "source.sql",
    path: "sql.tmLanguage.json"
  },
  {
    id: "ssh-config",
    scopeName: "source.ssh-config",
    path: "ssh-config.tmLanguage.json"
  },
  {
    id: "stata",
    scopeName: "source.stata",
    path: "stata.tmLanguage.json",
    samplePath: "stata.sample",
    embeddedLangs: ["sql"]
  },
  {
    id: "stylus",
    scopeName: "source.stylus",
    path: "stylus.tmLanguage.json",
    aliases: ["styl"]
  },
  {
    id: "svelte",
    scopeName: "source.svelte",
    path: "svelte.tmLanguage.json",
    embeddedLangs: ["javascript", "typescript", "coffee", "stylus", "sass", "css", "scss", "less", "postcss", "pug", "markdown"]
  },
  {
    id: "swift",
    scopeName: "source.swift",
    path: "swift.tmLanguage.json"
  },
  {
    id: "system-verilog",
    scopeName: "source.systemverilog",
    path: "system-verilog.tmLanguage.json"
  },
  {
    id: "tasl",
    scopeName: "source.tasl",
    path: "tasl.tmLanguage.json",
    samplePath: "tasl.sample"
  },
  {
    id: "tcl",
    scopeName: "source.tcl",
    path: "tcl.tmLanguage.json"
  },
  {
    id: "tex",
    scopeName: "text.tex",
    path: "tex.tmLanguage.json",
    embeddedLangs: ["r"]
  },
  {
    id: "toml",
    scopeName: "source.toml",
    path: "toml.tmLanguage.json"
  },
  {
    id: "tsx",
    scopeName: "source.tsx",
    path: "tsx.tmLanguage.json",
    samplePath: "tsx.sample"
  },
  {
    id: "turtle",
    scopeName: "source.turtle",
    path: "turtle.tmLanguage.json",
    samplePath: "turtle.sample"
  },
  {
    id: "twig",
    scopeName: "text.html.twig",
    path: "twig.tmLanguage.json",
    embeddedLangs: ["css", "javascript", "php", "python", "ruby"]
  },
  {
    id: "typescript",
    scopeName: "source.ts",
    path: "typescript.tmLanguage.json",
    aliases: ["ts"]
  },
  {
    id: "v",
    scopeName: "source.v",
    path: "v.tmLanguage.json",
    samplePath: "v.sample"
  },
  {
    id: "vb",
    scopeName: "source.asp.vb.net",
    path: "vb.tmLanguage.json",
    aliases: ["cmd"]
  },
  {
    id: "verilog",
    scopeName: "source.verilog",
    path: "verilog.tmLanguage.json"
  },
  {
    id: "vhdl",
    scopeName: "source.vhdl",
    path: "vhdl.tmLanguage.json"
  },
  {
    id: "viml",
    scopeName: "source.viml",
    path: "viml.tmLanguage.json",
    aliases: ["vim", "vimscript"]
  },
  {
    id: "vue-html",
    scopeName: "text.html.vue-html",
    path: "vue-html.tmLanguage.json",
    embeddedLangs: ["vue", "javascript"]
  },
  {
    id: "vue",
    scopeName: "source.vue",
    path: "vue.tmLanguage.json",
    embeddedLangs: ["html", "markdown", "pug", "stylus", "sass", "css", "scss", "less", "javascript", "typescript", "jsx", "tsx", "json", "jsonc", "yaml", "toml", "graphql"]
  },
  {
    id: "wasm",
    scopeName: "source.wat",
    path: "wasm.tmLanguage.json"
  },
  {
    id: "wenyan",
    scopeName: "source.wenyan",
    path: "wenyan.tmLanguage.json",
    aliases: ["\u6587\u8A00"]
  },
  {
    id: "xml",
    scopeName: "text.xml",
    path: "xml.tmLanguage.json",
    embeddedLangs: ["java"]
  },
  {
    id: "xsl",
    scopeName: "text.xml.xsl",
    path: "xsl.tmLanguage.json",
    embeddedLangs: ["xml"]
  },
  {
    id: "yaml",
    scopeName: "source.yaml",
    path: "yaml.tmLanguage.json"
  },
  {
    id: "zenscript",
    scopeName: "source.zenscript",
    path: "zenscript.tmLanguage.json",
    samplePath: "zenscript.sample"
  }
];
var FontStyle = /* @__PURE__ */ ((FontStyle2) => {
  FontStyle2[FontStyle2["NotSet"] = -1] = "NotSet";
  FontStyle2[FontStyle2["None"] = 0] = "None";
  FontStyle2[FontStyle2["Italic"] = 1] = "Italic";
  FontStyle2[FontStyle2["Bold"] = 2] = "Bold";
  FontStyle2[FontStyle2["Underline"] = 4] = "Underline";
  return FontStyle2;
})(FontStyle || {});
class StackElementMetadata {
  static toBinaryStr(metadata) {
    let r2 = metadata.toString(2);
    while (r2.length < 32) {
      r2 = "0" + r2;
    }
    return r2;
  }
  static printMetadata(metadata) {
    let languageId = StackElementMetadata.getLanguageId(metadata);
    let tokenType = StackElementMetadata.getTokenType(metadata);
    let fontStyle = StackElementMetadata.getFontStyle(metadata);
    let foreground = StackElementMetadata.getForeground(metadata);
    let background = StackElementMetadata.getBackground(metadata);
    console.log({
      languageId,
      tokenType,
      fontStyle,
      foreground,
      background
    });
  }
  static getLanguageId(metadata) {
    return (metadata & 255) >>> 0;
  }
  static getTokenType(metadata) {
    return (metadata & 768) >>> 8;
  }
  static getFontStyle(metadata) {
    return (metadata & 14336) >>> 11;
  }
  static getForeground(metadata) {
    return (metadata & 8372224) >>> 15;
  }
  static getBackground(metadata) {
    return (metadata & 4286578688) >>> 24;
  }
  static containsBalancedBrackets(metadata) {
    return (metadata & 1024) !== 0;
  }
  static set(metadata, languageId, tokenType, fontStyle, foreground, background) {
    let _languageId = StackElementMetadata.getLanguageId(metadata);
    let _tokenType = StackElementMetadata.getTokenType(metadata);
    let _fontStyle = StackElementMetadata.getFontStyle(metadata);
    let _foreground = StackElementMetadata.getForeground(metadata);
    let _background = StackElementMetadata.getBackground(metadata);
    let _containsBalancedBracketsBit = StackElementMetadata.containsBalancedBrackets(
      metadata
    ) ? 1 : 0;
    if (languageId !== 0) {
      _languageId = languageId;
    }
    if (tokenType !== 0) {
      _tokenType = tokenType === 8 ? 0 : tokenType;
    }
    if (fontStyle !== -1) {
      _fontStyle = fontStyle;
    }
    if (foreground !== 0) {
      _foreground = foreground;
    }
    if (background !== 0) {
      _background = background;
    }
    return (_languageId << 0 | _tokenType << 8 | _fontStyle << 11 | _containsBalancedBracketsBit << 10 | _foreground << 15 | _background << 24) >>> 0;
  }
}
function trimEndSlash(str) {
  if (str.endsWith("/") || str.endsWith("\\"))
    return str.slice(0, -1);
  return str;
}
function trimStartDot(str) {
  if (str.startsWith("./"))
    return str.slice(2);
  return str;
}
function dirpathparts(str) {
  const parts = str.split(/[\/\\]/g);
  return parts.slice(0, parts.length - 1);
}
function join(...parts) {
  return parts.map(trimEndSlash).map(trimStartDot).join("/");
}
function groupBy(elements, keyGetter) {
  const map2 = /* @__PURE__ */ new Map();
  for (const element of elements) {
    const key = keyGetter(element);
    if (map2.has(key)) {
      const group = map2.get(key);
      group.push(element);
    } else {
      map2.set(key, [element]);
    }
  }
  return map2;
}
function createScanner(text, ignoreTrivia = false) {
  const len = text.length;
  let pos = 0, value = "", tokenOffset = 0, token = 16, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0;
  function scanHexDigits(count2, exact) {
    let digits = 0;
    let value2 = 0;
    while (digits < count2 || !exact) {
      let ch2 = text.charCodeAt(pos);
      if (ch2 >= 48 && ch2 <= 57) {
        value2 = value2 * 16 + ch2 - 48;
      } else if (ch2 >= 65 && ch2 <= 70) {
        value2 = value2 * 16 + ch2 - 65 + 10;
      } else if (ch2 >= 97 && ch2 <= 102) {
        value2 = value2 * 16 + ch2 - 97 + 10;
      } else {
        break;
      }
      pos++;
      digits++;
    }
    if (digits < count2) {
      value2 = -1;
    }
    return value2;
  }
  function setPosition(newPosition) {
    pos = newPosition;
    value = "";
    tokenOffset = 0;
    token = 16;
    scanError = 0;
  }
  function scanNumber() {
    let start = pos;
    if (text.charCodeAt(pos) === 48) {
      pos++;
    } else {
      pos++;
      while (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
      }
    }
    if (pos < text.length && text.charCodeAt(pos) === 46) {
      pos++;
      if (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
        while (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
        }
      } else {
        scanError = 3;
        return text.substring(start, pos);
      }
    }
    let end = pos;
    if (pos < text.length && (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101)) {
      pos++;
      if (pos < text.length && text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45) {
        pos++;
      }
      if (pos < text.length && isDigit(text.charCodeAt(pos))) {
        pos++;
        while (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
        }
        end = pos;
      } else {
        scanError = 3;
      }
    }
    return text.substring(start, end);
  }
  function scanString() {
    let result = "", start = pos;
    while (true) {
      if (pos >= len) {
        result += text.substring(start, pos);
        scanError = 2;
        break;
      }
      const ch2 = text.charCodeAt(pos);
      if (ch2 === 34) {
        result += text.substring(start, pos);
        pos++;
        break;
      }
      if (ch2 === 92) {
        result += text.substring(start, pos);
        pos++;
        if (pos >= len) {
          scanError = 2;
          break;
        }
        const ch22 = text.charCodeAt(pos++);
        switch (ch22) {
          case 34:
            result += '"';
            break;
          case 92:
            result += "\\";
            break;
          case 47:
            result += "/";
            break;
          case 98:
            result += "\b";
            break;
          case 102:
            result += "\f";
            break;
          case 110:
            result += "\n";
            break;
          case 114:
            result += "\r";
            break;
          case 116:
            result += "	";
            break;
          case 117:
            const ch3 = scanHexDigits(4, true);
            if (ch3 >= 0) {
              result += String.fromCharCode(ch3);
            } else {
              scanError = 4;
            }
            break;
          default:
            scanError = 5;
        }
        start = pos;
        continue;
      }
      if (ch2 >= 0 && ch2 <= 31) {
        if (isLineBreak(ch2)) {
          result += text.substring(start, pos);
          scanError = 2;
          break;
        } else {
          scanError = 6;
        }
      }
      pos++;
    }
    return result;
  }
  function scanNext() {
    value = "";
    scanError = 0;
    tokenOffset = pos;
    lineStartOffset = lineNumber;
    prevTokenLineStartOffset = tokenLineStartOffset;
    if (pos >= len) {
      tokenOffset = len;
      return token = 17;
    }
    let code = text.charCodeAt(pos);
    if (isWhiteSpace(code)) {
      do {
        pos++;
        value += String.fromCharCode(code);
        code = text.charCodeAt(pos);
      } while (isWhiteSpace(code));
      return token = 15;
    }
    if (isLineBreak(code)) {
      pos++;
      value += String.fromCharCode(code);
      if (code === 13 && text.charCodeAt(pos) === 10) {
        pos++;
        value += "\n";
      }
      lineNumber++;
      tokenLineStartOffset = pos;
      return token = 14;
    }
    switch (code) {
      case 123:
        pos++;
        return token = 1;
      case 125:
        pos++;
        return token = 2;
      case 91:
        pos++;
        return token = 3;
      case 93:
        pos++;
        return token = 4;
      case 58:
        pos++;
        return token = 6;
      case 44:
        pos++;
        return token = 5;
      case 34:
        pos++;
        value = scanString();
        return token = 10;
      case 47:
        const start = pos - 1;
        if (text.charCodeAt(pos + 1) === 47) {
          pos += 2;
          while (pos < len) {
            if (isLineBreak(text.charCodeAt(pos))) {
              break;
            }
            pos++;
          }
          value = text.substring(start, pos);
          return token = 12;
        }
        if (text.charCodeAt(pos + 1) === 42) {
          pos += 2;
          const safeLength = len - 1;
          let commentClosed = false;
          while (pos < safeLength) {
            const ch2 = text.charCodeAt(pos);
            if (ch2 === 42 && text.charCodeAt(pos + 1) === 47) {
              pos += 2;
              commentClosed = true;
              break;
            }
            pos++;
            if (isLineBreak(ch2)) {
              if (ch2 === 13 && text.charCodeAt(pos) === 10) {
                pos++;
              }
              lineNumber++;
              tokenLineStartOffset = pos;
            }
          }
          if (!commentClosed) {
            pos++;
            scanError = 1;
          }
          value = text.substring(start, pos);
          return token = 13;
        }
        value += String.fromCharCode(code);
        pos++;
        return token = 16;
      case 45:
        value += String.fromCharCode(code);
        pos++;
        if (pos === len || !isDigit(text.charCodeAt(pos))) {
          return token = 16;
        }
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        value += scanNumber();
        return token = 11;
      default:
        while (pos < len && isUnknownContentCharacter(code)) {
          pos++;
          code = text.charCodeAt(pos);
        }
        if (tokenOffset !== pos) {
          value = text.substring(tokenOffset, pos);
          switch (value) {
            case "true":
              return token = 8;
            case "false":
              return token = 9;
            case "null":
              return token = 7;
          }
          return token = 16;
        }
        value += String.fromCharCode(code);
        pos++;
        return token = 16;
    }
  }
  function isUnknownContentCharacter(code) {
    if (isWhiteSpace(code) || isLineBreak(code)) {
      return false;
    }
    switch (code) {
      case 125:
      case 93:
      case 123:
      case 91:
      case 34:
      case 58:
      case 44:
      case 47:
        return false;
    }
    return true;
  }
  function scanNextNonTrivia() {
    let result;
    do {
      result = scanNext();
    } while (result >= 12 && result <= 15);
    return result;
  }
  return {
    setPosition,
    getPosition: () => pos,
    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,
    getToken: () => token,
    getTokenValue: () => value,
    getTokenOffset: () => tokenOffset,
    getTokenLength: () => pos - tokenOffset,
    getTokenStartLine: () => lineStartOffset,
    getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,
    getTokenError: () => scanError
  };
}
function isWhiteSpace(ch2) {
  return ch2 === 32 || ch2 === 9;
}
function isLineBreak(ch2) {
  return ch2 === 10 || ch2 === 13;
}
function isDigit(ch2) {
  return ch2 >= 48 && ch2 <= 57;
}
var CharacterCodes;
(function(CharacterCodes2) {
  CharacterCodes2[CharacterCodes2["lineFeed"] = 10] = "lineFeed";
  CharacterCodes2[CharacterCodes2["carriageReturn"] = 13] = "carriageReturn";
  CharacterCodes2[CharacterCodes2["space"] = 32] = "space";
  CharacterCodes2[CharacterCodes2["_0"] = 48] = "_0";
  CharacterCodes2[CharacterCodes2["_1"] = 49] = "_1";
  CharacterCodes2[CharacterCodes2["_2"] = 50] = "_2";
  CharacterCodes2[CharacterCodes2["_3"] = 51] = "_3";
  CharacterCodes2[CharacterCodes2["_4"] = 52] = "_4";
  CharacterCodes2[CharacterCodes2["_5"] = 53] = "_5";
  CharacterCodes2[CharacterCodes2["_6"] = 54] = "_6";
  CharacterCodes2[CharacterCodes2["_7"] = 55] = "_7";
  CharacterCodes2[CharacterCodes2["_8"] = 56] = "_8";
  CharacterCodes2[CharacterCodes2["_9"] = 57] = "_9";
  CharacterCodes2[CharacterCodes2["a"] = 97] = "a";
  CharacterCodes2[CharacterCodes2["b"] = 98] = "b";
  CharacterCodes2[CharacterCodes2["c"] = 99] = "c";
  CharacterCodes2[CharacterCodes2["d"] = 100] = "d";
  CharacterCodes2[CharacterCodes2["e"] = 101] = "e";
  CharacterCodes2[CharacterCodes2["f"] = 102] = "f";
  CharacterCodes2[CharacterCodes2["g"] = 103] = "g";
  CharacterCodes2[CharacterCodes2["h"] = 104] = "h";
  CharacterCodes2[CharacterCodes2["i"] = 105] = "i";
  CharacterCodes2[CharacterCodes2["j"] = 106] = "j";
  CharacterCodes2[CharacterCodes2["k"] = 107] = "k";
  CharacterCodes2[CharacterCodes2["l"] = 108] = "l";
  CharacterCodes2[CharacterCodes2["m"] = 109] = "m";
  CharacterCodes2[CharacterCodes2["n"] = 110] = "n";
  CharacterCodes2[CharacterCodes2["o"] = 111] = "o";
  CharacterCodes2[CharacterCodes2["p"] = 112] = "p";
  CharacterCodes2[CharacterCodes2["q"] = 113] = "q";
  CharacterCodes2[CharacterCodes2["r"] = 114] = "r";
  CharacterCodes2[CharacterCodes2["s"] = 115] = "s";
  CharacterCodes2[CharacterCodes2["t"] = 116] = "t";
  CharacterCodes2[CharacterCodes2["u"] = 117] = "u";
  CharacterCodes2[CharacterCodes2["v"] = 118] = "v";
  CharacterCodes2[CharacterCodes2["w"] = 119] = "w";
  CharacterCodes2[CharacterCodes2["x"] = 120] = "x";
  CharacterCodes2[CharacterCodes2["y"] = 121] = "y";
  CharacterCodes2[CharacterCodes2["z"] = 122] = "z";
  CharacterCodes2[CharacterCodes2["A"] = 65] = "A";
  CharacterCodes2[CharacterCodes2["B"] = 66] = "B";
  CharacterCodes2[CharacterCodes2["C"] = 67] = "C";
  CharacterCodes2[CharacterCodes2["D"] = 68] = "D";
  CharacterCodes2[CharacterCodes2["E"] = 69] = "E";
  CharacterCodes2[CharacterCodes2["F"] = 70] = "F";
  CharacterCodes2[CharacterCodes2["G"] = 71] = "G";
  CharacterCodes2[CharacterCodes2["H"] = 72] = "H";
  CharacterCodes2[CharacterCodes2["I"] = 73] = "I";
  CharacterCodes2[CharacterCodes2["J"] = 74] = "J";
  CharacterCodes2[CharacterCodes2["K"] = 75] = "K";
  CharacterCodes2[CharacterCodes2["L"] = 76] = "L";
  CharacterCodes2[CharacterCodes2["M"] = 77] = "M";
  CharacterCodes2[CharacterCodes2["N"] = 78] = "N";
  CharacterCodes2[CharacterCodes2["O"] = 79] = "O";
  CharacterCodes2[CharacterCodes2["P"] = 80] = "P";
  CharacterCodes2[CharacterCodes2["Q"] = 81] = "Q";
  CharacterCodes2[CharacterCodes2["R"] = 82] = "R";
  CharacterCodes2[CharacterCodes2["S"] = 83] = "S";
  CharacterCodes2[CharacterCodes2["T"] = 84] = "T";
  CharacterCodes2[CharacterCodes2["U"] = 85] = "U";
  CharacterCodes2[CharacterCodes2["V"] = 86] = "V";
  CharacterCodes2[CharacterCodes2["W"] = 87] = "W";
  CharacterCodes2[CharacterCodes2["X"] = 88] = "X";
  CharacterCodes2[CharacterCodes2["Y"] = 89] = "Y";
  CharacterCodes2[CharacterCodes2["Z"] = 90] = "Z";
  CharacterCodes2[CharacterCodes2["asterisk"] = 42] = "asterisk";
  CharacterCodes2[CharacterCodes2["backslash"] = 92] = "backslash";
  CharacterCodes2[CharacterCodes2["closeBrace"] = 125] = "closeBrace";
  CharacterCodes2[CharacterCodes2["closeBracket"] = 93] = "closeBracket";
  CharacterCodes2[CharacterCodes2["colon"] = 58] = "colon";
  CharacterCodes2[CharacterCodes2["comma"] = 44] = "comma";
  CharacterCodes2[CharacterCodes2["dot"] = 46] = "dot";
  CharacterCodes2[CharacterCodes2["doubleQuote"] = 34] = "doubleQuote";
  CharacterCodes2[CharacterCodes2["minus"] = 45] = "minus";
  CharacterCodes2[CharacterCodes2["openBrace"] = 123] = "openBrace";
  CharacterCodes2[CharacterCodes2["openBracket"] = 91] = "openBracket";
  CharacterCodes2[CharacterCodes2["plus"] = 43] = "plus";
  CharacterCodes2[CharacterCodes2["slash"] = 47] = "slash";
  CharacterCodes2[CharacterCodes2["formFeed"] = 12] = "formFeed";
  CharacterCodes2[CharacterCodes2["tab"] = 9] = "tab";
})(CharacterCodes || (CharacterCodes = {}));
var ParseOptions;
(function(ParseOptions2) {
  ParseOptions2.DEFAULT = {
    allowTrailingComma: false
  };
})(ParseOptions || (ParseOptions = {}));
function parse$1(text, errors = [], options = ParseOptions.DEFAULT) {
  let currentProperty = null;
  let currentParent = [];
  const previousParents = [];
  function onValue(value) {
    if (Array.isArray(currentParent)) {
      currentParent.push(value);
    } else if (currentProperty !== null) {
      currentParent[currentProperty] = value;
    }
  }
  const visitor = {
    onObjectBegin: () => {
      const object = {};
      onValue(object);
      previousParents.push(currentParent);
      currentParent = object;
      currentProperty = null;
    },
    onObjectProperty: (name) => {
      currentProperty = name;
    },
    onObjectEnd: () => {
      currentParent = previousParents.pop();
    },
    onArrayBegin: () => {
      const array = [];
      onValue(array);
      previousParents.push(currentParent);
      currentParent = array;
      currentProperty = null;
    },
    onArrayEnd: () => {
      currentParent = previousParents.pop();
    },
    onLiteralValue: onValue,
    onError: (error, offset2, length) => {
      errors.push({ error, offset: offset2, length });
    }
  };
  visit(text, visitor, options);
  return currentParent[0];
}
function visit(text, visitor, options = ParseOptions.DEFAULT) {
  const _scanner = createScanner(text, false);
  const _jsonPath = [];
  function toNoArgVisit(visitFunction) {
    return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
  }
  function toNoArgVisitWithPath(visitFunction) {
    return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
  }
  function toOneArgVisit(visitFunction) {
    return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;
  }
  function toOneArgVisitWithPath(visitFunction) {
    return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;
  }
  const onObjectBegin = toNoArgVisitWithPath(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisitWithPath(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);
  const disallowComments = options && options.disallowComments;
  const allowTrailingComma = options && options.allowTrailingComma;
  function scanNext() {
    while (true) {
      const token = _scanner.scan();
      switch (_scanner.getTokenError()) {
        case 4:
          handleError2(14);
          break;
        case 5:
          handleError2(15);
          break;
        case 3:
          handleError2(13);
          break;
        case 1:
          if (!disallowComments) {
            handleError2(11);
          }
          break;
        case 2:
          handleError2(12);
          break;
        case 6:
          handleError2(16);
          break;
      }
      switch (token) {
        case 12:
        case 13:
          if (disallowComments) {
            handleError2(10);
          } else {
            onComment();
          }
          break;
        case 16:
          handleError2(1);
          break;
        case 15:
        case 14:
          break;
        default:
          return token;
      }
    }
  }
  function handleError2(error, skipUntilAfter = [], skipUntil = []) {
    onError(error);
    if (skipUntilAfter.length + skipUntil.length > 0) {
      let token = _scanner.getToken();
      while (token !== 17) {
        if (skipUntilAfter.indexOf(token) !== -1) {
          scanNext();
          break;
        } else if (skipUntil.indexOf(token) !== -1) {
          break;
        }
        token = scanNext();
      }
    }
  }
  function parseString(isValue) {
    const value = _scanner.getTokenValue();
    if (isValue) {
      onLiteralValue(value);
    } else {
      onObjectProperty(value);
      _jsonPath.push(value);
    }
    scanNext();
    return true;
  }
  function parseLiteral() {
    switch (_scanner.getToken()) {
      case 11:
        const tokenValue = _scanner.getTokenValue();
        let value = Number(tokenValue);
        if (isNaN(value)) {
          handleError2(2);
          value = 0;
        }
        onLiteralValue(value);
        break;
      case 7:
        onLiteralValue(null);
        break;
      case 8:
        onLiteralValue(true);
        break;
      case 9:
        onLiteralValue(false);
        break;
      default:
        return false;
    }
    scanNext();
    return true;
  }
  function parseProperty() {
    if (_scanner.getToken() !== 10) {
      handleError2(3, [], [2, 5]);
      return false;
    }
    parseString(false);
    if (_scanner.getToken() === 6) {
      onSeparator(":");
      scanNext();
      if (!parseValue()) {
        handleError2(4, [], [2, 5]);
      }
    } else {
      handleError2(5, [], [2, 5]);
    }
    _jsonPath.pop();
    return true;
  }
  function parseObject() {
    onObjectBegin();
    scanNext();
    let needsComma = false;
    while (_scanner.getToken() !== 2 && _scanner.getToken() !== 17) {
      if (_scanner.getToken() === 5) {
        if (!needsComma) {
          handleError2(4, [], []);
        }
        onSeparator(",");
        scanNext();
        if (_scanner.getToken() === 2 && allowTrailingComma) {
          break;
        }
      } else if (needsComma) {
        handleError2(6, [], []);
      }
      if (!parseProperty()) {
        handleError2(4, [], [2, 5]);
      }
      needsComma = true;
    }
    onObjectEnd();
    if (_scanner.getToken() !== 2) {
      handleError2(7, [2], []);
    } else {
      scanNext();
    }
    return true;
  }
  function parseArray() {
    onArrayBegin();
    scanNext();
    let isFirstElement = true;
    let needsComma = false;
    while (_scanner.getToken() !== 4 && _scanner.getToken() !== 17) {
      if (_scanner.getToken() === 5) {
        if (!needsComma) {
          handleError2(4, [], []);
        }
        onSeparator(",");
        scanNext();
        if (_scanner.getToken() === 4 && allowTrailingComma) {
          break;
        }
      } else if (needsComma) {
        handleError2(6, [], []);
      }
      if (isFirstElement) {
        _jsonPath.push(0);
        isFirstElement = false;
      } else {
        _jsonPath[_jsonPath.length - 1]++;
      }
      if (!parseValue()) {
        handleError2(4, [], [4, 5]);
      }
      needsComma = true;
    }
    onArrayEnd();
    if (!isFirstElement) {
      _jsonPath.pop();
    }
    if (_scanner.getToken() !== 4) {
      handleError2(8, [4], []);
    } else {
      scanNext();
    }
    return true;
  }
  function parseValue() {
    switch (_scanner.getToken()) {
      case 3:
        return parseArray();
      case 1:
        return parseObject();
      case 10:
        return parseString(true);
      default:
        return parseLiteral();
    }
  }
  scanNext();
  if (_scanner.getToken() === 17) {
    if (options.allowEmptyContent) {
      return true;
    }
    handleError2(4, [], []);
    return false;
  }
  if (!parseValue()) {
    handleError2(4, [], []);
    return false;
  }
  if (_scanner.getToken() !== 17) {
    handleError2(9, [], []);
  }
  return true;
}
var ScanError;
(function(ScanError2) {
  ScanError2[ScanError2["None"] = 0] = "None";
  ScanError2[ScanError2["UnexpectedEndOfComment"] = 1] = "UnexpectedEndOfComment";
  ScanError2[ScanError2["UnexpectedEndOfString"] = 2] = "UnexpectedEndOfString";
  ScanError2[ScanError2["UnexpectedEndOfNumber"] = 3] = "UnexpectedEndOfNumber";
  ScanError2[ScanError2["InvalidUnicode"] = 4] = "InvalidUnicode";
  ScanError2[ScanError2["InvalidEscapeCharacter"] = 5] = "InvalidEscapeCharacter";
  ScanError2[ScanError2["InvalidCharacter"] = 6] = "InvalidCharacter";
})(ScanError || (ScanError = {}));
var SyntaxKind;
(function(SyntaxKind2) {
  SyntaxKind2[SyntaxKind2["OpenBraceToken"] = 1] = "OpenBraceToken";
  SyntaxKind2[SyntaxKind2["CloseBraceToken"] = 2] = "CloseBraceToken";
  SyntaxKind2[SyntaxKind2["OpenBracketToken"] = 3] = "OpenBracketToken";
  SyntaxKind2[SyntaxKind2["CloseBracketToken"] = 4] = "CloseBracketToken";
  SyntaxKind2[SyntaxKind2["CommaToken"] = 5] = "CommaToken";
  SyntaxKind2[SyntaxKind2["ColonToken"] = 6] = "ColonToken";
  SyntaxKind2[SyntaxKind2["NullKeyword"] = 7] = "NullKeyword";
  SyntaxKind2[SyntaxKind2["TrueKeyword"] = 8] = "TrueKeyword";
  SyntaxKind2[SyntaxKind2["FalseKeyword"] = 9] = "FalseKeyword";
  SyntaxKind2[SyntaxKind2["StringLiteral"] = 10] = "StringLiteral";
  SyntaxKind2[SyntaxKind2["NumericLiteral"] = 11] = "NumericLiteral";
  SyntaxKind2[SyntaxKind2["LineCommentTrivia"] = 12] = "LineCommentTrivia";
  SyntaxKind2[SyntaxKind2["BlockCommentTrivia"] = 13] = "BlockCommentTrivia";
  SyntaxKind2[SyntaxKind2["LineBreakTrivia"] = 14] = "LineBreakTrivia";
  SyntaxKind2[SyntaxKind2["Trivia"] = 15] = "Trivia";
  SyntaxKind2[SyntaxKind2["Unknown"] = 16] = "Unknown";
  SyntaxKind2[SyntaxKind2["EOF"] = 17] = "EOF";
})(SyntaxKind || (SyntaxKind = {}));
const parse = parse$1;
var ParseErrorCode;
(function(ParseErrorCode2) {
  ParseErrorCode2[ParseErrorCode2["InvalidSymbol"] = 1] = "InvalidSymbol";
  ParseErrorCode2[ParseErrorCode2["InvalidNumberFormat"] = 2] = "InvalidNumberFormat";
  ParseErrorCode2[ParseErrorCode2["PropertyNameExpected"] = 3] = "PropertyNameExpected";
  ParseErrorCode2[ParseErrorCode2["ValueExpected"] = 4] = "ValueExpected";
  ParseErrorCode2[ParseErrorCode2["ColonExpected"] = 5] = "ColonExpected";
  ParseErrorCode2[ParseErrorCode2["CommaExpected"] = 6] = "CommaExpected";
  ParseErrorCode2[ParseErrorCode2["CloseBraceExpected"] = 7] = "CloseBraceExpected";
  ParseErrorCode2[ParseErrorCode2["CloseBracketExpected"] = 8] = "CloseBracketExpected";
  ParseErrorCode2[ParseErrorCode2["EndOfFileExpected"] = 9] = "EndOfFileExpected";
  ParseErrorCode2[ParseErrorCode2["InvalidCommentToken"] = 10] = "InvalidCommentToken";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfComment"] = 11] = "UnexpectedEndOfComment";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfString"] = 12] = "UnexpectedEndOfString";
  ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfNumber"] = 13] = "UnexpectedEndOfNumber";
  ParseErrorCode2[ParseErrorCode2["InvalidUnicode"] = 14] = "InvalidUnicode";
  ParseErrorCode2[ParseErrorCode2["InvalidEscapeCharacter"] = 15] = "InvalidEscapeCharacter";
  ParseErrorCode2[ParseErrorCode2["InvalidCharacter"] = 16] = "InvalidCharacter";
})(ParseErrorCode || (ParseErrorCode = {}));
"process" in globalThis && typeof process !== "undefined" && typeof process.release !== "undefined" && process.release.name === "node";
let CDN_ROOT = "";
const WASM_PATH = "dist/";
function setCDN(root) {
  CDN_ROOT = root.endsWith("/") ? root : root + "/";
}
let _onigurumaPromise = null;
async function getOniguruma(wasmPath) {
  if (!_onigurumaPromise) {
    let loader;
    {
      {
        loader = mainExports$1.loadWASM({
          data: await (globalThis.__shiki_fetch__ || globalThis.fetch)(_resolvePath(join(...dirpathparts(wasmPath), "onig.wasm")))
        });
      }
    }
    _onigurumaPromise = loader.then(() => {
      return {
        createOnigScanner(patterns) {
          return mainExports$1.createOnigScanner(patterns);
        },
        createOnigString(s) {
          return mainExports$1.createOnigString(s);
        }
      };
    });
  }
  return _onigurumaPromise;
}
function _resolvePath(filepath) {
  {
    return `${CDN_ROOT}${filepath}`;
  }
}
async function _fetchAssets(filepath) {
  const path = _resolvePath(filepath);
  {
    return await (globalThis.__shiki_fetch__ || globalThis.fetch)(path).then((r2) => r2.text());
  }
}
async function _fetchJSONAssets(filepath) {
  const errors = [];
  const rawTheme = parse(await _fetchAssets(filepath), errors, {
    allowTrailingComma: true
  });
  if (errors.length) {
    throw errors[0];
  }
  return rawTheme;
}
async function fetchTheme(themePath) {
  let theme = await _fetchJSONAssets(themePath);
  const shikiTheme = toShikiTheme(theme);
  if (shikiTheme.include) {
    const includedTheme = await fetchTheme(join(...dirpathparts(themePath), shikiTheme.include));
    if (includedTheme.settings) {
      shikiTheme.settings = includedTheme.settings.concat(shikiTheme.settings);
    }
    if (includedTheme.bg && !shikiTheme.bg) {
      shikiTheme.bg = includedTheme.bg;
    }
    if (includedTheme.colors) {
      shikiTheme.colors = { ...includedTheme.colors, ...shikiTheme.colors };
    }
    delete shikiTheme.include;
  }
  return shikiTheme;
}
async function fetchGrammar(filepath) {
  return await _fetchJSONAssets(filepath);
}
function repairTheme(theme) {
  if (!theme.settings)
    theme.settings = [];
  if (theme.settings[0] && theme.settings[0].settings && !theme.settings[0].scope) {
    return;
  }
  theme.settings.unshift({
    settings: {
      foreground: theme.fg,
      background: theme.bg
    }
  });
}
function toShikiTheme(rawTheme) {
  const type = rawTheme.type || "dark";
  const shikiTheme = {
    name: rawTheme.name,
    type,
    ...rawTheme,
    ...getThemeDefaultColors(rawTheme)
  };
  if (rawTheme.include) {
    shikiTheme.include = rawTheme.include;
  }
  if (rawTheme.tokenColors) {
    shikiTheme.settings = rawTheme.tokenColors;
    delete shikiTheme.tokenColors;
  }
  repairTheme(shikiTheme);
  return shikiTheme;
}
const VSCODE_FALLBACK_EDITOR_FG = { light: "#333333", dark: "#bbbbbb" };
const VSCODE_FALLBACK_EDITOR_BG = { light: "#fffffe", dark: "#1e1e1e" };
function getThemeDefaultColors(theme) {
  var _a2, _b, _c2, _d2;
  let fg2, bg2;
  let settings = theme.settings ? theme.settings : theme.tokenColors;
  const globalSetting = settings ? settings.find((s) => {
    return !s.name && !s.scope;
  }) : void 0;
  if ((_a2 = globalSetting == null ? void 0 : globalSetting.settings) == null ? void 0 : _a2.foreground) {
    fg2 = globalSetting.settings.foreground;
  }
  if ((_b = globalSetting == null ? void 0 : globalSetting.settings) == null ? void 0 : _b.background) {
    bg2 = globalSetting.settings.background;
  }
  if (!fg2 && ((_c2 = theme == null ? void 0 : theme.colors) == null ? void 0 : _c2["editor.foreground"])) {
    fg2 = theme.colors["editor.foreground"];
  }
  if (!bg2 && ((_d2 = theme == null ? void 0 : theme.colors) == null ? void 0 : _d2["editor.background"])) {
    bg2 = theme.colors["editor.background"];
  }
  if (!fg2) {
    fg2 = theme.type === "light" ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;
  }
  if (!bg2) {
    bg2 = theme.type === "light" ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;
  }
  return {
    fg: fg2,
    bg: bg2
  };
}
class Resolver {
  constructor(onigLibPromise, onigLibName) {
    this.languagesPath = "languages/";
    this.languageMap = {};
    this.scopeToLangMap = {};
    this._onigLibPromise = onigLibPromise;
    this._onigLibName = onigLibName;
  }
  get onigLib() {
    return this._onigLibPromise;
  }
  getOnigLibName() {
    return this._onigLibName;
  }
  getLangRegistration(langIdOrAlias) {
    return this.languageMap[langIdOrAlias];
  }
  async loadGrammar(scopeName) {
    const lang = this.scopeToLangMap[scopeName];
    if (!lang) {
      return null;
    }
    if (lang.grammar) {
      return lang.grammar;
    }
    const g2 = await fetchGrammar(
      languages.includes(lang) ? `${this.languagesPath}${lang.path}` : lang.path
    );
    lang.grammar = g2;
    return g2;
  }
  addLanguage(l2) {
    this.languageMap[l2.id] = l2;
    if (l2.aliases) {
      l2.aliases.forEach((a2) => {
        this.languageMap[a2] = l2;
      });
    }
    this.scopeToLangMap[l2.scopeName] = l2;
  }
}
function tokenizeWithTheme(theme, colorMap, fileContents, grammar, options) {
  let lines = fileContents.split(/\r\n|\r|\n/);
  let ruleStack = mainExports.INITIAL;
  let actual = [];
  let final = [];
  for (let i2 = 0, len = lines.length; i2 < len; i2++) {
    let line = lines[i2];
    if (line === "") {
      actual = [];
      final.push([]);
      continue;
    }
    let resultWithScopes;
    let tokensWithScopes;
    let tokensWithScopesIndex;
    if (options.includeExplanation) {
      resultWithScopes = grammar.tokenizeLine(line, ruleStack);
      tokensWithScopes = resultWithScopes.tokens;
      tokensWithScopesIndex = 0;
    }
    let result = grammar.tokenizeLine2(line, ruleStack);
    let tokensLength = result.tokens.length / 2;
    for (let j2 = 0; j2 < tokensLength; j2++) {
      let startIndex = result.tokens[2 * j2];
      let nextStartIndex = j2 + 1 < tokensLength ? result.tokens[2 * j2 + 2] : line.length;
      if (startIndex === nextStartIndex) {
        continue;
      }
      let metadata = result.tokens[2 * j2 + 1];
      let foreground = StackElementMetadata.getForeground(metadata);
      let foregroundColor = colorMap[foreground];
      let fontStyle = StackElementMetadata.getFontStyle(metadata);
      let explanation = [];
      if (options.includeExplanation) {
        let offset2 = 0;
        while (startIndex + offset2 < nextStartIndex) {
          let tokenWithScopes = tokensWithScopes[tokensWithScopesIndex];
          let tokenWithScopesText = line.substring(
            tokenWithScopes.startIndex,
            tokenWithScopes.endIndex
          );
          offset2 += tokenWithScopesText.length;
          explanation.push({
            content: tokenWithScopesText,
            scopes: explainThemeScopes(theme, tokenWithScopes.scopes)
          });
          tokensWithScopesIndex++;
        }
      }
      actual.push({
        content: line.substring(startIndex, nextStartIndex),
        color: foregroundColor,
        fontStyle,
        explanation
      });
    }
    final.push(actual);
    actual = [];
    ruleStack = result.ruleStack;
  }
  return final;
}
function explainThemeScopes(theme, scopes) {
  let result = [];
  for (let i2 = 0, len = scopes.length; i2 < len; i2++) {
    let parentScopes = scopes.slice(0, i2);
    let scope = scopes[i2];
    result[i2] = {
      scopeName: scope,
      themeMatches: explainThemeScope(theme, scope, parentScopes)
    };
  }
  return result;
}
function matchesOne(selector, scope) {
  let selectorPrefix = selector + ".";
  if (selector === scope || scope.substring(0, selectorPrefix.length) === selectorPrefix) {
    return true;
  }
  return false;
}
function matches(selector, selectorParentScopes, scope, parentScopes) {
  if (!matchesOne(selector, scope)) {
    return false;
  }
  let selectorParentIndex = selectorParentScopes.length - 1;
  let parentIndex = parentScopes.length - 1;
  while (selectorParentIndex >= 0 && parentIndex >= 0) {
    if (matchesOne(selectorParentScopes[selectorParentIndex], parentScopes[parentIndex])) {
      selectorParentIndex--;
    }
    parentIndex--;
  }
  if (selectorParentIndex === -1) {
    return true;
  }
  return false;
}
function explainThemeScope(theme, scope, parentScopes) {
  let result = [], resultLen = 0;
  for (let i2 = 0, len = theme.settings.length; i2 < len; i2++) {
    let setting = theme.settings[i2];
    let selectors;
    if (typeof setting.scope === "string") {
      selectors = setting.scope.split(/,/).map((scope2) => scope2.trim());
    } else if (Array.isArray(setting.scope)) {
      selectors = setting.scope;
    } else {
      continue;
    }
    for (let j2 = 0, lenJ = selectors.length; j2 < lenJ; j2++) {
      let rawSelector = selectors[j2];
      let rawSelectorPieces = rawSelector.split(/ /);
      let selector = rawSelectorPieces[rawSelectorPieces.length - 1];
      let selectorParentScopes = rawSelectorPieces.slice(0, rawSelectorPieces.length - 1);
      if (matches(selector, selectorParentScopes, scope, parentScopes)) {
        result[resultLen++] = setting;
        j2 = lenJ;
      }
    }
  }
  return result;
}
const defaultElements = {
  pre({ className, style: style2, children }) {
    return `<pre class="${className}" style="${style2}">${children}</pre>`;
  },
  code({ children }) {
    return `<code>${children}</code>`;
  },
  line({ className, children }) {
    return `<span class="${className}">${children}</span>`;
  },
  token({ style: style2, children }) {
    return `<span style="${style2}">${children}</span>`;
  }
};
function renderToHtml(lines, options = {}) {
  var _a2;
  const bg2 = options.bg || "#fff";
  const optionsByLineNumber = groupBy((_a2 = options.lineOptions) != null ? _a2 : [], (option) => option.line);
  const userElements = options.elements || {};
  function h2(type = "", props = {}, children) {
    const element = userElements[type] || defaultElements[type];
    if (element) {
      children = children.filter(Boolean);
      return element({
        ...props,
        children: type === "code" ? children.join("\n") : children.join("")
      });
    }
    return "";
  }
  return h2(
    "pre",
    { className: "shiki " + (options.themeName || ""), style: `background-color: ${bg2}` },
    [
      options.langId ? `<div class="language-id">${options.langId}</div>` : "",
      h2(
        "code",
        {},
        lines.map((line, index) => {
          var _a3;
          const lineNumber = index + 1;
          const lineOptions = (_a3 = optionsByLineNumber.get(lineNumber)) != null ? _a3 : [];
          const lineClasses = getLineClasses(lineOptions).join(" ");
          return h2(
            "line",
            {
              className: lineClasses,
              lines,
              line,
              index
            },
            line.map((token, index2) => {
              const cssDeclarations = [`color: ${token.color || options.fg}`];
              if (token.fontStyle & FontStyle.Italic) {
                cssDeclarations.push("font-style: italic");
              }
              if (token.fontStyle & FontStyle.Bold) {
                cssDeclarations.push("font-weight: bold");
              }
              if (token.fontStyle & FontStyle.Underline) {
                cssDeclarations.push("text-decoration: underline");
              }
              return h2(
                "token",
                {
                  style: cssDeclarations.join("; "),
                  tokens: line,
                  token,
                  index: index2
                },
                [escapeHtml(token.content)]
              );
            })
          );
        })
      )
    ]
  );
}
const htmlEscapes = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
function escapeHtml(html) {
  return html.replace(/[&<>"']/g, (chr) => htmlEscapes[chr]);
}
function getLineClasses(lineOptions) {
  var _a2;
  const lineClasses = /* @__PURE__ */ new Set(["line"]);
  for (const lineOption of lineOptions) {
    for (const lineClass of (_a2 = lineOption.classes) != null ? _a2 : []) {
      lineClasses.add(lineClass);
    }
  }
  return Array.from(lineClasses);
}
class Registry extends mainExports.Registry {
  constructor(_resolver) {
    super(_resolver);
    this._resolver = _resolver;
    this.themesPath = "themes/";
    this._resolvedThemes = {};
    this._resolvedGrammars = {};
    this._langGraph = /* @__PURE__ */ new Map();
    this._langMap = languages.reduce((acc, lang) => {
      acc[lang.id] = lang;
      return acc;
    }, {});
  }
  getTheme(theme) {
    if (typeof theme === "string") {
      return this._resolvedThemes[theme];
    } else {
      return theme;
    }
  }
  async loadTheme(theme) {
    if (typeof theme === "string") {
      if (!this._resolvedThemes[theme]) {
        this._resolvedThemes[theme] = await fetchTheme(`${this.themesPath}${theme}.json`);
      }
      return this._resolvedThemes[theme];
    } else {
      theme = toShikiTheme(theme);
      if (theme.name) {
        this._resolvedThemes[theme.name] = theme;
      }
      return theme;
    }
  }
  async loadThemes(themes) {
    return await Promise.all(themes.map((theme) => this.loadTheme(theme)));
  }
  getLoadedThemes() {
    return Object.keys(this._resolvedThemes);
  }
  getGrammar(name) {
    return this._resolvedGrammars[name];
  }
  async loadLanguage(lang) {
    var _a2;
    const embeddedLanguages = (_a2 = lang.embeddedLangs) == null ? void 0 : _a2.reduce(async (acc, l2, idx) => {
      if (!this.getLoadedLanguages().includes(l2) && this._resolver.getLangRegistration(l2)) {
        await this._resolver.loadGrammar(this._resolver.getLangRegistration(l2).scopeName);
        acc[this._resolver.getLangRegistration(l2).scopeName] = idx + 2;
        return acc;
      }
    }, {});
    const grammarConfig = {
      embeddedLanguages,
      balancedBracketSelectors: lang.balancedBracketSelectors || ["*"],
      unbalancedBracketSelectors: lang.unbalancedBracketSelectors || []
    };
    const g2 = await this.loadGrammarWithConfiguration(lang.scopeName, 1, grammarConfig);
    this._resolvedGrammars[lang.id] = g2;
    if (lang.aliases) {
      lang.aliases.forEach((la2) => {
        this._resolvedGrammars[la2] = g2;
      });
    }
  }
  async loadLanguages(langs) {
    for (const lang of langs) {
      this.resolveEmbeddedLanguages(lang);
    }
    const langsGraphArray = Array.from(this._langGraph.values());
    for (const lang of langsGraphArray) {
      this._resolver.addLanguage(lang);
    }
    for (const lang of langsGraphArray) {
      await this.loadLanguage(lang);
    }
  }
  getLoadedLanguages() {
    return Object.keys(this._resolvedGrammars);
  }
  resolveEmbeddedLanguages(lang) {
    if (!this._langGraph.has(lang.id)) {
      this._langGraph.set(lang.id, lang);
    }
    if (lang.embeddedLangs) {
      for (const embeddedLang of lang.embeddedLangs) {
        this._langGraph.set(embeddedLang, this._langMap[embeddedLang]);
      }
    }
  }
}
function resolveLang(lang) {
  return typeof lang === "string" ? languages.find((l2) => {
    var _a2;
    return l2.id === lang || ((_a2 = l2.aliases) == null ? void 0 : _a2.includes(lang));
  }) : lang;
}
function resolveOptions(options) {
  var _a2;
  let _languages = languages;
  let _themes = options.themes || [];
  let _wasmPath = ((_a2 = options.paths) == null ? void 0 : _a2.wasm) ? options.paths.wasm.endsWith("/") ? options.paths.wasm : options.paths.wasm + "/" : WASM_PATH;
  if (options.langs) {
    _languages = options.langs.map(resolveLang);
  }
  if (options.theme) {
    _themes.unshift(options.theme);
  }
  if (!_themes.length) {
    _themes = ["nord"];
  }
  return { _languages, _themes, _wasmPath };
}
async function getHighlighter(options) {
  var _a2, _b;
  const { _languages, _themes, _wasmPath } = resolveOptions(options);
  const _resolver = new Resolver(getOniguruma(_wasmPath), "vscode-oniguruma");
  const _registry = new Registry(_resolver);
  if ((_a2 = options.paths) == null ? void 0 : _a2.themes) {
    _registry.themesPath = options.paths.themes.endsWith("/") ? options.paths.themes : options.paths.themes + "/";
  }
  if ((_b = options.paths) == null ? void 0 : _b.languages) {
    _resolver.languagesPath = options.paths.languages.endsWith("/") ? options.paths.languages : options.paths.languages + "/";
  }
  const themes = await _registry.loadThemes(_themes);
  const _defaultTheme = themes[0];
  let _currentTheme;
  await _registry.loadLanguages(_languages);
  let COLOR_REPLACEMENTS = {
    "#000001": "var(--shiki-color-text)",
    "#000002": "var(--shiki-color-background)",
    "#000004": "var(--shiki-token-constant)",
    "#000005": "var(--shiki-token-string)",
    "#000006": "var(--shiki-token-comment)",
    "#000007": "var(--shiki-token-keyword)",
    "#000008": "var(--shiki-token-parameter)",
    "#000009": "var(--shiki-token-function)",
    "#000010": "var(--shiki-token-string-expression)",
    "#000011": "var(--shiki-token-punctuation)",
    "#000012": "var(--shiki-token-link)"
  };
  function setColorReplacements(map2) {
    COLOR_REPLACEMENTS = map2;
  }
  function fixCssVariablesTheme(theme, colorMap) {
    theme.bg = COLOR_REPLACEMENTS[theme.bg] || theme.bg;
    theme.fg = COLOR_REPLACEMENTS[theme.fg] || theme.fg;
    colorMap.forEach((val, i2) => {
      colorMap[i2] = COLOR_REPLACEMENTS[val] || val;
    });
  }
  function getTheme(theme) {
    const _theme = theme ? _registry.getTheme(theme) : _defaultTheme;
    if (!_theme) {
      throw Error(`No theme registration for ${theme}`);
    }
    if (!_currentTheme || _currentTheme.name !== _theme.name) {
      _registry.setTheme(_theme);
      _currentTheme = _theme;
    }
    const _colorMap = _registry.getColorMap();
    if (_theme.type === "css") {
      fixCssVariablesTheme(_theme, _colorMap);
    }
    return { _theme, _colorMap };
  }
  function getGrammar(lang) {
    const _grammar = _registry.getGrammar(lang);
    if (!_grammar) {
      throw Error(`No language registration for ${lang}`);
    }
    return { _grammar };
  }
  function codeToThemedTokens(code, lang = "text", theme, options2 = { includeExplanation: true }) {
    if (isPlaintext(lang)) {
      const lines = code.split(/\r\n|\r|\n/);
      return [...lines.map((line) => [{ content: line }])];
    }
    const { _grammar } = getGrammar(lang);
    const { _theme, _colorMap } = getTheme(theme);
    return tokenizeWithTheme(_theme, _colorMap, code, _grammar, options2);
  }
  function codeToHtml(code, arg1 = "text", arg2) {
    let options2;
    if (typeof arg1 === "object") {
      options2 = arg1;
    } else {
      options2 = {
        lang: arg1,
        theme: arg2
      };
    }
    const tokens = codeToThemedTokens(code, options2.lang, options2.theme, {
      includeExplanation: false
    });
    const { _theme } = getTheme(options2.theme);
    return renderToHtml(tokens, {
      fg: _theme.fg,
      bg: _theme.bg,
      lineOptions: options2 == null ? void 0 : options2.lineOptions,
      themeName: _theme.name
    });
  }
  async function loadTheme(theme) {
    await _registry.loadTheme(theme);
  }
  async function loadLanguage(lang) {
    const _lang = resolveLang(lang);
    _resolver.addLanguage(_lang);
    await _registry.loadLanguage(_lang);
  }
  function getLoadedThemes() {
    return _registry.getLoadedThemes();
  }
  function getLoadedLanguages() {
    return _registry.getLoadedLanguages();
  }
  function getBackgroundColor(theme) {
    const { _theme } = getTheme(theme);
    return _theme.bg;
  }
  function getForegroundColor(theme) {
    const { _theme } = getTheme(theme);
    return _theme.fg;
  }
  return {
    codeToThemedTokens,
    codeToHtml,
    getTheme: (theme) => {
      return getTheme(theme)._theme;
    },
    loadTheme,
    loadLanguage,
    getBackgroundColor,
    getForegroundColor,
    getLoadedThemes,
    getLoadedLanguages,
    setColorReplacements
  };
}
function isPlaintext(lang) {
  return !lang || ["plaintext", "txt", "text"].includes(lang);
}
const version = "0.2.0";
setCDN(`https://cdn.jsdelivr.net/npm/shiki-es@${version}/dist/assets/`);
var flexsearch_bundle = { exports: {} };
(function(module) {
  (function _f(self) {
    try {
      if (module)
        self = module;
    } catch (e2) {
    }
    self._factory = _f;
    var t;
    function u(a2) {
      return "undefined" !== typeof a2 ? a2 : true;
    }
    function aa(a2) {
      const b2 = Array(a2);
      for (let c2 = 0; c2 < a2; c2++)
        b2[c2] = v();
      return b2;
    }
    function v() {
      return /* @__PURE__ */ Object.create(null);
    }
    function ba(a2, b2) {
      return b2.length - a2.length;
    }
    function x(a2) {
      return "string" === typeof a2;
    }
    function C(a2) {
      return "object" === typeof a2;
    }
    function D(a2) {
      return "function" === typeof a2;
    }
    function ca(a2, b2) {
      var c2 = da;
      if (a2 && (b2 && (a2 = E(a2, b2)), this.H && (a2 = E(a2, this.H)), this.J && 1 < a2.length && (a2 = E(a2, this.J)), c2 || "" === c2)) {
        a2 = a2.split(c2);
        if (this.filter) {
          b2 = this.filter;
          c2 = a2.length;
          const d2 = [];
          for (let e2 = 0, f2 = 0; e2 < c2; e2++) {
            const g2 = a2[e2];
            g2 && !b2[g2] && (d2[f2++] = g2);
          }
          a2 = d2;
        }
        return a2;
      }
      return a2;
    }
    const da = /[\p{Z}\p{S}\p{P}\p{C}]+/u, ea = /[\u0300-\u036f]/g;
    function fa(a2, b2) {
      const c2 = Object.keys(a2), d2 = c2.length, e2 = [];
      let f2 = "", g2 = 0;
      for (let h2 = 0, k2, m2; h2 < d2; h2++)
        k2 = c2[h2], (m2 = a2[k2]) ? (e2[g2++] = F(b2 ? "(?!\\b)" + k2 + "(\\b|_)" : k2), e2[g2++] = m2) : f2 += (f2 ? "|" : "") + k2;
      f2 && (e2[g2++] = F(b2 ? "(?!\\b)(" + f2 + ")(\\b|_)" : "(" + f2 + ")"), e2[g2] = "");
      return e2;
    }
    function E(a2, b2) {
      for (let c2 = 0, d2 = b2.length; c2 < d2 && (a2 = a2.replace(b2[c2], b2[c2 + 1]), a2); c2 += 2)
        ;
      return a2;
    }
    function F(a2) {
      return new RegExp(a2, "g");
    }
    function ha(a2) {
      let b2 = "", c2 = "";
      for (let d2 = 0, e2 = a2.length, f2; d2 < e2; d2++)
        (f2 = a2[d2]) !== c2 && (b2 += c2 = f2);
      return b2;
    }
    var ja = { encode: ia, F: false, G: "" };
    function ia(a2) {
      return ca.call(this, ("" + a2).toLowerCase(), false);
    }
    const ka = {}, G = {};
    function la(a2) {
      I(a2, "add");
      I(a2, "append");
      I(a2, "search");
      I(a2, "update");
      I(a2, "remove");
    }
    function I(a2, b2) {
      a2[b2 + "Async"] = function() {
        const c2 = this, d2 = arguments;
        var e2 = d2[d2.length - 1];
        let f2;
        D(e2) && (f2 = e2, delete d2[d2.length - 1]);
        e2 = new Promise(function(g2) {
          setTimeout(function() {
            c2.async = true;
            const h2 = c2[b2].apply(c2, d2);
            c2.async = false;
            g2(h2);
          });
        });
        return f2 ? (e2.then(f2), this) : e2;
      };
    }
    function ma(a2, b2, c2, d2) {
      const e2 = a2.length;
      let f2 = [], g2, h2, k2 = 0;
      d2 && (d2 = []);
      for (let m2 = e2 - 1; 0 <= m2; m2--) {
        const n2 = a2[m2], w = n2.length, q2 = v();
        let r2 = !g2;
        for (let l2 = 0; l2 < w; l2++) {
          const p2 = n2[l2], z2 = p2.length;
          if (z2)
            for (let B = 0, A2, y; B < z2; B++)
              if (y = p2[B], g2) {
                if (g2[y]) {
                  if (!m2) {
                    if (c2)
                      c2--;
                    else if (f2[k2++] = y, k2 === b2)
                      return f2;
                  }
                  if (m2 || d2)
                    q2[y] = 1;
                  r2 = true;
                }
                if (d2 && (h2[y] = (A2 = h2[y]) ? ++A2 : A2 = 1, A2 < e2)) {
                  const H = d2[A2 - 2] || (d2[A2 - 2] = []);
                  H[H.length] = y;
                }
              } else
                q2[y] = 1;
        }
        if (d2)
          g2 || (h2 = q2);
        else if (!r2)
          return [];
        g2 = q2;
      }
      if (d2)
        for (let m2 = d2.length - 1, n2, w; 0 <= m2; m2--) {
          n2 = d2[m2];
          w = n2.length;
          for (let q2 = 0, r2; q2 < w; q2++)
            if (r2 = n2[q2], !g2[r2]) {
              if (c2)
                c2--;
              else if (f2[k2++] = r2, k2 === b2)
                return f2;
              g2[r2] = 1;
            }
        }
      return f2;
    }
    function na(a2, b2) {
      const c2 = v(), d2 = v(), e2 = [];
      for (let f2 = 0; f2 < a2.length; f2++)
        c2[a2[f2]] = 1;
      for (let f2 = 0, g2; f2 < b2.length; f2++) {
        g2 = b2[f2];
        for (let h2 = 0, k2; h2 < g2.length; h2++)
          k2 = g2[h2], c2[k2] && !d2[k2] && (d2[k2] = 1, e2[e2.length] = k2);
      }
      return e2;
    }
    function J(a2) {
      this.l = true !== a2 && a2;
      this.cache = v();
      this.h = [];
    }
    function oa(a2, b2, c2) {
      C(a2) && (a2 = a2.query);
      let d2 = this.cache.get(a2);
      d2 || (d2 = this.search(a2, b2, c2), this.cache.set(a2, d2));
      return d2;
    }
    J.prototype.set = function(a2, b2) {
      if (!this.cache[a2]) {
        var c2 = this.h.length;
        c2 === this.l ? delete this.cache[this.h[c2 - 1]] : c2++;
        for (--c2; 0 < c2; c2--)
          this.h[c2] = this.h[c2 - 1];
        this.h[0] = a2;
      }
      this.cache[a2] = b2;
    };
    J.prototype.get = function(a2) {
      const b2 = this.cache[a2];
      if (this.l && b2 && (a2 = this.h.indexOf(a2))) {
        const c2 = this.h[a2 - 1];
        this.h[a2 - 1] = this.h[a2];
        this.h[a2] = c2;
      }
      return b2;
    };
    const qa = { memory: { charset: "latin:extra", D: 3, B: 4, m: false }, performance: { D: 3, B: 3, s: false, context: { depth: 2, D: 1 } }, match: { charset: "latin:extra", G: "reverse" }, score: { charset: "latin:advanced", D: 20, B: 3, context: { depth: 3, D: 9 } }, "default": {} };
    function ra(a2, b2, c2, d2, e2, f2) {
      setTimeout(function() {
        const g2 = a2(c2, JSON.stringify(f2));
        g2 && g2.then ? g2.then(function() {
          b2.export(a2, b2, c2, d2, e2 + 1);
        }) : b2.export(a2, b2, c2, d2, e2 + 1);
      });
    }
    function K(a2, b2) {
      if (!(this instanceof K))
        return new K(a2);
      var c2;
      if (a2) {
        x(a2) ? a2 = qa[a2] : (c2 = a2.preset) && (a2 = Object.assign({}, c2[c2], a2));
        c2 = a2.charset;
        var d2 = a2.lang;
        x(c2) && (-1 === c2.indexOf(":") && (c2 += ":default"), c2 = G[c2]);
        x(d2) && (d2 = ka[d2]);
      } else
        a2 = {};
      let e2, f2, g2 = a2.context || {};
      this.encode = a2.encode || c2 && c2.encode || ia;
      this.register = b2 || v();
      this.D = e2 = a2.resolution || 9;
      this.G = b2 = c2 && c2.G || a2.tokenize || "strict";
      this.depth = "strict" === b2 && g2.depth;
      this.l = u(g2.bidirectional);
      this.s = f2 = u(a2.optimize);
      this.m = u(a2.fastupdate);
      this.B = a2.minlength || 1;
      this.C = a2.boost;
      this.map = f2 ? aa(e2) : v();
      this.A = e2 = g2.resolution || 1;
      this.h = f2 ? aa(e2) : v();
      this.F = c2 && c2.F || a2.rtl;
      this.H = (b2 = a2.matcher || d2 && d2.H) && fa(b2, false);
      this.J = (b2 = a2.stemmer || d2 && d2.J) && fa(b2, true);
      if (c2 = b2 = a2.filter || d2 && d2.filter) {
        c2 = b2;
        d2 = v();
        for (let h2 = 0, k2 = c2.length; h2 < k2; h2++)
          d2[c2[h2]] = 1;
        c2 = d2;
      }
      this.filter = c2;
      this.cache = (b2 = a2.cache) && new J(b2);
    }
    t = K.prototype;
    t.append = function(a2, b2) {
      return this.add(a2, b2, true);
    };
    t.add = function(a2, b2, c2, d2) {
      if (b2 && (a2 || 0 === a2)) {
        if (!d2 && !c2 && this.register[a2])
          return this.update(a2, b2);
        b2 = this.encode(b2);
        if (d2 = b2.length) {
          const m2 = v(), n2 = v(), w = this.depth, q2 = this.D;
          for (let r2 = 0; r2 < d2; r2++) {
            let l2 = b2[this.F ? d2 - 1 - r2 : r2];
            var e2 = l2.length;
            if (l2 && e2 >= this.B && (w || !n2[l2])) {
              var f2 = L(q2, d2, r2), g2 = "";
              switch (this.G) {
                case "full":
                  if (3 < e2) {
                    for (f2 = 0; f2 < e2; f2++)
                      for (var h2 = e2; h2 > f2; h2--)
                        if (h2 - f2 >= this.B) {
                          var k2 = L(q2, d2, r2, e2, f2);
                          g2 = l2.substring(f2, h2);
                          M(this, n2, g2, k2, a2, c2);
                        }
                    break;
                  }
                case "reverse":
                  if (2 < e2) {
                    for (h2 = e2 - 1; 0 < h2; h2--)
                      g2 = l2[h2] + g2, g2.length >= this.B && M(
                        this,
                        n2,
                        g2,
                        L(q2, d2, r2, e2, h2),
                        a2,
                        c2
                      );
                    g2 = "";
                  }
                case "forward":
                  if (1 < e2) {
                    for (h2 = 0; h2 < e2; h2++)
                      g2 += l2[h2], g2.length >= this.B && M(this, n2, g2, f2, a2, c2);
                    break;
                  }
                default:
                  if (this.C && (f2 = Math.min(f2 / this.C(b2, l2, r2) | 0, q2 - 1)), M(this, n2, l2, f2, a2, c2), w && 1 < d2 && r2 < d2 - 1) {
                    for (e2 = v(), g2 = this.A, f2 = l2, h2 = Math.min(w + 1, d2 - r2), e2[f2] = 1, k2 = 1; k2 < h2; k2++)
                      if ((l2 = b2[this.F ? d2 - 1 - r2 - k2 : r2 + k2]) && l2.length >= this.B && !e2[l2]) {
                        e2[l2] = 1;
                        const p2 = this.l && l2 > f2;
                        M(this, m2, p2 ? f2 : l2, L(g2 + (d2 / 2 > g2 ? 0 : 1), d2, r2, h2 - 1, k2 - 1), a2, c2, p2 ? l2 : f2);
                      }
                  }
              }
            }
          }
          this.m || (this.register[a2] = 1);
        }
      }
      return this;
    };
    function L(a2, b2, c2, d2, e2) {
      return c2 && 1 < a2 ? b2 + (d2 || 0) <= a2 ? c2 + (e2 || 0) : (a2 - 1) / (b2 + (d2 || 0)) * (c2 + (e2 || 0)) + 1 | 0 : 0;
    }
    function M(a2, b2, c2, d2, e2, f2, g2) {
      let h2 = g2 ? a2.h : a2.map;
      if (!b2[c2] || g2 && !b2[c2][g2])
        a2.s && (h2 = h2[d2]), g2 ? (b2 = b2[c2] || (b2[c2] = v()), b2[g2] = 1, h2 = h2[g2] || (h2[g2] = v())) : b2[c2] = 1, h2 = h2[c2] || (h2[c2] = []), a2.s || (h2 = h2[d2] || (h2[d2] = [])), f2 && -1 !== h2.indexOf(e2) || (h2[h2.length] = e2, a2.m && (a2 = a2.register[e2] || (a2.register[e2] = []), a2[a2.length] = h2));
    }
    t.search = function(a2, b2, c2) {
      c2 || (!b2 && C(a2) ? (c2 = a2, a2 = c2.query) : C(b2) && (c2 = b2));
      let d2 = [], e2;
      let f2, g2 = 0;
      if (c2) {
        b2 = c2.limit;
        g2 = c2.offset || 0;
        var h2 = c2.context;
        f2 = c2.suggest;
      }
      if (a2 && (a2 = this.encode(a2), e2 = a2.length, 1 < e2)) {
        c2 = v();
        var k2 = [];
        for (let n2 = 0, w = 0, q2; n2 < e2; n2++)
          if ((q2 = a2[n2]) && q2.length >= this.B && !c2[q2])
            if (this.s || f2 || this.map[q2])
              k2[w++] = q2, c2[q2] = 1;
            else
              return d2;
        a2 = k2;
        e2 = a2.length;
      }
      if (!e2)
        return d2;
      b2 || (b2 = 100);
      h2 = this.depth && 1 < e2 && false !== h2;
      c2 = 0;
      let m2;
      h2 ? (m2 = a2[0], c2 = 1) : 1 < e2 && a2.sort(ba);
      for (let n2, w; c2 < e2; c2++) {
        w = a2[c2];
        h2 ? (n2 = sa(this, d2, f2, b2, g2, 2 === e2, w, m2), f2 && false === n2 && d2.length || (m2 = w)) : n2 = sa(this, d2, f2, b2, g2, 1 === e2, w);
        if (n2)
          return n2;
        if (f2 && c2 === e2 - 1) {
          k2 = d2.length;
          if (!k2) {
            if (h2) {
              h2 = 0;
              c2 = -1;
              continue;
            }
            return d2;
          }
          if (1 === k2)
            return ta(d2[0], b2, g2);
        }
      }
      return ma(d2, b2, g2, f2);
    };
    function sa(a2, b2, c2, d2, e2, f2, g2, h2) {
      let k2 = [], m2 = h2 ? a2.h : a2.map;
      a2.s || (m2 = ua(m2, g2, h2, a2.l));
      if (m2) {
        let n2 = 0;
        const w = Math.min(m2.length, h2 ? a2.A : a2.D);
        for (let q2 = 0, r2 = 0, l2, p2; q2 < w; q2++)
          if (l2 = m2[q2]) {
            if (a2.s && (l2 = ua(l2, g2, h2, a2.l)), e2 && l2 && f2 && (p2 = l2.length, p2 <= e2 ? (e2 -= p2, l2 = null) : (l2 = l2.slice(e2), e2 = 0)), l2 && (k2[n2++] = l2, f2 && (r2 += l2.length, r2 >= d2)))
              break;
          }
        if (n2) {
          if (f2)
            return ta(k2, d2, 0);
          b2[b2.length] = k2;
          return;
        }
      }
      return !c2 && k2;
    }
    function ta(a2, b2, c2) {
      a2 = 1 === a2.length ? a2[0] : [].concat.apply([], a2);
      return c2 || a2.length > b2 ? a2.slice(c2, c2 + b2) : a2;
    }
    function ua(a2, b2, c2, d2) {
      c2 ? (d2 = d2 && b2 > c2, a2 = (a2 = a2[d2 ? b2 : c2]) && a2[d2 ? c2 : b2]) : a2 = a2[b2];
      return a2;
    }
    t.contain = function(a2) {
      return !!this.register[a2];
    };
    t.update = function(a2, b2) {
      return this.remove(a2).add(a2, b2);
    };
    t.remove = function(a2, b2) {
      const c2 = this.register[a2];
      if (c2) {
        if (this.m)
          for (let d2 = 0, e2; d2 < c2.length; d2++)
            e2 = c2[d2], e2.splice(e2.indexOf(a2), 1);
        else
          N(this.map, a2, this.D, this.s), this.depth && N(this.h, a2, this.A, this.s);
        b2 || delete this.register[a2];
        if (this.cache) {
          b2 = this.cache;
          for (let d2 = 0, e2, f2; d2 < b2.h.length; d2++)
            f2 = b2.h[d2], e2 = b2.cache[f2], -1 !== e2.indexOf(a2) && (b2.h.splice(d2--, 1), delete b2.cache[f2]);
        }
      }
      return this;
    };
    function N(a2, b2, c2, d2, e2) {
      let f2 = 0;
      if (a2.constructor === Array)
        if (e2)
          b2 = a2.indexOf(b2), -1 !== b2 ? 1 < a2.length && (a2.splice(b2, 1), f2++) : f2++;
        else {
          e2 = Math.min(a2.length, c2);
          for (let g2 = 0, h2; g2 < e2; g2++)
            if (h2 = a2[g2])
              f2 = N(h2, b2, c2, d2, e2), d2 || f2 || delete a2[g2];
        }
      else
        for (let g2 in a2)
          (f2 = N(a2[g2], b2, c2, d2, e2)) || delete a2[g2];
      return f2;
    }
    t.searchCache = oa;
    t.export = function(a2, b2, c2, d2, e2) {
      let f2, g2;
      switch (e2 || (e2 = 0)) {
        case 0:
          f2 = "reg";
          if (this.m) {
            g2 = v();
            for (let h2 in this.register)
              g2[h2] = 1;
          } else
            g2 = this.register;
          break;
        case 1:
          f2 = "cfg";
          g2 = { doc: 0, opt: this.s ? 1 : 0 };
          break;
        case 2:
          f2 = "map";
          g2 = this.map;
          break;
        case 3:
          f2 = "ctx";
          g2 = this.h;
          break;
        default:
          return;
      }
      ra(a2, b2 || this, c2 ? c2 + "." + f2 : f2, d2, e2, g2);
      return true;
    };
    t.import = function(a2, b2) {
      if (b2)
        switch (x(b2) && (b2 = JSON.parse(b2)), a2) {
          case "cfg":
            this.s = !!b2.opt;
            break;
          case "reg":
            this.m = false;
            this.register = b2;
            break;
          case "map":
            this.map = b2;
            break;
          case "ctx":
            this.h = b2;
        }
    };
    la(K.prototype);
    function va(a2) {
      a2 = a2.data;
      var b2 = self._index;
      const c2 = a2.args;
      var d2 = a2.task;
      switch (d2) {
        case "init":
          d2 = a2.options || {};
          a2 = a2.factory;
          b2 = d2.encode;
          d2.cache = false;
          b2 && 0 === b2.indexOf("function") && (d2.encode = Function("return " + b2)());
          a2 ? (Function("return " + a2)()(self), self._index = new self.FlexSearch.Index(d2), delete self.FlexSearch) : self._index = new K(d2);
          break;
        default:
          a2 = a2.id, b2 = b2[d2].apply(b2, c2), postMessage("search" === d2 ? { id: a2, msg: b2 } : { id: a2 });
      }
    }
    let wa = 0;
    function O(a2) {
      if (!(this instanceof O))
        return new O(a2);
      var b2;
      a2 ? D(b2 = a2.encode) && (a2.encode = b2.toString()) : a2 = {};
      (b2 = (self || window)._factory) && (b2 = b2.toString());
      const c2 = self.exports, d2 = this;
      this.o = xa(b2, c2, a2.worker);
      this.h = v();
      if (this.o) {
        if (c2)
          this.o.on("message", function(e2) {
            d2.h[e2.id](e2.msg);
            delete d2.h[e2.id];
          });
        else
          this.o.onmessage = function(e2) {
            e2 = e2.data;
            d2.h[e2.id](e2.msg);
            delete d2.h[e2.id];
          };
        this.o.postMessage({ task: "init", factory: b2, options: a2 });
      }
    }
    P("add");
    P("append");
    P("search");
    P("update");
    P("remove");
    function P(a2) {
      O.prototype[a2] = O.prototype[a2 + "Async"] = function() {
        const b2 = this, c2 = [].slice.call(arguments);
        var d2 = c2[c2.length - 1];
        let e2;
        D(d2) && (e2 = d2, c2.splice(c2.length - 1, 1));
        d2 = new Promise(function(f2) {
          setTimeout(function() {
            b2.h[++wa] = f2;
            b2.o.postMessage({ task: a2, id: wa, args: c2 });
          });
        });
        return e2 ? (d2.then(e2), this) : d2;
      };
    }
    function xa(a, b, c) {
      let d;
      try {
        d = b ? eval('new (require("worker_threads")["Worker"])("../dist/node/node.js")') : a ? new Worker(URL.createObjectURL(new Blob(["onmessage=" + va.toString()], { type: "text/javascript" }))) : new Worker(x(c) ? c : "worker/worker.js", { type: "module" });
      } catch (e2) {
      }
      return d;
    }
    function Q(a2) {
      if (!(this instanceof Q))
        return new Q(a2);
      var b2 = a2.document || a2.doc || a2, c2;
      this.K = [];
      this.h = [];
      this.A = [];
      this.register = v();
      this.key = (c2 = b2.key || b2.id) && S(c2, this.A) || "id";
      this.m = u(a2.fastupdate);
      this.C = (c2 = b2.store) && true !== c2 && [];
      this.store = c2 && v();
      this.I = (c2 = b2.tag) && S(c2, this.A);
      this.l = c2 && v();
      this.cache = (c2 = a2.cache) && new J(c2);
      a2.cache = false;
      this.o = a2.worker;
      this.async = false;
      c2 = v();
      let d2 = b2.index || b2.field || b2;
      x(d2) && (d2 = [d2]);
      for (let e2 = 0, f2, g2; e2 < d2.length; e2++)
        f2 = d2[e2], x(f2) || (g2 = f2, f2 = f2.field), g2 = C(g2) ? Object.assign({}, a2, g2) : a2, this.o && (c2[f2] = new O(g2), c2[f2].o || (this.o = false)), this.o || (c2[f2] = new K(g2, this.register)), this.K[e2] = S(f2, this.A), this.h[e2] = f2;
      if (this.C)
        for (a2 = b2.store, x(a2) && (a2 = [a2]), b2 = 0; b2 < a2.length; b2++)
          this.C[b2] = S(a2[b2], this.A);
      this.index = c2;
    }
    function S(a2, b2) {
      const c2 = a2.split(":");
      let d2 = 0;
      for (let e2 = 0; e2 < c2.length; e2++)
        a2 = c2[e2], 0 <= a2.indexOf("[]") && (a2 = a2.substring(0, a2.length - 2)) && (b2[d2] = true), a2 && (c2[d2++] = a2);
      d2 < c2.length && (c2.length = d2);
      return 1 < d2 ? c2 : c2[0];
    }
    function T(a2, b2) {
      if (x(b2))
        a2 = a2[b2];
      else
        for (let c2 = 0; a2 && c2 < b2.length; c2++)
          a2 = a2[b2[c2]];
      return a2;
    }
    function U(a2, b2, c2, d2, e2) {
      a2 = a2[e2];
      if (d2 === c2.length - 1)
        b2[e2] = a2;
      else if (a2)
        if (a2.constructor === Array)
          for (b2 = b2[e2] = Array(a2.length), e2 = 0; e2 < a2.length; e2++)
            U(a2, b2, c2, d2, e2);
        else
          b2 = b2[e2] || (b2[e2] = v()), e2 = c2[++d2], U(a2, b2, c2, d2, e2);
    }
    function V(a2, b2, c2, d2, e2, f2, g2, h2) {
      if (a2 = a2[g2])
        if (d2 === b2.length - 1) {
          if (a2.constructor === Array) {
            if (c2[d2]) {
              for (b2 = 0; b2 < a2.length; b2++)
                e2.add(f2, a2[b2], true, true);
              return;
            }
            a2 = a2.join(" ");
          }
          e2.add(f2, a2, h2, true);
        } else if (a2.constructor === Array)
          for (g2 = 0; g2 < a2.length; g2++)
            V(a2, b2, c2, d2, e2, f2, g2, h2);
        else
          g2 = b2[++d2], V(a2, b2, c2, d2, e2, f2, g2, h2);
    }
    t = Q.prototype;
    t.add = function(a2, b2, c2) {
      C(a2) && (b2 = a2, a2 = T(b2, this.key));
      if (b2 && (a2 || 0 === a2)) {
        if (!c2 && this.register[a2])
          return this.update(a2, b2);
        for (let d2 = 0, e2, f2; d2 < this.h.length; d2++)
          f2 = this.h[d2], e2 = this.K[d2], x(e2) && (e2 = [e2]), V(b2, e2, this.A, 0, this.index[f2], a2, e2[0], c2);
        if (this.I) {
          let d2 = T(b2, this.I), e2 = v();
          x(d2) && (d2 = [d2]);
          for (let f2 = 0, g2, h2; f2 < d2.length; f2++)
            if (g2 = d2[f2], !e2[g2] && (e2[g2] = 1, h2 = this.l[g2] || (this.l[g2] = []), !c2 || -1 === h2.indexOf(a2))) {
              if (h2[h2.length] = a2, this.m) {
                const k2 = this.register[a2] || (this.register[a2] = []);
                k2[k2.length] = h2;
              }
            }
        }
        if (this.store && (!c2 || !this.store[a2])) {
          let d2;
          if (this.C) {
            d2 = v();
            for (let e2 = 0, f2; e2 < this.C.length; e2++)
              f2 = this.C[e2], x(f2) ? d2[f2] = b2[f2] : U(b2, d2, f2, 0, f2[0]);
          }
          this.store[a2] = d2 || b2;
        }
      }
      return this;
    };
    t.append = function(a2, b2) {
      return this.add(a2, b2, true);
    };
    t.update = function(a2, b2) {
      return this.remove(a2).add(a2, b2);
    };
    t.remove = function(a2) {
      C(a2) && (a2 = T(a2, this.key));
      if (this.register[a2]) {
        for (var b2 = 0; b2 < this.h.length && (this.index[this.h[b2]].remove(a2, !this.o), !this.m); b2++)
          ;
        if (this.I && !this.m)
          for (let c2 in this.l) {
            b2 = this.l[c2];
            const d2 = b2.indexOf(a2);
            -1 !== d2 && (1 < b2.length ? b2.splice(d2, 1) : delete this.l[c2]);
          }
        this.store && delete this.store[a2];
        delete this.register[a2];
      }
      return this;
    };
    t.search = function(a2, b2, c2, d2) {
      c2 || (!b2 && C(a2) ? (c2 = a2, a2 = c2.query) : C(b2) && (c2 = b2, b2 = 0));
      let e2 = [], f2 = [], g2, h2, k2, m2, n2, w, q2 = 0;
      if (c2)
        if (c2.constructor === Array)
          k2 = c2, c2 = null;
        else {
          k2 = (g2 = c2.pluck) || c2.index || c2.field;
          m2 = c2.tag;
          h2 = this.store && c2.enrich;
          n2 = "and" === c2.bool;
          b2 = c2.limit || 100;
          w = c2.offset || 0;
          if (m2 && (x(m2) && (m2 = [m2]), !a2)) {
            for (let l2 = 0, p2; l2 < m2.length; l2++)
              if (p2 = ya.call(this, m2[l2], b2, w, h2))
                e2[e2.length] = p2, q2++;
            return q2 ? e2 : [];
          }
          x(k2) && (k2 = [k2]);
        }
      k2 || (k2 = this.h);
      n2 = n2 && (1 < k2.length || m2 && 1 < m2.length);
      const r2 = !d2 && (this.o || this.async) && [];
      for (let l2 = 0, p2, z2, B; l2 < k2.length; l2++) {
        let A2;
        z2 = k2[l2];
        x(z2) || (A2 = z2, z2 = z2.field);
        if (r2)
          r2[l2] = this.index[z2].searchAsync(a2, b2, A2 || c2);
        else {
          d2 ? p2 = d2[l2] : p2 = this.index[z2].search(a2, b2, A2 || c2);
          B = p2 && p2.length;
          if (m2 && B) {
            const y = [];
            let H = 0;
            n2 && (y[0] = [p2]);
            for (let X2 = 0, pa2, R2; X2 < m2.length; X2++)
              if (pa2 = m2[X2], B = (R2 = this.l[pa2]) && R2.length)
                H++, y[y.length] = n2 ? [R2] : R2;
            H && (p2 = n2 ? ma(y, b2 || 100, w || 0) : na(p2, y), B = p2.length);
          }
          if (B)
            f2[q2] = z2, e2[q2++] = p2;
          else if (n2)
            return [];
        }
      }
      if (r2) {
        const l2 = this;
        return new Promise(function(p2) {
          Promise.all(r2).then(function(z2) {
            p2(l2.search(a2, b2, c2, z2));
          });
        });
      }
      if (!q2)
        return [];
      if (g2 && (!h2 || !this.store))
        return e2[0];
      for (let l2 = 0, p2; l2 < f2.length; l2++) {
        p2 = e2[l2];
        p2.length && h2 && (p2 = za.call(this, p2));
        if (g2)
          return p2;
        e2[l2] = { field: f2[l2], result: p2 };
      }
      return e2;
    };
    function ya(a2, b2, c2, d2) {
      let e2 = this.l[a2], f2 = e2 && e2.length - c2;
      if (f2 && 0 < f2) {
        if (f2 > b2 || c2)
          e2 = e2.slice(c2, c2 + b2);
        d2 && (e2 = za.call(this, e2));
        return { tag: a2, result: e2 };
      }
    }
    function za(a2) {
      const b2 = Array(a2.length);
      for (let c2 = 0, d2; c2 < a2.length; c2++)
        d2 = a2[c2], b2[c2] = { id: d2, doc: this.store[d2] };
      return b2;
    }
    t.contain = function(a2) {
      return !!this.register[a2];
    };
    t.get = function(a2) {
      return this.store[a2];
    };
    t.set = function(a2, b2) {
      this.store[a2] = b2;
      return this;
    };
    t.searchCache = oa;
    t.export = function(a2, b2, c2, d2, e2) {
      e2 || (e2 = 0);
      d2 || (d2 = 0);
      if (d2 < this.h.length) {
        const f2 = this.h[d2], g2 = this.index[f2];
        b2 = this;
        setTimeout(function() {
          g2.export(a2, b2, e2 ? f2.replace(":", "-") : "", d2, e2++) || (d2++, e2 = 1, b2.export(a2, b2, f2, d2, e2));
        });
      } else {
        let f2;
        switch (e2) {
          case 1:
            c2 = "tag";
            f2 = this.l;
            break;
          case 2:
            c2 = "store";
            f2 = this.store;
            break;
          default:
            return;
        }
        ra(a2, this, c2, d2, e2, f2);
      }
    };
    t.import = function(a2, b2) {
      if (b2)
        switch (x(b2) && (b2 = JSON.parse(b2)), a2) {
          case "tag":
            this.l = b2;
            break;
          case "reg":
            this.m = false;
            this.register = b2;
            for (let d2 = 0, e2; d2 < this.h.length; d2++)
              e2 = this.index[this.h[d2]], e2.register = b2, e2.m = false;
            break;
          case "store":
            this.store = b2;
            break;
          default:
            a2 = a2.split(".");
            const c2 = a2[0];
            a2 = a2[1];
            c2 && a2 && this.index[c2].import(a2, b2);
        }
    };
    la(Q.prototype);
    var Ba = { encode: Aa, F: false, G: "" };
    const Ca = [F("[\xE0\xE1\xE2\xE3\xE4\xE5]"), "a", F("[\xE8\xE9\xEA\xEB]"), "e", F("[\xEC\xED\xEE\xEF]"), "i", F("[\xF2\xF3\xF4\xF5\xF6\u0151]"), "o", F("[\xF9\xFA\xFB\xFC\u0171]"), "u", F("[\xFD\u0177\xFF]"), "y", F("\xF1"), "n", F("[\xE7c]"), "k", F("\xDF"), "s", F(" & "), " and "];
    function Aa(a2) {
      var b2 = a2;
      b2.normalize && (b2 = b2.normalize("NFD").replace(ea, ""));
      return ca.call(this, b2.toLowerCase(), !a2.normalize && Ca);
    }
    var Ea = { encode: Da, F: false, G: "strict" };
    const Fa = /[^a-z0-9]+/, Ga = { b: "p", v: "f", w: "f", z: "s", x: "s", "\xDF": "s", d: "t", n: "m", c: "k", g: "k", j: "k", q: "k", i: "e", y: "e", u: "o" };
    function Da(a2) {
      a2 = Aa.call(this, a2).join(" ");
      const b2 = [];
      if (a2) {
        const c2 = a2.split(Fa), d2 = c2.length;
        for (let e2 = 0, f2, g2 = 0; e2 < d2; e2++)
          if ((a2 = c2[e2]) && (!this.filter || !this.filter[a2])) {
            f2 = a2[0];
            let h2 = Ga[f2] || f2, k2 = h2;
            for (let m2 = 1; m2 < a2.length; m2++) {
              f2 = a2[m2];
              const n2 = Ga[f2] || f2;
              n2 && n2 !== k2 && (h2 += n2, k2 = n2);
            }
            b2[g2++] = h2;
          }
      }
      return b2;
    }
    var Ia = { encode: Ha, F: false, G: "" };
    const Ja = [F("ae"), "a", F("oe"), "o", F("sh"), "s", F("th"), "t", F("ph"), "f", F("pf"), "f", F("(?![aeo])h(?![aeo])"), "", F("(?!^[aeo])h(?!^[aeo])"), ""];
    function Ha(a2, b2) {
      a2 && (a2 = Da.call(this, a2).join(" "), 2 < a2.length && (a2 = E(a2, Ja)), b2 || (1 < a2.length && (a2 = ha(a2)), a2 && (a2 = a2.split(" "))));
      return a2;
    }
    var La = { encode: Ka, F: false, G: "" };
    const Ma = F("(?!\\b)[aeo]");
    function Ka(a2) {
      a2 && (a2 = Ha.call(this, a2, true), 1 < a2.length && (a2 = a2.replace(Ma, "")), 1 < a2.length && (a2 = ha(a2)), a2 && (a2 = a2.split(" ")));
      return a2;
    }
    G["latin:default"] = ja;
    G["latin:simple"] = Ba;
    G["latin:balance"] = Ea;
    G["latin:advanced"] = Ia;
    G["latin:extra"] = La;
    const W = self;
    let Y;
    const Z = { Index: K, Document: Q, Worker: O, registerCharset: function(a2, b2) {
      G[a2] = b2;
    }, registerLanguage: function(a2, b2) {
      ka[a2] = b2;
    } };
    (Y = W.define) && Y.amd ? Y([], function() {
      return Z;
    }) : W.exports ? W.exports = Z : W.FlexSearch = Z;
  })(commonjsGlobal$1);
})(flexsearch_bundle);
const MountStory = defineComponent$1({
  name: "MountStory",
  props: {
    story: {
      type: Object,
      required: true
    }
  },
  setup(props) {
    var _a2, _b, _c2, _d2;
    const options = props.story.file.component;
    let rawVariants = [];
    if (options.onMount) {
      rawVariants = [{
        id: "_default",
        title: "default",
        onMount: options.onMount,
        onMountControls: options.onMountControls
      }];
    } else {
      rawVariants = options.variants;
    }
    for (const index in props.story.variants) {
      const rawVariant = rawVariants[index];
      Object.assign(props.story.variants[index], {
        slots: () => ({ default: rawVariant.onMount, controls: rawVariant.onMountControls }),
        source: (_a2 = rawVariant.source) != null ? _a2 : options.source,
        responsiveDisabled: (_b = rawVariant.responsiveDisabled) != null ? _b : options.responsiveDisabled,
        autoPropsDisabled: (_c2 = rawVariant.autoPropsDisabled) != null ? _c2 : options.autoPropsDisabled,
        setupApp: (_d2 = rawVariant.setupApp) != null ? _d2 : options.setupApp,
        configReady: true
      });
    }
  },
  render() {
    return null;
  }
});
const main = "";
const histoire = "";
const histoireSetup = () => {
};
const d$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: histoireSetup
}, Symbol.toStringTag, { value: "Module" }));
const l = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null
}, Symbol.toStringTag, { value: "Module" }));
const RenderStory = defineComponent$1({
  name: "RenderStory",
  props: {
    variant: {
      type: Object,
      required: true
    },
    story: {
      type: Object,
      required: true
    },
    slotName: {
      type: String,
      default: "default"
    }
  },
  emits: {
    ready: () => true
  },
  setup(props, { emit: emit2 }) {
    const sandbox = ref$1();
    let mounting = false;
    let app;
    let appHooks;
    async function unmountVariant() {
      var _a2;
      if (app) {
        await ((_a2 = app.onUnmount) == null ? void 0 : _a2.call(app));
        if (appHooks) {
          for (const hook of appHooks.onUnmount) {
            await hook();
          }
        }
        app.el.parentNode.removeChild(app.el);
        app = null;
      }
    }
    async function mountVariant() {
      var _a2;
      if (mounting)
        return;
      mounting = true;
      await unmountVariant();
      app = {
        el: document.createElement("div")
      };
      if (false) {
        await (void 0)({
          app,
          story: props.story,
          variant: props.variant
        });
      }
      if (false) {
        await (void 0)({
          app,
          story: props.story,
          variant: props.variant
        });
      }
      if (typeof props.variant.setupApp === "function") {
        await props.variant.setupApp({
          app,
          story: props.story,
          variant: props.variant
        });
      }
      await ((_a2 = app.onMount) == null ? void 0 : _a2.call(app));
      appHooks = {
        onUpdate: [],
        onUnmount: []
      };
      const api = {
        el: app.el,
        state: props.variant.state,
        onUpdate: (cb) => {
          appHooks.onUpdate.push(cb);
        },
        onUnmount: (cb) => {
          appHooks.onUnmount.push(cb);
        }
      };
      const onMount = props.variant.slots()[props.slotName];
      await onMount(api);
      sandbox.value.appendChild(app.el);
      emit2("ready");
    }
    onMounted$1(async () => {
      if (props.variant.configReady) {
        await mountVariant();
      }
    });
    watch$1(() => props.variant, async (value) => {
      if (value.configReady && !mounting) {
        if (!app) {
          await mountVariant();
        }
      }
    }, {
      deep: true
    });
    watch$1(() => props.variant.state, async () => {
      if (appHooks) {
        for (const hook of appHooks.onUpdate) {
          await hook();
        }
      }
    }, {
      deep: true
    });
    onBeforeUnmount$1(() => {
      unmountVariant();
    });
    return {
      sandbox
    };
  },
  render() {
    return h$2("div", {
      ref: "sandbox"
    });
  }
});
function generateSourceCode() {
}
const client$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  generateSourceCode,
  MountStory,
  RenderStory
}, Symbol.toStringTag, { value: "Module" }));
const i$1 = (s) => s !== null && typeof s == "object";
function o$1(s, e2 = /* @__PURE__ */ new WeakMap()) {
  const t2 = isRef(s) ? unref(s) : s;
  if (typeof t2 == "symbol")
    return t2.toString();
  if (!i$1(t2))
    return t2;
  if (e2.has(t2))
    return e2.get(t2);
  if (Array.isArray(t2)) {
    const r2 = [];
    return e2.set(t2, r2), r2.push(...t2.map((n2) => o$1(n2, e2))), r2;
  } else {
    const r2 = {};
    return e2.set(t2, r2), h(t2, r2, e2), r2;
  }
}
const h = (s, e2, t2 = /* @__PURE__ */ new WeakMap()) => {
  Object.keys(s).forEach((r2) => {
    e2[r2] = o$1(s[r2], t2);
  });
};
function a(s, e2 = /* @__PURE__ */ new WeakMap()) {
  const t2 = isRef$1(s) ? unref$1(s) : s;
  if (typeof t2 == "symbol")
    return t2.toString();
  if (!i$1(t2))
    return t2;
  if (e2.has(t2))
    return e2.get(t2);
  if (Array.isArray(t2)) {
    const r2 = [];
    return e2.set(t2, r2), r2.push(...t2.map((n2) => a(n2, e2))), r2;
  } else {
    const r2 = {};
    return e2.set(t2, r2), d(t2, r2, e2), r2;
  }
}
const d = (s, e2, t2 = /* @__PURE__ */ new WeakMap()) => {
  Object.keys(s).forEach((r2) => {
    e2[r2] = o$1(s[r2], t2);
  });
};
function A$1(s, e2) {
  let t2 = false;
  const r2 = watch$1(() => s, (u2) => {
    u2 != null && (t2 ? t2 = false : (t2 = true, applyState(e2, a(u2))));
  }, {
    deep: true,
    immediate: true
  }), n2 = watch(() => e2, (u2) => {
    u2 != null && (t2 ? t2 = false : (t2 = true, applyState(s, o$1(u2))));
  }, {
    deep: true,
    immediate: true
  });
  return {
    stop() {
      r2(), n2();
    }
  };
}
const v$1 = defineComponent({
  name: "Variant",
  __histoireType: "variant",
  props: {
    initState: {
      type: Function,
      default: null
    },
    source: {
      type: String,
      default: null
    },
    responsiveDisabled: {
      type: Boolean,
      default: false
    },
    autoPropsDisabled: {
      type: Boolean,
      default: false
    },
    setupApp: {
      type: Function,
      default: null
    }
  },
  async setup(t2) {
    const e2 = useAttrs(), n2 = getCurrentInstance(), i2 = inject("implicitState");
    if (typeof t2.initState == "function") {
      const s = await t2.initState();
      applyState(e2.variant.state, o$1(s));
    }
    A$1(e2.variant.state, i2());
    function a2() {
      Object.assign(e2.variant, {
        slots: () => n2.proxy.$slots,
        source: t2.source,
        responsiveDisabled: t2.responsiveDisabled,
        autoPropsDisabled: t2.autoPropsDisabled,
        setupApp: t2.setupApp,
        configReady: true
      });
    }
    return a2(), {
      updateVariant: a2
    };
  },
  render() {
    return this.updateVariant(), null;
  }
});
const g$1 = defineComponent({
  name: "Story",
  __histoireType: "story",
  inheritAttrs: false,
  props: {
    initState: {
      type: Function,
      default: null
    }
  },
  setup() {
    const i2 = getCurrentInstance(), r2 = useAttrs(), n2 = computed(() => r2.story);
    provide("story", n2);
    const s = i2.parent, p2 = {
      $data: s.data
    };
    function e2(t2, o2) {
      typeof o2 == "function" || o2 != null && o2.__file || typeof (o2 == null ? void 0 : o2.render) == "function" || typeof (o2 == null ? void 0 : o2.setup) == "function" || (p2[t2] = o2);
    }
    for (const t2 in s.exposed)
      e2(t2, s.exposed[t2]);
    for (const t2 in s.devtoolsRawSetupState)
      e2(t2, s.devtoolsRawSetupState[t2]);
    provide("implicitState", () => reactive({ ...p2 }));
    function a2() {
      Object.assign(r2.story, {
        slots: () => i2.proxy.$slots
      });
    }
    return {
      story: n2,
      updateStory: a2
    };
  },
  render() {
    this.updateStory();
    const [i2] = this.story.variants;
    if (i2.id === "_default")
      return h$1(v$1, {
        variant: i2,
        initState: this.initState,
        ...this.$attrs
      }, this.$slots);
    let r2 = 0;
    const n2 = (p2) => {
      var e2, a2;
      for (const t2 of p2)
        if (((e2 = t2.type) == null ? void 0 : e2.__histoireType) === "variant") {
          t2.props || (t2.props = {}), t2.props.variant = this.story.variants[r2], !t2.props.initState && !t2.props["init-state"] && (t2.props.initState = this.initState);
          for (const o2 in this.$attrs)
            typeof t2.props[o2] > "u" && (t2.props[o2] = this.$attrs[o2]);
          for (const o2 in this.story)
            !omitInheritStoryProps.includes(o2) && typeof t2.props[o2] > "u" && (t2.props[o2] = this.story[o2]);
          r2++;
        } else
          (a2 = t2.children) != null && a2.length && n2(t2.children);
    }, s = this.$slots.default();
    return n2(s), s;
  }
});
function M(e2) {
  e2.component("Story", g$1), e2.component("Variant", v$1);
  for (const o2 in rm)
    e2.component(o2, A(rm[o2]));
}
function A(e2) {
  return defineComponent({
    name: e2.name,
    inheritAttrs: false,
    setup(o2, { attrs: n2 }) {
      const a2 = ref(), p2 = ref(), m2 = reactive$1({});
      function c2(l2) {
        Object.assign(m2, l2);
      }
      c2(n2), onBeforeUpdate(() => {
        c2(n2);
      });
      let t2 = [];
      const r2 = ref([]);
      function S2() {
        r2.value.forEach((l2, f2) => {
          const h2 = p2.value.querySelector(`[renderslotid="${f2}"]`);
          if (!h2)
            return;
          const s = a2.value.querySelector(`[slotid="${f2}"]`);
          for (; s.firstChild; )
            s.removeChild(s.lastChild);
          s.appendChild(h2);
        });
      }
      let i2;
      return onMounted(() => {
        i2 = createApp$1({
          mounted() {
            r2.value = t2, t2 = [];
          },
          updated() {
            r2.value = t2, t2 = [];
          },
          render() {
            return h$2(e2, {
              ...m2,
              key: "component"
            }, {
              default: (l2) => (t2.push(l2), h$2("div", {
                slotId: t2.length - 1
              }))
            });
          }
        }), i2.mount(a2.value);
      }), onUpdated(() => {
        S2();
      }), onBeforeUnmount(() => {
        i2.unmount();
      }), {
        el: a2,
        slotEl: p2,
        slotCalls: r2
      };
    },
    render() {
      return [
        h$1("div", {
          ref: "el"
        }),
        h$1("div", {
          ref: "slotEl"
        }, this.slotCalls.map((o2, n2) => h$1("div", {
          renderSlotId: n2
        }, this.$slots.default(o2))))
      ];
    }
  });
}
const n = {
  path: "/",
  name: void 0,
  redirectedFrom: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  href: "/"
}, c = defineComponent({
  name: "RouterLinkStub",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    custom: {
      type: Boolean,
      default: false
    }
  },
  render() {
    var e2, a2;
    const o2 = computed(() => n), r2 = (a2 = (e2 = this.$slots) == null ? void 0 : e2.default) == null ? void 0 : a2.call(e2, {
      route: o2,
      href: computed(() => o2.value.href),
      isActive: computed(() => false),
      isExactActive: computed(() => false),
      navigate: async () => {
      }
    });
    return this.custom ? r2 : h$1("a", void 0, r2);
  }
});
const C$2 = defineComponent$1({
  name: "MountStory",
  props: {
    story: {
      type: Object,
      required: true
    }
  },
  setup(o2) {
    const r2 = ref$1();
    let t2;
    async function u2() {
      t2 = createApp({
        name: "MountStorySubApp",
        render: () => h$1(Suspense, [
          h$1(o2.story.file.component, {
            story: o2.story
          })
        ])
      }), M(t2), t2.component("RouterLink", c), typeof (l == null ? void 0 : void 0) == "function" && await (void 0)({
        app: t2,
        story: o2.story,
        variant: null
      }), typeof (d$1 == null ? void 0 : void 0) == "function" && await (void 0)({
        app: t2,
        story: o2.story,
        variant: null
      });
      const a2 = document.createElement("div");
      r2.value.appendChild(a2), t2.mount(a2);
    }
    function i2() {
      t2 == null || t2.unmount();
    }
    return watch$1(() => o2.story.id, async () => {
      i2(), await u2();
    }), onMounted$1(async () => {
      await u2();
    }), onUnmounted$1(() => {
      i2();
    }), {
      el: r2
    };
  },
  render() {
    return h$2("div", {
      ref: "el"
    });
  }
});
var g = function() {
  return g = Object.assign || function(t2) {
    for (var n2, r2 = 1, a2 = arguments.length; r2 < a2; r2++) {
      n2 = arguments[r2];
      for (var o2 in n2)
        Object.prototype.hasOwnProperty.call(n2, o2) && (t2[o2] = n2[o2]);
    }
    return t2;
  }, g.apply(this, arguments);
};
function r(u2) {
  return u2.toLowerCase();
}
var R = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g], _ = /[^A-Z0-9]+/gi;
function o(a2, e2) {
  e2 === void 0 && (e2 = {});
  for (var r$12 = e2.splitRegexp, l2 = r$12 === void 0 ? R : r$12, i2 = e2.stripRegexp, f2 = i2 === void 0 ? _ : i2, d2 = e2.transform, g2 = d2 === void 0 ? r : d2, p2 = e2.delimiter, s = p2 === void 0 ? " " : p2, t2 = v(v(a2, l2, "$1\0$2"), f2, "\0"), c2 = 0, n2 = t2.length; t2.charAt(c2) === "\0"; )
    c2++;
  for (; t2.charAt(n2 - 1) === "\0"; )
    n2--;
  return t2.slice(c2, n2).split("\0").map(g2).join(s);
}
function v(a2, e2, r2) {
  return e2 instanceof RegExp ? a2.replace(e2, r2) : e2.reduce(function(l2, i2) {
    return l2.replace(i2, r2);
  }, a2);
}
function f(r2, a2) {
  var e2 = r2.charAt(0), s = r2.substr(1).toLowerCase();
  return a2 > 0 && e2 >= "0" && e2 <= "9" ? "_" + e2 + s : "" + e2.toUpperCase() + s;
}
function i(r2, a2) {
  return a2 === void 0 && (a2 = {}), o(r2, g({ delimiter: "", transform: f }, a2));
}
function m(a2, r2) {
  return r2 === 0 ? a2.toLowerCase() : f(a2, r2);
}
function C$1(a2, r2) {
  return r2 === void 0 && (r2 = {}), i(a2, g({ transform: m }, r2));
}
async function Z(e2) {
  var _a2, _b;
  var _2, d2, y, x2;
  const c2 = (_b = (d2 = (_2 = e2.slots()).default) == null ? void 0 : d2.call(_2, { state: (_a2 = e2.state) != null ? _a2 : {} })) != null ? _b : [], l2 = Array.isArray(c2) ? c2 : [c2], m2 = [];
  for (const h2 in l2) {
    const A2 = l2[h2];
    m2.push(...(await k(A2, (x2 = (y = e2.state) == null ? void 0 : y._hPropState) == null ? void 0 : x2[h2])).lines);
  }
  return m2.join(`
`);
}
async function k(e2, c2 = null) {
  var _a2, _b, _c2;
  var d2;
  if (e2.type === Text)
    return {
      lines: [e2.children],
      isText: true
    };
  const l2 = [];
  if (typeof e2.type == "object" || typeof e2.type == "string") {
    let y = function(t2, s, n2 = null) {
      var _a3;
      let i2 = "";
      for (const f2 in s.modifiers)
        s.modifiers[f2] && (i2 += `.${f2}`);
      let u2 = "";
      s.arg && (u2 = `:${s.arg}`), n2 && (n2 = n2.replace(/^\$(setup|props|data)\./g, ""));
      const o2 = n2 ? [n2] : N(s.value), a2 = [], p2 = `v-${t2}${u2}${i2}="`;
      o2.length > 1 ? (a2.push(`${p2}${o2[0]}`), a2.push(...o2.slice(1, o2.length - 1)), a2.push(`${o2[o2.length - 1]}"`), A2 = true) : a2.push(`${p2}${(_a3 = o2[0]) != null ? _a3 : ""}"`), h2.push(a2);
    }, x2 = function(t2, s) {
      var _a3;
      var n2;
      if (typeof s != "string" || (n2 = e2.dynamicProps) != null && n2.includes(t2)) {
        let i2 = ":";
        t2.startsWith("on") && (i2 = "@");
        const u2 = i2 === "@" ? `${t2[2].toLowerCase()}${t2.slice(3)}` : t2, a2 = [`onUpdate:${t2}`, `onUpdate:${C$1(t2)}`].find((f2) => {
          var $2;
          return ($2 = e2.dynamicProps) == null ? void 0 : $2.includes(f2);
        });
        if (i2 === ":" && a2) {
          L2.push(a2);
          const $2 = e2.props[a2].toString();
          let T2;
          const M2 = /\(\$event\) => (.*?) = \$event/.exec($2);
          M2 && (T2 = M2[1]);
          const R2 = `${t2 === "modelValue" ? "model" : t2}Modifiers`, P2 = (_a3 = e2.props[R2]) != null ? _a3 : {};
          L2.push(R2), y("model", {
            arg: t2 === "modelValue" ? null : t2,
            modifiers: P2,
            value: s
          }, T2);
          return;
        }
        if (typeof s > "u")
          return;
        let p2;
        if (typeof s == "string" && s.startsWith("{{") && s.endsWith("}}"))
          p2 = C(s.substring(2, s.length - 2).trim()).split(`
`);
        else if (typeof s == "function") {
          let f2 = C(s.toString().replace(/'/g, "\\'").replace(/"/g, "'"));
          const $2 = /function ([^\s]+)\(/.exec(f2);
          $2 ? p2 = [$2[1]] : (f2.startsWith("($event) => ") && (f2 = f2.substring(12)), p2 = f2.split(`
`));
        } else
          p2 = N(s);
        if (p2.length > 1) {
          A2 = true;
          const f2 = [`${i2}${u2}="${p2[0]}`];
          f2.push(...p2.slice(1, p2.length - 1)), f2.push(`${p2[p2.length - 1]}"`), h2.push(f2);
        } else
          h2.push([`${i2}${u2}="${p2[0]}"`]);
      } else
        h2.push([`${t2}="${s}"`]);
    };
    (d2 = e2.type) != null && d2.__asyncLoader && !e2.type.__asyncResolved && await e2.type.__asyncLoader();
    const h2 = [];
    let A2 = false;
    const L2 = [
      "key"
    ];
    if (e2.dirs) {
      for (const t2 of e2.dirs)
        if (t2.dir === vModelText || t2.dir === vModelSelect || t2.dir === vModelRadio || t2.dir === vModelCheckbox || t2.dir === vModelDynamic) {
          const n2 = [`onUpdate:${(_a2 = t2.arg) != null ? _a2 : "modelValue"}`, `onUpdate:${C$1((_b = t2.arg) != null ? _b : "modelValue")}`].find((o2) => e2.props[o2]), i2 = e2.props[n2];
          let u2 = null;
          if (i2) {
            L2.push(n2);
            const o2 = i2.toString(), a2 = /\(\$event\) => (.*?) = \$event/.exec(o2);
            a2 && (u2 = a2[1]);
          }
          y("model", t2, u2);
        } else if (t2.instance._ || t2.instance.$) {
          const s = (_c2 = t2.instance.$) != null ? _c2 : t2.instance._;
          let n2;
          for (const i2 of [s.directives, s.appContext.directives]) {
            for (const u2 in i2)
              if (i2[u2] === t2.dir) {
                n2 = u2;
                break;
              }
            if (n2)
              break;
          }
          n2 && y(n2, t2);
        }
    }
    for (const t2 in e2.props) {
      if (L2.includes(t2) || c2 && t2 in c2)
        continue;
      const s = e2.props[t2];
      x2(t2, s);
    }
    if (c2)
      for (const t2 in c2)
        x2(t2, c2[t2]);
    h2.length > 1 && (A2 = true);
    const b2 = q(e2);
    let S2 = false;
    const r2 = [];
    if (typeof e2.children == "string")
      b2 === "pre" ? r2.push(e2.children) : r2.push(...e2.children.split(`
`)), S2 = true;
    else if (Array.isArray(e2.children)) {
      let t2;
      for (const s of e2.children) {
        const n2 = await k(s);
        if (n2.isText) {
          t2 === void 0 && (t2 = true);
          const i2 = n2.lines[0];
          !r2.length || /^\s/.test(i2) ? r2.push(i2.trim()) : r2[r2.length - 1] += i2;
        } else
          t2 === void 0 && (t2 = false), r2.push(...n2.lines);
      }
      t2 !== void 0 && (S2 = t2);
    }
    if (e2.children && typeof e2.children == "object" && !Array.isArray(e2.children)) {
      for (const t2 in e2.children)
        if (typeof e2.children[t2] == "function") {
          const s = createAutoBuildingObject((o2) => `{{ ${o2} }}`, (o2, a2) => {
            if (a2 === "__v_isRef")
              return () => false;
          }), n2 = e2.children[t2](s.proxy), i2 = [];
          for (const o2 of n2)
            i2.push(...(await k(o2)).lines);
          const u2 = Object.keys(s.cache);
          u2.length ? (r2.push(`<template #${t2}="{ ${u2.join(", ")} }">`), r2.push(...indent(i2)), r2.push("</template>")) : t2 === "default" ? r2.push(...i2) : (r2.push(`<template #${t2}>`), r2.push(...indent(i2)), r2.push("</template>"));
        }
    }
    const g2 = [`<${b2}`];
    if (A2) {
      for (const t2 of h2)
        g2.push(...indent(t2));
      r2.length > 0 && g2.push(">");
    } else
      h2.length === 1 && (g2[0] += ` ${h2[0]}`), r2.length > 0 && (g2[0] += ">");
    const w = voidElements.includes(b2.toLowerCase());
    r2.length > 0 ? r2.length === 1 && g2.length === 1 && !h2.length && S2 ? l2.push(`${g2[0]}${r2[0]}</${b2}>`) : (l2.push(...g2), l2.push(...indent(r2)), l2.push(`</${b2}>`)) : g2.length > 1 ? (l2.push(...g2), l2.push(w ? ">" : "/>")) : l2.push(`${g2[0]}${w ? "" : " /"}>`);
  } else if ((e2 == null ? void 0 : e2.shapeFlag) & 1 << 4)
    for (const y of e2.children)
      l2.push(...(await k(y)).lines);
  return {
    lines: l2
  };
}
function q(e2) {
  var _a2;
  var c2, l2, m2, _2;
  if (typeof e2.type == "string")
    return e2.type;
  if ((c2 = e2.type) != null && c2.__asyncResolved) {
    const d2 = (l2 = e2.type) == null ? void 0 : l2.__asyncResolved;
    return (_a2 = d2.name) != null ? _a2 : K(d2.__file);
  } else {
    if ((m2 = e2.type) != null && m2.name)
      return e2.type.name;
    if ((_2 = e2.type) != null && _2.__file)
      return K(e2.type.__file);
  }
  return "Anonymous";
}
function K(e2) {
  const c2 = /([^/]+)\.vue$/.exec(e2);
  return c2 ? i(c2[1]) : "Anonymous";
}
function N(e2) {
  const c2 = !!(e2 != null && e2.__autoBuildingObject), l2 = serializeJs(e2);
  return c2 ? [C(l2.__autoBuildingObjectGetKey)] : C(l2).split(`
`);
}
function C(e2) {
  return e2.replace(/\$setup\./g, "");
}
const z = defineComponent$1({
  name: "RenderStory",
  props: {
    variant: {
      type: Object,
      required: true
    },
    story: {
      type: Object,
      required: true
    },
    slotName: {
      type: String,
      default: "default"
    }
  },
  emits: {
    ready: () => true
  },
  setup(t2, { emit: A2 }) {
    const m2 = ref$1();
    let r2, y = false;
    const o2 = reactive({});
    A$1(t2.variant.state, o2);
    function v2() {
      r2 && (r2.unmount(), r2 = null);
    }
    async function h2() {
      if (y)
        return;
      y = true, v2();
      let i2;
      r2 = createApp({
        name: "RenderStorySubApp",
        setup() {
          onMounted(() => {
            y = false;
          });
        },
        render: () => {
          var _a2;
          var u2, c2, e2, p2;
          const s = (_a2 = (c2 = (u2 = t2.variant.slots()) == null ? void 0 : u2[t2.slotName]) == null ? void 0 : c2.call(u2, {
            state: o2
          })) != null ? _a2 : (p2 = (e2 = t2.story.slots()) == null ? void 0 : e2[t2.slotName]) == null ? void 0 : p2.call(e2, {
            state: o2
          });
          if (t2.slotName === "default" && !t2.variant.autoPropsDisabled) {
            const a2 = b2(s), n2 = JSON.stringify(a2);
            (!i2 || i2 !== n2) && (applyState(t2.variant.state, {
              _hPropDefs: a2
            }), t2.variant.state._hPropState || applyState(t2.variant.state, {
              _hPropState: {}
            }), i2 = n2);
          }
          return s;
        }
      }), M(r2), r2.component("RouterLink", c), typeof (l == null ? void 0 : void 0) == "function" && await (void 0)({
        app: r2,
        story: t2.story,
        variant: t2.variant
      }), typeof (d$1 == null ? void 0 : void 0) == "function" && await (void 0)({
        app: r2,
        story: t2.story,
        variant: t2.variant
      }), typeof t2.variant.setupApp == "function" && await t2.variant.setupApp({
        app: r2,
        story: t2.story,
        variant: t2.variant
      });
      const f2 = document.createElement("div");
      m2.value.appendChild(f2), r2.mount(f2), A2("ready");
    }
    function b2(i2) {
      var u2, c2;
      const f2 = [];
      let s = 0;
      for (const e2 of i2) {
        if (typeof e2.type == "object") {
          const p2 = [];
          for (const a2 in e2.type.props) {
            const n2 = e2.type.props[a2];
            let S2, g2;
            n2 && (S2 = (Array.isArray(n2.type) ? n2.type : typeof n2 == "function" ? [n2] : [n2.type]).map((w) => {
              switch (w) {
                case String:
                  return "string";
                case Number:
                  return "number";
                case Boolean:
                  return "boolean";
                case Object:
                  return "object";
                case Array:
                  return "array";
                default:
                  return "unknown";
              }
            }), g2 = typeof n2.default == "function" ? n2.default.toString() : n2.default), p2.push({
              name: a2,
              types: S2,
              required: n2 == null ? void 0 : n2.required,
              default: g2
            }), ((c2 = (u2 = o2 == null ? void 0 : o2._hPropState) == null ? void 0 : u2[s]) == null ? void 0 : c2[a2]) != null && (e2.props || (e2.props = {}), e2.props[a2] = o2._hPropState[s][a2], e2.dynamicProps || (e2.dynamicProps = []), e2.dynamicProps.includes(a2) || e2.dynamicProps.push(a2));
          }
          f2.push({
            name: q(e2),
            index: s,
            props: p2
          }), s++;
        }
        Array.isArray(e2.children) && f2.push(...b2(e2.children));
      }
      return f2.filter((e2) => e2.props.length);
    }
    return onMounted$1(async () => {
      t2.variant.configReady && await h2();
    }), watch$1(() => t2.variant, async (i2) => {
      i2.configReady && !y && (r2 ? r2._instance.proxy.$forceUpdate() : await h2());
    }, {
      deep: true
    }), onBeforeUnmount$1(() => {
      v2();
    }), {
      sandbox: m2
    };
  },
  render() {
    return h$2("div", {
      ref: "sandbox"
    });
  }
});
const client = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  MountStory: C$2,
  RenderStory: z,
  generateSourceCode: Z,
  getTagName: q
}, Symbol.toStringTag, { value: "Module" }));
export {
  onUnmounted$1 as $,
  pushScopeId$1 as A,
  popScopeId$1 as B,
  defineAsyncComponent$1 as C,
  vShow$1 as D,
  reactive$1 as E,
  Fragment$1 as F,
  normalizeStyle$1 as G,
  useTitle as H,
  Icon as I,
  onMounted$1 as J,
  createApp$1 as K,
  createPinia as L,
  plugin as M,
  defineAsyncComponent as N,
  Comp10 as O,
  createRouter as P,
  createWebHistory as Q,
  createWebHashHistory as R,
  useDark as S,
  Transition$1 as T,
  useToggle as U,
  markRaw$1 as V,
  watchEffect$1 as W,
  mergeProps$1 as X,
  resolveDynamicComponent$1 as Y,
  renderSlot$1 as Z,
  scrollIntoView as _,
  unref$1 as a,
  withModifiers$1 as a0,
  useMediaQuery as a1,
  parseQuery as a2,
  h$2 as a3,
  applyState as a4,
  toRefs$1 as a5,
  useRouter$1 as a6,
  useResizeObserver as a7,
  vModelText$1 as a8,
  VTooltip as a9,
  vModelCheckbox as aA,
  createCommentVNode as aB,
  createBlock as aC,
  resolveComponent as aD,
  withCtx as aE,
  createVNode as aF,
  renderSlot as aG,
  toDisplayString as aH,
  normalizeClass as aI,
  VueApexCharts as aJ,
  useFocus as aK,
  refDebounced as aL,
  flexsearch_bundle as aM,
  client$1 as aN,
  client as aO,
  createStaticVNode$1 as aa,
  toRaw$1 as ab,
  Dropdown as ac,
  clone as ad,
  omit as ae,
  useTimeoutFn as af,
  onClickOutside as ag,
  nextTick$1 as ah,
  Zg as ai,
  zg as aj,
  jg as ak,
  Wg as al,
  shallowRef$1 as am,
  unindent as an,
  getHighlighter as ao,
  Xg as ap,
  onBeforeUnmount$1 as aq,
  openBlock as ar,
  createElementBlock as as,
  createBaseVNode as at,
  createTextVNode as au,
  createStaticVNode as av,
  defineComponent as aw,
  ref as ax,
  useRouter as ay,
  withDirectives as az,
  useRoute as b,
  computed$2 as c,
  defineComponent$1 as d,
  createElementBlock$1 as e,
  createVNode$1 as f,
  createBaseVNode$1 as g,
  createCommentVNode$1 as h,
  defineStore as i,
  useStorage as j,
  watch$1 as k,
  resolveComponent$1 as l,
  withKeys$1 as m,
  normalizeClass$1 as n,
  openBlock$1 as o,
  renderList$1 as p,
  createBlock$1 as q,
  ref$1 as r,
  useEventListener as s,
  toDisplayString$1 as t,
  useCssVars$1 as u,
  isRef$1 as v,
  withCtx$1 as w,
  resolveDirective$1 as x,
  withDirectives$1 as y,
  createTextVNode$1 as z
};
